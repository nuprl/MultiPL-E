{
  "name": "mbpp_775_odd_position",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_775_odd_position.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var i = 0\n        var result = true\n        while (i < nums.length) {\n            if (i % 2 == 1 && nums(i) % 2 == 0) result = false\n            i += 1\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510200,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        nums.zipWithIndex.forall(x => x._2 % 2 == 0 || x._1 % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510200,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var odd = true\n        for (i <- 1 until nums.length by 2) {\n            if (nums(i) % 2 == 0) odd = false\n        }\n        odd\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510200,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var odd = true\n        for (i <- 0 until nums.length if i % 2 == 1) {\n            if (nums(i) % 2 == 0) {\n                odd = false\n            }\n        }\n        odd\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510200,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        val oddIndices = nums.zipWithIndex.filter(x => x._2 % 2 == 1)\n        oddIndices.map(x => x._1).forall(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510200,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        if (nums.length == 0) return true\n        if (nums.length == 1) return nums(0) % 2 == 1\n        if (nums(0) % 2 == 0) return false\n        if (nums(1) % 2 == 1) return false\n        return oddPosition(nums.drop(2))\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpue83uca7.scala:13)\n\tat Problem.main(tmpue83uca7.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        nums.zipWithIndex.forall(x => x._2 % 2 == 0 || x._1 % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510200,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var flag = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1 && nums(i) % 2 == 0) flag = false\n        }\n        flag\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510200,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1 && nums(i) % 2 == 0) result = false\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510200,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        nums.zipWithIndex.forall(x => x._2 % 2 == 0 || x._1 % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510200,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var flag = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1) {\n                if (nums(i) % 2 == 0) {\n                    flag = false\n                    return flag\n                }\n            }\n        }\n        return flag\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510200,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 0 && nums(i) % 2 == 0) {\n                result = false\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510200,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpjpv7kt0o.scala:15)\n\tat Problem.main(tmpjpv7kt0o.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 1 until nums.length by 2) {\n            if (nums(i) % 2 == 0) result = false\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510200,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var flag = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 0) {\n                if (nums(i) % 2 == 0) flag = false\n            }\n        }\n        flag\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510200,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpiclisx66.scala:15)\n\tat Problem.main(tmpiclisx66.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 1 until nums.length by 2) {\n            if (nums(i) % 2 == 0) result = false\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510200,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var odd = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1) {\n                if (nums(i) % 2 == 0) {\n                    odd = false\n                }\n            }\n        }\n        return odd\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510200,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        nums.zipWithIndex.forall(x => x._2 % 2 == 0 || x._1 % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510200,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1 && nums(i) % 2 == 0) {\n                result = false\n                return result\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510200,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        val oddPositions = nums.zipWithIndex.filter(x => x._2 % 2 == 1)\n        oddPositions.forall(x => x._1 % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var odd = true\n        for (i <- 0 until nums.length if i % 2 == 1) {\n            if (nums(i) % 2 == 0) odd = false\n        }\n        odd\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510200,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var odd = true\n        for (i <- 1 until nums.length by 2) {\n            if (nums(i) % 2 == 0) {\n                odd = false\n                return odd\n            }\n        }\n        return odd\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123463,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        val oddIndex = nums.zipWithIndex.filter(x => x._2 % 2 == 1)\n        oddIndex.forall(x => x._1 % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123463,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        // Write your code here\n        nums.zipWithIndex.forall(x => x._2 % 2 == 1 && x._1 % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123463,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpgaa2axim.scala:10)\n\tat Problem.main(tmpgaa2axim.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        nums.zipWithIndex.forall(x => x._2 % 2 == 0 && x._1 % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123463,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpfqw3lsge.scala:9)\n\tat Problem.main(tmpfqw3lsge.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1) {\n                if (nums(i) % 2 == 0) {\n                    result = false\n                }\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123463,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        nums.zipWithIndex.forall(x => x._2 % 2 == 0 && x._1 % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123463,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpfqw3lsge.scala:9)\n\tat Problem.main(tmpfqw3lsge.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1 && nums(i) % 2 == 0) result = false\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510200,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var flag = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 0) {\n                if (nums(i) % 2 == 0) {\n                    flag = false\n                    return flag\n                }\n            }\n        }\n        return flag\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123463,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp62hs91d0.scala:18)\n\tat Problem.main(tmp62hs91d0.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 0 && nums(i) % 2 == 0) result = false\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123463,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpsdgj6msr.scala:13)\n\tat Problem.main(tmpsdgj6msr.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1 && nums(i) % 2 == 0) {\n                result = false\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123463,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var flag = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1 && nums(i) % 2 == 0) flag = false\n        }\n        flag\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510200,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        if (nums.length == 0) return true\n        if (nums.length == 1) return nums(0) % 2 == 1\n        if (nums(0) % 2 == 0) return false\n        if (nums(1) % 2 == 1) return false\n        oddPosition(nums.drop(2))\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123463,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpj13gln76.scala:13)\n\tat Problem.main(tmpj13gln76.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        if (nums.length == 0) return true\n        if (nums.length == 1) return nums(0) % 2 == 1\n        if (nums(0) % 2 == 0) return false\n        if (nums(1) % 2 == 1) return false\n        return oddPosition(nums.slice(2, nums.length))\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123463,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpopiruvnt.scala:13)\n\tat Problem.main(tmpopiruvnt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var flag = true\n        for (i <- 1 until nums.length by 2) {\n            if (nums(i) % 2 == 0) flag = false\n        }\n        flag\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123463,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1) {\n                if (nums(i) % 2 == 0) {\n                    result = false\n                    return result\n                }\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123463,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 to nums.length - 1) {\n            if (i % 2 == 0 && nums(i) % 2 == 0) {\n                result = false\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123463,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp5j2jravi.scala:15)\n\tat Problem.main(tmp5j2jravi.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 0 && nums(i) % 2 == 0) {\n                result = false\n                return result\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123463,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpjr5hstwl.scala:16)\n\tat Problem.main(tmpjr5hstwl.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var i = 0\n        var flag = true\n        for(i <- 0 to nums.length - 1) {\n            if(i % 2 == 1) {\n                if(nums(i) % 2 == 0) {\n                    flag = false\n                }\n            }\n        }\n        return flag\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123463,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var flag = true\n        for (i <- 0 until nums.length if i % 2 == 1) {\n            if (nums(i) % 2 == 0) {\n                flag = false\n                return flag\n            }\n        }\n        return flag\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123463,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1) {\n                if (nums(i) % 2 == 0) {\n                    result = false\n                    return result\n                }\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123463,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        val odd = nums.zipWithIndex.filter(x => x._2 % 2 == 1).map(x => x._1)\n        odd.forall(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123463,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var flag = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1 && nums(i) % 2 == 0) {\n                flag = false\n                return flag\n            }\n        }\n        return flag\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123463,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        nums.zipWithIndex.forall(x => x._2 % 2 == 1 && x._1 % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123463,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp444ahol6.scala:9)\n\tat Problem.main(tmp444ahol6.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        if (nums.length == 0) return true\n        if (nums.length == 1) return nums(0) % 2 == 1\n        if (nums(0) % 2 == 1) return oddPosition(nums.tail)\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123462,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp4y3xsk8q.scala:12)\n\tat Problem.main(tmp4y3xsk8q.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        nums.zipWithIndex.forall(x => x._2 % 2 == 0 || x._1 % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510200,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        if (nums.length == 0) true\n        else if (nums.length == 1) nums(0) % 2 == 1\n        else if (nums.length == 2) nums(0) % 2 == 1 && nums(1) % 2 == 0\n        else if (nums(0) % 2 == 1 && nums(1) % 2 == 0) oddPosition(nums.drop(2))\n        else false\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123463,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp1ulwg09q.scala:13)\n\tat Problem.main(tmp1ulwg09q.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        nums.zipWithIndex.forall(x => x._2 % 2 == 1 && x._1 % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123463,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp444ahol6.scala:9)\n\tat Problem.main(tmp444ahol6.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        nums.zipWithIndex.forall(x => x._2 % 2 == 0 || x._1 % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510200,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 0) {\n                if (nums(i) % 2 == 0) {\n                    result = false\n                }\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123463,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmph19wdgea.scala:17)\n\tat Problem.main(tmph19wdgea.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var flag = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 0) {\n                if (nums(i) % 2 == 0) flag = false\n            }\n        }\n        flag\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510200,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpiclisx66.scala:15)\n\tat Problem.main(tmpiclisx66.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        nums.zipWithIndex.forall(x => (x._2 % 2 == 0 && x._1 % 2 == 1) || (x._2 % 2 == 1 && x._1 % 2 == 0))\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123462,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpf7abexem.scala:9)\n\tat Problem.main(tmpf7abexem.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var odd = true\n        for (i <- 1 until nums.length by 2) {\n            if (nums(i) % 2 == 0) {\n                odd = false\n                return odd\n            }\n        }\n        return odd\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123463,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        nums.zipWithIndex.forall(x => x._2 % 2 == 0 || x._1 % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510200,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var odd = false\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 0) {\n                if (nums(i) % 2 == 1) odd = true\n                else {\n                    odd = false\n                    return odd\n                }\n            }\n        }\n        return odd\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123473,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmptxygdfw4.scala:19)\n\tat Problem.main(tmptxygdfw4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        nums.zipWithIndex.forall(x => x._2 % 2 == 0 && x._1 % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123463,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpfqw3lsge.scala:9)\n\tat Problem.main(tmpfqw3lsge.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var flag = true\n        for (i <- 0 until nums.length if i % 2 == 1) {\n            if (nums(i) % 2 == 0) flag = false\n        }\n        flag\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123473,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        val odd = nums.zipWithIndex.filter(x => x._2 % 2 == 1).map(x => x._1)\n        odd.forall(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123463,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        nums.zipWithIndex.forall(x => x._2 % 2 == 0 && x._1 % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123463,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpfqw3lsge.scala:9)\n\tat Problem.main(tmpfqw3lsge.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 0) {\n                if (nums(i) % 2 == 0) {\n                    result = false\n                    return result\n                }\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123473,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp3mtyunfu.scala:18)\n\tat Problem.main(tmp3mtyunfu.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        nums.zipWithIndex.forall(x => x._2 % 2 == 0 || x._1 % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510200,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 0) {\n                if (nums(i) % 2 == 0) {\n                    result = false\n                    return result\n                }\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123473,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp3mtyunfu.scala:18)\n\tat Problem.main(tmp3mtyunfu.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        // Write your code here\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123473,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpw928kvzv.scala:12)\n\tat Problem.main(tmpw928kvzv.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        // Write your code here\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123473,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmptz2hm8w5.scala:10)\n\tat Problem.main(tmptz2hm8w5.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 0) {\n                if (nums(i) % 2 == 0) {\n                    result = false\n                }\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123463,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmph19wdgea.scala:17)\n\tat Problem.main(tmph19wdgea.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1) {\n                if (nums(i) % 2 == 0) result = false\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123473,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 1 until nums.length by 2) {\n            if (nums(i) % 2 == 0) result = false\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510200,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        nums.zipWithIndex.forall(x => x._2 % 2 == 0 && x._1 % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123463,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpfqw3lsge.scala:9)\n\tat Problem.main(tmpfqw3lsge.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 0) {\n                if (nums(i) % 2 == 0) result = false\n            }\n            else {\n                if (nums(i) % 2 == 1) result = false\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123473,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp2hh6ls0r.scala:18)\n\tat Problem.main(tmp2hh6ls0r.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        if (nums.length == 0) return true\n        if (nums.length == 1) return nums(0) % 2 == 0\n        if (nums(1) % 2 == 0) return false\n        return oddPosition(nums.drop(2))\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123473,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1) {\n                if (nums(i) % 2 == 0) {\n                    result = false\n                    return result\n                }\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123463,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var odd = true\n        for (i <- 1 until nums.length by 2) {\n            if (nums(i) % 2 == 0) {\n                odd = false\n            }\n        }\n        return odd\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123473,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        if (nums.length == 0) return true\n        if (nums.length == 1) return nums(0) % 2 == 1\n        if (nums(0) % 2 == 0) return false\n        if (nums(1) % 2 == 1) return false\n        return oddPosition(nums.slice(2, nums.length))\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123463,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpopiruvnt.scala:13)\n\tat Problem.main(tmpopiruvnt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        nums.zipWithIndex.forall(x => x._2 % 2 == 1 && x._1 % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123463,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp444ahol6.scala:9)\n\tat Problem.main(tmp444ahol6.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var flag = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1) {\n                if (nums(i) % 2 == 0) {\n                    flag = false\n                    return flag\n                }\n            }\n        }\n        return flag\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510200,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var flag = true\n        for (i <- 1 until nums.length by 2) {\n            if (nums(i) % 2 == 0) flag = false\n        }\n        return flag\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123473,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var flag = true\n        for (i <- 1 until nums.length by 2) {\n            if (nums(i) % 2 == 0) {\n                flag = false\n                return flag\n            }\n        }\n        flag\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123473,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1) {\n                if (nums(i) % 2 == 0) result = false\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123473,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        nums.zipWithIndex.forall(x => x._2 % 2 == 0 && x._1 % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123463,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpfqw3lsge.scala:9)\n\tat Problem.main(tmpfqw3lsge.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 1 until nums.length by 2) {\n            if (nums(i) % 2 == 0) {\n                result = false\n                return result\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123473,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        nums.zipWithIndex.forall(x => x._2 % 2 == 0 || x._1 % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510200,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        nums.zipWithIndex.forall(x => x._2 % 2 == 0 && x._1 % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123463,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpfqw3lsge.scala:9)\n\tat Problem.main(tmpfqw3lsge.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 1 until nums.length by 2) {\n            if (nums(i) % 2 == 0) {\n                result = false\n                return result\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123473,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1) {\n                if (nums(i) % 2 == 0) {\n                    result = false\n                }\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123463,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        if (nums.length == 0) return true\n        if (nums.length == 1) return nums(0) % 2 == 1\n        if (nums(0) % 2 == 0) return false\n        if (nums(1) % 2 == 1) return false\n        return oddPosition(nums.slice(2, nums.length))\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123463,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpopiruvnt.scala:13)\n\tat Problem.main(tmpopiruvnt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1) {\n                if (nums(i) % 2 == 0) {\n                    result = false\n                    return result\n                }\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123463,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1) {\n                if (nums(i) % 2 == 0) {\n                    result = false\n                    return result\n                }\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123463,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 0) {\n                if (nums(i) % 2 == 0) {\n                    result = false\n                    return result\n                }\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123473,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp3mtyunfu.scala:18)\n\tat Problem.main(tmp3mtyunfu.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 1 until nums.length by 2) {\n            if (nums(i) % 2 == 0) result = false\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510200,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        nums.zipWithIndex.forall(x => x._2 % 2 == 0 && x._1 % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123463,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpfqw3lsge.scala:9)\n\tat Problem.main(tmpfqw3lsge.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1) {\n                if (nums(i) % 2 == 0) {\n                    result = false\n                    return result\n                }\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123463,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1) {\n                if (nums(i) % 2 == 0) result = false\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123473,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        if (nums.length == 0) return true\n        if (nums.length % 2 == 0) return false\n        if (nums(0) % 2 == 0) return false\n        return oddPosition(nums.slice(2, nums.length))\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123473,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp3euyvxxk.scala:12)\n\tat Problem.main(tmp3euyvxxk.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1) {\n                if (nums(i) % 2 == 0) {\n                    result = false\n                    return result\n                }\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123463,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        if (nums.length == 0) return true\n        if (nums.length == 1) return nums(0) % 2 == 1\n        if (nums(0) % 2 == 0) return false\n        if (nums(1) % 2 == 1) return false\n        return oddPosition(nums.drop(2))\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpue83uca7.scala:13)\n\tat Problem.main(tmpue83uca7.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 1 until nums.length by 2) {\n            if (nums(i) % 2 == 0) {\n                result = false\n                return result\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123473,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        nums.zipWithIndex.forall(x => x._2 % 2 == 1 && x._1 % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123463,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp444ahol6.scala:9)\n\tat Problem.main(tmp444ahol6.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        nums.zipWithIndex.forall(x => x._2 % 2 == 0 || x._1 % 2 != 0)\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123473,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        if (nums.isEmpty) true\n        else if (nums.head % 2 == 0) false\n        else oddPosition(nums.tail.tail)\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123473,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpz12gxuli.scala:11)\n\tat Problem.main(tmpz12gxuli.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        nums.zipWithIndex.forall(x => x._2 % 2 == 0 && x._1 % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123463,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpfqw3lsge.scala:9)\n\tat Problem.main(tmpfqw3lsge.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 1 until nums.length by 2) {\n            if (nums(i) % 2 == 0) {\n                result = false\n                return result\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123473,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        nums.zipWithIndex.forall(x => x._2 % 2 == 1 && x._1 % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123463,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp444ahol6.scala:9)\n\tat Problem.main(tmp444ahol6.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1 && nums(i) % 2 == 0) {\n                result = false\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123463,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var isOdd = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1) {\n                if (nums(i) % 2 == 0) {\n                    isOdd = false\n                }\n            }\n        }\n        isOdd\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123473,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var odd = true\n        for (i <- 1 until nums.length by 2) {\n            if (nums(i) % 2 == 0) odd = false\n        }\n        odd\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510200,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        nums.zipWithIndex.forall(x => x._2 % 2 == 0 || x._1 % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510200,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var flag = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1) {\n                if (nums(i) % 2 == 0) {\n                    flag = false\n                }\n            }\n        }\n        return flag\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123473,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var flag = true\n        for (i <- 1 until nums.length by 2) {\n            if (nums(i) % 2 == 0) {\n                flag = false\n                return flag\n            }\n        }\n        return flag\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123473,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 1 until nums.length by 2) {\n            if (nums(i) % 2 == 0) {\n                result = false\n                return result\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123473,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 1 until nums.length by 2) {\n            if (nums(i) % 2 == 0) {\n                result = false\n                return result\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123473,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        nums.zipWithIndex.forall(x => x._2 % 2 == 1 && x._1 % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123463,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp444ahol6.scala:9)\n\tat Problem.main(tmp444ahol6.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var odd = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1 && nums(i) % 2 == 0) odd = false\n        }\n        odd\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123473,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        nums.zipWithIndex.forall(x => (x._2 % 2 == 0 && x._1 % 2 == 1) || (x._2 % 2 == 1 && x._1 % 2 == 0))\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123462,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpf7abexem.scala:9)\n\tat Problem.main(tmpf7abexem.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1) {\n                if (nums(i) % 2 == 0) {\n                    result = false\n                    return result\n                }\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123463,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var odd = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1 && nums(i) % 2 == 0) odd = false\n        }\n        odd\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123473,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var isOdd = true\n        for (i <- 0 until nums.length if i % 2 == 1) {\n            if (nums(i) % 2 == 0) isOdd = false\n        }\n        isOdd\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123473,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        nums.zipWithIndex.forall(x => x._2 % 2 == 0 && x._1 % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123463,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpfqw3lsge.scala:9)\n\tat Problem.main(tmpfqw3lsge.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var odd = true\n        for (i <- 1 until nums.length by 2) {\n            if (nums(i) % 2 == 0) {\n                odd = false\n                return odd\n            }\n        }\n        return odd\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123463,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var odd = true\n        for (i <- 1 until nums.length by 2) {\n            if (nums(i) % 2 == 0) odd = false\n        }\n        odd\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510200,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        nums.zipWithIndex.forall(x => x._2 % 2 == 0 && x._1 % 2 == 0 || x._2 % 2 == 1 && x._1 % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123474,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 0 && nums(i) % 2 == 0) {\n                result = false\n                return result\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123463,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpjr5hstwl.scala:16)\n\tat Problem.main(tmpjr5hstwl.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var flag = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 0) {\n                if (nums(i) % 2 == 0) flag = false\n            }\n        }\n        return flag\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123474,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpw4m3r4vq.scala:15)\n\tat Problem.main(tmpw4m3r4vq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var odd = true\n        for(i <- 1 until nums.length by 2) {\n            if(nums(i) % 2 == 0) odd = false\n        }\n        return odd\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123483,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        if (nums.length == 0) return true\n        if (nums.length % 2 == 0) return false\n        if (nums(0) % 2 == 0) return false\n        oddPosition(nums.slice(2, nums.length))\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123483,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpr57rvhhg.scala:12)\n\tat Problem.main(tmpr57rvhhg.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        nums.zipWithIndex.forall(x => x._2 % 2 == 0 && x._1 % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123463,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpfqw3lsge.scala:9)\n\tat Problem.main(tmpfqw3lsge.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        if (nums.length == 0) return true\n        if (nums.length == 1) return nums(0) % 2 == 1\n        if (nums(0) % 2 == 0) return false\n        if (nums(1) % 2 == 1) return false\n        return oddPosition(nums.slice(2, nums.length))\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123463,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpopiruvnt.scala:13)\n\tat Problem.main(tmpopiruvnt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        nums.zipWithIndex.forall(x => x._2 % 2 == 0 && x._1 % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123463,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpfqw3lsge.scala:9)\n\tat Problem.main(tmpfqw3lsge.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        nums.zipWithIndex.forall(x => x._2 % 2 == 0 && x._1 % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123463,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpfqw3lsge.scala:9)\n\tat Problem.main(tmpfqw3lsge.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        if (nums.length == 0) return true\n        if (nums.length == 1) return nums(0) % 2 != 0\n        if (nums.length == 2) return nums(0) % 2 != 0 && nums(1) % 2 != 0\n        if (nums.length == 3) return nums(0) % 2 != 0 && nums(2) % 2 != 0\n        if (nums.length == 4) return nums(0) % 2 != 0 && nums(2) % 2 != 0 && nums(4) % 2 != 0\n        if (nums.length == 5) return nums(0) % 2 != 0 && nums(2) % 2 != 0 && nums(4) % 2 != 0 && nums(6) % 2 != 0\n        if (nums.length == 6) return nums(0) % 2 != 0 && nums(2) % 2 != 0 && nums(4) % 2 != 0 && nums(6) % 2 != 0 && nums(8) % 2 != 0\n        if (nums.length == 7) return nums(0) % 2 != 0 && nums(2) % 2 != 0 && nums(4) % 2 != 0 && nums(6) % 2 != 0 && nums(8) % 2 != 0 && nums(10) % 2 != 0\n        if (nums.length == 8) return nums(0) % 2 != 0 && nums(2) % 2 != 0 && nums(4) % 2 != 0 && nums(6) % 2 != 0 && nums(8) % 2 != 0 && nums(10) % 2 != 0 && nums(12) % 2 != 0\n        if (nums.length == 9) return nums(0) % 2 != 0 && nums(2) % 2 != 0 && nums(4) % 2 != 0 && nums(6) % 2 != 0 && nums(8) % 2 != 0 && nums(10) % 2 != 0 && nums(12) % 2 != 0 && nums(14) % 2 != 0\n        if (nums.length == 10) return nums(0) % 2 !=\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123480,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpn664_fh4.scala:16:52 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mif\u001b[0m (nums.length == \u001b[31m10\u001b[0m) \u001b[33mreturn\u001b[0m nums(\u001b[31m0\u001b[0m) % \u001b[31m2\u001b[0m !=\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var odd = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1 && nums(i) % 2 == 0) odd = false\n        }\n        return odd\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123483,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        nums.zipWithIndex.forall(x => x._2 % 2 == 0 && x._1 % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123463,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpfqw3lsge.scala:9)\n\tat Problem.main(tmpfqw3lsge.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1 && nums(i) % 2 == 0) {\n                result = false\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123463,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1) {\n                if (nums(i) % 2 == 0) {\n                    result = false\n                    return result\n                }\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123463,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        nums.zipWithIndex.forall(x => x._2 % 2 == 0 && x._1 % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123463,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpfqw3lsge.scala:9)\n\tat Problem.main(tmpfqw3lsge.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var flag = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1) {\n                if (nums(i) % 2 == 0) {\n                    flag = false\n                }\n            }\n        }\n        flag\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123483,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        if (nums.length == 0) return true\n        if (nums.length == 1) return nums(0) % 2 == 1\n        if (nums(0) % 2 == 1) return oddPosition(nums.tail)\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123462,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp4y3xsk8q.scala:12)\n\tat Problem.main(tmp4y3xsk8q.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var flag = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1 && nums(i) % 2 == 0) flag = false\n        }\n        return flag\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123483,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 1 until nums.length by 2) {\n            if (nums(i) % 2 == 0) result = false\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510200,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 0) {\n                if (nums(i) % 2 == 0) {\n                    result = false\n                }\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123463,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmph19wdgea.scala:17)\n\tat Problem.main(tmph19wdgea.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var i = 0\n        for (num <- nums) {\n            if (i % 2 == 1) {\n                if (num % 2 == 0) return false\n            }\n            i += 1\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123484,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var odd = true\n        for (i <- 0 until nums.length if i % 2 == 1) {\n            if (nums(i) % 2 == 0) odd = false\n        }\n        odd\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510200,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        nums.zipWithIndex.forall(x => (x._2 % 2 == 0) == (x._1 % 2 == 0))\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123483,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1 && nums(i) % 2 == 0) {\n                result = false\n                return result\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510200,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        for (i <- 0 until nums.length by 2) {\n            if (nums(i) % 2 == 0) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123484,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpr7r0di5t.scala:12)\n\tat Problem.main(tmpr7r0di5t.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var isOdd = true\n        for (i <- 0 until nums.length if i % 2 == 1) {\n            if (nums(i) % 2 == 0) {\n                isOdd = false\n            }\n        }\n        isOdd\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123483,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var flag = true\n        for (i <- 1 to nums.length - 1 by 2) {\n            if (nums(i) % 2 == 0) {\n                flag = false\n                return flag\n            }\n        }\n        return flag\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123483,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var odd = true\n        for (i <- 1 until nums.length by 2) {\n            if (nums(i) % 2 == 0) {\n                odd = false\n                return odd\n            }\n        }\n        return odd\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123463,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var flag = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1 && nums(i) % 2 == 0) {\n                flag = false\n                return flag\n            }\n        }\n        return flag\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123463,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var odd = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1) {\n                if (nums(i) % 2 == 0) {\n                    odd = false\n                }\n            }\n        }\n        odd\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123483,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var flag = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1 && nums(i) % 2 == 0) flag = false\n        }\n        return flag\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123483,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        nums.zipWithIndex.forall(x => x._2 % 2 == 0 || x._1 % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510200,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        nums.zipWithIndex.forall(x => x._2 % 2 == 1 && x._1 % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123463,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp444ahol6.scala:9)\n\tat Problem.main(tmp444ahol6.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1 && nums(i) % 2 == 0) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123483,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var odd = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1) {\n                if (nums(i) % 2 == 0) {\n                    odd = false\n                }\n            }\n        }\n        return odd\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510200,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 0 && nums(i) % 2 == 0) result = false\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123463,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpsdgj6msr.scala:13)\n\tat Problem.main(tmpsdgj6msr.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        if (nums.length == 0) return true\n        if (nums.length == 1) return nums(0) % 2 == 1\n        if (nums(0) % 2 == 0) return false\n        if (nums(1) % 2 == 1) return false\n        oddPosition(nums.tail.tail)\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123483,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp98lwxr6t.scala:13)\n\tat Problem.main(tmp98lwxr6t.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        nums.zipWithIndex.filter(x => x._2 % 2 == 1).map(x => x._1).forall(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123483,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var i = 0\n        for (num <- nums) {\n            if (i % 2 == 1 && num % 2 == 0) return false\n            i += 1\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123483,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var odd = true\n        for (i <- 1 to nums.length by 2) {\n            if (nums(i) % 2 == 0) odd = false\n        }\n        odd\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123483,
      "stdout": "",
      "stderr": "java.lang.IndexOutOfBoundsException: 3\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\tat Problem$.oddPosition$$anonfun$1(tmpvkn0g82y.scala:8)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.oddPosition(tmpvkn0g82y.scala:9)\n\tat Problem$.main(tmpvkn0g82y.scala:14)\n\tat Problem.main(tmpvkn0g82y.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        nums.zipWithIndex.forall(x => x._2 % 2 == 0 || x._1 % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510200,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var odd = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1) {\n                if (nums(i) % 2 == 0) {\n                    odd = false\n                }\n            }\n        }\n        return odd\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510200,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1) {\n                if (nums(i) % 2 == 0) return false\n            }\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123484,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        nums.zipWithIndex.forall(x => x._2 % 2 == 0 || x._1 % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510200,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var flag = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1 && nums(i) % 2 == 0) {\n                flag = false\n                return flag\n            }\n        }\n        return flag\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123463,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1 && nums(i) % 2 == 0) return false\n            if (i % 2 == 0 && nums(i) % 2 == 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123484,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        if (nums.length == 0) return true\n        if (nums.length == 1) return nums(0) % 2 == 1\n        if (nums(0) % 2 == 0) return false\n        if (nums(1) % 2 == 1) return false\n        return oddPosition(nums.slice(2, nums.length))\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123463,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpopiruvnt.scala:13)\n\tat Problem.main(tmpopiruvnt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        if (nums.length == 0) return true\n        if (nums.length == 1) return nums(0) % 2 == 1\n        if (nums(0) % 2 == 1) return oddPosition(nums.tail)\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123462,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp4y3xsk8q.scala:12)\n\tat Problem.main(tmp4y3xsk8q.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var flag = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 0) {\n                if (nums(i) % 2 == 0) {\n                    flag = false\n                    return flag\n                }\n            }\n        }\n        return flag\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123463,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp62hs91d0.scala:18)\n\tat Problem.main(tmp62hs91d0.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var i = 0\n        while (i < nums.length) {\n            if (i % 2 == 1 && nums(i) % 2 == 0) return false\n            i += 1\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123484,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1) {\n                if (nums(i) % 2 == 0) {\n                    result = false\n                }\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123463,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        nums.zipWithIndex.forall(x => x._2 % 2 == 0 && x._1 % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123463,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpfqw3lsge.scala:9)\n\tat Problem.main(tmpfqw3lsge.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        nums.zipWithIndex.forall(x => x._2 % 2 == 0 && x._1 % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123463,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpfqw3lsge.scala:9)\n\tat Problem.main(tmpfqw3lsge.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        if (nums.length == 0) true\n        else if (nums.length == 1) nums(0) % 2 == 1\n        else if (nums(0) % 2 == 1 && nums(1) % 2 == 1) oddPosition(nums.drop(2))\n        else false\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123484,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp9kqc9v3r.scala:12)\n\tat Problem.main(tmp9kqc9v3r.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1) {\n                if (nums(i) % 2 == 0) result = false\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123473,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var odd = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1) {\n                if (nums(i) % 2 == 0) {\n                    odd = false\n                }\n            }\n        }\n        odd\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123483,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 1 until nums.length by 2) {\n            if (nums(i) % 2 == 0) {\n                result = false\n                return result\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123473,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1) {\n                if (nums(i) % 2 == 0) result = false\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123473,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1 && nums(i) % 2 == 0) {\n                result = false\n                return result\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510200,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        nums.zipWithIndex.forall(x => (x._2 % 2 == 1 && x._1 % 2 == 1) || (x._2 % 2 == 0 && x._1 % 2 == 0))\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123484,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        nums.zipWithIndex.forall(x => x._2 % 2 == 0 && x._1 % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123463,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpfqw3lsge.scala:9)\n\tat Problem.main(tmpfqw3lsge.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var flag = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 0) {\n                if (nums(i) % 2 == 0) flag = false\n            }\n            else {\n                if (nums(i) % 2 == 1) flag = false\n            }\n        }\n        return flag\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123484,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpf8mgkwn8.scala:18)\n\tat Problem.main(tmpf8mgkwn8.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var flag = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 0 && nums(i) % 2 == 0) {\n                flag = false\n                return flag\n            }\n        }\n        return flag\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123486,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmptr67ne29.scala:16)\n\tat Problem.main(tmptr67ne29.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        nums.indices.filter(x => x % 2 == 1).map(x => nums(x)).forall(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123487,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        nums.zipWithIndex.forall(x => x._2 % 2 == 0 || x._1 % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510200,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        nums.zipWithIndex.forall(x => x._2 % 2 == 1 && x._1 % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123463,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp444ahol6.scala:9)\n\tat Problem.main(tmp444ahol6.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var flag = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1 && nums(i) % 2 == 0) {\n                flag = false\n                return flag\n            }\n        }\n        return flag\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123463,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        if (nums.length == 0) return true\n        if (nums.length == 1) return false\n        if (nums(0) % 2 == 0) return false\n        if (nums(1) % 2 == 0) return false\n        return oddPosition(nums.slice(2, nums.length))\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123487,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpz5xxko3m.scala:13)\n\tat Problem.main(tmpz5xxko3m.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        nums.zipWithIndex.forall(x => x._2 % 2 == 0 && x._1 % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123463,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpfqw3lsge.scala:9)\n\tat Problem.main(tmpfqw3lsge.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        if (nums.length == 0) return true\n        if (nums.length == 1) return nums(0) % 2 == 1\n        if (nums(0) % 2 == 1) return oddPosition(nums.tail)\n        else return false\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123487,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpkikdvfdf.scala:12)\n\tat Problem.main(tmpkikdvfdf.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var odd = true\n        for (i <- 1 until nums.length by 2) {\n            if (nums(i) % 2 == 0) {\n                odd = false\n                return odd\n            }\n        }\n        return odd\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123463,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        // Write your code here\n        var flag = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1 && nums(i) % 2 == 0) {\n                flag = false\n            }\n        }\n        return flag\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123487,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 0) {\n                if (nums(i) % 2 == 0) {\n                    result = false\n                    return result\n                }\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123473,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp3mtyunfu.scala:18)\n\tat Problem.main(tmp3mtyunfu.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        nums.zipWithIndex.forall(x => x._2 % 2 == 0 && x._1 % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123463,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpfqw3lsge.scala:9)\n\tat Problem.main(tmpfqw3lsge.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        nums.zipWithIndex.forall(x => x._2 % 2 == 0 && x._1 % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123463,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpfqw3lsge.scala:9)\n\tat Problem.main(tmpfqw3lsge.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 1 until nums.length by 2) {\n            if (nums(i) % 2 == 0) {\n                result = false\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123487,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        nums.zipWithIndex.forall(x => x._2 % 2 == 0 && x._1 % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123463,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpfqw3lsge.scala:9)\n\tat Problem.main(tmpfqw3lsge.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1) {\n                if (nums(i) % 2 == 0) result = false\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123473,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var i = 0\n        while (i < nums.length) {\n            if (i % 2 == 1 && nums(i) % 2 == 0) return false\n            i += 1\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123484,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 1 until nums.length by 2) {\n            if (nums(i) % 2 == 0) {\n                result = false\n                return result\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123473,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 0) {\n                if (nums(i) % 2 == 0) result = false\n            } else {\n                if (nums(i) % 2 == 1) result = false\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123487,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpwf827wp6.scala:17)\n\tat Problem.main(tmpwf827wp6.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var flag = true\n        for (i <- 0 until nums.length if i % 2 == 1) {\n            if (nums(i) % 2 == 0) {\n                flag = false\n            }\n        }\n        flag\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}