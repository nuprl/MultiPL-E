{
  "name": "mbpp_438_count_bidirectional",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count bidirectional tuple pairs.\n    def countBidirectional(test_list : List[Long]) : Long = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_438_count_bidirectional.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(countBidirectional((List[Long]((5l, 6l), (1l, 2l), (6l, 5l), (9l, 1l), (6l, 5l), (2l, 1l)))) == (3l));\n    assert(countBidirectional((List[Long]((5l, 6l), (1l, 3l), (6l, 5l), (9l, 1l), (6l, 5l), (2l, 1l)))) == (2l));\n    assert(countBidirectional((List[Long]((5l, 6l), (1l, 2l), (6l, 5l), (9l, 2l), (6l, 5l), (2l, 1l)))) == (4l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val test_set = test_list.toSet\n        var count = 0L\n        for (x <- test_set) {\n            val y = x * x\n            if (test_set.contains(y)) count += 1\n        }\n        count",
    "        val map = new HashMap[Long, Long]\n        var count = 0L\n        for (i <- test_list) {\n            if (map.contains(i)) count += map(i)\n            if (map.contains(-i)) map(i) = map(-i) + 1\n            else map(i) = 1\n        }\n        return count",
    "        val count = new HashMap[Long, Long]\n        for (i <- test_list) {\n            if (count.contains(i)) count(i) += 1\n            else count(i) = 1\n        }\n        var result = 0L\n        for (i <- count.keys) {\n            if (count.contains(-i)) result += count(i) * count(-i)\n        }\n        result",
    "        val test_map = new HashMap[Long, Long]\n        for (i <- test_list) {\n            if (test_map.contains(i)) test_map(i) += 1\n            else test_map(i) = 1\n        }\n        var count = 0L\n        for (i <- test_map.keys) {\n            if (test_map.contains(-i)) count += test_map(i) * test_map(-i)\n        }\n        return count",
    "        var count = 0L\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                if (test_list(i) * test_list(j) < 0) count += 1\n            }\n        }\n        count",
    "        val map = new HashMap[Long, Long]\n        var count = 0L\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                count += map(i)\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        count",
    "        val test_map = new HashMap[Long, Long]()\n        for (i <- test_list) {\n            if (test_map.contains(i)) test_map(i) += 1\n            else test_map(i) = 1\n        }\n        var count = 0L\n        for (i <- test_map.keys) {\n            if (test_map.contains(-i)) {\n                count += test_map(i) * test_map(-i)\n            }\n        }\n        count",
    "        val map = new HashMap[Long, Long]()\n        var count = 0L\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                count += map(i)\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                if (test_list(i) * test_list(j) < 0) count += 1\n            }\n        }\n        return count",
    "        val test_set = test_list.toSet\n        var count = 0\n        for (i <- test_set) {\n            if (test_set.contains(i * i)) count += 1\n        }\n        count",
    "        val test_set = test_list.toSet\n        var count = 0\n        for (i <- test_set) {\n            if (test_set.contains(i * i)) {\n                count += 1\n            }\n        }\n        count",
    "        val test_list_sorted = test_list.sorted\n        var count = 0\n        for (i <- 0 until test_list_sorted.length - 1) {\n            for (j <- i + 1 until test_list_sorted.length) {\n                if (test_list_sorted(i) * test_list_sorted(j) < 0) {\n                    count += 1\n                }\n            }\n        }\n        count",
    "        val map = new HashMap[Long, Long]\n        var count = 0L\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                count += map(i)\n                map(i) += 1\n            } else map(i) = 1\n        }\n        count",
    "        val tuple_map = new HashMap[Long, Long]\n        var count = 0L\n        for (i <- 0 until test_list.length) {\n            val tuple = test_list(i)\n            if (tuple_map.contains(tuple)) {\n                count += tuple_map(tuple)\n                tuple_map(tuple) += 1\n            } else {\n                tuple_map(tuple) = 1\n            }\n        }\n        count",
    "        val test_set = test_list.toSet\n        var count = 0\n        for (x <- test_set) {\n            val y = x * x\n            if (test_set.contains(y)) count += 1\n        }\n        count",
    "        val map = new HashMap[Long, Long]\n        var result = 0L\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                result += map(i)\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        result",
    "        val test_set = test_list.toSet\n        var count = 0\n        for (i <- test_list) {\n            if (test_set.contains(i.toLong)) {\n                count += 1\n            }\n        }\n        return count",
    "        val test_set = test_list.toSet\n        var count = 0\n        for (i <- test_set) {\n            for (j <- test_set) {\n                if (i != j && test_set.contains(i + j)) count += 1\n            }\n        }\n        count",
    "        val test_set = test_list.toSet\n        var count = 0\n        for (i <- test_set) {\n            if (test_set.contains(i * i)) count += 1\n        }\n        count",
    "        val test_set = test_list.toSet\n        var count = 0\n        for (i <- test_list) {\n            if (test_set.contains(i + 1)) count += 1\n        }\n        return count",
    "        val map = new HashMap[Long, Long]\n        var count = 0L\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                count += map(i)\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        count",
    "        val test_list_sorted = test_list.sorted\n        var count = 0L\n        for (i <- 0 until test_list_sorted.length) {\n            for (j <- i + 1 until test_list_sorted.length) {\n                if (test_list_sorted(i) * test_list_sorted(j) < 0) count += 1\n            }\n        }\n        count",
    "        val test_map = HashMap[Long, Long]()\n        var count = 0L\n        for (i <- test_list) {\n            if (test_map.contains(i)) count += test_map(i)\n            if (test_map.contains(-i)) test_map(i) = test_map(-i) + 1\n            else test_map(i) = 1\n        }\n        count",
    "        val map = new HashMap[Long, Long]\n        for (i <- test_list) {\n            if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n        }\n        var count = 0L\n        for (i <- map.keys) {\n            if (map(i) > 1) {\n                count += map(i) * (map(i) - 1)\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                if (test_list(i) * test_list(j) < 0) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                if (test_list(i) * test_list(j) < 0) count += 1\n            }\n        }\n        count",
    "        val test_set = test_list.toSet\n        var count = 0L\n        for (i <- test_list) {\n            val j = i * i\n            if (test_set.contains(j)) {\n                count += 1\n            }\n        }\n        count",
    "        val test_map = new HashMap[Long, Long]\n        for (i <- test_list) {\n            if (test_map.contains(i)) test_map(i) += 1\n            else test_map(i) = 1\n        }\n        var result = 0L\n        for (i <- test_map.keys) {\n            result += test_map(i) * (test_map(i) - 1) / 2\n        }\n        result",
    "        val test_map = new HashMap[Long, Long]()\n        var count = 0L\n        for (i <- test_list) {\n            if (test_map.contains(i)) {\n                count += test_map(i)\n                test_map(i) += 1\n            } else {\n                test_map(i) = 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                if (test_list(i) * test_list(j) < 0) count += 1\n            }\n        }\n        count",
    "        val test_set = test_list.toSet\n        var count = 0\n        for (i <- test_set) {\n            if (test_set.contains(i * i)) count += 1\n        }\n        count",
    "        val test_set = test_list.toSet\n        test_list.map(x => test_set.count(_ < x)).sum",
    "        val test_set = test_list.toSet\n        var count = 0\n        for (i <- test_set) {\n            if (test_set.contains(i * i)) count += 1\n        }\n        count",
    "        val sorted_list = test_list.sorted\n        var count = 0L\n        for (i <- 0 until sorted_list.length) {\n            val x = sorted_list(i)\n            val y = x * x\n            val index = sorted_list.indexOf(y)\n            if (index != -1) {\n                count += 1\n                sorted_list.remove(index)\n            }\n        }\n        count",
    "        val test_set = test_list.toSet\n        var result = 0L\n        for (i <- test_list) {\n            val j = i * i\n            if (test_set.contains(j)) result += 1\n        }\n        result",
    "        val test_set = test_list.toSet\n        var count = 0\n        for (x <- test_set) {\n            val y = x * x\n            if (test_set.contains(y)) count += 1\n        }\n        count",
    "        val map = new HashMap[Long, Long]\n        var count = 0L\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                count += map(i)\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        return count",
    "        val test_set = test_list.toSet\n        var count = 0L\n        for (i <- test_set) {\n            if (test_set.contains(i * i)) {\n                count += 1\n            }\n        }\n        count",
    "        val map = new HashMap[Long, Long]\n        var count = 0L\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                count += map(i)\n                map(i) += 1\n            } else map(i) = 1\n        }\n        count",
    "        val test_set = test_list.toSet\n        var count = 0L\n        for (i <- test_set) {\n            if (test_set.contains(i * i)) count += 1\n        }\n        count",
    "        val test_set = test_list.toSet\n        var count = 0\n        for (i <- test_list) {\n            if (test_set.contains(i.toLong)) {\n                count += 1\n            }\n        }\n        return count",
    "        val test_list_sorted = test_list.sorted\n        var count = 0L\n        for (i <- 0 until test_list_sorted.length) {\n            val x = test_list_sorted(i)\n            val y = x * x\n            val index = test_list_sorted.indexOf(y)\n            if (index != -1) {\n                count += index\n            }\n        }\n        count",
    "        val test_set = test_list.toSet\n        var count = 0L\n        for (i <- test_list) {\n            if (test_set.contains(i * 2)) count += 1\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                if (test_list(i) * test_list(j) < 0) count += 1\n            }\n        }\n        return count",
    "        var count : Long = 0\n        val map = new HashMap[Long, Long]\n        for (i <- 0 until test_list.length) {\n            val x = test_list(i)\n            if (map.contains(x)) {\n                count += map(x)\n                map(x) += 1\n            }\n            else map(x) = 1\n        }\n        count",
    "        val sorted_list = test_list.sorted\n        var count = 0\n        for (i <- 0 until sorted_list.size) {\n            val x = sorted_list(i)\n            val y = sorted_list(sorted_list.size - i - 1)\n            if (x == y) count += 1\n        }\n        count",
    "        val test_map = new HashMap[Long, Long]\n        var count = 0L\n        for (i <- 0 until test_list.length) {\n            if (test_map.contains(test_list(i))) {\n                count += test_map(test_list(i))\n                test_map(test_list(i)) += 1\n            }\n            else test_map(test_list(i)) = 1\n        }\n        count",
    "        val test_set = test_list.toSet\n        var count = 0L\n        for (i <- test_set) {\n            if (test_set.contains(i * i)) count += 1\n        }\n        count",
    "        val map = new HashMap[Long, Long]()\n        for (i <- test_list) {\n            if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n        }\n        var count = 0L\n        for (i <- map.keys) {\n            if (map(i) > 1) count += map(i) * (map(i) - 1)\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                if (test_list(i) * test_list(j) < 0) count += 1\n            }\n        }\n        count",
    "        val map = HashMap[Long, Long]()\n        for (i <- test_list) {\n            if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n        }\n        var count = 0L\n        for (i <- map.keys) {\n            val j = map(i)\n            if (j > 1) count += j * (j - 1) / 2\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until test_list.length - 1) {\n            for (j <- i + 1 until test_list.length) {\n                if (test_list(i) * test_list(j) < 0) count += 1\n            }\n        }\n        count",
    "        val test_set = test_list.toSet\n        var count = 0\n        for (i <- test_list.indices) {\n            val a = test_list(i)\n            val b = test_list(i)\n            if (test_set.contains(a) && test_set.contains(b)) count += 1\n        }\n        count",
    "        val test_set = test_list.toSet\n        val test_list_sorted = test_list.sorted\n        var count = 0L\n        for (i <- 0 until test_list_sorted.length - 1) {\n            for (j <- i + 1 until test_list_sorted.length) {\n                if (test_set.contains(test_list_sorted(i) * test_list_sorted(j))) {\n                    count += 1\n                }\n            }\n        }\n        count",
    "        var count = 0L\n        var set = Set[Long]()\n        for (i <- test_list) {\n            if (set.contains(i)) count += 1\n            set += i\n        }\n        return count",
    "        val test_list_set = test_list.toSet\n        var count = 0L\n        for (i <- test_list) {\n            if (test_list_set.contains(i * i)) count += 1\n        }\n        count",
    "        val test_set = test_list.toSet\n        var count = 0\n        for (i <- test_set) {\n            if (test_set.contains(i + 1)) count += 1\n        }\n        return count",
    "        val test_set = test_list.toSet\n        var count = 0L\n        for (i <- test_list) {\n            val j = i * i\n            if (test_set.contains(j)) count += 1\n        }\n        count",
    "        val test_set = test_list.toSet\n        var count = 0\n        for (i <- test_set) {\n            val j = i * i\n            if (test_set.contains(j)) {\n                count += 1\n            }\n        }\n        count",
    "        val test_map = new HashMap[Long, Long]\n        for (i <- test_list) {\n            if (test_map.contains(i)) test_map(i) += 1\n            else test_map(i) = 1\n        }\n        var count = 0L\n        for (i <- test_map.keys) {\n            if (test_map.contains(-i)) count += test_map(i) * test_map(-i)\n        }\n        count",
    "        val map = new HashMap[Long, Long]\n        var count = 0L\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                count += map(i)\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        count",
    "        val map = Map[Long, Long]()\n        var count = 0L\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                count += map(i)\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        count",
    "        val test_map = new HashMap[Long, Long]\n        var count = 0L\n        for (i <- test_list) {\n            if (test_map.contains(i)) {\n                count += test_map(i)\n                test_map(i) += 1\n            } else {\n                test_map += (i -> 1)\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                if (test_list(i) * test_list(j) < 0) count += 1\n            }\n        }\n        return count",
    "        val test_map = new HashMap[Long, Long]\n        var count = 0L\n        for (i <- test_list) {\n            if (test_map.contains(i)) {\n                count += test_map(i)\n                test_map(i) += 1\n            } else {\n                test_map(i) = 1\n            }\n        }\n        count",
    "        val test_list_sorted = test_list.sorted\n        var count = 0\n        for (i <- 0 until test_list_sorted.length) {\n            for (j <- i + 1 until test_list_sorted.length) {\n                if (test_list_sorted(i) * test_list_sorted(j) < 0) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        var map = Map[Long, Long]()\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                count += map(i)\n                map(i) += 1\n            }\n            else map(i) = 1\n        }\n        return count",
    "        val test_set = test_list.toSet\n        var count = 0L\n        for (i <- test_list) {\n            if (test_set.contains(i * 2)) count += 1\n        }\n        return count",
    "        val test_set = test_list.toSet\n        var count = 0\n        for (i <- test_set) {\n            if (test_set.contains(i * i)) count += 1\n        }\n        count",
    "        val test_set = test_list.toSet\n        var count = 0\n        for (i <- test_set) {\n            if (test_set.contains(i * i)) count += 1\n        }\n        count",
    "        val test_set = test_list.toSet\n        var count = 0L\n        for (i <- test_set) {\n            if (test_set.contains(i * i)) count += 1\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until test_list.length - 1) {\n            for (j <- i + 1 until test_list.length) {\n                if (test_list(i) * test_list(j) < 0) count += 1\n            }\n        }\n        count",
    "        val map = new HashMap[Long, Long]()\n        for (i <- test_list) {\n            if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n        }\n        var result = 0L\n        for (i <- map.keys) {\n            if (map(i) > 1) result += map(i) * (map(i) - 1) / 2\n        }\n        result",
    "        val test_set = test_list.toSet\n        var count = 0\n        for (i <- test_list) {\n            if (test_set.contains(i + 1)) count += 1\n        }\n        return count",
    "        val sorted_list = test_list.sorted\n        var count = 0\n        for (i <- 0 until sorted_list.length) {\n            for (j <- i + 1 until sorted_list.length) {\n                if (sorted_list(i) * sorted_list(j) <= 1000000) count += 1\n            }\n        }\n        count",
    "        val map = new HashMap[Long, Long]()\n        for (i <- test_list) {\n            if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n        }\n        var count = 0L\n        for (i <- map.keys) {\n            if (map(i) > 1) count += map(i) * (map(i) - 1)\n        }\n        count",
    "        val test_map = new HashMap[Long, Long]()\n        var count = 0L\n        for (i <- 0 until test_list.length) {\n            val x = test_list(i)\n            val y = test_list(test_list.length - i - 1)\n            if (test_map.contains(x)) {\n                if (test_map(x) == y) count += 1\n            } else {\n                test_map += x -> y\n            }\n        }\n        return count",
    "        val map = new HashMap[Long, Long]()\n        var count = 0L\n        for (i <- 0 until test_list.length) {\n            val x = test_list(i)\n            if (map.contains(x)) {\n                count += map(x)\n                map(x) += 1\n            } else {\n                map(x) = 1\n            }\n        }\n        count",
    "        val map = new HashMap[Long, Long]()\n        var count = 0L\n        for (x <- test_list) {\n            if (map.contains(x)) {\n                count += map(x)\n                map(x) += 1\n            }\n            else map(x) = 1\n        }\n        count",
    "        val test_set = test_list.toSet\n        var count = 0\n        for (i <- test_list) {\n            if (test_set.contains(i * i)) count += 1\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until test_list.length) {\n            for (j <- 0 until test_list.length) {\n                if (test_list(i) == test_list(j) && i != j) {\n                    count += 1\n                }\n            }\n        }\n        count",
    "        val map = new HashMap[Long, Long]\n        for (i <- test_list) {\n            if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n        }\n        var count = 0L\n        for (i <- map.keys) {\n            if (map(i) > 1) count += map(i) * (map(i) - 1) / 2\n        }\n        count",
    "        val test_set = test_list.toSet\n        var count = 0L\n        for (i <- test_set) {\n            val j = i * i\n            if (test_set.contains(j)) count += 1\n        }\n        count",
    "        val map = new HashMap[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            val x = test_list(i)\n            if (map.contains(x)) map(x) += 1\n            else map(x) = 1\n        }\n        var count = 0L\n        for (i <- 0 until test_list.length) {\n            val x = test_list(i)\n            if (map.contains(x)) {\n                val y = map(x)\n                if (y > 1) count += y * (y - 1) / 2\n                map(x) = 0\n            }\n        }\n        count",
    "        val map = new HashMap[Long, Long]\n        for (i <- test_list) {\n            if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n        }\n        var count = 0L\n        for (i <- map.keys) {\n            if (map(i) >= 2) count += map(i) * (map(i) - 1) / 2\n        }\n        return count",
    "        val test_set = test_list.toSet\n        var count = 0\n        for (i <- test_list) {\n            if (test_set.contains(i.toLong)) count += 1\n        }\n        count",
    "        val map = new HashMap[Long, Long]\n        var count = 0L\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                count += map(i)\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        count",
    "        val set = new HashSet[Long]\n        var count = 0L\n        for (i <- test_list) {\n            if (set.contains(i)) count += 1\n            set.add(i)\n        }\n        count",
    "        val map = new HashMap[Long, Long]()\n        for (i <- test_list) {\n            if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n        }\n        var result = 0L\n        for (i <- map.keys) {\n            if (map(i) > 1) result += map(i) * (map(i) - 1)\n        }\n        result",
    "        val test_map = new HashMap[Long, Long]\n        var count = 0L\n        for (i <- test_list) {\n            if (test_map.contains(i)) {\n                count += test_map(i)\n                test_map(i) += 1\n            } else {\n                test_map(i) = 1\n            }\n        }\n        return count",
    "        val test_map = new HashMap[Long, Long]\n        for (i <- test_list) {\n            if (test_map.contains(i)) test_map(i) += 1\n            else test_map(i) = 1\n        }\n        var result : Long = 0\n        for (i <- test_map.keys) {\n            if (test_map(i) > 1) result += test_map(i) * (test_map(i) - 1) / 2\n        }\n        return result",
    "        val map = new HashMap[Long, Long]\n        var count = 0L\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                count += map(i)\n                map(i) += 1\n            } else map(i) = 1\n        }\n        count",
    "        val test_set = test_list.toSet\n        var count = 0\n        for (i <- test_list) {\n            if (test_set.contains(i.toLong)) count += 1\n        }\n        return count",
    "        val test_set = test_list.toSet\n        var count = 0\n        for (i <- test_set) {\n            if (test_set.contains(i.toString.reverse.toLong)) {\n                count += 1\n            }\n        }\n        count",
    "        val test_list_sorted = test_list.sorted\n        var count = 0L\n        for (i <- 0 until test_list_sorted.length) {\n            val x = test_list_sorted(i)\n            val y = x * x\n            val index = test_list_sorted.indexOf(y)\n            if (index != -1) {\n                count += 1\n            }\n        }\n        count",
    "        val test_map = new HashMap[Long, Long]\n        var count = 0L\n        for (i <- test_list) {\n            if (test_map.contains(i)) {\n                count += test_map(i)\n                test_map(i) += 1\n            } else {\n                test_map(i) = 1\n            }\n        }\n        return count",
    "        val map = Map[Long, Long]()\n        var count = 0L\n        for (i <- 0 until test_list.length) {\n            val x = test_list(i)\n            if (map.contains(x)) {\n                count += map(x)\n                map(x) += 1\n            } else {\n                map(x) = 1\n            }\n        }\n        count",
    "        val test_set = test_list.toSet\n        var count = 0\n        for (x <- test_set) {\n            val y = x * x\n            if (test_set.contains(y)) {\n                count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                if (test_list(i) * test_list(j) < 0) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                if (test_list(i) == test_list(j)) count += 1\n            }\n        }\n        count",
    "        val test_set = test_list.toSet\n        var count = 0L\n        for (i <- test_list) {\n            if (test_set.contains(i * i)) count += 1\n        }\n        return count",
    "        val test_set = test_list.toSet\n        var count = 0L\n        for (i <- test_set) {\n            if (test_set.contains(i * i)) count += 1\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                if (test_list(i) * test_list(j) < 0) count += 1\n            }\n        }\n        return count",
    "        val map = new HashMap[Long, Long]\n        var count = 0L\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                count += map(i)\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        count",
    "        val map = new HashMap[Long, Long]\n        for (i <- test_list) {\n            if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n        }\n        var result = 0L\n        for (i <- map.keys) {\n            val count = map(i)\n            result += count * (count - 1) / 2\n        }\n        result",
    "        val test_set = test_list.toSet\n        var count = 0L\n        for (i <- test_set) {\n            if (test_set.contains(i + 1)) count += 1\n        }\n        return count",
    "        val map = new HashMap[Long, Long]()\n        var count = 0L\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                count += map(i)\n                map(i) += 1\n            } else map(i) = 1\n        }\n        count",
    "        val test_set = test_list.toSet\n        val test_list_sorted = test_list.sorted\n        var count = 0L\n        for (i <- 0 until test_list_sorted.length) {\n            for (j <- i + 1 until test_list_sorted.length) {\n                if (test_set.contains(test_list_sorted(i) + test_list_sorted(j))) count += 1\n            }\n        }\n        count",
    "        val test_set = test_list.toSet\n        var count = 0\n        for (i <- test_list) {\n            val j = i * i\n            if (test_set.contains(j)) count += 1\n        }\n        count",
    "        val test_set = test_list.toSet\n        val test_list_sorted = test_list.sorted\n        var count = 0L\n        for (i <- 0 until test_list_sorted.length) {\n            val a = test_list_sorted(i)\n            for (j <- i + 1 until test_list_sorted.length) {\n                val b = test_list_sorted(j)\n                if (test_set.contains(a + b)) count += 1\n            }\n        }\n        count",
    "        val test_set = test_list.toSet\n        var count = 0L\n        for (i <- test_set) {\n            val j = i * i\n            if (test_set.contains(j)) {\n                count += 1\n            }\n        }\n        count",
    "        val map = new HashMap[Long, Long]()\n        var count = 0L\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                count += map(i)\n            }\n            if (map.contains(-i)) {\n                map(i) = map(-i) + 1\n            } else {\n                map(i) = 1\n            }\n        }\n        count",
    "        val test_set = test_list.toSet\n        var count = 0\n        for (x <- test_set) {\n            val y = x * 3\n            if (test_set.contains(y)) {\n                count += 1\n            }\n        }\n        return count",
    "        val test_set = test_list.toSet\n        var count = 0L\n        for (i <- test_set) {\n            if (test_set.contains(i * i)) count += 1\n        }\n        count",
    "        val map = new HashMap[Long, Long]\n        var count = 0L\n        for (i <- 0 until test_list.length) {\n            val x = test_list(i)\n            for (j <- i + 1 until test_list.length) {\n                val y = test_list(j)\n                if (x * y < 0) {\n                    val key = x * y\n                    val value = map.getOrElse(key, 0L)\n                    map.put(key, value + 1)\n                }\n            }\n        }\n        for (i <- 0 until test_list.length) {\n            val x = test_list(i)\n            for (j <- i + 1 until test_list.length) {\n                val y = test_list(j)\n                if (x * y > 0) {\n                    val key = x * y\n                    val value = map.getOrElse(key, 0L)\n                    count += value\n                }\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                if (test_list(i) * test_list(j) < 0) count += 1\n            }\n        }\n        count",
    "        val test_list_sorted = test_list.sorted\n        var count = 0\n        for (i <- 0 until test_list_sorted.length) {\n            val x = test_list_sorted(i)\n            val y = test_list_sorted(test_list_sorted.length - 1 - i)\n            if (x == y) count += 1\n        }\n        count",
    "        val test_set = test_list.toSet\n        val test_list_size = test_list.size\n        var count = 0\n        for (i <- 0 until test_list_size) {\n            val a = test_list(i)\n            for (j <- i + 1 until test_list_size) {\n                val b = test_list(j)\n                if (test_set.contains(a + b)) count += 1\n            }\n        }\n        return count",
    "        val test_map = new HashMap[Long, Long]\n        for (i <- 0 until test_list.length) {\n            if (test_map.contains(test_list(i))) test_map(test_list(i)) += 1\n            else test_map(test_list(i)) = 1\n        }\n        var count = 0L\n        for (i <- 0 until test_list.length) {\n            if (test_map.contains(test_list(i))) {\n                count += test_map(test_list(i)) * (test_map(test_list(i)) - 1)\n                test_map -= test_list(i)\n            }\n        }\n        count / 2",
    "        val map = new HashMap[Long, Long]()\n        var count = 0L\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                count += map(i)\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        return count",
    "        val map = new HashMap[Long, Long]\n        var count = 0L\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                count += map(i)\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        return count",
    "        val test_set = test_list.toSet\n        var count = 0L\n        for (i <- test_list) {\n            if (test_set.contains(i * i)) {\n                count += 1\n            }\n        }\n        count",
    "        val test_set = test_list.toSet\n        var count = 0\n        for (i <- test_set) {\n            if (test_set.contains(i * i)) count += 1\n        }\n        count",
    "        val test_map = new HashMap[Long, Long]\n        for (i <- test_list) {\n            if (test_map.contains(i)) test_map(i) += 1\n            else test_map(i) = 1\n        }\n        var count = 0L\n        for (i <- test_map.keys) {\n            if (test_map.contains(i)) {\n                count += test_map(i) * test_map(i - 1)\n                test_map(i - 1) = 0\n            }\n        }\n        count",
    "        val test_set = test_list.toSet\n        var count = 0\n        for (i <- test_list) {\n            if (test_set.contains(i.toLong * -1)) count += 1\n        }\n        return count",
    "        val map = Map[Long, Long]()\n        var count = 0L\n        for (i <- 0 until test_list.length) {\n            val x = test_list(i)\n            if (map.contains(x)) count += map(x)\n            for (j <- i + 1 until test_list.length) {\n                val y = test_list(j)\n                if (map.contains(y)) map(y) += 1\n                else map(y) = 1\n            }\n        }\n        count",
    "        val map = new HashMap[Long, Long]\n        var count = 0L\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                count += map(i)\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        return count",
    "        val test_set = test_list.toSet\n        var count = 0\n        for (i <- test_set) {\n            if (test_set.contains(i * i)) count += 1\n        }\n        count",
    "        val test_set = test_list.toSet\n        var count = 0L\n        for (i <- test_list) {\n            if (test_set.contains(i - 1)) count += 1\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                if (test_list(i) * test_list(j) < 0) count += 1\n            }\n        }\n        return count",
    "        val map = new HashMap[Long, Long]()\n        var count = 0L\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                count += map(i)\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        return count",
    "        val test_set = test_list.toSet\n        var count = 0\n        for (i <- test_list) {\n            if (test_set.contains(i + 1)) count += 1\n        }\n        return count",
    "        val map = new HashMap[Long, Long]\n        var count = 0L\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                count += map(i)\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        count",
    "        val test_set = test_list.toSet\n        var count = 0L\n        for (x <- test_set) {\n            val y = x * x\n            if (test_set.contains(y)) {\n                count += 1\n            }\n        }\n        count",
    "        val test_set = test_list.toSet\n        var count = 0L\n        for (i <- test_set) {\n            if (test_set.contains(i * i)) count += 1\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until test_list.length) {\n            for (j <- 0 until test_list.length) {\n                if (test_list(i) == test_list(j) && i != j) {\n                    count += 1\n                }\n            }\n        }\n        count",
    "        val map = new HashMap[Long, Long]()\n        for (x <- test_list) {\n            if (map.contains(x)) map(x) += 1\n            else map(x) = 1\n        }\n        var count = 0L\n        for (x <- test_list) {\n            if (map.contains(x)) {\n                count += map(x)\n                map(x) = 0\n            }\n        }\n        return count",
    "        var count = 0\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                if (test_list(i) * test_list(j) < 0) count += 1\n            }\n        }\n        count",
    "        val test_list_sorted = test_list.sorted\n        val test_list_sorted_set = test_list_sorted.toSet\n        var count = 0L\n        for (i <- 0 until test_list_sorted.length) {\n            val x = test_list_sorted(i)\n            val y = x * x\n            if (test_list_sorted_set.contains(y)) count += 1\n        }\n        count",
    "        val test_set = test_list.toSet\n        var count = 0L\n        for (i <- test_set) {\n            val j = i * i\n            if (test_set.contains(j)) count += 1\n        }\n        count",
    "        val test_set = test_list.toSet\n        var count = 0L\n        for (i <- test_list) {\n            if (test_set.contains(i * i)) count += 1\n        }\n        count",
    "        val hash_map = new HashMap[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (hash_map.contains(test_list(i))) {\n                hash_map(test_list(i)) += 1\n            } else {\n                hash_map(test_list(i)) = 1\n            }\n        }\n        var result = 0L\n        for (i <- 0 until test_list.length) {\n            if (hash_map.contains(test_list(i) * 2)) {\n                result += hash_map(test_list(i) * 2)\n            }\n        }\n        result",
    "        val test_set = test_list.toSet\n        var count = 0\n        for (i <- test_list) {\n            if (test_set.contains(i.toLong)) {\n                count += 1\n            }\n        }\n        count",
    "        val test_set = test_list.toSet\n        test_list.map(x => test_set.count(_ > x)).sum",
    "        val map = new HashMap[Long, Long]\n        var count = 0L\n        for (x <- test_list) {\n            if (map.contains(x)) count += map(x)\n            if (map.contains(-x)) map(x) = map(-x) + 1\n            else map(x) = 1\n        }\n        count",
    "        val test_set = test_list.toSet\n        var count = 0\n        for (i <- test_set) {\n            if (test_set.contains(i * i)) count += 1\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                if (test_list(i) * test_list(j) > 0) count += 1\n            }\n        }\n        count",
    "        val m = new HashMap[Long, Long]\n        var count = 0L\n        for (i <- 0 until test_list.length) {\n            val x = test_list(i)\n            if (m.contains(x)) {\n                count += m(x)\n            }\n            m(x) = m.getOrElse(x, 0L) + 1\n        }\n        return count",
    "        val test_set = test_list.toSet\n        var count = 0\n        for (i <- test_set) {\n            if (test_set.contains(i.toString.reverse.toLong)) {\n                count += 1\n            }\n        }\n        return count",
    "        var count = 0\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                if (test_list(i) * test_list(j) < 0) count += 1\n            }\n        }\n        count",
    "        val test_set = test_list.toSet\n        var count = 0\n        for (x <- test_set) {\n            val y = x * 3\n            if (test_set.contains(y)) count += 1\n        }\n        count",
    "        val test_map = new HashMap[Long, Long]\n        for (i <- test_list) {\n            if (test_map.contains(i)) test_map(i) += 1\n            else test_map(i) = 1\n        }\n        var result = 0L\n        for (i <- test_map.keys) {\n            if (test_map.contains(i)) {\n                val count = test_map(i)\n                result += count * (count - 1) / 2\n                test_map.remove(i)\n            }\n        }\n        result",
    "        val map = new HashMap[Long, Long]\n        var count = 0L\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                count += map(i)\n                map(i) += 1\n            }\n            else map(i) = 1\n        }\n        count",
    "        val test_list_set = test_list.toSet\n        var count = 0\n        for (i <- test_list) {\n            if (test_list_set.contains(i * i)) count += 1\n        }\n        count / 2",
    "        val test_map = new HashMap[Long, Long]()\n        for (i <- test_list) {\n            if (test_map.contains(i)) test_map(i) += 1\n            else test_map(i) = 1\n        }\n        var count = 0L\n        for (i <- test_map.keys) {\n            if (test_map.contains(-i)) count += test_map(i) * test_map(-i)\n        }\n        count",
    "        val map = new HashMap[Long, Long]\n        var count = 0L\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                count += map(i)\n                map(i) += 1\n            }\n            else map(i) = 1\n        }\n        return count",
    "        val test_list_sorted = test_list.sorted\n        var count = 0\n        for (i <- 0 until test_list_sorted.length) {\n            val x = test_list_sorted(i)\n            val y = x * x\n            val y_index = test_list_sorted.indexOf(y)\n            if (y_index != -1) {\n                val z = sqrt(y).toLong\n                val z_index = test_list_sorted.indexOf(z)\n                if (z_index != -1) {\n                    count += 1\n                }\n            }\n        }\n        return count",
    "        val test_list_sorted = test_list.sorted\n        var count = 0L\n        for (i <- 0 until test_list_sorted.length) {\n            val x = test_list_sorted(i)\n            val y = x * x\n            val y_sqrt = sqrt(y).toLong\n            if (y_sqrt * y_sqrt == y) {\n                val index = test_list_sorted.indexOf(y_sqrt)\n                if (index != -1) {\n                    count += index + 1\n                }\n            }\n        }\n        count",
    "        val test_set = test_list.toSet\n        var count = 0L\n        for (i <- test_list) {\n            val j = i * i\n            if (test_set.contains(j)) count += 1\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                if (test_list(i) * test_list(j) < 0) count += 1\n            }\n        }\n        count",
    "        val test_set = test_list.toSet\n        var count = 0\n        for (i <- test_set) {\n            if (test_set.contains(i * i)) {\n                count += 1\n            }\n        }\n        return count",
    "        val test_set = test_list.toSet\n        var count = 0\n        for (i <- test_list) {\n            if (test_set.contains(i * i)) count += 1\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                if (test_list(i) * test_list(j) < 0) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                if (test_list(i) * test_list(j) < 0) count += 1\n            }\n        }\n        count",
    "        val test_set = test_list.toSet\n        var count = 0L\n        for (i <- test_set) {\n            if (test_set.contains(i * i)) count += 1\n        }\n        count",
    "        val map = new HashMap[Long, Long]\n        for (i <- 0 until test_list.length) {\n            val x = test_list(i)\n            for (j <- i + 1 until test_list.length) {\n                val y = test_list(j)\n                val g = gcd(x, y)\n                val key = x / g * y\n                map(key) = map.getOrElse(key, 0) + 1\n            }\n        }\n        var result = 0L\n        for (value <- map.values) {\n            result += value * (value - 1) / 2\n        }\n        result",
    "        val sorted_list = test_list.sorted\n        var count = 0\n        for (i <- 0 until sorted_list.length - 1) {\n            for (j <- i + 1 until sorted_list.length) {\n                if (sorted_list(i) * sorted_list(j) < 0) {\n                    count += 1\n                }\n            }\n        }\n        count",
    "        val map = new HashMap[Long, Int]\n        var count = 0\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                count += map(i)\n                map(i) += 1\n            }\n            else map(i) = 1\n        }\n        count",
    "        val test_set = test_list.toSet\n        var count = 0\n        for (i <- test_set) {\n            if (test_set.contains(i.toString.reverse.toLong)) {\n                count += 1\n            }\n        }\n        count / 2",
    "        val test_set = test_list.toSet\n        var count = 0L\n        for (i <- test_list) {\n            if (test_set.contains(i * i)) count += 1\n        }\n        count",
    "        val test_set = test_list.toSet\n        var count = 0\n        for (i <- test_set) {\n            if (test_set.contains(i * i)) count += 1\n        }\n        count",
    "        val test_set = test_list.toSet\n        test_list.map(x => test_set.count(_ > x)).sum",
    "        val test_set = test_list.toSet\n        val test_list_sorted = test_list.sorted\n        var count = 0L\n        for (i <- 0 until test_list_sorted.length) {\n            val a = test_list_sorted(i)\n            for (j <- i + 1 until test_list_sorted.length) {\n                val b = test_list_sorted(j)\n                if (test_set.contains(a + b)) count += 1\n            }\n        }\n        count",
    "        val test_set = test_list.toSet\n        var count = 0L\n        for (i <- test_list) {\n            if (test_set.contains(i * i)) count += 1\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                if (test_list(i) + test_list(j) == 0) count += 1\n            }\n        }\n        count",
    "        val test_set = test_list.toSet\n        var count = 0L\n        for (i <- test_set) {\n            if (test_set.contains(i * i)) count += 1\n        }\n        count",
    "        val map = new HashMap[Long, Long]()\n        var count = 0L\n        for (i <- 0 until test_list.length) {\n            val x = test_list(i)\n            val y = test_list(test_list.length - 1 - i)\n            if (x == y) {\n                count += 1\n            }\n            else {\n                if (map.contains(x)) {\n                    count += map(x)\n                }\n                if (map.contains(y)) {\n                    count += map(y)\n                }\n                if (map.contains(x)) {\n                    map(x) += 1\n                }\n                else {\n                    map(x) = 1\n                }\n                if (map.contains(y)) {\n                    map(y) += 1\n                }\n                else {\n                    map(y) = 1\n                }\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                if (test_list(i) * test_list(j) < 0) count += 1\n            }\n        }\n        count",
    "        val map = new HashMap[Long, Long]\n        for (i <- test_list) {\n            if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n        }\n        var count = 0L\n        for (i <- map.keys) {\n            if (map(i) > 1) count += map(i) * (map(i) - 1) / 2\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                if (test_list(i) * test_list(j) < 0) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until test_list.length - 1) {\n            for (j <- i + 1 until test_list.length) {\n                if (test_list(i) * test_list(j) < 0) count += 1\n            }\n        }\n        count",
    "        val test_set = test_list.toSet\n        var count = 0L\n        for (i <- test_list) {\n            if (test_set.contains(i * 2)) count += 1\n        }\n        return count",
    "        val test_map = HashMap[Long, Long]()\n        for (i <- test_list) {\n            if (test_map.contains(i)) test_map(i) += 1\n            else test_map(i) = 1\n        }\n        var result = 0L\n        for (i <- test_map.keys) {\n            if (test_map.contains(-i)) result += test_map(i) * test_map(-i)\n        }\n        result",
    "        var count = 0L\n        for (i <- 0 to test_list.length - 1) {\n            for (j <- i + 1 to test_list.length - 1) {\n                if (test_list(i) * test_list(j) > 0) count += 1\n            }\n        }\n        count",
    "        val map = new HashMap[Long, Long]()\n        var result = 0L\n        for (i <- 0 until test_list.length) {\n            val x = test_list(i)\n            if (map.contains(x)) {\n                result += map(x)\n                map(x) += 1\n            } else {\n                map(x) = 1\n            }\n        }\n        result",
    "        val test_set = test_list.toSet\n        var count = 0\n        for (i <- test_set) {\n            if (test_set.contains(i * i)) count += 1\n        }\n        count",
    "        val test_set = test_list.toSet\n        var count = 0L\n        for (i <- test_set) {\n            val j = i * i\n            if (test_set.contains(j)) {\n                count += 1\n            }\n        }\n        count",
    "        val test_set = test_list.toSet\n        var count = 0\n        for (i <- test_set) {\n            if (test_set.contains(i * 2)) count += 1\n        }\n        count",
    "        val test_map = HashMap[Long, Long]()\n        for (i <- test_list) {\n            if (test_map.contains(i)) test_map(i) += 1\n            else test_map(i) = 1\n        }\n        var count = 0L\n        for (i <- test_map.keys) {\n            if (test_map(i) > 1) count += test_map(i) * (test_map(i) - 1) / 2\n        }\n        return count",
    "        val map = new HashMap[Long, Long]\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (map.contains(key)) map(key) += 1\n            else map(key) = 1\n        }\n        var count = 0L\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (map.contains(key)) {\n                count += map(key)\n                map(key) = 0\n            }\n        }\n        count",
    "        val map = new HashMap[Long, Long]()\n        var count = 0L\n        for (i <- 0 until test_list.length) {\n            val x = test_list(i)\n            val y = test_list(test_list.length - 1 - i)\n            if (map.contains(x)) {\n                count += map(x)\n            }\n            if (map.contains(y)) {\n                count += map(y)\n            }\n            if (x == y) {\n                count += 1\n            }\n            if (map.contains(x)) {\n                map(x) += 1\n            } else {\n                map(x) = 1\n            }\n            if (map.contains(y)) {\n                map(y) += 1\n            } else {\n                map(y) = 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                if (test_list(i) * test_list(j) < 0) count += 1\n            }\n        }\n        count",
    "        val map = new HashMap[Long, Long]\n        var count = 0L\n        for (x <- test_list) {\n            if (map.contains(x)) {\n                count += map(x)\n                map(x) += 1\n            } else {\n                map(x) = 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                if (test_list(i) * test_list(j) < 0) count += 1\n            }\n        }\n        count",
    "        val test_map = new HashMap[Long, Long]\n        var count = 0L\n        for (i <- test_list) {\n            if (test_map.contains(i)) {\n                count += test_map(i)\n                test_map(i) += 1\n            } else {\n                test_map(i) = 1\n            }\n        }\n        return count",
    "        val map = new HashMap[Long, Long]\n        var count = 0L\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                count += map(i)\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        return count",
    "        val count = new HashMap[(Long, Long), Long]\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                val key = (test_list(i), test_list(j))\n                val key_reverse = (test_list(j), test_list(i))\n                if (count.contains(key)) count(key) += 1\n                else if (count.contains(key_reverse)) count(key_reverse) += 1\n                else count(key) = 1\n            }\n        }\n        var result = 0L\n        for (key <- count.keys) {\n            result += count(key) * (count(key) - 1) / 2\n        }\n        result",
    "        val map = new HashMap[Long, Long]()\n        var count = 0L\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                count += map(i)\n                map(i) += 1\n            }\n            else map(i) = 1\n        }\n        count",
    "        val map = new HashMap[Long, Long]\n        var count = 0L\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                count += map(i)\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        return count",
    "        val test_set = test_list.toSet\n        var count = 0\n        for (x <- test_set) {\n            val y = x * x\n            if (test_set.contains(y)) count += 1\n        }\n        count"
  ]
}