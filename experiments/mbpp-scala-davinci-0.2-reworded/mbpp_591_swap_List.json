{
  "name": "mbpp_591_swap_List",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to interchange the first and last elements in a list.\n    def swapList(newList : List[Long]) : List[Long] = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_591_swap_List.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(swapList((List[Long](12l.toLong, 35l.toLong, 9l.toLong, 56l.toLong, 24l.toLong))).equals((List[Long](24l.toLong, 35l.toLong, 9l.toLong, 56l.toLong, 12l.toLong))));\n    assert(swapList((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 2l.toLong, 1l.toLong))));\n    assert(swapList((List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong, 5l.toLong, 4l.toLong))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var list = newList\n        var temp = list.head\n        list = list.tail\n        list = list :+ temp\n        list",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        return last :: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.drop(1).dropRight(1)\n        last :: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.tail.init\n        last :: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        last :: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.drop(1).dropRight(1)\n        List(last) ::: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        List(last) ::: middle ::: List(first)",
    "        if (newList.length == 0) newList\n        else if (newList.length == 1) newList\n        else newList.last :: newList.tail.init :+ newList.head",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.tail.init\n        last :: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.drop(1).dropRight(1)\n        return last :: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.drop(1).dropRight(1)\n        return last :: middle ::: List(first)",
    "        return List(newList.last) ::: newList.slice(1, newList.length - 1) ::: List(newList.head)",
    "        var list = newList\n        var first = list.head\n        var last = list.last\n        list = list.dropRight(1)\n        list = list.drop(1)\n        list = last :: list\n        list = first :: list\n        list",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.drop(1).dropRight(1)\n        List(last) ::: middle ::: List(first)",
    "        var list = newList\n        var temp = list.head\n        list = list.tail\n        list = list :+ temp\n        list = list.reverse\n        temp = list.head\n        list = list.tail\n        list = list :+ temp\n        list",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        List(last) ::: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        return List(last) ::: middle ::: List(first)",
    "        var list = newList\n        var temp = list.head\n        list = list.tail\n        list = list :+ temp\n        list",
    "        var list = newList\n        var first = list.head\n        var last = list.last\n        list = list.drop(1)\n        list = list.dropRight(1)\n        list = last :: list\n        list = list ::: List(first)\n        return list",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        return List(last) ::: middle ::: List(first)",
    "        return List(newList(newList.length - 1)) ::: newList.slice(1, newList.length - 1) ::: List(newList(0))",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.tail.init\n        List(last) ::: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.tail.init\n        return last :: middle ::: List(first)",
    "      val first = newList.head\n      val last = newList.last\n      val middle = newList.tail.init\n      last :: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        List(last) ::: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.tail.init\n        return last :: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        return last :: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.drop(1).dropRight(1)\n        List(last) ::: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.drop(1).dropRight(1)\n        List(last) ::: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.tail.init\n        List(last) ::: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        return List(last) ::: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val newList2 = newList.dropRight(1)\n        val newList3 = newList2.drop(1)\n        val newList4 = last :: newList3\n        val newList5 = first :: newList4\n        return newList5",
    "        val first = newList.head\n        val last = newList.last\n        val newList2 = newList.tail.init\n        return last :: newList2 ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        List(last) ::: middle ::: List(first)",
    "        var list = newList\n        var first = list.head\n        var last = list.last\n        var temp = first\n        list = list.updated(0, last)\n        list = list.updated(list.length - 1, temp)\n        return list",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        return last :: middle ::: List(first)",
    "        newList match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => xs.last :: xs.init :+ x\n        }",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.tail.init\n        List(last) ::: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.tail.init\n        return last :: middle ::: List(first)",
    "        val temp = newList.head\n        val temp2 = newList.last\n        newList.updated(0, temp2).updated(newList.length - 1, temp)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.drop(1).dropRight(1)\n        last :: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        return last :: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        last :: middle ::: List(first)",
    "        var list = newList\n        var temp = list.head\n        list = list.tail\n        list = list :+ temp\n        list",
    "        val first = newList.head\n        val last = newList.last\n        val newList2 = newList.drop(1)\n        val newList3 = newList2.dropRight(1)\n        return last :: newList3 ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.tail.init\n        last :: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.tail.init\n        last :: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.tail.init\n        return last :: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.tail.init\n        last :: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        List(last) ::: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val newList2 = newList.dropRight(1)\n        val newList3 = newList2.drop(1)\n        val newList4 = last :: newList3\n        val newList5 = first :: newList4\n        newList5",
    "        var list = newList\n        var first = list.head\n        var last = list.last\n        list = list.drop(1)\n        list = list.dropRight(1)\n        list = last :: list\n        list = list :+ first\n        return list",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.tail.init\n        return last :: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.drop(1).dropRight(1)\n        List(last) ::: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        return last :: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.drop(1).dropRight(1)\n        last :: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        List(last) ::: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.tail.init\n        last :: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.init.tail\n        List(last) ::: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        return last :: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        return last :: middle :+ first",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.drop(1).dropRight(1)\n        List(last) ::: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        List(last) ::: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.drop(1).dropRight(1)\n        last :: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        return last :: middle ::: List(first)",
    "        var list = newList\n        var temp = list(0)\n        list = list.drop(1)\n        list = list :+ temp\n        list = list.reverse\n        temp = list(0)\n        list = list.drop(1)\n        list = list :+ temp\n        list = list.reverse\n        return list",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.tail.init\n        List(last) ::: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.drop(1).dropRight(1)\n        List(last) ::: middle ::: List(first)",
    "        val n = newList.length\n        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, n - 1)\n        List(last) ::: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        last :: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        List(last) ::: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.drop(1).dropRight(1)\n        return last :: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.tail.init\n        last :: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.drop(1).dropRight(1)\n        List(last) ::: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.tail.init\n        return last :: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        List(last) ::: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        return List(last) ::: middle ::: List(first)",
    "        if (newList.length == 0) {\n            return newList\n        }\n        return newList.last :: newList.init.tail :+ newList.head",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.tail.init\n        val newList = last :: middle ::: List(first)\n        return newList",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.tail.init\n        last :: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.tail.init\n        List(last) ::: middle ::: List(first)",
    "        var list = newList\n        var first = list.head\n        var last = list.last\n        list = list.drop(1)\n        list = list.dropRight(1)\n        list = last :: list\n        list = list :+ first\n        list",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        return last :: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.drop(1).dropRight(1)\n        return last :: middle ::: List(first)",
    "        newList match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => xs.last :: xs.init ::: x :: Nil\n        }",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.tail.init\n        last :: middle ::: List(first)",
    "        newList match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => xs.last :: xs.init :+ x\n        }",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.tail.init\n        last :: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        return List(last) ::: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.tail.init\n        last :: middle ::: List(first)",
    "        var list = newList\n        var temp = list.head\n        list = list.tail\n        list = list :+ temp\n        list",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.tail.init\n        List(last) ::: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.tail.init\n        last :: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        last :: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.drop(1).dropRight(1)\n        return last :: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.tail.init\n        List(last) ::: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.tail.init\n        last :: middle ::: List(first)",
    "        return List(newList.last) ::: newList.init.init ::: List(newList.head)",
    "        val first = newList.head\n        val last = newList.last\n        val newList2 = newList.dropRight(1).drop(1)\n        val newList3 = last :: newList2\n        val newList4 = newList3 :+ first\n        return newList4",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.tail.init\n        last :: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        last :: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.tail.init\n        last :: middle ::: List(first)",
    "        newList match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => xs.last :: xs.init.dropRight(1) ::: x :: Nil\n        }",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.tail.init\n        return last :: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.drop(1).dropRight(1)\n        List(last) ::: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        List(last) ::: middle ::: List(first)",
    "        return List(newList.last) ::: newList.slice(1, newList.length - 1) ::: List(newList.head)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.tail.init\n        last :: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        return last :: middle ::: List(first)",
    "        return newList.last :: newList.init.tail :+ newList.head",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.tail.init\n        return last :: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        return last :: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.drop(1).dropRight(1)\n        List(last) ::: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.drop(1).dropRight(1)\n        List(last) ::: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val newList2 = newList.drop(1)\n        val newList3 = newList2.dropRight(1)\n        val newList4 = last :: newList3\n        val newList5 = first :: newList4\n        newList5",
    "        return List(newList.last) ::: newList.dropRight(1).drop(1) ::: List(newList.head)",
    "        // Write your code here\n        val first = newList.head\n        val last = newList.last\n        val middle = newList.tail.init\n        List(last) ::: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        return last :: middle ::: List(first)",
    "        newList match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => xs.last :: xs.init :+ x\n        }",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        List(last) ::: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        List(last) ::: middle ::: List(first)",
    "        var list = newList\n        val first = list.head\n        val last = list.last\n        list = list.dropRight(1)\n        list = list.drop(1)\n        list = last :: list\n        list = first :: list\n        list",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.tail.init\n        return last :: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        return last :: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.tail.init\n        return last :: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        return last :: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.tail.init\n        return last :: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.tail.init\n        last :: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        List(last) ::: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val newList2 = newList.dropRight(1)\n        val newList3 = newList2.drop(1)\n        val newList4 = newList3 :+ last\n        val newList5 = newList4 :+ first\n        newList5",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.tail.init\n        return List(last) ++ middle ++ List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val newList2 = newList.dropRight(1).drop(1)\n        return List(last) ::: newList2 ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.tail.init\n        List(last) ::: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.tail.init\n        last :: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.drop(1).dropRight(1)\n        List(last) ::: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.tail.init\n        last :: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        List(last) ::: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.drop(1).dropRight(1)\n        List(last) ::: middle ::: List(first)",
    "        var newList2 = newList\n        var temp = newList2.head\n        newList2 = newList2.tail\n        newList2 = newList2 :+ temp\n        return newList2",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.tail.init\n        last :: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.tail.init\n        return last :: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.drop(1).dropRight(1)\n        return List(last) ::: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        List(last) ::: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        List(last) ::: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        List(last) ::: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.tail.init\n        last :: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.tail.init\n        last :: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.tail.init\n        List(last) ::: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val newList2 = newList.dropRight(1).drop(1)\n        List(last) ::: newList2 ::: List(first)",
    "        val n = newList.size\n        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, n - 1)\n        return last :: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.tail.init\n        return last :: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        List(last) ::: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.tail.init\n        List(last) ::: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        List(last) ++ middle ++ List(first)",
    "        var list = newList\n        var first = list.head\n        var last = list.last\n        list = list.drop(1)\n        list = list.dropRight(1)\n        list = last :: list\n        list = list :+ first\n        list",
    "        return List(newList.last) ::: newList.init.init ::: List(newList.head)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.tail.init\n        last :: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        return List(last) ::: middle ::: List(first)",
    "        newList match {\n            case x :: xs => xs.reverse.head :: xs.init.reverse ::: List(x)\n            case Nil => Nil\n        }",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.tail.init\n        last :: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.tail.init\n        List(last) ::: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.tail.init\n        List(last) ::: middle ::: List(first)",
    "        newList match {\n            case Nil => Nil\n            case x :: Nil => List(x)\n            case x :: xs => xs.last :: xs.init.dropRight(1) ::: List(x)\n        }",
    "        newList match {\n            case Nil => Nil\n            case x :: Nil => List(x)\n            case x :: xs => xs.last :: xs.init.tail ::: List(x)\n        }",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.tail.init\n        last :: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.tail.init\n        last :: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.drop(1).dropRight(1)\n        last :: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.tail.init\n        last :: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.tail.init\n        return last :: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.drop(1).dropRight(1)\n        List(last) ::: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        return last :: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.tail.init\n        last :: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        List(last) ::: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.drop(1).dropRight(1)\n        List(last) ::: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.tail.dropRight(1)\n        return last :: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.tail.init\n        last :: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.tail.init\n        List(last) ::: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        return last :: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        List(last) ::: middle ::: List(first)",
    "        val newList = List(1,2,3,4,5,6,7,8,9,10)\n        val first = newList.head\n        val last = newList.last\n        val newList2 = newList.drop(1)\n        val newList3 = newList2.dropRight(1)\n        val newList4 = last :: newList3\n        val newList5 = newList4 :+ first\n        return newList5",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.tail.init\n        last :: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.tail.init\n        last :: middle ::: List(first)",
    "        var list = newList\n        var temp = list.head\n        list = list.tail\n        list = list :+ temp\n        list",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.tail.init\n        List(last) ::: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.drop(1).dropRight(1)\n        List(last) ::: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.tail.init\n        return last :: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.tail.init\n        List(last) ::: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.tail.init\n        last :: middle ::: List(first)",
    "        var list = newList\n        var first = list.head\n        var last = list.last\n        list = list.dropRight(1)\n        list = list.drop(1)\n        list = last :: list\n        list = first :: list\n        list",
    "        val temp = newList(0)\n        newList(0) = newList(newList.length - 1)\n        newList(newList.length - 1) = temp\n        newList",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.tail.init\n        return last :: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.tail.init\n        return last :: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.tail.init\n        last :: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        last :: middle ::: List(first)",
    "        newList match {\n            case Nil => Nil\n            case x :: Nil => List(x)\n            case x :: xs => xs.last :: xs.init.dropRight(1) ::: List(x)\n        }",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.tail.init\n        last :: middle ::: List(first)",
    "        var list = newList\n        var first = list.head\n        var last = list.last\n        list = list.dropRight(1)\n        list = list.drop(1)\n        list = last :: list\n        list = first :: list\n        return list",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        List(last) ::: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.tail.init\n        return last :: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.tail.init\n        List(last) ::: middle ::: List(first)"
  ]
}