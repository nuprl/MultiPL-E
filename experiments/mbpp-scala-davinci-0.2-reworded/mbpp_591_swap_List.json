{
  "name": "mbpp_591_swap_List",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to interchange the first and last elements in a list.\n    def swapList(newList : List[Long]) : List[Long] = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_591_swap_List.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(swapList((List[Long](12l.toLong, 35l.toLong, 9l.toLong, 56l.toLong, 24l.toLong))).equals((List[Long](24l.toLong, 35l.toLong, 9l.toLong, 56l.toLong, 12l.toLong))));\n    assert(swapList((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 2l.toLong, 1l.toLong))));\n    assert(swapList((List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong, 5l.toLong, 4l.toLong))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var list = newList\n        var temp = list.head\n        list = list.tail\n        list = list :+ temp\n        list",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        return last :: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.drop(1).dropRight(1)\n        last :: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.tail.init\n        last :: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        last :: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.drop(1).dropRight(1)\n        List(last) ::: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        List(last) ::: middle ::: List(first)",
    "        if (newList.length == 0) newList\n        else if (newList.length == 1) newList\n        else newList.last :: newList.tail.init :+ newList.head",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.tail.init\n        last :: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.drop(1).dropRight(1)\n        return last :: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.drop(1).dropRight(1)\n        return last :: middle ::: List(first)",
    "        return List(newList.last) ::: newList.slice(1, newList.length - 1) ::: List(newList.head)",
    "        var list = newList\n        var first = list.head\n        var last = list.last\n        list = list.dropRight(1)\n        list = list.drop(1)\n        list = last :: list\n        list = first :: list\n        list",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.drop(1).dropRight(1)\n        List(last) ::: middle ::: List(first)",
    "        var list = newList\n        var temp = list.head\n        list = list.tail\n        list = list :+ temp\n        list = list.reverse\n        temp = list.head\n        list = list.tail\n        list = list :+ temp\n        list",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        List(last) ::: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        return List(last) ::: middle ::: List(first)",
    "        var list = newList\n        var temp = list.head\n        list = list.tail\n        list = list :+ temp\n        list",
    "        var list = newList\n        var first = list.head\n        var last = list.last\n        list = list.drop(1)\n        list = list.dropRight(1)\n        list = last :: list\n        list = list ::: List(first)\n        return list",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        return List(last) ::: middle ::: List(first)"
  ]
}