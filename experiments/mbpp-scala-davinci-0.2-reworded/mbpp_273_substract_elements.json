{
  "name": "mbpp_273_substract_elements",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    def substractElements(test_tup1 : Long, test_tup2 : Long) : Long = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_273_substract_elements.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(substractElements((10l, 4l, 5l), (2l, 5l, 18l)) == (8l, -1l, -13l));\n    assert(substractElements((11l, 2l, 3l), (24l, 45l, 16l)) == (-13l, -43l, -13l));\n    assert(substractElements((7l, 18l, 9l), (10l, 11l, 12l)) == (-3l, 7l, -3l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        return test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = tup1 - tup2\n        return result",
    "        return test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        test_tup1 - test_tup2",
    "        val tup1 = (1,2,3,4,5,6,7,8,9,10)\n        val tup2 = (10,9,8,7,6,5,4,3,2,1)\n        val tup3 = tup1.zip(tup2).map(x => x._1 - x._2)\n        tup3(test_tup1.toInt - 1)",
    "        test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        var result = test_tup1 - test_tup2\n        return result",
    "        test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        val tup1 = (1, 2, 3, 4, 5)\n        val tup2 = (5, 4, 3, 2, 1)\n        val tup3 = tup1.productIterator.zip(tup2.productIterator).map(x => x._1.asInstanceOf[Long] - x._2.asInstanceOf[Long]).toList\n        tup3(test_tup1.toInt) - tup3(test_tup2.toInt)",
    "        return test_tup1 - test_tup2",
    "        test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        test_tup1 - test_tup2",
    "        test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        test_tup1 - test_tup2",
    "        test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        test_tup1 - test_tup2",
    "        test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        test_tup1 - test_tup2",
    "        test_tup1 - test_tup2",
    "        test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        val tup1 = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n        val tup2 = (10, 9, 8, 7, 6, 5, 4, 3, 2, 1)\n        val tup3 = tup1.productIterator.toList.map(_.asInstanceOf[Int])\n        val tup4 = tup2.productIterator.toList.map(_.asInstanceOf[Int])\n        val tup5 = tup3.zip(tup4).map(x => x._1 - x._2)\n        tup5(test_tup1.toInt - 1) + tup5(test_tup2.toInt - 1)",
    "        return test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        test_tup1 - test_tup2",
    "        test_tup1 - test_tup2",
    "        test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        test_tup1 - test_tup2",
    "        test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        test_tup1 - test_tup2",
    "        test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2",
    "        test_tup1 - test_tup2",
    "        return test_tup1 - test_tup2"
  ]
}