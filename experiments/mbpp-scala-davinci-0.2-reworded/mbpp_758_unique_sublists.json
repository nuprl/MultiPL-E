{
  "name": "mbpp_758_unique_sublists",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_758_unique_sublists.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var list2 = list1.asInstanceOf[List[Any]]\n        var map = Map[Any, Int]()\n        for (i <- 0 until list2.length) {\n            var tuple = list2(i).asInstanceOf[Tuple2[Any, Any]]\n            if (map.contains(tuple)) {\n                map(tuple) += 1\n            } else {\n                map += (tuple -> 1)\n            }\n        }\n        return map",
    "        val list2 = list1.asInstanceOf[List[Any]]\n        val map = Map[Any, Int]()\n        for (i <- list2) {\n            if (map.contains(i)) {\n                map(i) += 1\n            }\n            else {\n                map += (i -> 1)\n            }\n        }\n        map",
    "        val list2 = list1.asInstanceOf[List[Any]]\n        val map = Map[Any, Int]()\n        for (i <- list2) {\n            if (map.contains(i)) {\n                map(i) = map(i) + 1\n            } else {\n                map(i) = 1\n            }\n        }\n        map",
    "        var map = Map[Any, Int]()\n        for (i <- list1.asInstanceOf[List[Any]]) {\n            if (map.contains(i)) {\n                map(i) += 1\n            }\n            else {\n                map += (i -> 1)\n            }\n        }\n        map",
    "        var list2 = ListBuffer[Any]()\n        var map = Map[Any, Int]()\n        for (i <- 0 until list1.asInstanceOf[ListBuffer[Any]].length) {\n            if (list1.asInstanceOf[ListBuffer[Any]].apply(i).isInstanceOf[ListBuffer[Any]]) {\n                list2 += list1.asInstanceOf[ListBuffer[Any]].apply(i).asInstanceOf[ListBuffer[Any]]\n            }\n        }\n        for (i <- 0 until list2.length) {\n            var count = 0\n            for (j <- 0 until list2.length) {\n                if (list2.apply(i).asInstanceOf[ListBuffer[Any]] == list2.apply(j).asInstanceOf[ListBuffer[Any]]) {\n                    count += 1\n                }\n            }\n            map += (list2.apply(i).asInstanceOf[ListBuffer[Any]] -> count)\n        }\n        return map",
    "        val list = list1.asInstanceOf[List[Any]]\n        val map = Map[Any, Int]()\n        for (i <- list) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        map",
    "        var map = Map[Any, Int]()\n        for (i <- list1.asInstanceOf[List[Any]]) {\n            if (map.contains(i)) {\n                map(i) += 1\n            }\n            else {\n                map(i) = 1\n            }\n        }\n        map",
    "        // Your code here",
    "        var map = Map[Any, Int]()\n        for (i <- 0 to list1.asInstanceOf[List[Any]].length - 1) {\n            if (map.contains(list1.asInstanceOf[List[Any]].apply(i))) {\n                map += (list1.asInstanceOf[List[Any]].apply(i) -> (map.apply(list1.asInstanceOf[List[Any]].apply(i)) + 1))\n            } else {\n                map += (list1.asInstanceOf[List[Any]].apply(i) -> 1)\n            }\n        }\n        map",
    "        val list = list1.asInstanceOf[List[Any]]\n        val map = new HashMap[Any, Int]\n        for (x <- list) {\n            if (map.contains(x)) map(x) += 1\n            else map(x) = 1\n        }\n        map",
    "        val list = list1.asInstanceOf[List[Any]]\n        val map = new HashMap[Any, Int]()\n        for (elem <- list) {\n            val tuple = elem.asInstanceOf[List[Any]].toSet\n            if (map.contains(tuple)) map(tuple) += 1\n            else map(tuple) = 1\n        }\n        map",
    "        val list2 = list1.asInstanceOf[List[Any]]\n        val map = new HashMap[Any, Int]\n        for (i <- list2) {\n            if (map.contains(i)) map(i) += 1 else map(i) = 1\n        }\n        map",
    "        var map = Map[Any, Int]()\n        for (i <- list1.asInstanceOf[List[Any]]) {\n            if (map.contains(i)) {\n                map(i) += 1\n            }\n            else {\n                map += (i -> 1)\n            }\n        }\n        return map",
    "        var map = Map[Any, Int]()\n        list1 match {\n            case list : List[Any] => {\n                for (item <- list) {\n                    if (map.contains(item)) {\n                        map(item) = map(item) + 1\n                    } else {\n                        map(item) = 1\n                    }\n                }\n            }\n            case _ => {\n                if (map.contains(list1)) {\n                    map(list1) = map(list1) + 1\n                } else {\n                    map(list1) = 1\n                }\n            }\n        }\n        map",
    "        val list = list1.asInstanceOf[List[Any]]\n        val map = Map[Any, Int]()\n        for (i <- list) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        map",
    "        var map = Map[Any, Int]()\n        for (x <- list1.asInstanceOf[List[Any]]) {\n            if (map.contains(x)) {\n                map(x) += 1\n            } else {\n                map(x) = 1\n            }\n        }\n        map",
    "        var map = new HashMap[Any, Int]()\n        for (i <- 0 to list1.length - 1) {\n            if (map.contains(list1(i))) {\n                map(list1(i)) += 1\n            } else {\n                map(list1(i)) = 1\n            }\n        }\n        return map",
    "        var list2 = list1.asInstanceOf[List[Any]]\n        var map = Map[Any, Int]()\n        for (i <- list2) {\n            if (map.contains(i)) map(i) += 1\n            else map += (i -> 1)\n        }\n        map",
    "        var map = Map[Any, Int]()\n        for (i <- list1.asInstanceOf[List[Any]]) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        map",
    "        var map = Map[Any, Int]()\n        for (i <- list1.asInstanceOf[List[Any]]) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map += (i -> 1)\n            }\n        }\n        map"
  ]
}