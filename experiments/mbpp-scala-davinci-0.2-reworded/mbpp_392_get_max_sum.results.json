{
  "name": "mbpp_392_get_max_sum",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_392_get_max_sum.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        val cache = new HashMap[Long, Long]()\n        def getMaxSum(n : Long) : Long = {\n            if (n < 12) n\n            else {\n                if (cache.contains(n)) cache(n)\n                else {\n                    val max = max(getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5), n)\n                    cache(n) = max\n                    max\n                }\n            }\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510132,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpo4gcxhub.scala:12:30 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                    \u001b[33mval\u001b[0m \u001b[36mmax\u001b[0m = max(getMaxSum(n / \u001b[31m2\u001b[0m) + getMaxSum(n / \u001b[31m3\u001b[0m) + getMaxSum(n / \u001b[31m4\u001b[0m) + getMaxSum(n / \u001b[31m5\u001b[0m), n)\n\u001b[31m\u001b[31m   |\u001b[0m                              ^\u001b[0m\n\u001b[31m   |\u001b[0m                              Recursive \u001b[33mvalue\u001b[0m \u001b[35mmax\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n < 12) return n\n        val cache = new HashMap[Long, Long]\n        def getMaxSumHelper(n : Long) : Long = {\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSumHelper(n / 2) + getMaxSumHelper(n / 3) + getMaxSumHelper(n / 4) + getMaxSumHelper(n / 5))\n            cache(n) = result\n            return result\n        }\n        getMaxSumHelper(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510137,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.StackOverflowError\n\tat scala.runtime.Statics.anyHash(Statics.java:124)\n\tat scala.collection.mutable.HashMap.contains(HashMap.scala:78)\n\tat Problem$.getMaxSumHelper$1(tmpq7eqq72h.scala:9)\n\tat Problem$.getMaxSumHelper$1(tmpq7eqq72h.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmpq7eqq72h.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmpq7eqq72h.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmpq7eqq72h.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmpq7eqq72h.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmpq7eqq72h.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmpq7eqq72h.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmpq7eqq72h.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmpq7eqq72h.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmpq7eqq72h.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmpq7eqq72h.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmpq7eqq72h.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmpq7eqq72h.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmpq7eqq72h.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmpq7eqq72h.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmpq7eqq72h.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmpq7eqq72h.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmpq7eqq72h.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmpq7eqq72h.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmpq7eqq72h.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmpq7eqq72h.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmpq7eqq72h.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmpq7eqq72h.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmpq7eqq72h.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmpq7eqq72h.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmpq7eqq72h.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmpq7eqq72h.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmpq7eqq72h.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmpq7eqq72h.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmpq7eqq72h.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmpq7eqq72h.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmpq7eqq72h.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmpq7eqq72h.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmpq7eqq72h.scala:10)\n\tat Problem$.getMaxSum",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n < 12) return n\n            if (cache.contains(n)) return cache(n)\n            val result = max(getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5), n)\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510137,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp_cmakpom.scala:17)\n\tat Problem.main(tmp_cmakpom.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n < 12) return n\n            if (cache.contains(n)) return cache(n)\n            val sum = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n) = sum\n            return sum\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510137,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp17nnf1wk.scala:17)\n\tat Problem.main(tmp17nnf1wk.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n < 12) n\n            else {\n                if (cache.contains(n)) cache(n)\n                else {\n                    val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n                    cache(n) = result\n                    result\n                }\n            }\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510137,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpu2cc_qtq.scala:21)\n\tat Problem.main(tmpu2cc_qtq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n <= 0) return 0\n        val cache = new Array[Long](n.toInt + 1)\n        def getMaxSum(n : Long, cache : Array[Long]) : Long = {\n            if (n <= 0) return 0\n            if (cache(n.toInt) != 0) return cache(n.toInt)\n            val result = max(n, getMaxSum(n / 2, cache) + getMaxSum(n / 3, cache) + getMaxSum(n / 4, cache) + getMaxSum(n / 5, cache))\n            cache(n.toInt) = result\n            result\n        }\n        getMaxSum(n, cache)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510137,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n <= 0) return 0\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n <= 0) return 0\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510137,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n == 0) 0\n        else {\n            val a = getMaxSum(n / 2)\n            val b = getMaxSum(n / 3)\n            val c = getMaxSum(n / 4)\n            val d = getMaxSum(n / 5)\n            max(a + b + c + d, n)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510137,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n == 0) return 0\n        val dp = Array.fill(n.toInt + 1)(0L)\n        for (i <- 1 to n.toInt) {\n            dp(i) = max(dp(i / 2) + dp(i / 3) + dp(i / 4) + dp(i / 5), i)\n        }\n        dp(n.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        val cache = new HashMap[Long, Long]()\n        def getMaxSumRec(n : Long) : Long = {\n            if (n < 12) return n\n            if (cache.contains(n)) return cache(n)\n            val result = max(getMaxSumRec(n / 2) + getMaxSumRec(n / 3) + getMaxSumRec(n / 4) + getMaxSumRec(n / 5), n)\n            cache(n) = result\n            return result\n        }\n        return getMaxSumRec(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510137,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpxw64ky1u.scala:17)\n\tat Problem.main(tmpxw64ky1u.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n < 12) n\n            else if (cache.contains(n)) cache(n)\n            else {\n                val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n                cache(n) = result\n                result\n            }\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510137,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpsaxv8910.scala:19)\n\tat Problem.main(tmpsaxv8910.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n <= 0) return 0\n        val map = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n <= 0) return 0\n            if (map.contains(n)) return map(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            map(n) = result\n            result\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510137,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n == 0) 0\n            else if (cache.contains(n)) cache(n)\n            else {\n                val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n                cache += (n -> result)\n                result\n            }\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n <= 0) return 0\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n <= 0) return 0\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510137,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n == 0) 0\n        else {\n            val a = getMaxSum(n / 2)\n            val b = getMaxSum(n / 3)\n            val c = getMaxSum(n / 4)\n            val d = getMaxSum(n / 5)\n            max(a + b + c + d, n)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510137,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n == 0) 0\n        else {\n            var max = n\n            for (i <- 2 to 5) {\n                val temp = getMaxSum(n / i)\n                if (temp > max) max = temp\n            }\n            max\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510137,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpguaoknxp.scala:17)\n\tat Problem.main(tmpguaoknxp.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        var map = Map[Long, Long]()\n        def getMaxSum(n : Long) : Long = {\n            if (n <= 0) 0\n            else if (map.contains(n)) map(n)\n            else {\n                val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n                map += (n -> result)\n                result\n            }\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n <= 0) 0\n            else if (cache.contains(n)) cache(n)\n            else {\n                val sum = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n                cache(n) = sum\n                sum\n            }\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510137,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n <= 0) return 0\n        if (n == 1) return 1\n        var max = n\n        if (n % 2 == 0) max = max(max, getMaxSum(n / 2))\n        if (n % 3 == 0) max = max(max, getMaxSum(n / 3))\n        if (n % 4 == 0) max = max(max, getMaxSum(n / 4))\n        if (n % 5 == 0) max = max(max, getMaxSum(n / 5))\n        return max\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510134,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmp19ljebnj.scala:9:30 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mif\u001b[0m (n % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m) max = max(max, getMaxSum(n / \u001b[31m2\u001b[0m))\n\u001b[31m\u001b[31m  |\u001b[0m                              ^^^\u001b[0m\n\u001b[31m  |\u001b[0m                              \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmp19ljebnj.scala:10:30 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mif\u001b[0m (n % \u001b[31m3\u001b[0m == \u001b[31m0\u001b[0m) max = max(max, getMaxSum(n / \u001b[31m3\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                              \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmp19ljebnj.scala:11:30 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (n % \u001b[31m4\u001b[0m == \u001b[31m0\u001b[0m) max = max(max, getMaxSum(n / \u001b[31m4\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                              \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmp19ljebnj.scala:12:30 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mif\u001b[0m (n % \u001b[31m5\u001b[0m == \u001b[31m0\u001b[0m) max = max(max, getMaxSum(n / \u001b[31m5\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                              \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        var cache = new HashMap[Long, Long]()\n        def getMaxSum(n : Long) : Long = {\n            if (n < 12) return n\n            if (cache.contains(n)) return cache(n)\n            var max = max(getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5), n)\n            cache += (n -> max)\n            return max\n        }\n        return getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510134,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp9hg1fl94.scala:10:22 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m            \u001b[33mvar\u001b[0m \u001b[36mmax\u001b[0m = max(getMaxSum(n / \u001b[31m2\u001b[0m) + getMaxSum(n / \u001b[31m3\u001b[0m) + getMaxSum(n / \u001b[31m4\u001b[0m) + getMaxSum(n / \u001b[31m5\u001b[0m), n)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                      Recursive \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n <= 0) return 0\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n <= 0) return 0\n            if (cache.contains(n)) return cache(n)\n            val sum = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n) = sum\n            sum\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123019,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n == 0) 0\n        else {\n            val a = getMaxSum(n / 2)\n            val b = getMaxSum(n / 3)\n            val c = getMaxSum(n / 4)\n            val d = getMaxSum(n / 5)\n            max(n, a + b + c + d)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123018,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n <= 0) 0\n            else if (cache.contains(n)) cache(n)\n            else {\n                val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n                cache(n) = result\n                result\n            }\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123019,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n <= 0) 0\n        else {\n            val a = getMaxSum(n / 2)\n            val b = getMaxSum(n / 3)\n            val c = getMaxSum(n / 4)\n            val d = getMaxSum(n / 5)\n            val e = max(a + b + c + d, n)\n            e\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123019,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n < 12) return n\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n < 12) return n\n            if (cache.contains(n)) return cache(n)\n            val result = max(getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5), n)\n            cache(n) = result\n            return result\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123019,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp23rkupud.scala:18)\n\tat Problem.main(tmp23rkupud.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n == 0) return 0\n        val a = getMaxSum(n / 2)\n        val b = getMaxSum(n / 3)\n        val c = getMaxSum(n / 4)\n        val d = getMaxSum(n / 5)\n        val e = a + b + c + d\n        if (e > n) e else n\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123018,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n < 12) return n\n        val map = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (map.contains(n)) return map(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            map(n) = result\n            result\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123019,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.StackOverflowError\n\tat scala.runtime.BoxesRunTime.boxToLong(BoxesRunTime.java:67)\n\tat Problem$.getMaxSum$1(tmpwcrybbpa.scala:9)\n\tat Problem$.getMaxSum$1(tmpwcrybbpa.scala:10)\n\tat Problem$.getMaxSum$1(tmpwcrybbpa.scala:10)\n\tat Problem$.getMaxSum$1(tmpwcrybbpa.scala:10)\n\tat Problem$.getMaxSum$1(tmpwcrybbpa.scala:10)\n\tat Problem$.getMaxSum$1(tmpwcrybbpa.scala:10)\n\tat Problem$.getMaxSum$1(tmpwcrybbpa.scala:10)\n\tat Problem$.getMaxSum$1(tmpwcrybbpa.scala:10)\n\tat Problem$.getMaxSum$1(tmpwcrybbpa.scala:10)\n\tat Problem$.getMaxSum$1(tmpwcrybbpa.scala:10)\n\tat Problem$.getMaxSum$1(tmpwcrybbpa.scala:10)\n\tat Problem$.getMaxSum$1(tmpwcrybbpa.scala:10)\n\tat Problem$.getMaxSum$1(tmpwcrybbpa.scala:10)\n\tat Problem$.getMaxSum$1(tmpwcrybbpa.scala:10)\n\tat Problem$.getMaxSum$1(tmpwcrybbpa.scala:10)\n\tat Problem$.getMaxSum$1(tmpwcrybbpa.scala:10)\n\tat Problem$.getMaxSum$1(tmpwcrybbpa.scala:10)\n\tat Problem$.getMaxSum$1(tmpwcrybbpa.scala:10)\n\tat Problem$.getMaxSum$1(tmpwcrybbpa.scala:10)\n\tat Problem$.getMaxSum$1(tmpwcrybbpa.scala:10)\n\tat Problem$.getMaxSum$1(tmpwcrybbpa.scala:10)\n\tat Problem$.getMaxSum$1(tmpwcrybbpa.scala:10)\n\tat Problem$.getMaxSum$1(tmpwcrybbpa.scala:10)\n\tat Problem$.getMaxSum$1(tmpwcrybbpa.scala:10)\n\tat Problem$.getMaxSum$1(tmpwcrybbpa.scala:10)\n\tat Problem$.getMaxSum$1(tmpwcrybbpa.scala:10)\n\tat Problem$.getMaxSum$1(tmpwcrybbpa.scala:10)\n\tat Problem$.getMaxSum$1(tmpwcrybbpa.scala:10)\n\tat Problem$.getMaxSum$1(tmpwcrybbpa.scala:10)\n\tat Problem$.getMaxSum$1(tmpwcrybbpa.scala:10)\n\tat Problem$.getMaxSum$1(tmpwcrybbpa.scala:10)\n\tat Problem$.getMaxSum$1(tmpwcrybbpa.scala:10)\n\tat Problem$.getMaxSum$1(tmpwcrybbpa.scala:10)\n\tat Problem$.getMaxSum$1(tmpwcrybbpa.scala:10)\n\tat Problem$.getMaxSum$1(tmpwcrybbpa.scala:10)\n\tat Problem$.getMaxSum$1(tmpwcrybbpa.scala:10)\n\tat Problem$.getMaxSum$1(tmpwcrybbpa.scala:10)\n\tat Problem$.getMaxSum$1(tmpwcrybbpa.scala:10)\n\tat Problem$.getMaxSum$1(tmpwcrybbpa.scala:10)\n\tat Problem$.getMaxSum$1(tmpwcrybbpa.scala:10)\n\tat Problem$.getMaxSum$1(tmpwcrybbpa.scala:10)\n\tat",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n < 12) return n\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n < 12) return n\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123019,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpf3ewstib.scala:18)\n\tat Problem.main(tmpf3ewstib.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n <= 0) 0\n        else {\n            val maxSum = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            maxSum\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123018,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n < 12) return n\n        val map = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n < 12) return n\n            if (map.contains(n)) return map(n)\n            val result = max(getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5), n)\n            map += (n -> result)\n            result\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123019,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpeixq8lnx.scala:18)\n\tat Problem.main(tmpeixq8lnx.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n == 0) 0\n        else {\n            val a = getMaxSum(n / 2)\n            val b = getMaxSum(n / 3)\n            val c = getMaxSum(n / 4)\n            val d = getMaxSum(n / 5)\n            max(a + b + c + d, n)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510137,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n < 12) return n\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123019,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.StackOverflowError\n\tat scala.runtime.Statics.anyHash(Statics.java:124)\n\tat scala.collection.mutable.HashMap.contains(HashMap.scala:78)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:9)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:1",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        var memo = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n < 12) n\n            else {\n                if (!memo.contains(n)) {\n                    memo(n) = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n                }\n                memo(n)\n            }\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123019,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp60oxkmrc.scala:19)\n\tat Problem.main(tmp60oxkmrc.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n < 12) return n\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n < 12) return n\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123019,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpf3ewstib.scala:18)\n\tat Problem.main(tmpf3ewstib.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n < 12) return n\n        val dp = Array.fill(n.toInt + 1)(0L)\n        for (i <- 1 to n.toInt) {\n            dp(i) = max(dp(i / 2) + dp(i / 3) + dp(i / 4) + dp(i / 5), i)\n        }\n        return dp(n.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123019,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp6wo74p9_.scala:15)\n\tat Problem.main(tmp6wo74p9_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n <= 0) 0\n        else {\n            val a = getMaxSum(n / 2)\n            val b = getMaxSum(n / 3)\n            val c = getMaxSum(n / 4)\n            val d = getMaxSum(n / 5)\n            val e = max(a + b + c + d, n)\n            e\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123019,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n < 12) return n\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123018,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmps4_l0bds.scala:17)\n\tat Problem.main(tmps4_l0bds.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n <= 0) return 0\n        val dp = new Array[Long](n.toInt + 1)\n        dp(0) = 0\n        dp(1) = 1\n        for (i <- 2 to n.toInt) {\n            val a = dp(i / 2)\n            val b = dp(i / 3)\n            val c = dp(i / 4)\n            val d = dp(i / 5)\n            dp(i) = max(a + b + c + d, i)\n        }\n        dp(n.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123019,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n < 12) return n\n        val cache = new HashMap[Long, Long]\n        def f(n : Long) : Long = {\n            if (n < 12) return n\n            if (cache.contains(n)) return cache(n)\n            val result = max(f(n / 2) + f(n / 3) + f(n / 4) + f(n / 5), n)\n            cache(n) = result\n            return result\n        }\n        f(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123019,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpsz_e_13o.scala:18)\n\tat Problem.main(tmpsz_e_13o.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n < 12) n\n            else {\n                if (cache.contains(n)) cache(n)\n                else {\n                    val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n                    cache(n) = result\n                    result\n                }\n            }\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510137,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpu2cc_qtq.scala:21)\n\tat Problem.main(tmpu2cc_qtq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n <= 0) return 0\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n <= 0) return 0\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510137,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n == 0) return 0\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123019,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n == 0) 0\n            else if (cache.contains(n)) cache(n)\n            else {\n                val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n                cache(n) = result\n                result\n            }\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123018,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n < 12) return n\n        val dp = Array.fill(n.toInt + 1)(0L)\n        for (i <- 1 to n.toInt) {\n            dp(i) = max(dp(i / 2) + dp(i / 3) + dp(i / 4) + dp(i / 5), i)\n        }\n        dp(n.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123019,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpx1__kl33.scala:15)\n\tat Problem.main(tmpx1__kl33.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n <= 0) return 0\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n <= 0) return 0\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510137,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n == 0) return 0\n        var map = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (map.contains(n)) return map(n)\n            val max = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            map += (n -> max)\n            max\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpbgixl24g.scala:10:22 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mmax\u001b[0m = max(n, getMaxSum(n / \u001b[31m2\u001b[0m) + getMaxSum(n / \u001b[31m3\u001b[0m) + getMaxSum(n / \u001b[31m4\u001b[0m) + getMaxSum(n / \u001b[31m5\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                      Recursive \u001b[33mvalue\u001b[0m \u001b[35mmax\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n == 0) return 0\n        val a = getMaxSum(n / 2)\n        val b = getMaxSum(n / 3)\n        val c = getMaxSum(n / 4)\n        val d = getMaxSum(n / 5)\n        val e = n\n        return max(a + b + c + d, e)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123018,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n == 0) 0\n        else {\n            val a = getMaxSum(n / 2)\n            val b = getMaxSum(n / 3)\n            val c = getMaxSum(n / 4)\n            val d = getMaxSum(n / 5)\n            val e = n\n            max(a + b + c + d, e)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123018,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n == 0) return 0\n        val a = getMaxSum(n / 2)\n        val b = getMaxSum(n / 3)\n        val c = getMaxSum(n / 4)\n        val d = getMaxSum(n / 5)\n        max(a + b + c + d, n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123018,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n < 12) return n\n            if (cache.contains(n)) return cache(n)\n            val result = max(getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5), n)\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510137,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp_cmakpom.scala:17)\n\tat Problem.main(tmp_cmakpom.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n < 12) return n\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123019,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.StackOverflowError\n\tat scala.runtime.Statics.anyHash(Statics.java:124)\n\tat scala.collection.mutable.HashMap.contains(HashMap.scala:78)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:9)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:1",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n == 0) return 0\n        if (n == 1) return 1\n        val cache = new Array[Long](n.toInt + 1)\n        cache(0) = 0\n        cache(1) = 1\n        def getMaxSum(n : Long, cache : Array[Long]) : Long = {\n            if (cache(n.toInt) != 0) return cache(n.toInt)\n            val result = max(n, getMaxSum(n / 2, cache) + getMaxSum(n / 3, cache) + getMaxSum(n / 4, cache) + getMaxSum(n / 5, cache))\n            cache(n.toInt) = result\n            result\n        }\n        getMaxSum(n, cache)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123026,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem$.getMaxSum$1(tmpuyuqmd05.scala:13)\n\tat Problem$.getMaxSum$1(tmpuyuqmd05.scala:13)\n\tat Problem$.getMaxSum$1(tmpuyuqmd05.scala:13)\n\tat Problem$.getMaxSum$1(tmpuyuqmd05.scala:13)\n\tat Problem$.getMaxSum$1(tmpuyuqmd05.scala:13)\n\tat Problem$.getMaxSum$1(tmpuyuqmd05.scala:13)\n\tat Problem$.getMaxSum$1(tmpuyuqmd05.scala:13)\n\tat Problem$.getMaxSum$1(tmpuyuqmd05.scala:13)\n\tat Problem$.getMaxSum$1(tmpuyuqmd05.scala:13)\n\tat Problem$.getMaxSum$1(tmpuyuqmd05.scala:13)\n\tat Problem$.getMaxSum$1(tmpuyuqmd05.scala:13)\n\tat Problem$.getMaxSum$1(tmpuyuqmd05.scala:13)\n\tat Problem$.getMaxSum$1(tmpuyuqmd05.scala:13)\n\tat Problem$.getMaxSum$1(tmpuyuqmd05.scala:13)\n\tat Problem$.getMaxSum$1(tmpuyuqmd05.scala:13)\n\tat Problem$.getMaxSum$1(tmpuyuqmd05.scala:13)\n\tat Problem$.getMaxSum$1(tmpuyuqmd05.scala:13)\n\tat Problem$.getMaxSum$1(tmpuyuqmd05.scala:13)\n\tat Problem$.getMaxSum$1(tmpuyuqmd05.scala:13)\n\tat Problem$.getMaxSum$1(tmpuyuqmd05.scala:13)\n\tat Problem$.getMaxSum$1(tmpuyuqmd05.scala:13)\n\tat Problem$.getMaxSum$1(tmpuyuqmd05.scala:13)\n\tat Problem$.getMaxSum$1(tmpuyuqmd05.scala:13)\n\tat Problem$.getMaxSum$1(tmpuyuqmd05.scala:13)\n\tat Problem$.getMaxSum$1(tmpuyuqmd05.scala:13)\n\tat Problem$.getMaxSum$1(tmpuyuqmd05.scala:13)\n\tat Problem$.getMaxSum$1(tmpuyuqmd05.scala:13)\n\tat Problem$.getMaxSum$1(tmpuyuqmd05.scala:13)\n\tat Problem$.getMaxSum$1(tmpuyuqmd05.scala:13)\n\tat Problem$.getMaxSum$1(tmpuyuqmd05.scala:13)\n\tat Problem$.getMaxSum$1(tmpuyuqmd05.scala:13)\n\tat Problem$.getMaxSum$1(tmpuyuqmd05.scala:13)\n\tat Problem$.getMaxSum$1(tmpuyuqmd05.scala:13)\n\tat Problem$.getMaxSum$1(tmpuyuqmd05.scala:13)\n\tat Problem$.getMaxSum$1(tmpuyuqmd05.scala:13)\n\tat Problem$.getMaxSum$1(tmpuyuqmd05.scala:13)\n\tat Problem$.getMaxSum$1(tmpuyuqmd05.scala:13)\n\tat Problem$.getMaxSum$1(tmpuyuqmd05.scala:13)\n\tat Problem$.getMaxSum$1(tmpuyuqmd05.scala:13)\n\tat Problem$.getMaxSum$1(tmpuyuqmd05.scala:13)\n\tat Problem$.getMaxSum$1(tmpuyuqmd05.scala:13)\n\tat Problem$.getMaxSum$1(tmpuyuqmd05.scala:13)\n\tat Problem$.getMa",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n == 0) 0\n        else {\n            val a = getMaxSum(n / 2)\n            val b = getMaxSum(n / 3)\n            val c = getMaxSum(n / 4)\n            val d = getMaxSum(n / 5)\n            max(n, a + b + c + d)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123018,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n <= 0) return 0\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123028,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.StackOverflowError\n\tat scala.runtime.BoxesRunTime.boxToLong(BoxesRunTime.java:67)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:9)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n <= 5) return n\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123028,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.StackOverflowError\n\tat scala.runtime.Statics.anyHash(Statics.java:124)\n\tat scala.collection.mutable.HashMap.contains(HashMap.scala:78)\n\tat Problem$.getMaxSum$1(tmpg9ph5i41.scala:9)\n\tat Problem$.getMaxSum$1(tmpg9ph5i41.scala:10)\n\tat Problem$.getMaxSum$1(tmpg9ph5i41.scala:10)\n\tat Problem$.getMaxSum$1(tmpg9ph5i41.scala:10)\n\tat Problem$.getMaxSum$1(tmpg9ph5i41.scala:10)\n\tat Problem$.getMaxSum$1(tmpg9ph5i41.scala:10)\n\tat Problem$.getMaxSum$1(tmpg9ph5i41.scala:10)\n\tat Problem$.getMaxSum$1(tmpg9ph5i41.scala:10)\n\tat Problem$.getMaxSum$1(tmpg9ph5i41.scala:10)\n\tat Problem$.getMaxSum$1(tmpg9ph5i41.scala:10)\n\tat Problem$.getMaxSum$1(tmpg9ph5i41.scala:10)\n\tat Problem$.getMaxSum$1(tmpg9ph5i41.scala:10)\n\tat Problem$.getMaxSum$1(tmpg9ph5i41.scala:10)\n\tat Problem$.getMaxSum$1(tmpg9ph5i41.scala:10)\n\tat Problem$.getMaxSum$1(tmpg9ph5i41.scala:10)\n\tat Problem$.getMaxSum$1(tmpg9ph5i41.scala:10)\n\tat Problem$.getMaxSum$1(tmpg9ph5i41.scala:10)\n\tat Problem$.getMaxSum$1(tmpg9ph5i41.scala:10)\n\tat Problem$.getMaxSum$1(tmpg9ph5i41.scala:10)\n\tat Problem$.getMaxSum$1(tmpg9ph5i41.scala:10)\n\tat Problem$.getMaxSum$1(tmpg9ph5i41.scala:10)\n\tat Problem$.getMaxSum$1(tmpg9ph5i41.scala:10)\n\tat Problem$.getMaxSum$1(tmpg9ph5i41.scala:10)\n\tat Problem$.getMaxSum$1(tmpg9ph5i41.scala:10)\n\tat Problem$.getMaxSum$1(tmpg9ph5i41.scala:10)\n\tat Problem$.getMaxSum$1(tmpg9ph5i41.scala:10)\n\tat Problem$.getMaxSum$1(tmpg9ph5i41.scala:10)\n\tat Problem$.getMaxSum$1(tmpg9ph5i41.scala:10)\n\tat Problem$.getMaxSum$1(tmpg9ph5i41.scala:10)\n\tat Problem$.getMaxSum$1(tmpg9ph5i41.scala:10)\n\tat Problem$.getMaxSum$1(tmpg9ph5i41.scala:10)\n\tat Problem$.getMaxSum$1(tmpg9ph5i41.scala:10)\n\tat Problem$.getMaxSum$1(tmpg9ph5i41.scala:10)\n\tat Problem$.getMaxSum$1(tmpg9ph5i41.scala:10)\n\tat Problem$.getMaxSum$1(tmpg9ph5i41.scala:10)\n\tat Problem$.getMaxSum$1(tmpg9ph5i41.scala:10)\n\tat Problem$.getMaxSum$1(tmpg9ph5i41.scala:10)\n\tat Problem$.getMaxSum$1(tmpg9ph5i41.scala:10)\n\tat Problem$.getMaxSum$1(tmpg9ph5i41.scala:10)\n\tat Problem$.getMaxSum$1(tmpg9ph5i41.scala:1",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n == 0) 0\n        else {\n            val a = getMaxSum(n / 2)\n            val b = getMaxSum(n / 3)\n            val c = getMaxSum(n / 4)\n            val d = getMaxSum(n / 5)\n            max(a + b + c + d, n)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510137,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n <= 0) return 0\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n <= 0) return 0\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510137,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n < 12) return n\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n < 12) return n\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123019,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpf3ewstib.scala:18)\n\tat Problem.main(tmpf3ewstib.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n == 0) return 0\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123019,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n <= 0) return 0\n        val memo = new HashMap[Long, Long]\n        def f(n : Long) : Long = {\n            if (n <= 0) return 0\n            if (memo.contains(n)) return memo(n)\n            val result = max(n, f(n / 2) + f(n / 3) + f(n / 4) + f(n / 5))\n            memo += (n -> result)\n            result\n        }\n        f(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123028,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n == 0) return 0\n        val a = getMaxSum(n / 2)\n        val b = getMaxSum(n / 3)\n        val c = getMaxSum(n / 4)\n        val d = getMaxSum(n / 5)\n        val e = n\n        return max(a + b + c + d, e)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123018,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n == 0) 0\n        else {\n            val a = getMaxSum(n / 2)\n            val b = getMaxSum(n / 3)\n            val c = getMaxSum(n / 4)\n            val d = getMaxSum(n / 5)\n            max(a + b + c + d, n)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510137,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n <= 0) return 0\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n <= 0) return 0\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510137,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n <= 0) 0\n            else if (cache.contains(n)) cache(n)\n            else {\n                val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n                cache += (n -> result)\n                result\n            }\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123028,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n <= 0) return 0\n        val cache = new Array[Long](n.toInt + 1)\n        cache(0) = 0\n        cache(1) = 1\n        for (i <- 2 to n.toInt) {\n            cache(i) = max(cache(i / 2) + cache(i / 3) + cache(i / 4) + cache(i / 5), i)\n        }\n        cache(n.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123028,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n < 0) 0\n            else if (cache.contains(n)) cache(n)\n            else {\n                val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n                cache(n) = result\n                result\n            }\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123028,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.StackOverflowError\n\tat scala.runtime.BoxesRunTime.boxToLong(BoxesRunTime.java:67)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:9)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n == 0) 0\n        else {\n            val a = getMaxSum(n / 2)\n            val b = getMaxSum(n / 3)\n            val c = getMaxSum(n / 4)\n            val d = getMaxSum(n / 5)\n            val e = n\n            max(a + b + c + d, e)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123018,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n < 12) n\n            else {\n                if (cache.contains(n)) cache(n)\n                else {\n                    val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n                    cache(n) = result\n                    result\n                }\n            }\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510137,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpu2cc_qtq.scala:21)\n\tat Problem.main(tmpu2cc_qtq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n == 0) 0\n        else {\n            val a = getMaxSum(n / 2)\n            val b = getMaxSum(n / 3)\n            val c = getMaxSum(n / 4)\n            val d = getMaxSum(n / 5)\n            val e = getMaxSum(n / 6)\n            val f = getMaxSum(n / 7)\n            val g = getMaxSum(n / 8)\n            val h = getMaxSum(n / 9)\n            val i = getMaxSum(n / 10)\n            val j = getMaxSum(n / 11)\n            val k = getMaxSum(n / 12)\n            val l = getMaxSum(n / 13)\n            val m = getMaxSum(n / 14)\n            val o = getMaxSum(n / 15)\n            val p = getMaxSum(n / 16)\n            val q = getMaxSum(n / 17)\n            val r = getMaxSum(n / 18)\n            val s = getMaxSum(n / 19)\n            val t = getMaxSum(n / 20)\n            val u = getMaxSum(n / 21)\n            val v = getMaxSum(n / 22)\n            val w = getMaxSum(n / 23)\n            val x = getMaxSum(n / 24)\n            val y = getMaxSum(n / 25)\n            val z = getMaxSum(n / 26)\n            val aa = getMaxSum(n / 27)\n            val ab = getMaxSum(n / 28)\n            val ac = getMaxSum(n / 29)\n            val ad = getMaxSum(n / 30)\n            val ae = getMaxSum(n / 31)\n            val af = getMaxSum(n / 32)\n            val ag = getMaxSum(n / 33)\n            val ah = getMaxSum(n / 34)\n            val ai = getMaxSum(n / 35)\n            val aj = getMaxSum(n / 36)\n            val ak = getMaxSum(n / 37)\n            val al = getMaxSum(n / 38)\n            val am = getMaxSum(n / 39)\n\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123028,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpn_6t_vpm.scala:55:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m55 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpn_6t_vpm.scala:54:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m54 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmpn_6t_vpm.scala:48:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m48 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n == 0) 0\n        else if (n == 1) 1\n        else {\n            val a = getMaxSum(n / 2)\n            val b = getMaxSum(n / 3)\n            val c = getMaxSum(n / 4)\n            val d = getMaxSum(n / 5)\n            val e = getMaxSum(n / 6)\n            val f = getMaxSum(n / 7)\n            val g = getMaxSum(n / 8)\n            val h = getMaxSum(n / 9)\n            val i = getMaxSum(n / 10)\n            val j = getMaxSum(n / 11)\n            val k = getMaxSum(n / 12)\n            val l = getMaxSum(n / 13)\n            val m = getMaxSum(n / 14)\n            val o = getMaxSum(n / 15)\n            val p = getMaxSum(n / 16)\n            val q = getMaxSum(n / 17)\n            val r = getMaxSum(n / 18)\n            val s = getMaxSum(n / 19)\n            val t = getMaxSum(n / 20)\n            val u = getMaxSum(n / 21)\n            val v = getMaxSum(n / 22)\n            val w = getMaxSum(n / 23)\n            val x = getMaxSum(n / 24)\n            val y = getMaxSum(n / 25)\n            val z = getMaxSum(n / 26)\n            val aa = getMaxSum(n / 27)\n            val ab = getMaxSum(n / 28)\n            val ac = getMaxSum(n / 29)\n            val ad = getMaxSum(n / 30)\n            val ae = getMaxSum(n / 31)\n            val af = getMaxSum(n / 32)\n            val ag = getMaxSum(n / 33)\n            val ah = getMaxSum(n / 34)\n            val ai = getMaxSum(n / 35)\n            val aj = getMaxSum(n / 36)\n            val ak = getMaxSum(n / 37)\n            val al = getMaxSum(n / 38)\n            val am\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123028,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpvuc6pu1x.scala:47:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpvuc6pu1x.scala:55:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m55 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvuc6pu1x.scala:54:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m54 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmpvuc6pu1x.scala:48:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m48 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n < 12) return n\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n < 12) return n\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123019,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpf3ewstib.scala:18)\n\tat Problem.main(tmpf3ewstib.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n == 0) return 0\n        val m = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n == 0) return 0\n            if (m.contains(n)) return m(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            m(n) = result\n            result\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123028,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n <= 0) return 0\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n <= 0) return 0\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510137,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n == 0) 0\n        else {\n            val sum = getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5)\n            if (sum > n) sum else n\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123028,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n == 0) return 0\n        val a = getMaxSum(n / 2)\n        val b = getMaxSum(n / 3)\n        val c = getMaxSum(n / 4)\n        val d = getMaxSum(n / 5)\n        val e = n\n        return max(a + b + c + d, e)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123018,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n < 12) return n\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123019,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.StackOverflowError\n\tat scala.runtime.Statics.anyHash(Statics.java:124)\n\tat scala.collection.mutable.HashMap.contains(HashMap.scala:78)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:9)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:1",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n <= 0) return 0\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n <= 0) return 0\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510137,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        val map = new HashMap[Long, Long]\n        def getMaxSumHelper(n : Long) : Long = {\n            if (n <= 0) return 0\n            if (map.contains(n)) return map(n)\n            val result = max(n, getMaxSumHelper(n / 2) + getMaxSumHelper(n / 3) + getMaxSumHelper(n / 4) + getMaxSumHelper(n / 5))\n            map(n) = result\n            result\n        }\n        getMaxSumHelper(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123028,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        val cache = new HashMap[Long, Long]\n        def getMaxSumHelper(n : Long) : Long = {\n            if (n == 0) 0\n            else if (cache.contains(n)) cache(n)\n            else {\n                val result = max(n, getMaxSumHelper(n / 2) + getMaxSumHelper(n / 3) + getMaxSumHelper(n / 4) + getMaxSumHelper(n / 5))\n                cache(n) = result\n                result\n            }\n        }\n        getMaxSumHelper(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123028,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n == 0) 0\n        else {\n            val a = getMaxSum(n / 2)\n            val b = getMaxSum(n / 3)\n            val c = getMaxSum(n / 4)\n            val d = getMaxSum(n / 5)\n            max(a + b + c + d, n)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510137,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n == 0) return 0\n        val a = getMaxSum(n / 2)\n        val b = getMaxSum(n / 3)\n        val c = getMaxSum(n / 4)\n        val d = getMaxSum(n / 5)\n        return max(n, a + b + c + d)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123028,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n <= 0) 0\n        else {\n            val half = getMaxSum(n / 2)\n            val third = getMaxSum(n / 3)\n            val fourth = getMaxSum(n / 4)\n            val fifth = getMaxSum(n / 5)\n            val sum = half + third + fourth + fifth\n            if (sum > n) sum\n            else n\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123028,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        val memo = new HashMap[Long, Long]\n        def getMaxSumHelper(n : Long) : Long = {\n            if (n == 0) return 0\n            if (memo.contains(n)) return memo(n)\n            val result = max(n, getMaxSumHelper(n / 2) + getMaxSumHelper(n / 3) + getMaxSumHelper(n / 4) + getMaxSumHelper(n / 5))\n            memo(n) = result\n            result\n        }\n        getMaxSumHelper(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123028,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n == 0) return 0\n        if (n == 1) return 1\n        val a = getMaxSum(n / 2)\n        val b = getMaxSum(n / 3)\n        val c = getMaxSum(n / 4)\n        val d = getMaxSum(n / 5)\n        val e = n\n        return max(a + b + c + d, e)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123028,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n <= 0) return 0\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n <= 0) return 0\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache += (n -> result)\n            result\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123029,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n <= 0) return 0\n        val cache = new Array[Long](n.toInt + 1)\n        def getMaxSum(n : Long) : Long = {\n            if (n <= 0) return 0\n            if (cache(n.toInt) != 0) return cache(n.toInt)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n.toInt) = result\n            result\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123028,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n <= 0) return 0\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n <= 0) return 0\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510137,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n < 12) return n\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123019,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.StackOverflowError\n\tat scala.runtime.Statics.anyHash(Statics.java:124)\n\tat scala.collection.mutable.HashMap.contains(HashMap.scala:78)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:9)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:1",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n == 0) 0\n        else {\n            val a = getMaxSum(n / 2)\n            val b = getMaxSum(n / 3)\n            val c = getMaxSum(n / 4)\n            val d = getMaxSum(n / 5)\n            val max = max(a + b + c + d, n)\n            max\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123025,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmprzv8d3d1.scala:12:22 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mmax\u001b[0m = max(a + b + c + d, n)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                      Recursive \u001b[33mvalue\u001b[0m \u001b[35mmax\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n < 12) return n\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123018,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmps4_l0bds.scala:17)\n\tat Problem.main(tmps4_l0bds.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n == 0) return 0\n        val a = getMaxSum(n / 2)\n        val b = getMaxSum(n / 3)\n        val c = getMaxSum(n / 4)\n        val d = getMaxSum(n / 5)\n        val e = max(a + b + c + d, n)\n        return e\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123028,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n < 12) n\n            else {\n                if (cache.contains(n)) cache(n)\n                else {\n                    val result = max(getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5), n)\n                    cache(n) = result\n                    result\n                }\n            }\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123029,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpvynaa11m.scala:21)\n\tat Problem.main(tmpvynaa11m.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        val cache = new HashMap[Long, Long]\n        def getMaxSumHelper(n : Long) : Long = {\n            if (n < 12) return n\n            if (cache.contains(n)) return cache(n)\n            val result = max(getMaxSumHelper(n / 2) + getMaxSumHelper(n / 3) + getMaxSumHelper(n / 4) + getMaxSumHelper(n / 5), n)\n            cache(n) = result\n            return result\n        }\n        getMaxSumHelper(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123029,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpgebs759k.scala:17)\n\tat Problem.main(tmpgebs759k.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n == 0) 0\n        else {\n            val a = getMaxSum(n / 2)\n            val b = getMaxSum(n / 3)\n            val c = getMaxSum(n / 4)\n            val d = getMaxSum(n / 5)\n            val e = n\n            max(a + b + c + d, e)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123018,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n <= 0) 0\n        else {\n            val cache = new HashMap[Long, Long]\n            def getMaxSum(n : Long) : Long = {\n                if (cache.contains(n)) cache(n)\n                else {\n                    val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n                    cache += (n -> result)\n                    result\n                }\n            }\n            getMaxSum(n)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123036,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.StackOverflowError\n\tat scala.runtime.BoxesRunTime.boxToLong(BoxesRunTime.java:67)\n\tat Problem$.getMaxSum$1(tmpi9bmjgg9.scala:10)\n\tat Problem$.getMaxSum$1(tmpi9bmjgg9.scala:12)\n\tat Problem$.getMaxSum$1(tmpi9bmjgg9.scala:12)\n\tat Problem$.getMaxSum$1(tmpi9bmjgg9.scala:12)\n\tat Problem$.getMaxSum$1(tmpi9bmjgg9.scala:12)\n\tat Problem$.getMaxSum$1(tmpi9bmjgg9.scala:12)\n\tat Problem$.getMaxSum$1(tmpi9bmjgg9.scala:12)\n\tat Problem$.getMaxSum$1(tmpi9bmjgg9.scala:12)\n\tat Problem$.getMaxSum$1(tmpi9bmjgg9.scala:12)\n\tat Problem$.getMaxSum$1(tmpi9bmjgg9.scala:12)\n\tat Problem$.getMaxSum$1(tmpi9bmjgg9.scala:12)\n\tat Problem$.getMaxSum$1(tmpi9bmjgg9.scala:12)\n\tat Problem$.getMaxSum$1(tmpi9bmjgg9.scala:12)\n\tat Problem$.getMaxSum$1(tmpi9bmjgg9.scala:12)\n\tat Problem$.getMaxSum$1(tmpi9bmjgg9.scala:12)\n\tat Problem$.getMaxSum$1(tmpi9bmjgg9.scala:12)\n\tat Problem$.getMaxSum$1(tmpi9bmjgg9.scala:12)\n\tat Problem$.getMaxSum$1(tmpi9bmjgg9.scala:12)\n\tat Problem$.getMaxSum$1(tmpi9bmjgg9.scala:12)\n\tat Problem$.getMaxSum$1(tmpi9bmjgg9.scala:12)\n\tat Problem$.getMaxSum$1(tmpi9bmjgg9.scala:12)\n\tat Problem$.getMaxSum$1(tmpi9bmjgg9.scala:12)\n\tat Problem$.getMaxSum$1(tmpi9bmjgg9.scala:12)\n\tat Problem$.getMaxSum$1(tmpi9bmjgg9.scala:12)\n\tat Problem$.getMaxSum$1(tmpi9bmjgg9.scala:12)\n\tat Problem$.getMaxSum$1(tmpi9bmjgg9.scala:12)\n\tat Problem$.getMaxSum$1(tmpi9bmjgg9.scala:12)\n\tat Problem$.getMaxSum$1(tmpi9bmjgg9.scala:12)\n\tat Problem$.getMaxSum$1(tmpi9bmjgg9.scala:12)\n\tat Problem$.getMaxSum$1(tmpi9bmjgg9.scala:12)\n\tat Problem$.getMaxSum$1(tmpi9bmjgg9.scala:12)\n\tat Problem$.getMaxSum$1(tmpi9bmjgg9.scala:12)\n\tat Problem$.getMaxSum$1(tmpi9bmjgg9.scala:12)\n\tat Problem$.getMaxSum$1(tmpi9bmjgg9.scala:12)\n\tat Problem$.getMaxSum$1(tmpi9bmjgg9.scala:12)\n\tat Problem$.getMaxSum$1(tmpi9bmjgg9.scala:12)\n\tat Problem$.getMaxSum$1(tmpi9bmjgg9.scala:12)\n\tat Problem$.getMaxSum$1(tmpi9bmjgg9.scala:12)\n\tat Problem$.getMaxSum$1(tmpi9bmjgg9.scala:12)\n\tat Problem$.getMaxSum$1(tmpi9bmjgg9.scala:12)\n\tat Problem$.getMaxSum$1(tmpi9bmjgg9.scala:12)\n\ta",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n < 12) return n\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123019,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.StackOverflowError\n\tat scala.runtime.Statics.anyHash(Statics.java:124)\n\tat scala.collection.mutable.HashMap.contains(HashMap.scala:78)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:9)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:1",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n <= 0) 0\n        else {\n            val maxSum = Array.fill(n.toInt + 1)(0L)\n            for (i <- 1 to n.toInt) {\n                val max = max(maxSum(i / 2) + maxSum(i / 3) + maxSum(i / 4) + maxSum(i / 5), i)\n                maxSum(i) = max\n            }\n            maxSum(n.toInt)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123032,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp2zeczskg.scala:10:26 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                \u001b[33mval\u001b[0m \u001b[36mmax\u001b[0m = max(maxSum(i / \u001b[31m2\u001b[0m) + maxSum(i / \u001b[31m3\u001b[0m) + maxSum(i / \u001b[31m4\u001b[0m) + maxSum(i / \u001b[31m5\u001b[0m), i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^\u001b[0m\n\u001b[31m   |\u001b[0m                          Recursive \u001b[33mvalue\u001b[0m \u001b[35mmax\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n == 0) 0\n        else {\n            val a = getMaxSum(n / 2)\n            val b = getMaxSum(n / 3)\n            val c = getMaxSum(n / 4)\n            val d = getMaxSum(n / 5)\n            max(a + b + c + d, n)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510137,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n == 0) 0\n        else {\n            val a = getMaxSum(n / 2)\n            val b = getMaxSum(n / 3)\n            val c = getMaxSum(n / 4)\n            val d = getMaxSum(n / 5)\n            val e = getMaxSum(n / 6)\n            max(a + b + c + d + e, n)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123036,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpnf0cw4m6.scala:17)\n\tat Problem.main(tmpnf0cw4m6.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n < 12) return n\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache += (n -> result)\n            result\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123038,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.StackOverflowError\n\tat scala.runtime.Statics.anyHashNumber(Statics.java:132)\n\tat scala.runtime.Statics.anyHash(Statics.java:124)\n\tat scala.collection.mutable.HashMap.contains(HashMap.scala:78)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:9)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n == 0) 0\n            else if (cache.contains(n)) cache(n)\n            else {\n                val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n                cache(n) = result\n                result\n            }\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123018,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n <= 0) return 0\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123028,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.StackOverflowError\n\tat scala.runtime.BoxesRunTime.boxToLong(BoxesRunTime.java:67)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:9)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n == 0) 0\n            else if (cache.contains(n)) cache(n)\n            else {\n                val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n                cache(n) = result\n                result\n            }\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123018,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n == 0) 0\n            else if (cache.contains(n)) cache(n)\n            else {\n                val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n                cache += (n -> result)\n                result\n            }\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n <= 0) return 0\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n <= 0) return 0\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510137,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n <= 0) 0\n        else {\n            val a = getMaxSum(n / 2)\n            val b = getMaxSum(n / 3)\n            val c = getMaxSum(n / 4)\n            val d = getMaxSum(n / 5)\n            max(a + b + c + d, n)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n <= 0) return 0\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123028,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.StackOverflowError\n\tat scala.runtime.BoxesRunTime.boxToLong(BoxesRunTime.java:67)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:9)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        val cache = new HashMap[Long, Long]()\n        def getMaxSumHelper(n : Long) : Long = {\n            if (n == 0) 0\n            else if (cache.contains(n)) cache(n)\n            else {\n                val result = max(n, getMaxSumHelper(n / 2) + getMaxSumHelper(n / 3) + getMaxSumHelper(n / 4) + getMaxSumHelper(n / 5))\n                cache += (n -> result)\n                result\n            }\n        }\n        getMaxSumHelper(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123038,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n <= 0) return 0\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n <= 0) return 0\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510137,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n < 12) return n\n            if (cache.contains(n)) return cache(n)\n            val result = max(getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5), n)\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510137,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp_cmakpom.scala:17)\n\tat Problem.main(tmp_cmakpom.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n <= 0) return 0\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n <= 0) return 0\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache += (n -> result)\n            result\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123029,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n <= 0) return 0\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n <= 0) return 0\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510137,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n <= 0) return 0\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n <= 0) return 0\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510137,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n < 12) return n\n        val cache = new HashMap[Long, Long]\n        def getMaxSumHelper(n : Long) : Long = {\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSumHelper(n / 2) + getMaxSumHelper(n / 3) + getMaxSumHelper(n / 4) + getMaxSumHelper(n / 5))\n            cache(n) = result\n            return result\n        }\n        getMaxSumHelper(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510137,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.StackOverflowError\n\tat scala.runtime.Statics.anyHash(Statics.java:124)\n\tat scala.collection.mutable.HashMap.contains(HashMap.scala:78)\n\tat Problem$.getMaxSumHelper$1(tmpq7eqq72h.scala:9)\n\tat Problem$.getMaxSumHelper$1(tmpq7eqq72h.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmpq7eqq72h.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmpq7eqq72h.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmpq7eqq72h.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmpq7eqq72h.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmpq7eqq72h.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmpq7eqq72h.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmpq7eqq72h.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmpq7eqq72h.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmpq7eqq72h.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmpq7eqq72h.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmpq7eqq72h.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmpq7eqq72h.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmpq7eqq72h.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmpq7eqq72h.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmpq7eqq72h.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmpq7eqq72h.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmpq7eqq72h.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmpq7eqq72h.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmpq7eqq72h.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmpq7eqq72h.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmpq7eqq72h.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmpq7eqq72h.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmpq7eqq72h.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmpq7eqq72h.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmpq7eqq72h.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmpq7eqq72h.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmpq7eqq72h.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmpq7eqq72h.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmpq7eqq72h.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmpq7eqq72h.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmpq7eqq72h.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmpq7eqq72h.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmpq7eqq72h.scala:10)\n\tat Problem$.getMaxSum",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n < 12) return n\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n < 12) return n\n            if (cache.contains(n)) return cache(n)\n            val result = max(getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5), n)\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123037,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpm1lee_bt.scala:18)\n\tat Problem.main(tmpm1lee_bt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n <= 0) 0\n            else if (cache.contains(n)) cache(n)\n            else {\n                val sum = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n                cache(n) = sum\n                sum\n            }\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510137,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n == 0) 0\n            else if (cache.contains(n)) cache(n)\n            else {\n                val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n                cache(n) = result\n                result\n            }\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123018,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n <= 0) 0\n        else if (n <= 5) n\n        else {\n            val a = getMaxSum(n / 2)\n            val b = getMaxSum(n / 3)\n            val c = getMaxSum(n / 4)\n            val d = getMaxSum(n / 5)\n            max(a + b + c + d, n)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n == 0) return 0\n        val a = getMaxSum(n / 2)\n        val b = getMaxSum(n / 3)\n        val c = getMaxSum(n / 4)\n        val d = getMaxSum(n / 5)\n        val max = max(a + b + c + d, n)\n        return max\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123034,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpqf8tnk1_.scala:11:18 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmax\u001b[0m = max(a + b + c + d, n)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35mmax\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n < 12) return n\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123019,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.StackOverflowError\n\tat scala.runtime.Statics.anyHash(Statics.java:124)\n\tat scala.collection.mutable.HashMap.contains(HashMap.scala:78)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:9)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:1",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n == 0) 0\n        else {\n            val a = getMaxSum(n / 2)\n            val b = getMaxSum(n / 3)\n            val c = getMaxSum(n / 4)\n            val d = getMaxSum(n / 5)\n            val e = n\n            max(a + b + c + d, e)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123018,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n <= 0) return 0\n        val memo = new Array[Long](n.toInt + 1)\n        def getMaxSum(n : Long, memo : Array[Long]) : Long = {\n            if (n <= 0) return 0\n            if (memo(n.toInt) != 0) return memo(n.toInt)\n            memo(n.toInt) = max(n, getMaxSum(n / 2, memo) + getMaxSum(n / 3, memo) + getMaxSum(n / 4, memo) + getMaxSum(n / 5, memo))\n            return memo(n.toInt)\n        }\n        return getMaxSum(n, memo)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        val memo = new Array[Long](n.toInt + 1)\n        def getMaxSumHelper(n : Long) : Long = {\n            if (n <= 0) 0\n            else if (memo(n.toInt) != 0) memo(n.toInt)\n            else {\n                val result = max(n, getMaxSumHelper(n / 2) + getMaxSumHelper(n / 3) + getMaxSumHelper(n / 4) + getMaxSumHelper(n / 5))\n                memo(n.toInt) = result\n                result\n            }\n        }\n        getMaxSumHelper(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n < 0) 0\n            else if (cache.contains(n)) cache(n)\n            else {\n                val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n                cache(n) = result\n                result\n            }\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123028,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.StackOverflowError\n\tat scala.runtime.BoxesRunTime.boxToLong(BoxesRunTime.java:67)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:9)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n <= 0) return 0\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n <= 0) return 0\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510137,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n < 0) return 0\n            if (cache.contains(n)) return cache(n)\n            val result = max(getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5), n)\n            cache += n -> result\n            result\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123038,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.StackOverflowError\n\tat scala.runtime.BoxesRunTime.boxToLong(BoxesRunTime.java:67)\n\tat Problem$.getMaxSum$1(tmpyh4r79eu.scala:9)\n\tat Problem$.getMaxSum$1(tmpyh4r79eu.scala:10)\n\tat Problem$.getMaxSum$1(tmpyh4r79eu.scala:10)\n\tat Problem$.getMaxSum$1(tmpyh4r79eu.scala:10)\n\tat Problem$.getMaxSum$1(tmpyh4r79eu.scala:10)\n\tat Problem$.getMaxSum$1(tmpyh4r79eu.scala:10)\n\tat Problem$.getMaxSum$1(tmpyh4r79eu.scala:10)\n\tat Problem$.getMaxSum$1(tmpyh4r79eu.scala:10)\n\tat Problem$.getMaxSum$1(tmpyh4r79eu.scala:10)\n\tat Problem$.getMaxSum$1(tmpyh4r79eu.scala:10)\n\tat Problem$.getMaxSum$1(tmpyh4r79eu.scala:10)\n\tat Problem$.getMaxSum$1(tmpyh4r79eu.scala:10)\n\tat Problem$.getMaxSum$1(tmpyh4r79eu.scala:10)\n\tat Problem$.getMaxSum$1(tmpyh4r79eu.scala:10)\n\tat Problem$.getMaxSum$1(tmpyh4r79eu.scala:10)\n\tat Problem$.getMaxSum$1(tmpyh4r79eu.scala:10)\n\tat Problem$.getMaxSum$1(tmpyh4r79eu.scala:10)\n\tat Problem$.getMaxSum$1(tmpyh4r79eu.scala:10)\n\tat Problem$.getMaxSum$1(tmpyh4r79eu.scala:10)\n\tat Problem$.getMaxSum$1(tmpyh4r79eu.scala:10)\n\tat Problem$.getMaxSum$1(tmpyh4r79eu.scala:10)\n\tat Problem$.getMaxSum$1(tmpyh4r79eu.scala:10)\n\tat Problem$.getMaxSum$1(tmpyh4r79eu.scala:10)\n\tat Problem$.getMaxSum$1(tmpyh4r79eu.scala:10)\n\tat Problem$.getMaxSum$1(tmpyh4r79eu.scala:10)\n\tat Problem$.getMaxSum$1(tmpyh4r79eu.scala:10)\n\tat Problem$.getMaxSum$1(tmpyh4r79eu.scala:10)\n\tat Problem$.getMaxSum$1(tmpyh4r79eu.scala:10)\n\tat Problem$.getMaxSum$1(tmpyh4r79eu.scala:10)\n\tat Problem$.getMaxSum$1(tmpyh4r79eu.scala:10)\n\tat Problem$.getMaxSum$1(tmpyh4r79eu.scala:10)\n\tat Problem$.getMaxSum$1(tmpyh4r79eu.scala:10)\n\tat Problem$.getMaxSum$1(tmpyh4r79eu.scala:10)\n\tat Problem$.getMaxSum$1(tmpyh4r79eu.scala:10)\n\tat Problem$.getMaxSum$1(tmpyh4r79eu.scala:10)\n\tat Problem$.getMaxSum$1(tmpyh4r79eu.scala:10)\n\tat Problem$.getMaxSum$1(tmpyh4r79eu.scala:10)\n\tat Problem$.getMaxSum$1(tmpyh4r79eu.scala:10)\n\tat Problem$.getMaxSum$1(tmpyh4r79eu.scala:10)\n\tat Problem$.getMaxSum$1(tmpyh4r79eu.scala:10)\n\tat Problem$.getMaxSum$1(tmpyh4r79eu.scala:10)\n\tat",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n <= 0) 0\n        else {\n            val a = getMaxSum(n / 2)\n            val b = getMaxSum(n / 3)\n            val c = getMaxSum(n / 4)\n            val d = getMaxSum(n / 5)\n            max(a + b + c + d, n)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n == 0) 0\n            else if (cache.contains(n)) cache(n)\n            else {\n                val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n                cache(n) = result\n                result\n            }\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123018,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        val cache = new HashMap[Long, Long]()\n        def getMaxSum(n : Long) : Long = {\n            if (n <= 0) return 0\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache += (n -> result)\n            result\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n == 0) return 0\n        val a = getMaxSum(n / 2)\n        val b = getMaxSum(n / 3)\n        val c = getMaxSum(n / 4)\n        val d = getMaxSum(n / 5)\n        val e = a + b + c + d\n        if (e > n) e else n\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123018,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n <= 0) return 0\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n <= 0) return 0\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510137,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n == 0) return 0\n        val a = getMaxSum(n / 2)\n        val b = getMaxSum(n / 3)\n        val c = getMaxSum(n / 4)\n        val d = getMaxSum(n / 5)\n        val max = max(a + b + c + d, n)\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123034,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp8ul9m9hq.scala:11:18 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmax\u001b[0m = max(a + b + c + d, n)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35mmax\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n <= 0) 0\n        else {\n            val a = getMaxSum(n / 2)\n            val b = getMaxSum(n / 3)\n            val c = getMaxSum(n / 4)\n            val d = getMaxSum(n / 5)\n            val e = getMaxSum(n / 6)\n            val f = getMaxSum(n / 7)\n            val g = getMaxSum(n / 8)\n            val h = getMaxSum(n / 9)\n            val i = getMaxSum(n / 10)\n            val j = getMaxSum(n / 11)\n            val k = getMaxSum(n / 12)\n            val l = getMaxSum(n / 13)\n            val m = getMaxSum(n / 14)\n            val o = getMaxSum(n / 15)\n            val p = getMaxSum(n / 16)\n            val q = getMaxSum(n / 17)\n            val r = getMaxSum(n / 18)\n            val s = getMaxSum(n / 19)\n            val t = getMaxSum(n / 20)\n            val u = getMaxSum(n / 21)\n            val v = getMaxSum(n / 22)\n            val w = getMaxSum(n / 23)\n            val x = getMaxSum(n / 24)\n            val y = getMaxSum(n / 25)\n            val z = getMaxSum(n / 26)\n            val aa = getMaxSum(n / 27)\n            val ab = getMaxSum(n / 28)\n            val ac = getMaxSum(n / 29)\n            val ad = getMaxSum(n / 30)\n            val ae = getMaxSum(n / 31)\n            val af = getMaxSum(n / 32)\n            val ag = getMaxSum(n / 33)\n            val ah = getMaxSum(n / 34)\n            val ai = getMaxSum(n / 35)\n            val aj = getMaxSum(n / 36)\n            val ak = getMaxSum(n / 37)\n            val al = getMaxSum(n / 38)\n            val am = getMaxSum(n / 39)\n\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123037,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmphxnaao2z.scala:55:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m55 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphxnaao2z.scala:54:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m54 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmphxnaao2z.scala:48:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m48 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n == 0) return 0\n        val a = getMaxSum(n / 2)\n        val b = getMaxSum(n / 3)\n        val c = getMaxSum(n / 4)\n        val d = getMaxSum(n / 5)\n        val e = a + b + c + d\n        if (e > n) e else n\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123018,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        val cache = new HashMap[Long, Long]\n        def getMaxSumHelper(n : Long) : Long = {\n            if (n < 12) return n\n            if (cache.contains(n)) return cache(n)\n            val result = max(getMaxSumHelper(n / 2) + getMaxSumHelper(n / 3) + getMaxSumHelper(n / 4) + getMaxSumHelper(n / 5), n)\n            cache(n) = result\n            return result\n        }\n        return getMaxSumHelper(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123038,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpoceqchhm.scala:17)\n\tat Problem.main(tmpoceqchhm.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n <= 0) return 0\n        val cache = new HashMap[Long, Long]\n        def getMaxSumHelper(n : Long) : Long = {\n            if (n <= 0) return 0\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSumHelper(n / 2) + getMaxSumHelper(n / 3) + getMaxSumHelper(n / 4) + getMaxSumHelper(n / 5))\n            cache += (n -> result)\n            result\n        }\n        getMaxSumHelper(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123038,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n == 0) 0\n        else {\n            val m = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            m\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123038,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        val map = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n == 0) 0\n            else if (map.contains(n)) map(n)\n            else {\n                val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n                map(n) = result\n                result\n            }\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123038,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n < 12) return n\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123019,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.StackOverflowError\n\tat scala.runtime.Statics.anyHash(Statics.java:124)\n\tat scala.collection.mutable.HashMap.contains(HashMap.scala:78)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:9)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:1",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n < 12) return n\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n < 12) return n\n            if (cache.contains(n)) return cache(n)\n            val result = max(getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5), n)\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123037,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpm1lee_bt.scala:18)\n\tat Problem.main(tmpm1lee_bt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n < 12) return n\n        val dp = Array.fill(n.toInt + 1)(0L)\n        for (i <- 1 to n.toInt) {\n            dp(i) = max(dp(i / 2) + dp(i / 3) + dp(i / 4) + dp(i / 5), i)\n        }\n        dp(n.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123019,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpx1__kl33.scala:15)\n\tat Problem.main(tmpx1__kl33.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n < 12) return n\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123019,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.StackOverflowError\n\tat scala.runtime.Statics.anyHash(Statics.java:124)\n\tat scala.collection.mutable.HashMap.contains(HashMap.scala:78)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:9)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:1",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n == 0) return 0\n        var maxSum = n\n        for (i <- 2 to 5) {\n            val sum = getMaxSum(n / i)\n            if (sum > maxSum) maxSum = sum\n        }\n        return maxSum\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123038,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpjy6o5j0j.scala:15)\n\tat Problem.main(tmpjy6o5j0j.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        val cache = new HashMap[Long, Long]\n        def getMaxSumHelper(n : Long) : Long = {\n            if (n < 12) return n\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSumHelper(n / 2) + getMaxSumHelper(n / 3) + getMaxSumHelper(n / 4) + getMaxSumHelper(n / 5))\n            cache(n) = result\n            return result\n        }\n        getMaxSumHelper(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123038,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpft_6sxgw.scala:17)\n\tat Problem.main(tmpft_6sxgw.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n < 12) return n\n            if (cache.contains(n)) return cache(n)\n            val result = max(getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5), n)\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510137,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp_cmakpom.scala:17)\n\tat Problem.main(tmp_cmakpom.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n < 12) return n\n        val memo = new HashMap[Long, Long]\n        def getMaxSumHelper(n : Long) : Long = {\n            if (memo.contains(n)) return memo(n)\n            val result = max(getMaxSumHelper(n / 2) + getMaxSumHelper(n / 3) + getMaxSumHelper(n / 4) + getMaxSumHelper(n / 5), n)\n            memo(n) = result\n            return result\n        }\n        getMaxSumHelper(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123038,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.StackOverflowError\n\tat scala.runtime.Statics.anyHashNumber(Statics.java:132)\n\tat scala.runtime.Statics.anyHash(Statics.java:124)\n\tat scala.collection.mutable.HashMap.contains(HashMap.scala:78)\n\tat Problem$.getMaxSumHelper$1(tmpjvfa79_p.scala:9)\n\tat Problem$.getMaxSumHelper$1(tmpjvfa79_p.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmpjvfa79_p.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmpjvfa79_p.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmpjvfa79_p.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmpjvfa79_p.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmpjvfa79_p.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmpjvfa79_p.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmpjvfa79_p.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmpjvfa79_p.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmpjvfa79_p.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmpjvfa79_p.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmpjvfa79_p.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmpjvfa79_p.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmpjvfa79_p.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmpjvfa79_p.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmpjvfa79_p.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmpjvfa79_p.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmpjvfa79_p.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmpjvfa79_p.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmpjvfa79_p.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmpjvfa79_p.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmpjvfa79_p.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmpjvfa79_p.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmpjvfa79_p.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmpjvfa79_p.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmpjvfa79_p.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmpjvfa79_p.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmpjvfa79_p.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmpjvfa79_p.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmpjvfa79_p.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmpjvfa79_p.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmpjvfa79_p.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmpjvfa79_p.scala:10)\n\tat Problem$.getM",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n == 0) 0\n        else {\n            val a = getMaxSum(n / 2)\n            val b = getMaxSum(n / 3)\n            val c = getMaxSum(n / 4)\n            val d = getMaxSum(n / 5)\n            val e = n\n            max(a + b + c + d, e)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123018,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        val cache = new HashMap[Long, Long]\n        def getMaxSumHelper(n : Long) : Long = {\n            if (n < 12) return n\n            if (cache.contains(n)) return cache(n)\n            val sum = max(getMaxSumHelper(n / 2) + getMaxSumHelper(n / 3) + getMaxSumHelper(n / 4) + getMaxSumHelper(n / 5), n)\n            cache += (n -> sum)\n            return sum\n        }\n        getMaxSumHelper(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123039,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpihbsgw_u.scala:17)\n\tat Problem.main(tmpihbsgw_u.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n == 0) 0\n            else if (cache.contains(n)) cache(n)\n            else {\n                val max = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n                cache(n) = max\n                max\n            }\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123038,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp19w7858k.scala:11:26 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m                \u001b[33mval\u001b[0m \u001b[36mmax\u001b[0m = max(n, getMaxSum(n / \u001b[31m2\u001b[0m) + getMaxSum(n / \u001b[31m3\u001b[0m) + getMaxSum(n / \u001b[31m4\u001b[0m) + getMaxSum(n / \u001b[31m5\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                          ^\u001b[0m\n\u001b[31m   |\u001b[0m                          Recursive \u001b[33mvalue\u001b[0m \u001b[35mmax\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n <= 0) 0\n        else {\n            val a = getMaxSum(n / 2)\n            val b = getMaxSum(n / 3)\n            val c = getMaxSum(n / 4)\n            val d = getMaxSum(n / 5)\n            max(n, a + b + c + d)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n == 0) 0\n            else if (cache.contains(n)) cache(n)\n            else {\n                val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n                cache(n) = result\n                result\n            }\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123018,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n == 0) return 0\n        val a = getMaxSum(n / 2)\n        val b = getMaxSum(n / 3)\n        val c = getMaxSum(n / 4)\n        val d = getMaxSum(n / 5)\n        val max = max(a + b + c + d, n)\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123034,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp8ul9m9hq.scala:11:18 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmax\u001b[0m = max(a + b + c + d, n)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35mmax\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n == 0) 0\n        else if (n == 1) 1\n        else {\n            var max = n\n            val maxSum = new Array[Long](n.toInt + 1)\n            maxSum(0) = 0\n            maxSum(1) = 1\n            for (i <- 2 to n.toInt) {\n                max = max(maxSum(i / 2) + maxSum(i / 3) + maxSum(i / 4) + maxSum(i / 5), i)\n                maxSum(i) = max\n            }\n            max\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123041,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmp9f6qmf09.scala:14:22 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m                max = max(maxSum(i / \u001b[31m2\u001b[0m) + maxSum(i / \u001b[31m3\u001b[0m) + maxSum(i / \u001b[31m4\u001b[0m) + maxSum(i / \u001b[31m5\u001b[0m), i)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n == 0) 0\n        else {\n            val a = getMaxSum(n / 2)\n            val b = getMaxSum(n / 3)\n            val c = getMaxSum(n / 4)\n            val d = getMaxSum(n / 5)\n            val e = n\n            max(a + b + c + d, e)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123018,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n < 12) return n\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n < 12) return n\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123019,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpf3ewstib.scala:18)\n\tat Problem.main(tmpf3ewstib.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n == 0) 0\n        else {\n            val a = getMaxSum(n / 2)\n            val b = getMaxSum(n / 3)\n            val c = getMaxSum(n / 4)\n            val d = getMaxSum(n / 5)\n            max(a + b + c + d, n)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510137,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n <= 0) return 0\n        var dp = new Array[Long](n.toInt + 1)\n        dp(0) = 0\n        for (i <- 1 to n.toInt) {\n            dp(i) = max(dp(i / 2) + dp(i / 3) + dp(i / 4) + dp(i / 5), i)\n        }\n        dp(n.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123045,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n <= 0) return 0\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n <= 0) return 0\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510137,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n < 12) return n\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123018,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmps4_l0bds.scala:17)\n\tat Problem.main(tmps4_l0bds.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n < 0) return 0\n        if (n == 0) return 0\n        if (n == 1) return 1\n        val cache = new Array[Long](n.toInt + 1)\n        cache(0) = 0\n        cache(1) = 1\n        for (i <- 2 to n.toInt) {\n            cache(i) = max(cache(i / 2) + cache(i / 3) + cache(i / 4) + cache(i / 5), i)\n        }\n        return cache(n.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        val cache = new Array[Long](n.toInt + 1)\n        def getMaxSum(n : Long, cache : Array[Long]) : Long = {\n            if (n == 0) return 0\n            if (cache(n.toInt) != 0) return cache(n.toInt)\n            val maxSum = max(n, getMaxSum(n / 2, cache) + getMaxSum(n / 3, cache) + getMaxSum(n / 4, cache) + getMaxSum(n / 5, cache))\n            cache(n.toInt) = maxSum\n            return maxSum\n        }\n        getMaxSum(n, cache)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n <= 0) return 0\n        var cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n <= 0) return 0\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123047,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n < 12) return n\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123018,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmps4_l0bds.scala:17)\n\tat Problem.main(tmps4_l0bds.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n == 0) 0\n        else {\n            val sum = getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5)\n            if (sum > n) sum else n\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123028,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n < 12) return n\n        val cache = new Array[Long](n.toInt + 1)\n        cache(0) = 0\n        cache(1) = 1\n        cache(2) = 2\n        cache(3) = 3\n        cache(4) = 4\n        cache(5) = 5\n        cache(6) = 6\n        cache(7) = 7\n        cache(8) = 8\n        cache(9) = 9\n        cache(10) = 10\n        cache(11) = 11\n        for (i <- 12 to n.toInt) {\n            cache(i) = max(cache(i / 2) + cache(i / 3) + cache(i / 4) + cache(i / 5), i)\n        }\n        return cache(n.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123046,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpda1cwamj.scala:26)\n\tat Problem.main(tmpda1cwamj.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n == 0) return 0\n        val a = getMaxSum(n / 2)\n        val b = getMaxSum(n / 3)\n        val c = getMaxSum(n / 4)\n        val d = getMaxSum(n / 5)\n        val e = n\n        return max(a + b + c + d, e)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123018,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n <= 0) 0\n        else {\n            val cache = new HashMap[Long, Long]\n            def getMaxSum(n : Long) : Long = {\n                if (n <= 0) 0\n                else if (cache.contains(n)) cache(n)\n                else {\n                    val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n                    cache(n) = result\n                    result\n                }\n            }\n            getMaxSum(n)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n < 12) return n\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123019,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.StackOverflowError\n\tat scala.runtime.Statics.anyHash(Statics.java:124)\n\tat scala.collection.mutable.HashMap.contains(HashMap.scala:78)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:9)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:1",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        val cache = new HashMap[Long, Long]\n        def getMaxSumHelper(n : Long) : Long = {\n            if (n == 0) 0\n            else if (cache.contains(n)) cache(n)\n            else {\n                val result = max(n, getMaxSumHelper(n / 2) + getMaxSumHelper(n / 3) + getMaxSumHelper(n / 4) + getMaxSumHelper(n / 5))\n                cache(n) = result\n                result\n            }\n        }\n        getMaxSumHelper(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123028,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n == 0) 0\n            else if (cache.contains(n)) cache(n)\n            else {\n                val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n                cache += (n -> result)\n                result\n            }\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n == 0) 0\n        else {\n            val a = getMaxSum(n / 2)\n            val b = getMaxSum(n / 3)\n            val c = getMaxSum(n / 4)\n            val d = getMaxSum(n / 5)\n            val e = getMaxSum(n / 6)\n            max(n, a + b + c + d + e)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123046,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp1ezjfdju.scala:17)\n\tat Problem.main(tmp1ezjfdju.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n < 12) return n\n        val memo = Array.fill(n.toInt + 1)(0L)\n        def getMaxSum(n : Long) : Long = {\n            if (n < 12) return n\n            if (memo(n.toInt) != 0) return memo(n.toInt)\n            val result = max(getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5), n)\n            memo(n.toInt) = result\n            result\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123047,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpny466vm7.scala:18)\n\tat Problem.main(tmpny466vm7.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        val cache = new HashMap[Long, Long]\n        def getMaxSumHelper(n : Long) : Long = {\n            if (n <= 0) 0\n            else if (cache.contains(n)) cache(n)\n            else {\n                val result = max(n, getMaxSumHelper(n / 2) + getMaxSumHelper(n / 3) + getMaxSumHelper(n / 4) + getMaxSumHelper(n / 5))\n                cache(n) = result\n                result\n            }\n        }\n        getMaxSumHelper(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n == 0) return 0\n        val a = getMaxSum(n / 2)\n        val b = getMaxSum(n / 3)\n        val c = getMaxSum(n / 4)\n        val d = getMaxSum(n / 5)\n        return max(a + b + c + d, n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n < 12) n\n            else if (cache.contains(n)) cache(n)\n            else {\n                val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n                cache += (n -> result)\n                result\n            }\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123047,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpxp_ei1kw.scala:19)\n\tat Problem.main(tmpxp_ei1kw.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n <= 0) return 0\n        val cache = new HashMap[Long, Long]\n        def getMaxSumHelper(n : Long) : Long = {\n            if (n <= 0) return 0\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSumHelper(n / 2) + getMaxSumHelper(n / 3) + getMaxSumHelper(n / 4) + getMaxSumHelper(n / 5))\n            cache(n) = result\n            result\n        }\n        getMaxSumHelper(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123047,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n <= 5) return n\n        val maxSum = new Array[Long](n.toInt + 1)\n        maxSum(0) = 0\n        maxSum(1) = 1\n        maxSum(2) = 2\n        maxSum(3) = 3\n        maxSum(4) = 4\n        maxSum(5) = 5\n        for (i <- 6 to n.toInt) {\n            maxSum(i) = max(maxSum(i / 2) + maxSum(i / 3) + maxSum(i / 4) + maxSum(i / 5), i)\n        }\n        return maxSum(n.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123047,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n < 12) return n\n            if (cache.contains(n)) return cache(n)\n            val result = max(getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5), n)\n            cache(n) = result\n            return result\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123047,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpgvj_8e59.scala:17)\n\tat Problem.main(tmpgvj_8e59.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n == 0) return 0\n        val maxSum = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n        return maxSum\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n < 12) return n\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123019,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.StackOverflowError\n\tat scala.runtime.Statics.anyHash(Statics.java:124)\n\tat scala.collection.mutable.HashMap.contains(HashMap.scala:78)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:9)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:1",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n <= 0) return 0\n        val memo = new Array[Long](n.toInt + 1)\n        def getMaxSum(n : Long) : Long = {\n            if (n <= 0) return 0\n            if (memo(n.toInt) != 0) return memo(n.toInt)\n            memo(n.toInt) = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            return memo(n.toInt)\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n == 0) return 0\n        val a = getMaxSum(n / 2)\n        val b = getMaxSum(n / 3)\n        val c = getMaxSum(n / 4)\n        val d = getMaxSum(n / 5)\n        val e = a + b + c + d\n        if (e > n) e else n\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123018,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n == 0) 0\n        else {\n            val a = getMaxSum(n / 2)\n            val b = getMaxSum(n / 3)\n            val c = getMaxSum(n / 4)\n            val d = getMaxSum(n / 5)\n            max(a + b + c + d, n)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510137,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n < 12) return n\n        val cache = Array.fill[Long](n.toInt + 1)(0)\n        cache(0) = 0\n        cache(1) = 1\n        cache(2) = 2\n        cache(3) = 3\n        cache(4) = 4\n        cache(5) = 5\n        cache(6) = 6\n        cache(7) = 7\n        cache(8) = 8\n        cache(9) = 9\n        cache(10) = 10\n        cache(11) = 11\n        for (i <- 12 to n.toInt) {\n            cache(i) = max(cache(i / 2) + cache(i / 3) + cache(i / 4) + cache(i / 5), i)\n        }\n        cache(n.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123047,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpolop_w5_.scala:26)\n\tat Problem.main(tmpolop_w5_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n < 12) return n\n        val dp = Array.fill(n.toInt + 1)(0L)\n        for (i <- 1 to n.toInt) {\n            dp(i) = max(dp(i / 2) + dp(i / 3) + dp(i / 4) + dp(i / 5), i)\n        }\n        dp(n.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123019,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpx1__kl33.scala:15)\n\tat Problem.main(tmpx1__kl33.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n == 0) 0\n        else {\n            val a = getMaxSum(n / 2)\n            val b = getMaxSum(n / 3)\n            val c = getMaxSum(n / 4)\n            val d = getMaxSum(n / 5)\n            max(n, a + b + c + d)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123018,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n == 0) 0\n        else {\n            val a = getMaxSum(n / 2)\n            val b = getMaxSum(n / 3)\n            val c = getMaxSum(n / 4)\n            val d = getMaxSum(n / 5)\n            max(a + b + c + d, n)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510137,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n <= 0) return 0\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n <= 0) return 0\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510137,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        val cache = new HashMap[Long, Long]\n        def getMaxSumHelper(n : Long) : Long = {\n            if (cache.contains(n)) cache(n)\n            else {\n                val result = max(n, getMaxSumHelper(n / 2) + getMaxSumHelper(n / 3) + getMaxSumHelper(n / 4) + getMaxSumHelper(n / 5))\n                cache += (n -> result)\n                result\n            }\n        }\n        getMaxSumHelper(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123047,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.StackOverflowError\n\tat scala.runtime.BoxesRunTime.boxToLong(BoxesRunTime.java:67)\n\tat Problem$.getMaxSumHelper$1(tmpcxo4i3ju.scala:8)\n\tat Problem$.getMaxSumHelper$1(tmpcxo4i3ju.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmpcxo4i3ju.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmpcxo4i3ju.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmpcxo4i3ju.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmpcxo4i3ju.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmpcxo4i3ju.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmpcxo4i3ju.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmpcxo4i3ju.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmpcxo4i3ju.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmpcxo4i3ju.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmpcxo4i3ju.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmpcxo4i3ju.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmpcxo4i3ju.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmpcxo4i3ju.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmpcxo4i3ju.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmpcxo4i3ju.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmpcxo4i3ju.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmpcxo4i3ju.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmpcxo4i3ju.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmpcxo4i3ju.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmpcxo4i3ju.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmpcxo4i3ju.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmpcxo4i3ju.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmpcxo4i3ju.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmpcxo4i3ju.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmpcxo4i3ju.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmpcxo4i3ju.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmpcxo4i3ju.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmpcxo4i3ju.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmpcxo4i3ju.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmpcxo4i3ju.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmpcxo4i3ju.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmpcxo4i3ju.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmpcxo4i3ju.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmpcxo4i3ju.scala:10)\n\tat Problem$.getMaxSum",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n < 12) return n\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123018,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmps4_l0bds.scala:17)\n\tat Problem.main(tmps4_l0bds.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n <= 0) return 0\n        if (n == 1) return 1\n        if (n == 2) return 2\n        if (n == 3) return 3\n        if (n == 4) return 4\n        if (n == 5) return 5\n        val cache = new Array[Long](n.toInt + 1)\n        cache(1) = 1\n        cache(2) = 2\n        cache(3) = 3\n        cache(4) = 4\n        cache(5) = 5\n        def getMaxSum(n : Long, cache : Array[Long]) : Long = {\n            if (n <= 0) return 0\n            if (cache(n.toInt) != 0) return cache(n.toInt)\n            val sum = max(getMaxSum(n / 2, cache) + getMaxSum(n / 3, cache) + getMaxSum(n / 4, cache) + getMaxSum(n / 5, cache), n)\n            cache(n.toInt) = sum\n            sum\n        }\n        getMaxSum(n, cache)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123047,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n == 0) return 0\n        val a = getMaxSum(n / 2)\n        val b = getMaxSum(n / 3)\n        val c = getMaxSum(n / 4)\n        val d = getMaxSum(n / 5)\n        val e = max(a + b + c + d, n)\n        e\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123047,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n < 12) n\n            else {\n                if (cache.contains(n)) cache(n)\n                else {\n                    val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n                    cache(n) = result\n                    result\n                }\n            }\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510137,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpu2cc_qtq.scala:21)\n\tat Problem.main(tmpu2cc_qtq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n == 0) 0\n        else {\n            val a = getMaxSum(n / 2)\n            val b = getMaxSum(n / 3)\n            val c = getMaxSum(n / 4)\n            val d = getMaxSum(n / 5)\n            val max = max(a + b + c + d, n)\n            max\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123025,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmprzv8d3d1.scala:12:22 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mmax\u001b[0m = max(a + b + c + d, n)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                      Recursive \u001b[33mvalue\u001b[0m \u001b[35mmax\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        val cache = new HashMap[Long, Long]()\n        def getMaxSum(n : Long) : Long = {\n            if (n < 12) n\n            else {\n                if (cache.contains(n)) cache(n)\n                else {\n                    val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n                    cache += (n -> result)\n                    result\n                }\n            }\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123047,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpec2oow77.scala:21)\n\tat Problem.main(tmpec2oow77.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n == 0) 0\n        else {\n            val a = getMaxSum(n / 2)\n            val b = getMaxSum(n / 3)\n            val c = getMaxSum(n / 4)\n            val d = getMaxSum(n / 5)\n            val max = max(a + b + c + d, n)\n            max\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123025,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmprzv8d3d1.scala:12:22 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mmax\u001b[0m = max(a + b + c + d, n)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                      Recursive \u001b[33mvalue\u001b[0m \u001b[35mmax\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n < 12) return n\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache += (n -> result)\n            result\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123038,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.StackOverflowError\n\tat scala.runtime.Statics.anyHashNumber(Statics.java:132)\n\tat scala.runtime.Statics.anyHash(Statics.java:124)\n\tat scala.collection.mutable.HashMap.contains(HashMap.scala:78)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:9)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n < 12) return n\n        val dp = Array.ofDim[Long](n.toInt + 1)\n        dp(0) = 0\n        dp(1) = 1\n        dp(2) = 2\n        dp(3) = 3\n        dp(4) = 4\n        dp(5) = 5\n        dp(6) = 6\n        dp(7) = 7\n        dp(8) = 8\n        dp(9) = 9\n        dp(10) = 10\n        dp(11) = 11\n        for (i <- 12 to n.toInt) {\n            dp(i) = max(dp(i / 2) + dp(i / 3) + dp(i / 4) + dp(i / 5), i)\n        }\n        dp(n.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123048,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpiyic522f.scala:26)\n\tat Problem.main(tmpiyic522f.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n <= 0) return 0\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123028,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.StackOverflowError\n\tat scala.runtime.BoxesRunTime.boxToLong(BoxesRunTime.java:67)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:9)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n < 12) return n\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n < 12) return n\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123019,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpf3ewstib.scala:18)\n\tat Problem.main(tmpf3ewstib.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    }
  ]
}