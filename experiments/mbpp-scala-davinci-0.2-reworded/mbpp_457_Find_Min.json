{
  "name": "mbpp_457_Find_Min",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sublist having minimum length.\n    def FindMin(lst : Any) : Any = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_457_Find_Min.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(FindMin((Any(List[Long](1l.toLong), List[Long](1l.toLong, 2l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong)))).equals((Any(1l.toLong))));\n    assert(FindMin((Any(List[Long](1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 2l.toLong, 7l.toLong, 8l.toLong)))).equals((Any(1l.toLong, 1l.toLong))));\n    assert(FindMin((Any(List[String](\"x\"), List[String](\"x\", \"y\"), List[String](\"x\", \"y\", \"z\")))).equals((Any(\"x\"))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var min = lst.asInstanceOf[List[Any]](0).asInstanceOf[List[Any]].length\n        var min_lst = lst.asInstanceOf[List[Any]](0)\n        for (i <- 0 until lst.asInstanceOf[List[Any]].length) {\n            if (lst.asInstanceOf[List[Any]](i).asInstanceOf[List[Any]].length < min) {\n                min = lst.asInstanceOf[List[Any]](i).asInstanceOf[List[Any]].length\n                min_lst = lst.asInstanceOf[List[Any]](i)\n            }\n        }\n        return min_lst",
    "        var min = lst.asInstanceOf[List[Any]](0).asInstanceOf[List[Any]].length\n        var min_lst = lst.asInstanceOf[List[Any]](0).asInstanceOf[List[Any]]\n        for (i <- 1 to lst.asInstanceOf[List[Any]].length - 1) {\n            if (lst.asInstanceOf[List[Any]](i).asInstanceOf[List[Any]].length < min) {\n                min = lst.asInstanceOf[List[Any]](i).asInstanceOf[List[Any]].length\n                min_lst = lst.asInstanceOf[List[Any]](i).asInstanceOf[List[Any]]\n            }\n        }\n        min_lst",
    "        val lst1 = lst.asInstanceOf[List[Any]]\n        var min = lst1(0).asInstanceOf[List[Any]].length\n        var min_lst = lst1(0)\n        for (i <- 1 until lst1.length) {\n            if (lst1(i).asInstanceOf[List[Any]].length < min) {\n                min = lst1(i).asInstanceOf[List[Any]].length\n                min_lst = lst1(i)\n            }\n        }\n        min_lst",
    "        lst match {\n            case Nil => Nil\n            case x :: xs => {\n                val min = FindMin(xs)\n                min match {\n                    case Nil => x\n                    case y :: ys => {\n                        if (x.length < y.length) x else y\n                    }\n                }\n            }\n        }",
    "        var min = lst.asInstanceOf[List[Any]].length\n        var min_lst = lst\n        for (x <- lst.asInstanceOf[List[Any]]) {\n            if (x.isInstanceOf[List[Any]]) {\n                val tmp = FindMin(x)\n                if (tmp.asInstanceOf[List[Any]].length < min) {\n                    min = tmp.asInstanceOf[List[Any]].length\n                    min_lst = tmp\n                }\n            }\n        }\n        min_lst",
    "        // Write your code here",
    "        lst match {\n            case Nil => Nil\n            case (x :: xs) => {\n                val min = FindMin(xs)\n                min match {\n                    case Nil => x\n                    case (y :: ys) => {\n                        if (x.length < y.length) x else y\n                    }\n                }\n            }\n        }",
    "        var min = lst.asInstanceOf[List[Any]].head\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i.asInstanceOf[List[Any]].length < min.asInstanceOf[List[Any]].length) {\n                min = i\n            }\n        }\n        return min",
    "        lst match {\n            case Nil => Nil\n            case hd :: tl => {\n                val min = FindMin(tl)\n                min match {\n                    case Nil => hd\n                    case _ => if (min.length < hd.length) min else hd\n                }\n            }\n        }",
    "        var min = lst.asInstanceOf[List[Any]].length\n        var min_lst = lst.asInstanceOf[List[Any]]\n        for (i <- 0 to lst.asInstanceOf[List[Any]].length - 1) {\n            if (lst.asInstanceOf[List[Any]].apply(i).isInstanceOf[List[Any]]) {\n                var lst_len = FindMin(lst.asInstanceOf[List[Any]].apply(i)).asInstanceOf[List[Any]].length\n                if (lst_len < min) {\n                    min = lst_len\n                    min_lst = FindMin(lst.asInstanceOf[List[Any]].apply(i)).asInstanceOf[List[Any]]\n                }\n            }\n        }\n        return min_lst",
    "        var min = lst.asInstanceOf[List[Any]].length\n        var minList : Any = lst\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i.isInstanceOf[List[Any]]) {\n                val temp = FindMin(i)\n                if (temp.asInstanceOf[List[Any]].length < min) {\n                    min = temp.asInstanceOf[List[Any]].length\n                    minList = temp\n                }\n            }\n        }\n        return minList",
    "        var min = lst.asInstanceOf[List[Any]].head.asInstanceOf[List[Any]].length\n        var minList = lst.asInstanceOf[List[Any]].head\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i.asInstanceOf[List[Any]].length < min) {\n                min = i.asInstanceOf[List[Any]].length\n                minList = i\n            }\n        }\n        return minList",
    "        var min = lst.asInstanceOf[List[Any]](0).asInstanceOf[List[Any]].length\n        var min_lst = lst.asInstanceOf[List[Any]](0)\n        for (i <- 0 until lst.asInstanceOf[List[Any]].length) {\n            if (lst.asInstanceOf[List[Any]](i).asInstanceOf[List[Any]].length < min) {\n                min = lst.asInstanceOf[List[Any]](i).asInstanceOf[List[Any]].length\n                min_lst = lst.asInstanceOf[List[Any]](i)\n            }\n        }\n        return min_lst",
    "        lst match {\n            case Nil => Nil\n            case x :: xs => {\n                val min = FindMin(xs)\n                min match {\n                    case Nil => x\n                    case y :: ys => {\n                        if (x.length < y.length) x else y\n                    }\n                }\n            }\n        }",
    "        var min = lst.asInstanceOf[List[Any]](0).asInstanceOf[List[Any]].length\n        var min_lst = lst.asInstanceOf[List[Any]](0)\n        for (i <- 0 until lst.asInstanceOf[List[Any]].length) {\n            if (lst.asInstanceOf[List[Any]](i).asInstanceOf[List[Any]].length < min) {\n                min = lst.asInstanceOf[List[Any]](i).asInstanceOf[List[Any]].length\n                min_lst = lst.asInstanceOf[List[Any]](i)\n            }\n        }\n        return min_lst",
    "        var min = lst.asInstanceOf[List[Any]].length\n        var min_lst = lst.asInstanceOf[List[Any]]\n        for (i <- 0 to lst.asInstanceOf[List[Any]].length - 1) {\n            if (lst.asInstanceOf[List[Any]].apply(i).isInstanceOf[List[Any]]) {\n                var temp = FindMin(lst.asInstanceOf[List[Any]].apply(i))\n                if (temp.asInstanceOf[List[Any]].length < min) {\n                    min = temp.asInstanceOf[List[Any]].length\n                    min_lst = temp\n                }\n            }\n        }\n        min_lst",
    "        var min = lst.asInstanceOf[List[Any]].length\n        var minList = lst\n        for (i <- 0 to lst.asInstanceOf[List[Any]].length - 1) {\n            if (lst.asInstanceOf[List[Any]](i).isInstanceOf[List[Any]]) {\n                val subList = FindMin(lst.asInstanceOf[List[Any]](i))\n                if (subList.asInstanceOf[List[Any]].length < min) {\n                    min = subList.asInstanceOf[List[Any]].length\n                    minList = subList\n                }\n            }\n        }\n        return minList",
    "        lst match {\n            case Nil => Nil\n            case x :: xs => {\n                val min = FindMin(xs)\n                min match {\n                    case Nil => x\n                    case y :: ys => {\n                        if (x.length < y.length) x else y\n                    }\n                }\n            }\n        }",
    "        var min = lst.asInstanceOf[List[Any]].head.asInstanceOf[List[Any]].length\n        var min_lst = lst.asInstanceOf[List[Any]].head\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i.asInstanceOf[List[Any]].length < min) {\n                min = i.asInstanceOf[List[Any]].length\n                min_lst = i\n            }\n        }\n        return min_lst",
    "        val lst1 = lst.asInstanceOf[List[Any]]\n        lst1 match {\n            case Nil => Nil\n            case head :: tail => {\n                val min = FindMin(tail)\n                min match {\n                    case Nil => head\n                    case _ => {\n                        val min1 = min.asInstanceOf[List[Any]]\n                        val head1 = head.asInstanceOf[List[Any]]\n                        if (min1.length < head1.length) min else head\n                    }\n                }\n            }\n        }"
  ]
}