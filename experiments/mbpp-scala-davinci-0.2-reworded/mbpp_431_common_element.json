{
  "name": "mbpp_431_common_element",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes two lists and returns true if they have at least one common element.\n    def commonElement(list1 : Any, list2 : Any) : Option[Boolean] = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_431_common_element.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(commonElement((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (Any(5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals(true));\n    assert(commonElement((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (Any(6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals(None));\n    assert(commonElement((Any(\"a\", \"b\", \"c\")), (Any(\"d\", \"b\", \"e\"))).equals(true));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val l1 = list1.asInstanceOf[List[Any]]\n            val l2 = list2.asInstanceOf[List[Any]]\n            Some(l1.exists(l2.contains(_)))\n        } else {\n            None\n        }",
    "        val list1_ = list1.asInstanceOf[List[Any]]\n        val list2_ = list2.asInstanceOf[List[Any]]\n        val set1 = Set[Any]() ++ list1_\n        val set2 = Set[Any]() ++ list2_\n        val set3 = set1.intersect(set2)\n        if (set3.size > 0) Some(true) else Some(false)",
    "        val list1_ = list1.asInstanceOf[List[Any]]\n        val list2_ = list2.asInstanceOf[List[Any]]\n        if (list1_.isEmpty || list2_.isEmpty) {\n            None\n        } else {\n            Some(list1_.exists(list2_.contains(_)))\n        }",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1 = list1.asInstanceOf[List[Any]]\n            val list2 = list2.asInstanceOf[List[Any]]\n            val set1 = list1.toSet\n            val set2 = list2.toSet\n            val common = set1.intersect(set2)\n            if (common.size > 0) Some(true)\n            else Some(false)\n        } else None",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1 = list1.asInstanceOf[List[Any]]\n            val list2 = list2.asInstanceOf[List[Any]]\n            val set1 = Set(list1 : _*)\n            val set2 = Set(list2 : _*)\n            Some(set1.intersect(set2).size > 0)\n        } else {\n            None\n        }",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1 = list1.asInstanceOf[List[Any]]\n            val list2 = list2.asInstanceOf[List[Any]]\n            if (list1.intersect(list2).length > 0) Some(true)\n            else Some(false)\n        }\n        else None",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1 = list1.asInstanceOf[List[Any]]\n            val list2 = list2.asInstanceOf[List[Any]]\n            for (i <- list1) {\n                for (j <- list2) {\n                    if (i == j) {\n                        return Some(true)\n                    }\n                }\n            }\n            return Some(false)\n        }\n        None",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1 = list1.asInstanceOf[List[Any]]\n            val list2 = list2.asInstanceOf[List[Any]]\n            if (list1.length > 0 && list2.length > 0) {\n                val set1 = Set[Any]() ++ list1\n                val set2 = Set[Any]() ++ list2\n                return Some(set1.intersect(set2).size > 0)\n            }\n        }\n        return None",
    "        list1 match {\n            case Nil => None\n            case head :: tail => {\n                if (list2.contains(head)) Some(true)\n                else commonElement(tail, list2)\n            }\n        }",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1 = list1.asInstanceOf[List[Any]]\n            val list2 = list2.asInstanceOf[List[Any]]\n            val set1 = list1.toSet\n            val set2 = list2.toSet\n            Some(set1.intersect(set2).size > 0)\n        } else {\n            None\n        }",
    "        val list1_ = list1.asInstanceOf[List[Any]]\n        val list2_ = list2.asInstanceOf[List[Any]]\n        if (list1_.isEmpty || list2_.isEmpty) return None\n        val set1 = list1_.toSet\n        val set2 = list2_.toSet\n        Some(set1.intersect(set2).size > 0)",
    "        val l1 = list1.asInstanceOf[List[Any]]\n        val l2 = list2.asInstanceOf[List[Any]]\n        if (l1.isEmpty || l2.isEmpty) return None\n        for (i <- l1) {\n            for (j <- l2) {\n                if (i == j) return Some(true)\n            }\n        }\n        Some(false)",
    "        if (list1.isInstanceOf[List[_]] && list2.isInstanceOf[List[_]]) {\n            val list1 = list1.asInstanceOf[List[_]]\n            val list2 = list2.asInstanceOf[List[_]]\n            val set1 = Set() ++ list1\n            val set2 = Set() ++ list2\n            Some(set1.intersect(set2).size > 0)\n        } else {\n            None\n        }",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1_ = list1.asInstanceOf[List[Any]]\n            val list2_ = list2.asInstanceOf[List[Any]]\n            if (list1_.isEmpty || list2_.isEmpty)\n                None\n            else {\n                val head1 = list1_.head\n                val head2 = list2_.head\n                if (head1 == head2)\n                    Some(true)\n                else {\n                    val tail1 = list1_.tail\n                    val tail2 = list2_.tail\n                    commonElement(tail1, tail2)\n                }\n            }\n        }\n        else\n            None",
    "        list1 match {\n            case Nil => None\n            case head :: tail => {\n                if (list2.contains(head)) {\n                    Some(true)\n                } else {\n                    commonElement(tail, list2)\n                }\n            }\n        }",
    "        list1 match {\n            case Nil => None\n            case head :: tail => {\n                if (list2.contains(head)) Some(true)\n                else commonElement(tail, list2)\n            }\n        }",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1 = list1.asInstanceOf[List[Any]]\n            val list2 = list2.asInstanceOf[List[Any]]\n            val set1 = list1.toSet\n            val set2 = list2.toSet\n            val intersection = set1.intersect(set2)\n            if (intersection.size > 0) {\n                Some(true)\n            } else {\n                Some(false)\n            }\n        } else {\n            None\n        }",
    "        if(list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1 = list1.asInstanceOf[List[Any]]\n            val list2 = list2.asInstanceOf[List[Any]]\n            val set1 = Set() ++ list1\n            val set2 = Set() ++ list2\n            Some(set1.intersect(set2).size > 0)\n        } else {\n            None\n        }",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1_ = list1.asInstanceOf[List[Any]]\n            val list2_ = list2.asInstanceOf[List[Any]]\n            val set1 = Set() ++ list1_\n            val set2 = Set() ++ list2_\n            Some(set1.intersect(set2).size > 0)\n        } else {\n            None\n        }",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1 = list1.asInstanceOf[List[Any]]\n            val list2 = list2.asInstanceOf[List[Any]]\n            val set1 = new HashSet[Any]\n            val set2 = new HashSet[Any]\n            for (i <- list1) set1 += i\n            for (i <- list2) set2 += i\n            val set3 = set1 & set2\n            if (set3.size > 0) Some(true) else Some(false)\n        } else None"
  ]
}