{
  "name": "mbpp_759_is_decimal",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_759_is_decimal.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.contains(\".\")) {\n            val parts = num.split(\"\\\\.\")\n            if (parts.length == 2) {\n                if (parts(0).length > 0 && parts(1).length == 2) {\n                    for (i <- 0 until parts(0).length) {\n                        if (!Character.isDigit(parts(0)(i))) return false\n                    }\n                    for (i <- 0 until parts(1).length) {\n                        if (!Character.isDigit(parts(1)(i))) return false\n                    }\n                    return true\n                }\n            }\n        }\n        false\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.contains(\".\")) {\n            val parts = num.split(\"\\\\.\")\n            if (parts.length == 2) {\n                if (parts(1).length == 2) {\n                    try {\n                        parts(0).toInt\n                        parts(1).toInt\n                        return true\n                    } catch {\n                        case e : Exception => return false\n                    }\n                }\n            }\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^\\\\d+\\\\.\\\\d{2}$\".r\n        pattern.findFirstIn(num) match {\n            case Some(x) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val regex = \"^[0-9]+(\\\\.[0-9]{1,2})?$\".r\n        regex.findFirstIn(num) match {\n            case Some(s) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.contains('.')) {\n            val parts = num.split('.')\n            if (parts.length != 2) return false\n            if (parts(0).length > 0 && parts(0).forall(c => c >= '0' && c <= '9')) {\n                if (parts(1).length == 2 && parts(1).forall(c => c >= '0' && c <= '9')) return true\n            }\n        }\n        false\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val regex = \"^[0-9]+(\\\\.[0-9]{1,2})?$\".r\n        regex.findFirstIn(num) match {\n            case Some(s) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.length == 0) return false\n        if (num.length == 1) return num.charAt(0).isDigit\n        if (num.length == 2) return num.charAt(0).isDigit && num.charAt(1).isDigit\n        if (num.length == 3) return num.charAt(0).isDigit && num.charAt(1).isDigit && num.charAt(2) == '.'\n        if (num.length == 4) return num.charAt(0).isDigit && num.charAt(1).isDigit && num.charAt(2) == '.' && num.charAt(3).isDigit\n        if (num.length == 5) return num.charAt(0).isDigit && num.charAt(1).isDigit && num.charAt(2) == '.' && num.charAt(3).isDigit && num.charAt(4).isDigit\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp6j2u1rn_.scala:15)\n\tat Problem.main(tmp6j2u1rn_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.length == 0) return false\n        val parts = num.split(\"\\\\.\")\n        if (parts.length > 2) return false\n        if (parts.length == 2) {\n            if (parts(1).length > 2) return false\n        }\n        for (i <- 0 until num.length) {\n            if (!(num(i) >= '0' && num(i) <= '9')) {\n                if (num(i) != '.') return false\n            }\n        }\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.length == 0) return false\n        val arr = num.split(\"\\\\.\")\n        if (arr.length == 1) return true\n        if (arr.length == 2) {\n            if (arr(1).length == 0) return false\n            if (arr(1).length > 2) return false\n            return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp__3mxm_4.scala:18)\n\tat Problem.main(tmp__3mxm_4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.contains(\".\")) {\n            val parts = num.split(\"\\\\.\")\n            if (parts.length == 2) {\n                if (parts(1).length == 2) {\n                    try {\n                        val n = num.toDouble\n                        true\n                    } catch {\n                        case e : Exception => false\n                    }\n                } else false\n            } else false\n        } else false\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.contains(\".\")) {\n            val parts = num.split(\"\\\\.\")\n            if (parts.length != 2) return false\n            if (parts(0).length == 0) return false\n            if (parts(1).length != 2) return false\n            if (parts(0).forall(c => c.isDigit)) {\n                if (parts(1).forall(c => c.isDigit)) {\n                    return true\n                }\n            }\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]*\\\\.[0-9]{2}$\".r\n        pattern.findFirstIn(num) match {\n            case Some(s) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"[0-9]+(\\\\.[0-9]{1,2})?\".r\n        pattern.findFirstIn(num) match {\n            case Some(x) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmph28m2eo8.scala:14)\n\tat Problem.main(tmph28m2eo8.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[+-]?[0-9]*\\\\.?[0-9]{0,2}$\".r\n        pattern.findFirstIn(num) match {\n            case Some(x) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.contains(\".\")) {\n            val parts = num.split(\"\\\\.\")\n            if (parts.length == 2) {\n                val (left, right) = (parts(0), parts(1))\n                if (left.length > 0 && right.length == 2) {\n                    if (left.forall(c => c.isDigit) && right.forall(c => c.isDigit)) {\n                        return true\n                    }\n                }\n            }\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]+\\\\.[0-9]{2}$\".r\n        pattern.findFirstIn(num) match {\n            case Some(s) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.length == 0) return false\n        var i = 0\n        var decimal = false\n        while (i < num.length) {\n            if (num(i) == '.') {\n                if (decimal) return false\n                decimal = true\n            }\n            else if (!num(i).isDigit) return false\n            i += 1\n        }\n        if (decimal && num.length - num.indexOf('.') - 1 > 2) return false\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\".r\n        pattern.findFirstIn(num) match {\n            case Some(s) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[-+]?[0-9]*\\\\.?[0-9]{0,2}$\".r\n        pattern.findFirstIn(num) match {\n            case Some(s) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.length == 0) return false\n        val nums = num.split(\"\\\\.\")\n        if (nums.length > 2) return false\n        if (nums.length == 2) {\n            if (nums(1).length > 2) return false\n            if (nums(1).length == 0) return false\n        }\n        if (nums(0).length == 0) return false\n        for (i <- 0 until nums(0).length) {\n            if (!nums(0)(i).isDigit) return false\n        }\n        if (nums.length == 2) {\n            for (i <- 0 until nums(1).length) {\n                if (!nums(1)(i).isDigit) return false\n            }\n        }\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.length == 0) return false\n        var i = 0\n        if (num(0) == '-') i = 1\n        var hasDot = false\n        var hasDigit = false\n        while (i < num.length) {\n            if (num(i) == '.') {\n                if (hasDot) return false\n                hasDot = true\n            } else if (num(i) < '0' || num(i) > '9') return false\n            else {\n                if (hasDot) {\n                    if (num.length - i > 3) return false\n                } else {\n                    if (num.length - i > 2) return false\n                }\n                hasDigit = true\n            }\n            i += 1\n        }\n        hasDigit\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123022,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp0yidaqo0.scala:29)\n\tat Problem.main(tmp0yidaqo0.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.length == 0) return false\n        val parts = num.split(\"\\\\.\")\n        if (parts.length > 2) return false\n        if (parts.length == 2) {\n            if (parts(1).length > 2) return false\n            if (parts(1).length == 2 && parts(1)(0) == '0') return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123022,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp9dmr0r0_.scala:17)\n\tat Problem.main(tmp9dmr0r0_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]+(.[0-9]{1,2})?$\".r\n        pattern.findFirstIn(num) match {\n            case Some(s) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123022,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.contains(\".\")) {\n            val parts = num.split(\"\\\\.\")\n            if (parts.length == 2) {\n                val (left, right) = (parts(0), parts(1))\n                if (left.length == 0 || right.length == 0) return false\n                if (left.forall(c => c.isDigit) && right.forall(c => c.isDigit)) {\n                    if (right.length <= 2) return true\n                }\n            }\n        }\n        false\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123023,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.length == 0) return false\n        if (num.length == 1 && num(0) == '.') return false\n        var dotCount = 0\n        for (i <- 0 until num.length) {\n            if (num(i) == '.') {\n                dotCount += 1\n                if (dotCount > 1) return false\n            }\n            else if (!num(i).isDigit) return false\n        }\n        if (dotCount == 0) return true\n        else {\n            val index = num.indexOf('.')\n            if (index == num.length - 1) return false\n            else if (index == 0) return num.length - 1 <= 2\n            else return num.length - index - 1 <= 2\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123023,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.contains(\".\")) {\n            val nums = num.split(\"\\\\.\")\n            if (nums.length == 2) {\n                if (nums(1).length == 2) {\n                    try {\n                        num.toDouble\n                        true\n                    } catch {\n                        case e : Exception => false\n                    }\n                } else false\n            } else false\n        } else false\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123022,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[-+]?[0-9]*\\\\.?[0-9]{0,2}$\".r\n        pattern.findFirstIn(num) match {\n            case Some(s) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]+\\\\.[0-9]{2}$\".r\n        pattern.findFirstIn(num) match {\n            case Some(s) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\".r\n        num match {\n            case pattern(_*) => true\n            case _ => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123023,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val regex = \"^[0-9]+(\\\\.[0-9]{1,2})?$\".r\n        regex.findFirstIn(num) match {\n            case Some(s) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val parts = num.split(\"\\\\.\")\n        if (parts.length != 2) return false\n        if (parts(0).length > 2) return false\n        if (parts(1).length > 2) return false\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123022,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpuq7jw25x.scala:13)\n\tat Problem.main(tmpuq7jw25x.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"\"\"^[+-]?\\d*\\.\\d{2}$\"\"\".r\n        pattern.findFirstIn(num) match {\n            case Some(s) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123022,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\".r\n        pattern.findFirstIn(num) match {\n            case Some(s) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.length == 0) return false\n        if (num.length == 1) return num(0).isDigit\n        if (num(0) == '-') return isDecimal(num.substring(1))\n        var i = 0\n        var count = 0\n        while (i < num.length && num(i).isDigit) {\n            i += 1\n        }\n        if (i == num.length) return true\n        if (num(i) == '.') {\n            i += 1\n            while (i < num.length && num(i).isDigit) {\n                count += 1\n                i += 1\n            }\n            if (count == 2) return true\n        }\n        false\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123023,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val parts = num.split(\"\\\\.\")\n        if (parts.length != 2) return false\n        if (parts(0).length == 0) return false\n        if (parts(1).length != 2) return false\n        if (parts(0).forall(c => c >= '0' && c <= '9')) {\n            if (parts(1).forall(c => c >= '0' && c <= '9')) {\n                return true\n            }\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123022,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^-?[0-9]+(.[0-9]{1,2})?$\".r\n        pattern.findFirstIn(num) match {\n            case Some(s) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123023,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.length == 0) return false\n        val decimal = num.split(\"\\\\.\")\n        if (decimal.length > 2) return false\n        if (decimal.length == 2) {\n            if (decimal(1).length > 2) return false\n        }\n        for (i <- 0 until num.length) {\n            if (!(num(i) >= '0' && num(i) <= '9')) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123023,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmps0l8x4l5.scala:18)\n\tat Problem.main(tmps0l8x4l5.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\".r\n        pattern.findFirstIn(num) match {\n            case Some(s) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\".r\n        pattern.findFirstIn(num) match {\n            case Some(_) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123023,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]+\\\\.[0-9]{2}$\".r\n        pattern.findFirstIn(num) match {\n            case Some(s) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\".r\n        pattern.findFirstIn(num) match {\n            case Some(s) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.contains(\".\")) {\n            val parts = num.split(\"\\\\.\")\n            if (parts.length != 2) return false\n            val (intPart, decimalPart) = (parts(0), parts(1))\n            if (intPart.length == 0) return false\n            if (decimalPart.length != 2) return false\n            for (c <- intPart) if (!c.isDigit) return false\n            for (c <- decimalPart) if (!c.isDigit) return false\n            return true\n        }\n        else {\n            for (c <- num) if (!c.isDigit) return false\n            return true\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123023,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]+\\\\.[0-9]{2}$\".r\n        pattern.findFirstIn(num) match {\n            case Some(s) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\".r\n        pattern.findFirstIn(num) match {\n            case Some(s) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123022,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.contains(\".\")) {\n            val parts = num.split(\"\\\\.\")\n            if (parts.length == 2) {\n                if (parts(0).length > 0 && parts(1).length == 2) {\n                    return true\n                }\n            }\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123022,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpprjz8ian.scala:18)\n\tat Problem.main(tmpprjz8ian.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.contains(\".\")) {\n            val split = num.split(\"\\\\.\")\n            if (split.length == 2) {\n                val (left, right) = (split(0), split(1))\n                if (left.forall(c => c.isDigit) && right.forall(c => c.isDigit) && right.length <= 2) true\n                else false\n            }\n            else false\n        }\n        else false\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123023,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"[0-9]+(\\\\.[0-9]{1,2})?\".r\n        pattern.findFirstIn(num) match {\n            case Some(x) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmph28m2eo8.scala:14)\n\tat Problem.main(tmph28m2eo8.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\".r\n        pattern.findFirstIn(num) match {\n            case Some(s) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"[-+]?[0-9]*\\\\.?[0-9]{0,2}\".r\n        pattern.findFirstIn(num) match {\n            case Some(x) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123022,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpuxq1u8m4.scala:14)\n\tat Problem.main(tmpuxq1u8m4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"\"\"(\\d+)(\\.(\\d{1,2}))?\"\"\".r\n        num match {\n            case pattern(_, _, _) => true\n            case _ => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123023,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\".r\n        pattern.findFirstIn(num) match {\n            case Some(s) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val decimal = \"\"\"(-)?(\\d+)(\\.\\d{1,2})?\"\"\".r\n        num match {\n            case decimal(_*) => true\n            case _ => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123023,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.isEmpty) return false\n        val split = num.split(\"\\\\.\")\n        if (split.length != 2) return false\n        if (split(0).isEmpty) return false\n        if (split(1).length != 2) return false\n        if (split(1).forall(c => c.isDigit)) return true\n        false\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123023,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpus6lk8x7.scala:16)\n\tat Problem.main(tmpus6lk8x7.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.length == 0) return false\n        if (num.length == 1 && num(0) == '.') return false\n        if (num.length == 1 && num(0) == '-') return false\n        if (num.length == 2 && num(0) == '-' && num(1) == '.') return false\n        var dot = false\n        var neg = false\n        for (i <- 0 until num.length) {\n            if (num(i) == '.') {\n                if (dot) return false\n                dot = true\n            } else if (num(i) == '-') {\n                if (neg) return false\n                neg = true\n            } else if (num(i) < '0' || num(i) > '9') return false\n        }\n        if (dot) {\n            var count = 0\n            for (i <- 0 until num.length) if (num(i) == '.') count += 1\n            if (count > 1) return false\n            if (num(0) == '.') return false\n            if (num(num.length - 1) == '.') return false\n            if (num.length - num.indexOf('.') > 3) return false\n        }\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123023,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.length == 0) return false\n        if (num.length == 1) return num(0) >= '0' && num(0) <= '9'\n        if (num(0) == '0' && num(1) == '.') return num.length == 3 && num(2) >= '0' && num(2) <= '9'\n        if (num(0) == '-') return isDecimal(num.substring(1))\n        if (num(0) >= '1' && num(0) <= '9') {\n            var i = 1\n            while (i < num.length && num(i) >= '0' && num(i) <= '9') i += 1\n            if (i == num.length) return true\n            if (num(i) == '.') {\n                if (i + 1 == num.length) return false\n                if (i + 2 == num.length) return num(i + 1) >= '0' && num(i + 1) <= '9'\n                return false\n            }\n            return false\n        }\n        false\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123040,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpbayow3ht.scala:24)\n\tat Problem.main(tmpbayow3ht.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\".r\n        pattern.findFirstIn(num) match {\n            case Some(s) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.contains(\".\")) {\n            val parts = num.split(\"\\\\.\")\n            if (parts.length == 2) {\n                val dec = parts(1)\n                if (dec.length == 2) {\n                    try {\n                        val n = num.toDouble\n                        true\n                    } catch {\n                        case e : Exception => false\n                    }\n                } else false\n            } else false\n        } else false\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123039,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\".r\n        pattern.findFirstIn(num) match {\n            case Some(s) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val regex = \"^[-+]?[0-9]*\\\\.?[0-9]{0,2}$\".r\n        regex.findFirstIn(num) match {\n            case Some(s) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123040,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.contains(\".\")) {\n            val parts = num.split(\"\\\\.\")\n            if (parts.length == 2) {\n                val (left, right) = (parts(0), parts(1))\n                if (left.length > 0 && right.length == 2) {\n                    if (left.forall(c => c.isDigit) && right.forall(c => c.isDigit)) return true\n                }\n            }\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123040,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.contains(\".\")) {\n            val parts = num.split(\"\\\\.\")\n            if (parts.length == 2) {\n                val (intPart, decimalPart) = (parts(0), parts(1))\n                if (intPart.forall(c => c.isDigit) && decimalPart.forall(c => c.isDigit) && decimalPart.length <= 2) true\n                else false\n            }\n            else false\n        }\n        else false\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123040,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.length == 0) return false\n        var i = 0\n        var decimal = false\n        while (i < num.length) {\n            if (num(i) == '.') {\n                if (decimal) return false\n                decimal = true\n            }\n            else if (!(num(i) >= '0' && num(i) <= '9')) return false\n            i += 1\n        }\n        if (decimal) {\n            val parts = num.split(\"\\\\.\")\n            if (parts(1).length > 2) return false\n        }\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123040,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]+(.[0-9]{1,2})?$\".r\n        pattern.findFirstIn(num) match {\n            case Some(_) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123040,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]+\\\\.[0-9]{2}$\".r\n        pattern.findFirstIn(num) match {\n            case Some(s) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.contains(\".\")) {\n            val parts = num.split(\"\\\\.\")\n            if (parts.length == 2) {\n                if (parts(0).length > 0 && parts(1).length == 2) {\n                    if (parts(0).forall(c => c >= '0' && c <= '9') && parts(1).forall(c => c >= '0' && c <= '9')) {\n                        return true\n                    }\n                }\n            }\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123041,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]+(.[0-9]{1,2})?$\".r\n        pattern.findFirstIn(num) match {\n            case Some(s) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123022,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"\"\"(\\d+)\\.(\\d{2})\"\"\".r\n        num match {\n            case pattern(a, b) => true\n            case _ => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123041,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\".r\n        pattern.findFirstIn(num) match {\n            case Some(x) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123040,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val regex = \"\"\"(\\d+)\\.(\\d{2})\"\"\".r\n        num match {\n            case regex(_, _) => true\n            case _ => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123041,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\".r\n        pattern.findFirstIn(num) match {\n            case Some(s) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.contains(\".\")) {\n            val parts = num.split(\"\\\\.\")\n            if (parts.length != 2) return false\n            if (parts(0).length == 0) return false\n            if (parts(1).length != 2) return false\n            if (parts(0).forall(c => c.isDigit) && parts(1).forall(c => c.isDigit)) return true\n        }\n        false\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123040,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]+\\\\.[0-9]{2}$\".r\n        pattern.findFirstIn(num) match {\n            case Some(s) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\".r\n        pattern.findFirstIn(num) match {\n            case Some(s) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\".r\n        pattern.findFirstIn(num) match {\n            case Some(s) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.contains(\".\")) {\n            val arr = num.split(\"\\\\.\")\n            if (arr.length == 2) {\n                val (a, b) = (arr(0), arr(1))\n                if (a.forall(c => c.isDigit) && b.forall(c => c.isDigit) && b.length == 2) return true\n            }\n        }\n        false\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123040,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\".r\n        pattern.findFirstIn(num) match {\n            case Some(s) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.contains('.')) {\n            val parts = num.split('.')\n            if (parts.length == 2) {\n                if (parts(1).length == 2) {\n                    try {\n                        parts(0).toInt\n                        parts(1).toInt\n                        true\n                    } catch {\n                        case e : Exception => false\n                    }\n                } else false\n            } else false\n        } else false\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123040,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.contains(\".\")) {\n            val parts = num.split(\"\\\\.\")\n            if (parts.length != 2) return false\n            if (parts(0).length > 0 && parts(0).forall(c => c.isDigit)) {\n                if (parts(1).length == 2 && parts(1).forall(c => c.isDigit)) return true\n            }\n        }\n        false\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123041,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]*\\\\.[0-9]{2}$\".r\n        pattern.findFirstIn(num) match {\n            case Some(x) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123040,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\".r\n        pattern.findFirstIn(num) match {\n            case Some(x) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123040,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[-+]?[0-9]*\\\\.?[0-9]{0,2}$\".r\n        pattern.findFirstIn(num) match {\n            case Some(_) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123041,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\".r\n        pattern.findFirstIn(num) match {\n            case Some(x) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123040,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.contains(\".\")) {\n            val parts = num.split(\"\\\\.\")\n            if (parts.length != 2) return false\n            val left = parts(0)\n            val right = parts(1)\n            if (left.length == 0) return false\n            if (right.length > 2) return false\n            if (right.length == 2) {\n                if (right(0) == '0') return false\n            }\n            return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123040,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpj7gfdvyl.scala:22)\n\tat Problem.main(tmpj7gfdvyl.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.contains(\".\")) {\n            val parts = num.split(\"\\\\.\")\n            if (parts.length == 2) {\n                if (parts(1).length == 2) {\n                    try {\n                        val n = num.toDouble\n                        true\n                    } catch {\n                        case e : Exception => false\n                    }\n                } else false\n            } else false\n        } else false\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"\"\"^-?\\d+(\\.\\d{1,2})?$\"\"\".r\n        pattern.findFirstIn(num) match {\n            case Some(s) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123041,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"\"\"(\\d+)\\.(\\d{2})\"\"\".r\n        num match {\n            case pattern(_*) => true\n            case _ => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123041,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.length == 0) return false\n        val nums = num.split(\"\\\\.\")\n        if (nums.length > 2) return false\n        if (nums.length == 2) {\n            if (nums(1).length > 2) return false\n            if (nums(1).length == 0) return false\n        }\n        for (i <- 0 until num.length) {\n            if (!(num(i) >= '0' && num(i) <= '9')) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123041,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpnwyyflkp.scala:19)\n\tat Problem.main(tmpnwyyflkp.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\".r\n        pattern.findFirstIn(num) match {\n            case Some(s) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\".r\n        pattern.findFirstIn(num) match {\n            case Some(s) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        var decimal = false\n        var precision = 0\n        for (i <- 0 until num.length) {\n            if (num(i) == '.') {\n                decimal = true\n            } else if (decimal) {\n                precision += 1\n            }\n        }\n        if (decimal && precision == 2) true else false\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123041,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp_6oc4p33.scala:19)\n\tat Problem.main(tmp_6oc4p33.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.length == 0) return false\n        if (num.length == 1) return num(0).isDigit\n        if (num(0) == '0' && num(1) != '.') return false\n        var dot = false\n        var count = 0\n        for (i <- 0 until num.length) {\n            if (num(i) == '.') {\n                if (dot) return false\n                dot = true\n            }\n            else if (!num(i).isDigit) return false\n            else if (dot) count += 1\n        }\n        if (dot && count > 2) return false\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123041,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.contains(\".\")) {\n            val parts = num.split(\"\\\\.\")\n            if (parts.length == 2) {\n                if (parts(1).length == 2) {\n                    return true\n                }\n            }\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpej07e6zx.scala:18)\n\tat Problem.main(tmpej07e6zx.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"[0-9]+(\\\\.[0-9]{1,2})?\".r\n        pattern.findFirstIn(num) match {\n            case Some(x) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmph28m2eo8.scala:14)\n\tat Problem.main(tmph28m2eo8.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\".r\n        pattern.findFirstIn(num) match {\n            case Some(x) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123040,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\".r\n        pattern.findFirstIn(num) match {\n            case Some(s) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\".r\n        pattern.findFirstIn(num) match {\n            case Some(s) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.contains(\".\")) {\n            val parts = num.split(\"\\\\.\")\n            if (parts.length == 2) {\n                if (parts(0).length > 0 && parts(1).length == 2) {\n                    return true\n                }\n            }\n        }\n        false\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp08vut388.scala:18)\n\tat Problem.main(tmp08vut388.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.contains(\".\")) {\n            val nums = num.split(\"\\\\.\")\n            if (nums(0).length > 0 && nums(1).length == 2) true\n            else false\n        }\n        else false\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpeso_72ee.scala:15)\n\tat Problem.main(tmpeso_72ee.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.length == 0) return false\n        var i = 0\n        var decimal = false\n        while (i < num.length) {\n            if (num(i) == '.') {\n                if (decimal) return false\n                decimal = true\n            } else if (!num(i).isDigit) return false\n            i += 1\n        }\n        if (!decimal) return false\n        val parts = num.split(\"\\\\.\")\n        if (parts(1).length > 2) return false\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123058,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\".r\n        num match {\n            case pattern(_*) => true\n            case _ => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123023,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]*\\\\.[0-9]{2}$\".r\n        pattern.findFirstIn(num) match {\n            case Some(x) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123040,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]+\\\\.[0-9]{2}$\".r\n        num match {\n            case pattern(_*) => true\n            case _ => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123058,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.length == 0) return false\n        var i = 0\n        var dot = false\n        while (i < num.length) {\n            if (num(i) == '.') {\n                if (dot) return false\n                dot = true\n            } else if (num(i) < '0' || num(i) > '9') return false\n            i += 1\n        }\n        if (dot) {\n            val index = num.indexOf('.')\n            if (index == num.length - 1) return false\n            if (num.length - index - 1 > 2) return false\n        }\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123058,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.length == 0) return false\n        var i = 0\n        var dot = false\n        var precision = 0\n        while (i < num.length) {\n            if (num(i) == '.') {\n                if (dot) return false\n                dot = true\n            } else if (num(i) < '0' || num(i) > '9') {\n                return false\n            } else if (dot) {\n                precision += 1\n            }\n            i += 1\n        }\n        if (precision > 2) return false\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123058,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\".r\n        pattern.findFirstIn(num) match {\n            case Some(s) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.contains(\".\")) {\n            val parts = num.split(\"\\\\.\")\n            if (parts.length == 2) {\n                if (parts(1).length == 2) {\n                    return true\n                }\n            }\n        }\n        false\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp5qgspjc4.scala:18)\n\tat Problem.main(tmp5qgspjc4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.contains(\".\")) {\n            val parts = num.split(\"\\\\.\")\n            if (parts.length == 2) {\n                if (parts(0).length > 0 && parts(1).length == 2) {\n                    return true\n                }\n            }\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123022,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpprjz8ian.scala:18)\n\tat Problem.main(tmpprjz8ian.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]+\\\\.[0-9]{2}$\".r\n        pattern.findFirstIn(num) match {\n            case Some(s) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]*\\\\.[0-9]{2}$\".r\n        pattern.findFirstIn(num) match {\n            case Some(x) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123040,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^\\\\d+\\\\.\\\\d{2}$\".r\n        num match {\n            case pattern(_*) => true\n            case _ => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123058,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.contains(\".\")) {\n            val split = num.split(\"\\\\.\")\n            if (split.length == 2) {\n                if (split(1).length == 2) {\n                    try {\n                        val n = num.toDouble\n                        true\n                    } catch {\n                        case e : Exception => false\n                    }\n                } else false\n            } else false\n        } else false\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123058,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\".r\n        pattern.findFirstIn(num) match {\n            case Some(s) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\".r\n        pattern.findFirstIn(num) match {\n            case Some(x) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123040,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val regex = \"\"\"(\\d+)(\\.\\d{1,2})?\"\"\".r\n        num match {\n            case regex(_, _) => true\n            case _ => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.contains(\".\")) {\n            val nums = num.split(\"\\\\.\")\n            if (nums.length == 2) {\n                val decimal = nums(1)\n                if (decimal.length == 2) {\n                    return true\n                }\n            }\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpi0kdx525.scala:19)\n\tat Problem.main(tmpi0kdx525.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]*\\\\.[0-9]{2}$\".r\n        pattern.findFirstIn(num) match {\n            case Some(x) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123040,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.length == 0) return false\n        if (num.length == 1) return num(0).isDigit\n        if (num(0) == '-') return isDecimal(num.substring(1))\n        val split = num.split(\"\\\\.\")\n        if (split.length > 2) return false\n        if (split.length == 2) {\n            if (split(1).length > 2) return false\n            if (split(1).length == 0) return false\n            if (split(1).length == 1) return split(1)(0).isDigit\n            if (split(1).length == 2) return split(1)(0).isDigit && split(1)(1).isDigit\n        }\n        if (split.length == 1) {\n            if (split(0).length == 0) return false\n            if (split(0).length == 1) return split(0)(0).isDigit\n            if (split(0).length > 1) {\n                if (!split(0)(0).isDigit) return false\n                for (i <- 1 until split(0).length) {\n                    if (!split(0)(i).isDigit) return false\n                }\n            }\n        }\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123059,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp1snwrcqk.scala:31)\n\tat Problem.main(tmp1snwrcqk.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^\\\\d+\\\\.\\\\d{2}$\".r\n        pattern.findFirstIn(num) match {\n            case Some(s) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123058,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.length == 0) return false\n        val decimal = num.split(\"\\\\.\")\n        if (decimal.length > 2) return false\n        if (decimal.length == 2) {\n            if (decimal(1).length > 2) return false\n        }\n        val digits = num.split(\"\\\\.\")(0).toList\n        if (digits.length == 0) return false\n        if (digits.length == 1 && digits(0) == '-') return false\n        if (digits(0) == '-') digits.tail.forall(x => x >= '0' && x <= '9')\n        else digits.forall(x => x >= '0' && x <= '9')\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.contains(\".\")) {\n            val parts = num.split(\"\\\\.\")\n            if (parts.length == 2) {\n                val left = parts(0)\n                val right = parts(1)\n                if (left.length > 0 && right.length == 2) {\n                    try {\n                        val leftNum = left.toInt\n                        val rightNum = right.toInt\n                        return true\n                    } catch {\n                        case e : Exception => return false\n                    }\n                }\n            }\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123058,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"\"\"(\\d+)\\.(\\d{2})\"\"\".r\n        num match {\n            case pattern(_*) => true\n            case _ => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123041,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"\"\"(\\d+)(\\.)(\\d{1,2})\"\"\".r\n        num match {\n            case pattern(a, b, c) => true\n            case _ => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\".r\n        pattern.findFirstIn(num) match {\n            case Some(s) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\".r\n        pattern.findFirstIn(num) match {\n            case Some(s) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\".r\n        num match {\n            case pattern(_*) => true\n            case _ => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123023,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]*\\\\.[0-9]{2}$\".r\n        pattern.findFirstIn(num) match {\n            case Some(x) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123040,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.contains(\".\")) {\n            val parts = num.split(\"\\\\.\")\n            if (parts.length == 2) {\n                val (intPart, decimalPart) = (parts(0), parts(1))\n                if (intPart.forall(c => c.isDigit) && decimalPart.forall(c => c.isDigit) && decimalPart.length <= 2) true\n                else false\n            }\n            else false\n        }\n        else false\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123040,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val regex = \"\"\"(\\d+)(\\.\\d{1,2})?\"\"\".r\n        regex.findFirstIn(num) match {\n            case Some(s) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123059,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpg59v89_i.scala:14)\n\tat Problem.main(tmpg59v89_i.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]*\\\\.[0-9]{2}$\".r\n        pattern.findFirstIn(num) match {\n            case Some(s) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.contains(\".\")) {\n            val parts = num.split(\"\\\\.\")\n            if (parts.length != 2) return false\n            if (parts(0).length > 0 && parts(0).forall(c => c.isDigit)) {\n                if (parts(1).length == 2 && parts(1).forall(c => c.isDigit)) return true\n            }\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.length == 0) return false\n        var i = 0\n        var dot = false\n        var hasDigit = false\n        while (i < num.length) {\n            if (num(i) == '.') {\n                if (dot) return false\n                dot = true\n            }\n            else if (num(i) < '0' || num(i) > '9') return false\n            else {\n                if (dot) hasDigit = true\n            }\n            i += 1\n        }\n        if (dot && !hasDigit) return false\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123059,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp75yf5lp_.scala:27)\n\tat Problem.main(tmp75yf5lp_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val regex = \"\"\"(\\d+)(\\.(\\d{1,2}))?\"\"\".r\n        num match {\n            case regex(a, b, c) => true\n            case _ => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.contains('.')) {\n            val parts = num.split('.')\n            if (parts.length != 2) return false\n            if (parts(0).length == 0) return false\n            if (parts(1).length != 2) return false\n            if (parts(0).forall(c => c.isDigit)) {\n                if (parts(1).forall(c => c.isDigit)) return true\n            }\n        }\n        false\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"\"\"(\\d+)(\\.\\d{1,2})?\"\"\".r\n        num match {\n            case pattern(_, _) => true\n            case _ => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"\"\"(\\d+)\\.(\\d{2})\"\"\".r\n        num match {\n            case pattern(a, b) => true\n            case _ => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123041,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"\"\"(\\d+)\\.(\\d{1,2})\"\"\".r\n        num match {\n            case pattern(a, b) => true\n            case _ => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\".r\n        pattern.findFirstIn(num) match {\n            case Some(s) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.contains(\".\")) {\n            val parts = num.split(\"\\\\.\")\n            if (parts.length != 2) return false\n            if (parts(0).length > 0 && parts(0).forall(c => c.isDigit)) {\n                if (parts(1).length == 2 && parts(1).forall(c => c.isDigit)) return true\n            }\n        }\n        false\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123041,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^-?\\\\d+(\\\\.\\\\d{1,2})?$\".r\n        pattern.findFirstIn(num) match {\n            case Some(x) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\".r\n        pattern.findFirstIn(num) match {\n            case Some(s) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.contains(\".\")) {\n            val parts = num.split(\"\\\\.\")\n            if (parts.length == 2) {\n                if (parts(1).length == 2) {\n                    return true\n                }\n            }\n        }\n        false\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp5qgspjc4.scala:18)\n\tat Problem.main(tmp5qgspjc4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.contains(\".\")) {\n            val split = num.split(\"\\\\.\")\n            if (split.length == 2) {\n                if (split(1).length == 2) {\n                    true\n                } else {\n                    false\n                }\n            } else {\n                false\n            }\n        } else {\n            false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123071,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpjyb7voth.scala:23)\n\tat Problem.main(tmpjyb7voth.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\".r\n        pattern.findFirstIn(num) match {\n            case Some(s) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.length == 0) return false\n        val dot = num.indexOf('.')\n        if (dot == -1) {\n            if (num.length > 2) return false\n            return num.forall(c => c >= '0' && c <= '9')\n        }\n        if (dot == 0 || dot == num.length - 1) return false\n        if (dot > 2) return false\n        if (num.substring(0, dot).forall(c => c >= '0' && c <= '9') == false) return false\n        if (num.substring(dot + 1).forall(c => c >= '0' && c <= '9') == false) return false\n        if (num.substring(dot + 1).length > 2) return false\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp3uyb55f0.scala:20)\n\tat Problem.main(tmp3uyb55f0.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.contains(\".\")) {\n            val parts = num.split(\"\\\\.\")\n            if (parts.length == 2) {\n                val (intPart, decPart) = (parts(0), parts(1))\n                if (decPart.length == 2) {\n                    try {\n                        val intValue = intPart.toInt\n                        val decValue = decPart.toInt\n                        return true\n                    } catch {\n                        case e : Exception => return false\n                    }\n                }\n            }\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"\"\"(\\d+)\\.(\\d{2})\"\"\".r\n        num match {\n            case pattern(a, b) => true\n            case _ => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123041,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\".r\n        if (pattern.findFirstIn(num) == None) false else true\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123075,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.length == 0) return false\n        val nums = num.split(\"\\\\.\")\n        if (nums.length > 2) return false\n        if (nums.length == 2) {\n            if (nums(1).length > 2) return false\n        }\n        for (i <- 0 until num.length) {\n            if (!(num(i) >= '0' && num(i) <= '9' || num(i) == '.')) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123076,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.contains(\".\")) {\n            val parts = num.split(\"\\\\.\")\n            if (parts.length == 2) {\n                if (parts(1).length == 2) {\n                    try {\n                        parts(0).toInt\n                        parts(1).toInt\n                        true\n                    } catch {\n                        case e : Exception => false\n                    }\n                } else false\n            } else false\n        } else false\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123075,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\".r\n        pattern.findFirstIn(num) match {\n            case Some(x) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123040,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.contains(\".\")) {\n            val parts = num.split(\"\\\\.\")\n            if (parts.length == 2) {\n                val first = parts(0)\n                val second = parts(1)\n                if (first.length > 0 && second.length == 2) {\n                    if (first.forall(c => c.isDigit) && second.forall(c => c.isDigit)) {\n                        return true\n                    }\n                }\n            }\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123075,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.contains(\".\")) {\n            val parts = num.split(\"\\\\.\")\n            if (parts.length != 2) return false\n            val left = parts(0)\n            val right = parts(1)\n            if (left.length == 0) return false\n            if (right.length > 2) return false\n            if (right.length == 2 && right(0) == '0') return false\n            if (left.length > 1 && left(0) == '0') return false\n            return true\n        }\n        else {\n            if (num.length > 1 && num(0) == '0') return false\n            return true\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123075,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp9zmlhc3q.scala:24)\n\tat Problem.main(tmp9zmlhc3q.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val regex = \"\"\"[0-9]*\\.[0-9]{2}\"\"\".r\n        regex.findFirstIn(num) match {\n            case Some(x) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123075,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpx9k029qj.scala:14)\n\tat Problem.main(tmpx9k029qj.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.contains(\".\")) {\n            val parts = num.split(\"\\\\.\")\n            if (parts.length == 2) {\n                val (left, right) = (parts(0), parts(1))\n                if (left.length > 0 && right.length == 2) {\n                    try {\n                        val n = num.toDouble\n                        true\n                    } catch {\n                        case e : Exception => false\n                    }\n                } else false\n            } else false\n        } else false\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123076,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]+\\\\.[0-9]{2}$\".r\n        pattern.findFirstIn(num) match {\n            case Some(s) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]+\\\\.[0-9]{2}$\".r\n        pattern.findFirstIn(num) match {\n            case Some(s) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]*\\\\.[0-9]{2}$\".r\n        pattern.findFirstIn(num) match {\n            case Some(x) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123040,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"\"\"(\\d+)(\\.\\d{1,2})?\"\"\".r\n        num match {\n            case pattern(_, _) => true\n            case _ => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]*\\\\.[0-9]{2}$\".r\n        pattern.findFirstIn(num) match {\n            case Some(s) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\".r\n        pattern.findFirstIn(num) match {\n            case Some(x) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123040,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]+\\\\.[0-9]{2}$\".r\n        pattern.findFirstIn(num) match {\n            case Some(s) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val regex = \"\"\"(\\d+)\\.(\\d{2})\"\"\".r\n        num match {\n            case regex(_, _) => true\n            case _ => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123041,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\".r\n        pattern.findFirstIn(num) match {\n            case Some(x) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123040,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\".r\n        pattern.findFirstIn(num) match {\n            case Some(s) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\".r\n        pattern.findFirstIn(num) match {\n            case Some(s) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.length == 0) return false\n        var i = 0\n        var dot = false\n        var precision = 0\n        while (i < num.length) {\n            if (num(i) == '.') {\n                if (dot) return false\n                dot = true\n            } else if (!num(i).isDigit) return false\n            else if (dot) precision += 1\n            i += 1\n        }\n        if (dot && precision == 2) return true\n        if (!dot) return true\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123076,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val regex = \"\"\"(\\d+)\\.(\\d{2})\"\"\".r\n        num match {\n            case regex(_, _) => true\n            case _ => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123041,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val regex = \"\"\"(\\d+)(\\.\\d{1,2})?\"\"\".r\n        num match {\n            case regex(_, _) => true\n            case _ => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"\"\"(\\d+)\\.(\\d{2})\"\"\".r\n        num match {\n            case pattern(_, _) => true\n            case _ => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123076,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]*(\\\\.[0-9]{1,2})?$\".r\n        pattern.findFirstIn(num) match {\n            case Some(s) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123076,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val regex = \"\"\"(\\d+)(\\.\\d{1,2})?\"\"\".r\n        num match {\n            case regex(_, _) => true\n            case _ => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"\"\"(\\d*)(\\.\\d{1,2})?\"\"\".r\n        num match {\n            case pattern(_, _) => true\n            case _ => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123076,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\".r\n        pattern.findFirstIn(num) match {\n            case Some(s) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.length == 0) return false\n        var dot = false\n        for (c <- num) {\n            if (c == '.') {\n                if (dot) return false\n                dot = true\n            } else if (!c.isDigit) return false\n        }\n        if (dot) {\n            val index = num.indexOf('.')\n            if (index == num.length - 1) return false\n            if (num.length - index - 1 > 2) return false\n        }\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123076,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.length == 0) return false\n        if (num.length == 1 && num(0) == '.') return false\n        if (num(0) == '.' && num.length == 2) return true\n        if (num(0) == '.') return false\n        if (num(num.length - 1) == '.') return false\n        var decimal = false\n        for (i <- 0 until num.length) {\n            if (num(i) == '.') {\n                if (decimal) return false\n                decimal = true\n            }\n            else if (!(num(i) >= '0' && num(i) <= '9')) return false\n        }\n        if (!decimal) return false\n        var count = 0\n        for (i <- 0 until num.length) {\n            if (num(i) == '.') count = 0\n            else count += 1\n        }\n        if (count > 2) return false\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123077,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.contains('.')) {\n            val parts = num.split('.')\n            if (parts.length == 2) {\n                val left = parts(0)\n                val right = parts(1)\n                if (left.length > 0 && right.length == 2) {\n                    val leftInt = left.toInt\n                    val rightInt = right.toInt\n                    if (leftInt >= 0 && rightInt >= 0) return true\n                }\n            }\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123076,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"e666\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.isDecimal(tmp_drfw_sr.scala:12)\n\tat Problem$.main(tmp_drfw_sr.scala:22)\n\tat Problem.main(tmp_drfw_sr.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\".r\n        pattern.findFirstIn(num) match {\n            case Some(s) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.length == 0) return false\n        val parts = num.split(\"\\\\.\")\n        if (parts.length > 2) return false\n        if (parts.length == 1) return parts(0).forall(c => c.isDigit)\n        if (parts(1).length > 2) return false\n        parts(0).forall(c => c.isDigit) && parts(1).forall(c => c.isDigit)\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123077,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]+(.[0-9]{1,2})?$\".r\n        pattern.findFirstIn(num) match {\n            case Some(s) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123022,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.contains(\".\")) {\n            val parts = num.split(\"\\\\.\")\n            if (parts.length == 2) {\n                if (parts(1).length == 2) {\n                    try {\n                        val n = parts(0).toInt\n                        val d = parts(1).toInt\n                        return true\n                    } catch {\n                        case e : Exception => return false\n                    }\n                }\n            }\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123076,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\".r\n        pattern.findFirstIn(num) match {\n            case Some(_) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123023,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\".r\n        pattern.findFirstIn(num) match {\n            case Some(s) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.contains(\".\")) {\n            val parts = num.split(\"\\\\.\")\n            if (parts.length == 2) {\n                val left = parts(0)\n                val right = parts(1)\n                if (left.length > 0 && right.length == 2) {\n                    val leftNum = left.toInt\n                    val rightNum = right.toInt\n                    return leftNum >= 0 && rightNum >= 0\n                }\n            }\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123077,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"e666\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.isDecimal(tmp8ckikttk.scala:12)\n\tat Problem$.main(tmp8ckikttk.scala:22)\n\tat Problem.main(tmp8ckikttk.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"\"\"(\\d+)\\.(\\d{2})\"\"\".r\n        num match {\n            case pattern(_*) => true\n            case _ => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123041,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.length == 0) return false\n        var dotCount = 0\n        for (i <- 0 until num.length) {\n            if (num(i) == '.') {\n                dotCount += 1\n                if (dotCount > 1) return false\n            }\n            else if (num(i) < '0' || num(i) > '9') return false\n        }\n        if (dotCount == 0) return true\n        if (num.length - num.indexOf('.') - 1 > 2) return false\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123077,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\".r\n        pattern.findFirstIn(num) match {\n            case Some(s) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"\"\"(\\d+)(\\.(\\d{1,2}))?\"\"\".r\n        num match {\n            case pattern(a, b, c) => true\n            case _ => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.contains(\".\")) {\n            val parts = num.split(\"\\\\.\")\n            if (parts.length == 2 && parts(1).length <= 2) true\n            else false\n        }\n        else false\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123081,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpet4vsqto.scala:15)\n\tat Problem.main(tmpet4vsqto.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.length == 0) return false\n        if (num.length == 1) return num(0).isDigit\n        if (num(0) == '-') return isDecimal(num.substring(1))\n        if (num(0) == '.') return isDecimal(num.substring(1))\n        if (num(0).isDigit) {\n            if (num.length == 2) return num(1).isDigit\n            if (num(1) == '.') {\n                if (num.length == 3) return num(2).isDigit\n                if (num(2).isDigit) {\n                    if (num.length == 4) return num(3).isDigit\n                    return false\n                }\n                return false\n            }\n            return isDecimal(num.substring(1))\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val decimal = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n        num.matches(decimal)\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123081,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.contains(\".\")) {\n            val parts = num.split(\"\\\\.\")\n            if (parts.length == 2) {\n                val (left, right) = (parts(0), parts(1))\n                if (left.length == 0) {\n                    if (right.length == 1 || right.length == 2) {\n                        return true\n                    }\n                } else {\n                    if (right.length == 1 || right.length == 2) {\n                        return true\n                    }\n                }\n            }\n        }\n        false\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp2cqn92tg.scala:25)\n\tat Problem.main(tmp2cqn92tg.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"[0-9]+(\\\\.[0-9]{1,2})?\".r\n        pattern.findFirstIn(num) match {\n            case Some(x) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmph28m2eo8.scala:14)\n\tat Problem.main(tmph28m2eo8.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\".r\n        pattern.findFirstIn(num) match {\n            case Some(s) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]+\\\\.[0-9]{1,2}$\".r\n        pattern.findFirstIn(num) match {\n            case Some(x) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.length == 0) return false\n        var i = 0\n        var dot = false\n        while (i < num.length) {\n            if (num(i) == '.') {\n                if (dot) return false\n                dot = true\n            } else if (!num(i).isDigit) return false\n            i += 1\n        }\n        if (dot) {\n            var dotPos = num.indexOf('.')\n            if (dotPos == num.length - 1) return false\n            if (dotPos == num.length - 3) return true\n            return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        if (num.contains(\".\")) {\n            val parts = num.split(\"\\\\.\")\n            if (parts.length != 2) return false\n            if (parts(0).length > 0) {\n                if (!parts(0).forall(c => c.isDigit)) return false\n            }\n            if (parts(1).length != 2) return false\n            if (!parts(1).forall(c => c.isDigit)) return false\n            return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]+\\\\.[0-9]{1,2}$\".r\n        pattern.findFirstIn(num) match {\n            case Some(x) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\".r\n        pattern.findFirstIn(num) match {\n            case Some(s) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val regex = \"^[0-9]+(\\\\.[0-9]{1,2})?$\".r\n        regex.findFirstIn(num) match {\n            case Some(s) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n        val pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\".r\n        pattern.findFirstIn(num) match {\n            case Some(x) => true\n            case None => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
      "timestamp": 1666123040,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}