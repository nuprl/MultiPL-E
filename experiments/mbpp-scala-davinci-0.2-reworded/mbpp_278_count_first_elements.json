{
  "name": "mbpp_278_count_first_elements",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    def countFirstElements(test_tup : Either[Long, Long]) : Long = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_278_count_first_elements.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(countFirstElements((1l, 5l, 7l, (4l, 6l), 10l)) == (3l));\n    assert(countFirstElements((2l, 9l, (5l, 7l), 11l)) == (2l));\n    assert(countFirstElements((11l, 15l, 5l, 8l, (2l, 3l), 8l)) == (4l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        val tup = test_tup.right.get\n        val n = tup._1\n        val k = tup._2\n        val count = n - k + 1\n        count",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        val tup = test_tup.right.get\n        val n = tup._1\n        val k = tup._2\n        val max_num = pow(10, n).toLong\n        val max_k = pow(10, k).toLong\n        val nums = new Array[Long](max_num.toInt)\n        for (i <- 0 until max_num.toInt) nums(i) = i\n        val nums_perm = nums.permutations.toList\n        val nums_perm_str = nums_perm.map(x => x.mkString)\n        val nums_perm_str_sorted = nums_perm_str.sorted\n        val nums_perm_str_sorted_filtered = nums_perm_str_sorted.filter(x => x.startsWith(\"0\") == false)\n        val nums_perm_str_sorted_filtered_sub = nums_perm_str_sorted_filtered.take(max_k.toInt)\n        val nums_perm_str_sorted_filtered_sub_last = nums_perm_str_sorted_filtered_sub.last\n        val nums_perm_str_sorted_filtered_sub_last_index = nums_perm_str_sorted_filtered.indexOf(nums_perm_str_sorted_filtered_sub_last)\n        nums_perm_str_sorted_filtered_sub_last_index",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }"
  ]
}