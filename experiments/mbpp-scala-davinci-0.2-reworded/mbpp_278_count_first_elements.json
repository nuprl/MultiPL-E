{
  "name": "mbpp_278_count_first_elements",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    def countFirstElements(test_tup : Either[Long, Long]) : Long = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_278_count_first_elements.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(countFirstElements((1l, 5l, 7l, (4l, 6l), 10l)) == (3l));\n    assert(countFirstElements((2l, 9l, (5l, 7l), 11l)) == (2l));\n    assert(countFirstElements((11l, 15l, 5l, 8l, (2l, 3l), 8l)) == (4l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        val tup = test_tup.right.get\n        val n = tup._1\n        val k = tup._2\n        val count = n - k + 1\n        count",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        val tup = test_tup.right.get\n        val n = tup._1\n        val k = tup._2\n        val max_num = pow(10, n).toLong\n        val max_k = pow(10, k).toLong\n        val nums = new Array[Long](max_num.toInt)\n        for (i <- 0 until max_num.toInt) nums(i) = i\n        val nums_perm = nums.permutations.toList\n        val nums_perm_str = nums_perm.map(x => x.mkString)\n        val nums_perm_str_sorted = nums_perm_str.sorted\n        val nums_perm_str_sorted_filtered = nums_perm_str_sorted.filter(x => x.startsWith(\"0\") == false)\n        val nums_perm_str_sorted_filtered_sub = nums_perm_str_sorted_filtered.take(max_k.toInt)\n        val nums_perm_str_sorted_filtered_sub_last = nums_perm_str_sorted_filtered_sub.last\n        val nums_perm_str_sorted_filtered_sub_last_index = nums_perm_str_sorted_filtered.indexOf(nums_perm_str_sorted_filtered_sub_last)\n        nums_perm_str_sorted_filtered_sub_last_index",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        val tup = test_tup.right.get\n        val n = tup._1\n        val k = tup._2\n        val r = n - k\n        val result = (n * (n - 1)) / 2 - (r * (r - 1)) / 2\n        return result",
    "        val tup = test_tup.right.get\n        val n = tup._1\n        val k = tup._2\n        val a = tup._3\n        val b = tup._4\n        val c = tup._5\n        val r = tup._6\n        val m = tup._7\n        val x = tup._8\n        val y = tup._9\n        val z = tup._10\n        val mod = tup._11\n        val arr = Array.ofDim[Long](n.toInt)\n        arr(0) = x\n        arr(1) = y\n        arr(2) = z\n        for (i <- 3 until n.toInt) {\n            arr(i) = (a * arr(i - 1) + b * arr(i - 2) + c) % r\n        }\n        val arr2 = Array.ofDim[Long](m.toInt)\n        arr2(0) = x\n        arr2(1) = y\n        arr2(2) = z\n        for (i <- 3 until m.toInt) {\n            arr2(i) = (a * arr2(i - 1) + b * arr2(i - 2) + c) % r\n        }\n        val arr3 = Array.ofDim[Long](m.toInt)\n        for (i <- 0 until m.toInt) {\n            arr3(i) = arr2(i) % n\n        }\n        val arr4 = Array.ofDim[Long](n.toInt)\n        for (i <- 0 until m.toInt) {\n            arr4(arr3(i).toInt) += 1\n        }\n        var count = 0L\n        for (i <- 0 until n.toInt) {\n            if (arr4(i) == 0) {\n                count += 1\n            }\n            else {\n                break\n            }\n        }\n        count",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        val tup = test_tup.right.get\n        val n = tup._1\n        val k = tup._2\n        val a = tup._3\n        val b = tup._4\n        val c = tup._5\n        val r = tup._6\n        val m = tup._7\n        val x = tup._8\n        val y = tup._9\n        val z = tup._10\n        val mod = 1000000007\n        val arr = Array.fill(n.toInt)(0L)\n        arr(0) = x\n        arr(1) = y\n        arr(2) = z\n        for (i <- 3 until n.toInt) {\n            arr(i) = (a * arr(i - 1) + b * arr(i - 2) + c * arr(i - 3)) % r\n        }\n        val arr2 = Array.fill(k.toInt)(0L)\n        for (i <- 0 until k.toInt) {\n            arr2(i) = arr(i)\n        }\n        scala.util.Sorting.quickSort(arr2)\n        val arr3 = Array.fill(k.toInt)(0L)\n        for (i <- 0 until k.toInt) {\n            arr3(i) = arr2(i)\n        }\n        var count = 0L\n        for (i <- 0 until k.toInt) {\n            val index = arr3.indexOf(arr(i))\n            count += index\n            arr3(index) = -1\n        }\n        for (i <- k.toInt until n.toInt) {\n            val index = arr3.indexOf(arr(i))\n            count += index\n            arr3(index) = arr(i - k.toInt)\n            val index2 = arr3.indexOf(arr(i - k.toInt))\n            arr3(index2) = -1\n        }\n        count % mod",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        var count = 0\n        for (i <- 0 to test_tup.length - 1) {\n            if (test_tup(i) == test_tup.length - 1) {\n                return count\n            }\n            count += 1\n        }\n        return count",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => 0\n            case Right(x) => 1 + countFirstElements(x)\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        val tup = test_tup.right.get\n        val tup_len = tup.productArity\n        var count = 0\n        for (i <- 0 until tup_len) {\n            if (tup.productElement(i) == tup_len) {\n                count = i\n                return count\n            }\n        }\n        return count",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        val tup = test_tup.right.get\n        val sqrt_tup = sqrt(tup).toLong\n        val num_elements = sqrt_tup * (sqrt_tup + 1) / 2\n        val num_elements_before = num_elements - (tup - sqrt_tup * sqrt_tup)\n        num_elements_before",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        val tup = test_tup.right.get\n        val n = tup._1\n        val k = tup._2\n        val r = tup._3\n        val s = tup._4\n        val p = tup._5\n        val j = tup._6\n        val d = tup._7\n        val m = tup._8\n        val t = tup._9\n        val w = tup._10\n        val f = tup._11\n        val l = tup._12\n        val c = tup._13\n        val h = tup._14\n        val v = tup._15\n        val b = tup._16\n        val x = tup._17\n        val q = tup._18\n        val z = tup._19\n        val g = tup._20\n        val y = tup._21\n        val count = n + k + r + s + p + j + d + m + t + w + f + l + c + h + v + b + x + q + z + g + y\n        count",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        var count : Long = 0\n        test_tup match {\n            case Left(x) => count = x\n            case Right(x) => count = x\n        }\n        return count",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        val (a, b) = test_tup match {\n            case Left(a) => (a, 0)\n            case Right(b) => (0, b)\n        }\n        a + b",
    "        val tup = test_tup.right.get\n        val n = tup._1\n        val k = tup._2\n        val max_num = n - k + 1\n        val min_num = n - 2 * k + 2\n        val max_count = max_num * (max_num - 1) / 2\n        val min_count = min_num * (min_num - 1) / 2\n        max_count - min_count",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        val tup = test_tup.right.get\n        val tup_list = tup.productIterator.toList\n        val index = tup_list.indexOf(tup_list.last)\n        val first_elements = tup_list.take(index)\n        first_elements.length",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        var count : Long = 0\n        test_tup match {\n            case Left(x) => count = x\n            case Right(x) => count = count + x\n        }\n        return count",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        val tup = test_tup.right.get\n        val n = tup._1\n        val k = tup._2\n        val m = tup._3\n        val a = tup._4\n        val b = tup._5\n        val c = tup._6\n        val r = tup._7\n        val x0 = tup._8\n        val y0 = tup._9\n        val z0 = tup._10\n        var x = x0\n        var y = y0\n        var z = z0\n        var count = 0\n        for (i <- 1 to k) {\n            val xi = (a * x + b * y + c) % r\n            val yi = (a * y + b * z + c) % r\n            val zi = (a * z + b * x + c) % r\n            x = xi\n            y = yi\n            z = zi\n            if (x % 3 == 0 && y % 3 == 0 && z % 3 == 0) count += 1\n        }\n        count",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(y) => y\n        }",
    "        val tup = test_tup.right.get\n        val first = tup._1\n        val second = tup._2\n        val first_count = first - 1\n        val second_count = (second - 1) * first\n        first_count + second_count",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        val tup = test_tup.right.get\n        val n = tup.productArity\n        var count = 0\n        for (i <- 0 until n) {\n            if (tup.productElement(i) == tup._2) return count\n            count += 1\n        }\n        return -1",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        val tup_list = test_tup match {\n            case Left(x) => List(x)\n            case Right(x) => List(x)\n        }\n        tup_list.length",
    "        var count : Long = 0\n        for (i <- 0 to test_tup.length - 1) {\n            if (test_tup(i) == test_tup(test_tup.length - 1)) {\n                return count\n            }\n            count += 1\n        }\n        return count",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }",
    "        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }"
  ]
}