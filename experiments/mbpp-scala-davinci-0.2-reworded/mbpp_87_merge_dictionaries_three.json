{
  "name": "mbpp_87_merge_dictionaries_three",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to merge three dictionaries into a single map.\n    def mergeDictionariesThree(dict1 : Map[String,String], dict2 : Map[String,String], dict3 : Map[String,String]) : Map[String,String] = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_87_merge_dictionaries_three.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(mergeDictionariesThree((Map[String,String](\"R\" -> \"Red\", \"B\" -> \"Black\", \"P\" -> \"Pink\")), (Map[String,String](\"G\" -> \"Green\", \"W\" -> \"White\")), (Map[String,String](\"O\" -> \"Orange\", \"W\" -> \"White\", \"B\" -> \"Black\"))).equals((Map[String,String](\"B\" -> \"Black\", \"R\" -> \"Red\", \"P\" -> \"Pink\", \"G\" -> \"Green\", \"W\" -> \"White\", \"O\" -> \"Orange\"))));\n    assert(mergeDictionariesThree((Map[String,String](\"R\" -> \"Red\", \"B\" -> \"Black\", \"P\" -> \"Pink\")), (Map[String,String](\"G\" -> \"Green\", \"W\" -> \"White\")), (Map[String,String](\"L\" -> \"lavender\", \"B\" -> \"Blue\"))).equals((Map[String,String](\"W\" -> \"White\", \"P\" -> \"Pink\", \"B\" -> \"Black\", \"R\" -> \"Red\", \"G\" -> \"Green\", \"L\" -> \"lavender\"))));\n    assert(mergeDictionariesThree((Map[String,String](\"R\" -> \"Red\", \"B\" -> \"Black\", \"P\" -> \"Pink\")), (Map[String,String](\"L\" -> \"lavender\", \"B\" -> \"Blue\")), (Map[String,String](\"G\" -> \"Green\", \"W\" -> \"White\"))).equals((Map[String,String](\"B\" -> \"Black\", \"P\" -> \"Pink\", \"R\" -> \"Red\", \"G\" -> \"Green\", \"L\" -> \"lavender\", \"W\" -> \"White\"))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        dict1 ++ dict2 ++ dict3",
    "        dict1 ++ dict2 ++ dict3",
    "        dict1 ++ dict2 ++ dict3",
    "        var result = Map[String,String]()\n        for ((key, value) <- dict1) result += (key -> value)\n        for ((key, value) <- dict2) result += (key -> value)\n        for ((key, value) <- dict3) result += (key -> value)\n        return result",
    "        var result = Map[String,String]()\n        for (k <- dict1.keys) result += (k -> dict1(k))\n        for (k <- dict2.keys) result += (k -> dict2(k))\n        for (k <- dict3.keys) result += (k -> dict3(k))\n        result",
    "        var result = Map[String,String]()\n        for ((k,v) <- dict1) {\n            result += (k -> v)\n        }\n        for ((k,v) <- dict2) {\n            result += (k -> v)\n        }\n        for ((k,v) <- dict3) {\n            result += (k -> v)\n        }\n        return result",
    "        dict1 ++ dict2 ++ dict3",
    "        dict1 ++ dict2 ++ dict3",
    "        dict1 ++ dict2 ++ dict3",
    "        dict1 ++ dict2 ++ dict3",
    "        dict1 ++ dict2 ++ dict3",
    "        dict1 ++ dict2 ++ dict3",
    "        var result = Map[String,String]()\n        for ((key,value) <- dict1) {\n            result += (key -> value)\n        }\n        for ((key,value) <- dict2) {\n            result += (key -> value)\n        }\n        for ((key,value) <- dict3) {\n            result += (key -> value)\n        }\n        return result",
    "        var result = Map[String,String]()\n        for ((key, value) <- dict1) result += (key -> value)\n        for ((key, value) <- dict2) result += (key -> value)\n        for ((key, value) <- dict3) result += (key -> value)\n        result",
    "        var result = Map[String,String]()\n        for ((key,value) <- dict1) result += (key -> value)\n        for ((key,value) <- dict2) result += (key -> value)\n        for ((key,value) <- dict3) result += (key -> value)\n        return result",
    "        dict1 ++ dict2 ++ dict3",
    "        dict1 ++ dict2 ++ dict3",
    "        dict1 ++ dict2 ++ dict3",
    "        val dict = new HashMap[String,String]\n        for ((k,v) <- dict1) dict += (k -> v)\n        for ((k,v) <- dict2) dict += (k -> v)\n        for ((k,v) <- dict3) dict += (k -> v)\n        dict",
    "        var result = Map[String,String]()\n        for ((k,v) <- dict1) result += (k -> v)\n        for ((k,v) <- dict2) result += (k -> v)\n        for ((k,v) <- dict3) result += (k -> v)\n        result"
  ]
}