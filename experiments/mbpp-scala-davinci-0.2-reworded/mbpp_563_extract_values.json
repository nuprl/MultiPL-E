{
  "name": "mbpp_563_extract_values",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract values between quotation marks from a string.\n    def extractValues(text : String) : List[String] = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_563_extract_values.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(extractValues((\"\"Python\", \"PHP\", \"Java\"\")).equals((List[String](\"Python\", \"PHP\", \"Java\"))));\n    assert(extractValues((\"\"python\",\"program\",\"language\"\")).equals((List[String](\"python\", \"program\", \"language\"))));\n    assert(extractValues((\"\"red\",\"blue\",\"green\",\"yellow\"\")).equals((List[String](\"red\", \"blue\", \"green\", \"yellow\"))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val pattern = \"\\\"(.*?)\\\"\".r\n        val matches = pattern.findAllIn(text)\n        matches.toList",
    "        val pattern = \"\"\"\\\"(.*?)\\\"\"\"\".r\n        pattern.findAllIn(text).toList",
    "        val pattern = \"\\\"(.*?)\\\"\".r\n        val matches = pattern.findAllIn(text)\n        val values = new ListBuffer[String]\n        while (matches.hasNext) {\n            values += matches.group(1)\n        }\n        values.toList",
    "        val pattern = \"\"\"\"(.*?)\"\"\"\".r\n        pattern.findAllIn(text).toList",
    "        val pattern = \"\\\"(.*?)\\\"\".r\n        val matches = pattern.findAllIn(text)\n        val values = new ListBuffer[String]\n        for (m <- matches) values += m.substring(1, m.length - 1)\n        values.toList",
    "        val pattern = \"\"\"\"(.*?)\"\"\"\".r\n        val matches = pattern.findAllIn(text)\n        val values = new ListBuffer[String]()\n        for (m <- matches) values += m.substring(1, m.length() - 1)\n        values.toList",
    "        val pattern = \"\"\"\"(.*?)\"\"\"\".r\n        val matches = pattern.findAllIn(text)\n        matches.toList",
    "        val pattern = \"\\\"(.*?)\\\"\".r\n        val matches = pattern.findAllIn(text)\n        val values = new ListBuffer[String]\n        while (matches.hasNext) {\n            values += matches.group(1)\n        }\n        values.toList",
    "        val pattern = \"\\\"(.*?)\\\"\".r\n        val matches = pattern.findAllIn(text)\n        matches.toList",
    "        val pattern = \"\\\"(.*?)\\\"\".r\n        val matches = pattern.findAllIn(text)\n        matches.toList",
    "        val pattern = \"\\\"(.*?)\\\"\".r\n        val matches = pattern.findAllIn(text)\n        matches.toList",
    "        val pattern = \"\"\"\"(.*?)\"\"\"\".r\n        val matches = pattern.findAllIn(text)\n        val result = new ListBuffer[String]()\n        for (m <- matches) result += m.substring(1, m.length - 1)\n        result.toList",
    "        val pattern = \"\\\"(.*?)\\\"\".r\n        val matches = pattern.findAllIn(text)\n        matches.toList",
    "        var result = List[String]()\n        var index = 0\n        while (index < text.length) {\n            if (text(index) == '\"') {\n                var value = \"\"\n                index += 1\n                while (index < text.length && text(index) != '\"') {\n                    value += text(index)\n                    index += 1\n                }\n                result = value :: result\n            }\n            index += 1\n        }\n        result",
    "        val values = new ListBuffer[String]\n        var inQuote = false\n        var currentValue = \"\"\n        for (c <- text) {\n            if (c == '\"') {\n                if (inQuote) {\n                    values += currentValue\n                    currentValue = \"\"\n                }\n                inQuote = !inQuote\n            } else if (inQuote) {\n                currentValue += c\n            }\n        }\n        values.toList",
    "        val pattern = \"\\\"(.*?)\\\"\".r\n        val matches = pattern.findAllIn(text)\n        matches.toList",
    "        val pattern = \"\\\"(.*?)\\\"\".r\n        val values = pattern.findAllIn(text).toList\n        values",
    "        val pattern = \"\\\"(.*?)\\\"\".r\n        val matches = pattern.findAllIn(text)\n        val values = new ListBuffer[String]\n        for (m <- matches) {\n            values += m.substring(1, m.length - 1)\n        }\n        values.toList",
    "        val regex = \"\"\"(?<=\")(.*?)(?=\")\"\"\".r\n        regex.findAllIn(text).toList",
    "        val pattern = \"\\\"(.*?)\\\"\".r\n        val matches = pattern.findAllIn(text)\n        matches.toList"
  ]
}