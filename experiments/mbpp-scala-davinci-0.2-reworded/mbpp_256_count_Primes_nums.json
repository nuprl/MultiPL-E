{
  "name": "mbpp_256_count_Primes_nums",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_256_count_Primes_nums.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var count = 0L\n        for (i <- 2L to n) {\n            var flag = true\n            for (j <- 2L to sqrt(i).toLong) {\n                if (i % j == 0) {\n                    flag = false\n                    break\n                }\n            }\n            if (flag) count += 1\n        }\n        count",
    "        var count = 0L\n        for (i <- 2L to n) {\n            if (isPrime(i)) count += 1\n        }\n        count",
    "        val primes = Array.fill(n.toInt)(true)\n        for (i <- 2 until n.toInt) {\n            if (primes(i)) {\n                var j = 2\n                while (i * j < n) {\n                    primes(i * j) = false\n                    j += 1\n                }\n            }\n        }\n        var count = 0\n        for (i <- 2 until n.toInt) {\n            if (primes(i)) count += 1\n        }\n        count",
    "        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        return count",
    "        var count = 0L\n        for (i <- 2L until n) {\n            if (isPrime(i)) count += 1\n        }\n        count",
    "        var count = 0L\n        for (i <- 2L to n) {\n            if (isPrime(i)) count += 1\n        }\n        count",
    "        def isPrime(n : Long) : Boolean = {\n            if (n < 2) return false\n            if (n == 2) return true\n            if (n % 2 == 0) return false\n            val sqrt = sqrt(n).toLong\n            for (i <- 3L to sqrt by 2) {\n                if (n % i == 0) return false\n            }\n            return true\n        }\n        var count = 0L\n        for (i <- 0L until n) {\n            if (isPrime(i)) count += 1\n        }\n        return count",
    "        var count = 0L\n        for (i <- 2L until n) {\n            if (isPrime(i)) count += 1\n        }\n        count",
    "        var count = 0\n        for (i <- 1L to n) {\n            if (isPrime(i)) count += 1\n        }\n        count",
    "        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        return count",
    "        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        count",
    "        var count = 0\n        for (i <- 2 to n.toInt) {\n            var isPrime = true\n            for (j <- 2 to sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime = false\n                    break\n                }\n            }\n            if (isPrime) count += 1\n        }\n        count",
    "        var count = 0\n        for (i <- 2L to n) {\n            if (isPrime(i)) count += 1\n        }\n        count",
    "        def isPrime(n : Long) : Boolean = {\n            if (n == 1) return false\n            if (n == 2) return true\n            if (n % 2 == 0) return false\n            val sqrt = sqrt(n).toLong\n            for (i <- 3L to sqrt by 2) {\n                if (n % i == 0) return false\n            }\n            return true\n        }\n        var count = 0L\n        for (i <- 1L to n) {\n            if (isPrime(i)) count += 1\n        }\n        return count",
    "        if (n <= 2) return 0\n        var count = 1\n        for (i <- 3 to n.toInt by 2) {\n            if (isPrime(i)) count += 1\n        }\n        return count",
    "        if (n < 2) return 0\n        val primes = new Array[Boolean](n.toInt)\n        for (i <- 2 until n.toInt) primes(i) = true\n        for (i <- 2 until sqrt(n).toInt) {\n            if (primes(i)) {\n                for (j <- i * i until n.toInt by i) {\n                    primes(j) = false\n                }\n            }\n        }\n        var count = 0\n        for (i <- 2 until n.toInt) if (primes(i)) count += 1\n        count",
    "        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        count",
    "        var count = 0L\n        for (i <- 2L to n) {\n            if (isPrime(i)) count += 1\n        }\n        count",
    "        var count = 0\n        for (i <- 2 to n.toInt) {\n            var isPrime = true\n            for (j <- 2 to sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime = false\n                    break\n                }\n            }\n            if (isPrime) count += 1\n        }\n        return count",
    "        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        count",
    "        if (n < 2) return 0\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        return count",
    "        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        count",
    "        var count = 0L\n        for (i <- 2L until n) {\n            if (isPrime(i)) count += 1\n        }\n        count",
    "        var count = 0\n        for (i <- 2 until n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        count",
    "        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) {\n                count += 1\n            }\n        }\n        return count",
    "        var count = 0L\n        for (i <- 2L to n) {\n            if (isPrime(i)) count += 1\n        }\n        count",
    "        var count = 0\n        for (i <- 2L to n) {\n            var isPrime = true\n            for (j <- 2L to sqrt(i).toLong) {\n                if (i % j == 0) {\n                    isPrime = false\n                    break\n                }\n            }\n            if (isPrime) count += 1\n        }\n        count",
    "        var count = 0L\n        for (i <- 2L to n) {\n            if (isPrime(i)) count += 1\n        }\n        count",
    "        var count = 0\n        for (i <- 2L to n) {\n            if (isPrime(i)) count += 1\n        }\n        count",
    "        var count = 0L\n        for (i <- 2L until n) {\n            if (isPrime(i)) count += 1\n        }\n        count",
    "        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) {\n                count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        count",
    "        var count = 0\n        for (i <- 2L to n) {\n            if (isPrime(i)) count += 1\n        }\n        return count",
    "        var count = 0\n        for (i <- 2L until n) {\n            if (isPrime(i)) count += 1\n        }\n        count",
    "        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        return count",
    "        var count = 0\n        for (i <- 2L until n) {\n            if (isPrime(i)) count += 1\n        }\n        return count",
    "        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        count",
    "        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        count",
    "        var count = 0L\n        for (i <- 1L to n) {\n            if (isPrime(i)) count += 1\n        }\n        count",
    "        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        count",
    "        var count = 0L\n        for (i <- 2L to n) {\n            if (isPrime(i)) count += 1\n        }\n        count",
    "        var count = 0L\n        for (i <- 1L to n) {\n            if (isPrime(i)) count += 1\n        }\n        count",
    "        var count = 0\n        for (i <- 2L until n) {\n            if (isPrime(i)) count += 1\n        }\n        count",
    "        var count = 0L\n        for (i <- 2L until n) {\n            if (isPrime(i)) count += 1\n        }\n        count",
    "        var count = 0\n        for (i <- 2L to n) {\n            if (isPrime(i)) count += 1\n        }\n        count",
    "        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        count",
    "        var count = 0L\n        for (i <- 2L to n) {\n            if (isPrime(i)) count += 1\n        }\n        count",
    "        if (n < 2) return 0\n        var primes = new Array[Boolean](n.toInt)\n        for (i <- 0 until n.toInt) primes(i) = true\n        for (i <- 2 until n.toInt) {\n            if (primes(i)) {\n                for (j <- i * i until n.toInt by i) {\n                    primes(j) = false\n                }\n            }\n        }\n        var count = 0\n        for (i <- 2 until n.toInt) {\n            if (primes(i)) count += 1\n        }\n        return count",
    "        var count = 0L\n        for (i <- 2L until n) {\n            var isPrime = true\n            for (j <- 2L until i) {\n                if (i % j == 0) {\n                    isPrime = false\n                    break\n                }\n            }\n            if (isPrime) count += 1\n        }\n        count",
    "        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        count",
    "        var count = 0L\n        for (i <- 2L to n) {\n            if (isPrime(i)) count += 1\n        }\n        return count",
    "        // Write your code here\n        var count = 0\n        for (i <- 1 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        count",
    "        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        count",
    "        var count = 0L\n        for (i <- 2L until n) {\n            if (isPrime(i)) count += 1\n        }\n        return count",
    "        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        return count",
    "        var count = 0\n        for (i <- 2L to n) {\n            if (isPrime(i)) count += 1\n        }\n        return count",
    "        var count = 0L\n        for (i <- 2L to n) {\n            if (isPrime(i)) count += 1\n        }\n        count",
    "        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        count",
    "        var count = 0L\n        for (i <- 2L until n) {\n            if (isPrime(i)) count += 1\n        }\n        count",
    "        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        count",
    "        var count = 0L\n        for (i <- 2L to n) {\n            if (isPrime(i)) count += 1\n        }\n        count",
    "        var count = 0L\n        for (i <- 2L to n) {\n            if (isPrime(i)) count += 1\n        }\n        count",
    "        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        count",
    "        var count = 0L\n        for (i <- 2L to n) {\n            if (isPrime(i)) count += 1\n        }\n        count",
    "        // Write your code here\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        return count",
    "        var count = 0\n        for (i <- 2L to n) {\n            if (isPrime(i)) count += 1\n        }\n        count",
    "        var count = 0L\n        for (i <- 1L to n) {\n            if (isPrime(i)) count += 1\n        }\n        count",
    "        var count = 0L\n        for (i <- 2L to n) {\n            if (isPrime(i)) count += 1\n        }\n        count",
    "        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        count",
    "        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        return count",
    "        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        return count",
    "        var count = 0L\n        for (i <- 2L to n) {\n            if (isPrime(i)) count += 1\n        }\n        count",
    "        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        return count",
    "        def isPrime(n : Long) : Boolean = {\n            if (n == 1) return false\n            if (n == 2) return true\n            if (n % 2 == 0) return false\n            val sqrt = sqrt(n).toLong\n            for (i <- 3L to sqrt by 2) {\n                if (n % i == 0) return false\n            }\n            return true\n        }\n        var count = 0L\n        for (i <- 1L to n) {\n            if (isPrime(i)) count += 1\n        }\n        return count",
    "        if (n < 2) return 0\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        return count",
    "        var count = 0\n        for (i <- 2 to n.toInt) {\n            var isPrime = true\n            for (j <- 2 to sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime = false\n                    break\n                }\n            }\n            if (isPrime) count += 1\n        }\n        count",
    "        var count = 0\n        for (i <- 1 to n.toInt) {\n            if (isPrime(i)) {\n                count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 2L until n) {\n            if (isPrime(i)) count += 1\n        }\n        count",
    "        var count = 0\n        for (i <- 2L to n) {\n            if (isPrime(i)) count += 1\n        }\n        count",
    "        var count = 0\n        for (i <- 2L to n) {\n            if (isPrime(i)) count += 1\n        }\n        count",
    "        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        count",
    "        var count = 0\n        for (i <- 2 to n.toInt) {\n            var isPrime = true\n            for (j <- 2 to sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime = false\n                    break\n                }\n            }\n            if (isPrime) count += 1\n        }\n        count",
    "        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        return count",
    "        var count = 0L\n        for (i <- 2L until n) {\n            if (isPrime(i)) count += 1\n        }\n        count",
    "        var count = 0L\n        for (i <- 2L to n) {\n            if (isPrime(i)) count += 1\n        }\n        count",
    "        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        count",
    "        var count = 0L\n        for (i <- 2L until n) {\n            if (isPrime(i)) count += 1\n        }\n        count",
    "        // Write your code here\n        return 0",
    "        var count = 0\n        for (i <- 2 to n.toInt) {\n            var isPrime = true\n            for (j <- 2 to sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime = false\n                    break\n                }\n            }\n            if (isPrime) count += 1\n        }\n        return count",
    "        var count = 0\n        for (i <- 2 to n.toInt) {\n            var isPrime = true\n            for (j <- 2 to sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime = false\n                    break\n                }\n            }\n            if (isPrime) count += 1\n        }\n        count",
    "        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        count",
    "        var count = 0L\n        for (i <- 2L until n) {\n            if (isPrime(i)) count += 1\n        }\n        count",
    "        var count = 0L\n        for (i <- 2L until n) {\n            if (isPrime(i)) count += 1\n        }\n        count",
    "        var count = 0L\n        for (i <- 1L to n) {\n            if (isPrime(i)) count += 1\n        }\n        count",
    "        var count = 0L\n        for (i <- 1L to n) {\n            if (isPrime(i)) count += 1\n        }\n        count",
    "        var count = 0L\n        for (i <- 2L to n) {\n            if (isPrime(i)) count += 1\n        }\n        count",
    "        if (n < 2) return 0\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        return count",
    "        var count = 0\n        for (i <- 2L to n) {\n            if (isPrime(i)) count += 1\n        }\n        count",
    "        var count = 0L\n        for (i <- 2L until n) {\n            if (isPrime(i)) count += 1\n        }\n        count",
    "        var count = 0L\n        for (i <- 2L to n) {\n            if (isPrime(i)) count += 1\n        }\n        count",
    "        var count = 0L\n        for (i <- 2L until n) {\n            if (isPrime(i)) count += 1\n        }\n        count",
    "        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        return count",
    "        if (n < 2) return 0\n        val sieve = new Array[Boolean](n.toInt)\n        var i = 2\n        while (i < n) {\n            if (!sieve(i)) {\n                var j = i * i\n                while (j < n) {\n                    sieve(j) = true\n                    j += i\n                }\n            }\n            i += 1\n        }\n        var count = 0\n        i = 2\n        while (i < n) {\n            if (!sieve(i)) count += 1\n            i += 1\n        }\n        count",
    "        var count = 0\n        for (i <- 2 to n.toInt) {\n            var isPrime = true\n            for (j <- 2 to sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime = false\n                    break\n                }\n            }\n            if (isPrime) count += 1\n        }\n        count",
    "        def isPrime(n : Long) : Boolean = {\n            if (n == 1) return false\n            if (n == 2) return true\n            if (n % 2 == 0) return false\n            val sqrt = sqrt(n).toLong\n            for (i <- 3L to sqrt by 2) {\n                if (n % i == 0) return false\n            }\n            return true\n        }\n        var count = 0L\n        for (i <- 1L to n) {\n            if (isPrime(i)) count += 1\n        }\n        return count",
    "        var count = 0\n        for (i <- 2 to n.toInt) {\n            var isPrime = true\n            for (j <- 2 to sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime = false\n                    break\n                }\n            }\n            if (isPrime) count += 1\n        }\n        return count",
    "        var count = 0L\n        for (i <- 2L until n) {\n            if (isPrime(i)) count += 1\n        }\n        count",
    "        def isPrime(n : Long) : Boolean = {\n            if (n <= 1) return false\n            if (n == 2) return true\n            if (n % 2 == 0) return false\n            val sqrtN = sqrt(n).toLong\n            var i = 3\n            while (i <= sqrtN) {\n                if (n % i == 0) return false\n                i += 2\n            }\n            return true\n        }\n        var count = 0\n        var i = 0\n        while (i < n) {\n            if (isPrime(i)) count += 1\n            i += 1\n        }\n        return count",
    "        var count = 0\n        for (i <- 2L to n) {\n            if (isPrime(i)) count += 1\n        }\n        return count",
    "        var count = 0L\n        for (i <- 2L until n) {\n            if (isPrime(i)) count += 1\n        }\n        count",
    "        var count = 0L\n        for (i <- 2L to n) {\n            if (isPrime(i)) count += 1\n        }\n        count",
    "        var count = 0\n        for (i <- 2L to n) {\n            if (isPrime(i)) count += 1\n        }\n        count",
    "        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        count",
    "        var count = 0L\n        for (i <- 2L until n) {\n            var isPrime = true\n            for (j <- 2L until i) {\n                if (i % j == 0) {\n                    isPrime = false\n                    break\n                }\n            }\n            if (isPrime) count += 1\n        }\n        count",
    "        var count = 0L\n        for (i <- 2L to n) {\n            if (isPrime(i)) count += 1\n        }\n        count",
    "        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        count",
    "        var count = 0;\n        for (i <- 2 to n.toInt) {\n            var isPrime = true;\n            for (j <- 2 to sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime = false;\n                    break;\n                }\n            }\n            if (isPrime) count += 1;\n        }\n        count;",
    "        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        count",
    "        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        return count",
    "        if (n <= 1) return 0\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            var isPrime = true\n            for (j <- 2 to sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime = false\n                    break\n                }\n            }\n            if (isPrime) count += 1\n        }\n        return count",
    "        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        return count",
    "        if (n < 2) return 0\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            var isPrime = true\n            for (j <- 2 to sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime = false\n                    break\n                }\n            }\n            if (isPrime) count += 1\n        }\n        count",
    "        if (n < 2) return 0\n        val sieve = new Array[Boolean](n.toInt)\n        var count = 0\n        for (i <- 2 to n.toInt - 1) {\n            if (!sieve(i)) {\n                count += 1\n                var j = i + i\n                while (j < n) {\n                    sieve(j) = true\n                    j += i\n                }\n            }\n        }\n        return count",
    "        var count = 0L\n        for (i <- 2L to n) {\n            if (isPrime(i)) count += 1\n        }\n        count",
    "        var count = 0L\n        for (i <- 2L until n) {\n            if (isPrime(i)) count += 1\n        }\n        count",
    "        var count = 0L\n        for (i <- 2L until n) {\n            if (isPrime(i)) count += 1\n        }\n        count",
    "        def isPrime(n : Long) : Boolean = {\n            if (n <= 1) return false\n            if (n == 2) return true\n            if (n % 2 == 0) return false\n            val sqrtN = sqrt(n).toLong\n            for (i <- 3L to sqrtN by 2) if (n % i == 0) return false\n            return true\n        }\n        var count = 0L\n        for (i <- 0L until n) if (isPrime(i)) count += 1\n        return count",
    "        var count = 0\n        for (i <- 1 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        count",
    "        var count = 0L\n        for (i <- 2L until n) {\n            if (isPrime(i)) count += 1\n        }\n        count",
    "        def isPrime(n : Long) : Boolean = {\n            if (n == 1) return false\n            if (n == 2) return true\n            if (n % 2 == 0) return false\n            val sqrt = sqrt(n).toLong\n            for (i <- 3 to sqrt by 2) {\n                if (n % i == 0) return false\n            }\n            return true\n        }\n        var count = 0\n        for (i <- 1 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        return count",
    "        var count = 0L\n        for (i <- 2L until n) {\n            if (isPrime(i)) count += 1\n        }\n        count",
    "        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        count",
    "        var count = 0\n        for (i <- 2 to n.toInt) {\n            var isPrime = true\n            for (j <- 2 to sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime = false\n                    break\n                }\n            }\n            if (isPrime) count += 1\n        }\n        return count",
    "        var count = 0L\n        for (i <- 1L to n) {\n            if (isPrime(i)) count += 1\n        }\n        count",
    "        if (n < 2) return 0\n        var count = 0\n        for (i <- 2L to n) {\n            if (isPrime(i)) count += 1\n        }\n        return count",
    "        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        count",
    "        var count = 0L\n        for (i <- 2L to n) {\n            if (isPrime(i)) count += 1\n        }\n        count",
    "        var count = 0L\n        for (i <- 2L to n) {\n            if (isPrime(i)) count += 1\n        }\n        count",
    "        var count = 0L\n        for (i <- 2L to n) {\n            if (isPrime(i)) count += 1\n        }\n        count",
    "        var count = 0L\n        for (i <- 1L to n) {\n            if (isPrime(i)) count += 1\n        }\n        count",
    "        var count = 0L\n        for (i <- 2L until n) {\n            if (isPrime(i)) count += 1\n        }\n        count",
    "        var count = 0\n        for (i <- 2 until n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        count",
    "        if (n <= 1) return 0\n        var count = 0\n        for (i <- 2L until n) {\n            if (isPrime(i)) count += 1\n        }\n        return count",
    "        var count = 0L\n        for (i <- 2L until n) {\n            if (isPrime(i)) count += 1\n        }\n        count",
    "        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        count",
    "        var count = 0L\n        for (i <- 1L to n) {\n            if (isPrime(i)) count += 1\n        }\n        count",
    "        var count = 0L\n        for (i <- 2L to n) {\n            if (isPrime(i)) count += 1\n        }\n        count",
    "        def isPrime(num : Long) : Boolean = {\n            if (num == 1) return false\n            if (num == 2) return true\n            if (num % 2 == 0) return false\n            val sqrt = sqrt(num).toLong\n            for (i <- 3 to sqrt by 2) {\n                if (num % i == 0) return false\n            }\n            return true\n        }\n        var count = 0\n        for (i <- 1 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        return count",
    "        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        count",
    "        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        count",
    "        var count = 0L\n        for (i <- 2L to n) {\n            if (isPrime(i)) count += 1\n        }\n        count",
    "        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        return count",
    "        var count = 0L\n        for (i <- 2L to n) {\n            if (isPrime(i)) count += 1\n        }\n        count",
    "        var count = 0L\n        for (i <- 2L until n) {\n            if (isPrime(i)) count += 1\n        }\n        count",
    "        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        count",
    "        var count = 0L\n        for (i <- 2L until n) {\n            if (isPrime(i)) count += 1\n        }\n        count",
    "        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        return count",
    "        val primes = new ArrayBuffer[Long]\n        primes += 2\n        for (i <- 3L to n by 2) {\n            var isPrime = true\n            for (j <- primes) {\n                if (i % j == 0) {\n                    isPrime = false\n                    break\n                }\n            }\n            if (isPrime) primes += i\n        }\n        primes.size",
    "        if (n <= 2) return 0\n        var count = 1\n        for (i <- 3 to n.toInt by 2) {\n            if (isPrime(i)) count += 1\n        }\n        return count",
    "        var count = 0L\n        for (i <- 2L until n) {\n            if (isPrime(i)) count += 1\n        }\n        count",
    "        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        count",
    "        if (n == 0 || n == 1) return 0\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            var isPrime = true\n            for (j <- 2 to sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime = false\n                    break\n                }\n            }\n            if (isPrime) count += 1\n        }\n        return count",
    "        var count = 0L\n        for (i <- 2L to n) {\n            if (isPrime(i)) count += 1\n        }\n        count",
    "        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        count",
    "        if (n < 2) return 0\n        var count = 0\n        for (i <- 2 until n.toInt) {\n            var isPrime = true\n            for (j <- 2 until i) {\n                if (i % j == 0) {\n                    isPrime = false\n                    break\n                }\n            }\n            if (isPrime) count += 1\n        }\n        count",
    "        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) {\n                count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 2L to n) {\n            if (isPrime(i)) count += 1\n        }\n        return count",
    "        if (n < 2) return 0\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            var isPrime = true\n            for (j <- 2 to sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime = false\n                    break\n                }\n            }\n            if (isPrime) count += 1\n        }\n        return count",
    "        var count = 0\n        for (i <- 1 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        count",
    "        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        count",
    "        var count = 0\n        for (i <- 1 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        return count",
    "        val primes = new ArrayBuffer[Long]\n        primes += 2\n        for (i <- 3 to n.toInt by 2) {\n            if (primes.forall(i % _ != 0)) primes += i\n        }\n        primes.length",
    "        // Write your code here\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            var flag = true\n            for (j <- 2 to sqrt(i).toInt) {\n                if (i % j == 0) {\n                    flag = false\n                    break\n                }\n            }\n            if (flag) count += 1\n        }\n        return count",
    "        var count = 0L\n        for (i <- 2L until n) {\n            if (isPrime(i)) count += 1\n        }\n        return count",
    "        def isPrime(n : Long) : Boolean = {\n            if (n == 2) return true\n            if (n % 2 == 0) return false\n            val sqrt = sqrt(n).toLong\n            for (i <- 3 to sqrt by 2) {\n                if (n % i == 0) return false\n            }\n            return true\n        }\n        var count = 0\n        for (i <- 2 to n) {\n            if (isPrime(i)) count += 1\n        }\n        return count",
    "        var count = 0L\n        for (i <- 2L until n) {\n            if (isPrime(i)) count += 1\n        }\n        count",
    "        var count = 0L\n        for (i <- 2L until n) {\n            if (isPrime(i)) count += 1\n        }\n        count",
    "        var count = 0L\n        for (i <- 2L until n) {\n            if (isPrime(i)) count += 1\n        }\n        count",
    "        var count = 0\n        for (i <- 2L to n) {\n            if (isPrime(i)) count += 1\n        }\n        count",
    "        var count = 0\n        for (i <- 2 until n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        count",
    "        var count = 0L\n        for (i <- 2L to n) {\n            if (isPrime(i)) count += 1\n        }\n        count",
    "        var count = 0L\n        for (i <- 2L to n) {\n            if (isPrime(i)) count += 1\n        }\n        count",
    "        var count = 0\n        for (i <- 1L to n) {\n            if (isPrime(i)) count += 1\n        }\n        count",
    "        if (n <= 2) return 0\n        var count = 1\n        for (i <- 3 to n.toInt by 2) {\n            if (isPrime(i)) count += 1\n        }\n        count",
    "        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        count",
    "        // Write your code here\n        var count = 0\n        for(i <- 2 to n.toInt) {\n            if(isPrime(i)) count += 1\n        }\n        return count",
    "        var count = 0L\n        for (i <- 2L to n) {\n            if (isPrime(i)) count += 1\n        }\n        count",
    "        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        return count",
    "        var count = 0L\n        for (i <- 2L to n) {\n            var isPrime = true\n            for (j <- 2L to sqrt(i).toLong) {\n                if (i % j == 0) {\n                    isPrime = false\n                    break\n                }\n            }\n            if (isPrime) count += 1\n        }\n        count",
    "        var count = 0L\n        for (i <- 2L to n) {\n            if (isPrime(i)) count += 1\n        }\n        count",
    "        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        count",
    "        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        return count",
    "        var count = 0L\n        for (i <- 2L to n) {\n            if (isPrime(i)) count += 1\n        }\n        count",
    "        var count = 0L\n        for (i <- 2L to n) {\n            if (isPrime(i)) count += 1\n        }\n        count",
    "        var count = 0\n        for (i <- 1 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        count",
    "        if (n < 2) return 0\n        var primes = new ArrayBuffer[Long]()\n        primes += 2\n        var current = 3\n        while (current < n) {\n            var isPrime = true\n            for (prime <- primes) {\n                if (current % prime == 0) {\n                    isPrime = false\n                    break\n                }\n            }\n            if (isPrime) primes += current\n            current += 2\n        }\n        return primes.length",
    "        var count = 0\n        for (i <- 2 to n.toInt) {\n            var isPrime = true\n            for (j <- 2 to sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime = false\n                    break\n                }\n            }\n            if (isPrime) count += 1\n        }\n        count",
    "        var count = 0\n        for (i <- 2 to n.toInt) {\n            var isPrime = true\n            for (j <- 2 to i/2) {\n                if (i % j == 0) {\n                    isPrime = false\n                    break\n                }\n            }\n            if (isPrime) count += 1\n        }\n        return count",
    "        if (n < 2) return 0\n        var count = 0\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) count += 1\n        }\n        return count",
    "        var count = 0L\n        for (i <- 2L to n) {\n            if (isPrime(i)) count += 1\n        }\n        count"
  ]
}