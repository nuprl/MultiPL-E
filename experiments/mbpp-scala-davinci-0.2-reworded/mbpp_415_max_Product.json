{
  "name": "mbpp_415_max_Product",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_415_max_Product.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                max = max(max, arr(i) * arr(j))\n            }\n        }\n        max",
    "        var max = arr(0)\n        var max2 = arr(1)\n        var min = arr(0)\n        var min2 = arr(1)\n        for (i <- 2 until arr.length) {\n            if (arr(i) > max) {\n                max2 = max\n                max = arr(i)\n            } else if (arr(i) > max2) {\n                max2 = arr(i)\n            }\n            if (arr(i) < min) {\n                min2 = min\n                min = arr(i)\n            } else if (arr(i) < min2) {\n                min2 = arr(i)\n            }\n        }\n        max * max2",
    "        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                val product = arr(i) * arr(j)\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until arr.length - 1) {\n            for (j <- i + 1 until arr.length) {\n                val product = arr(i) * arr(j)\n                if (product > max) {\n                    max = product\n                }\n            }\n        }\n        max",
    "        var max = 0L\n        for(i <- 0 until arr.length) {\n            for(j <- i + 1 until arr.length) {\n                if(arr(i) * arr(j) > max) max = arr(i) * arr(j)\n            }\n        }\n        max",
    "        var max = arr(0)\n        var min = arr(0)\n        var maxProduct = arr(0)\n        for (i <- 1 until arr.length) {\n            if (arr(i) > 0) {\n                max = max * arr(i)\n                min = min * arr(i)\n            } else {\n                val temp = max\n                max = min * arr(i)\n                min = temp * arr(i)\n            }\n            if (max > maxProduct) maxProduct = max\n            if (min > maxProduct) maxProduct = min\n            if (max < min) {\n                val temp = max\n                max = min\n                min = temp\n            }\n        }\n        maxProduct",
    "        val sorted = arr.sorted\n        val n = sorted.length\n        val last = sorted(n - 1)\n        val secondLast = sorted(n - 2)\n        val thirdLast = sorted(n - 3)\n        val first = sorted(0)\n        val second = sorted(1)\n        val third = sorted(2)\n        val product1 = last * secondLast * thirdLast\n        val product2 = last * first * second\n        if (product1 > product2) product1 else product2",
    "        var max = arr(0)\n        var max2 = arr(1)\n        var min = arr(0)\n        var min2 = arr(1)\n        for (i <- 2 until arr.length) {\n            if (arr(i) > max) {\n                max2 = max\n                max = arr(i)\n            } else if (arr(i) > max2) {\n                max2 = arr(i)\n            }\n            if (arr(i) < min) {\n                min2 = min\n                min = arr(i)\n            } else if (arr(i) < min2) {\n                min2 = arr(i)\n            }\n        }\n        max * max2",
    "        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i+1 until arr.length) {\n                max = max.max(arr(i) * arr(j))\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                val product = arr(i) * arr(j)\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                val prod = arr(i) * arr(j)\n                if (prod > max) max = prod\n            }\n        }\n        max",
    "        arr.sorted.takeRight(2).product",
    "        val sorted = arr.sorted\n        val n = sorted.length\n        val a = sorted(n - 1)\n        val b = sorted(n - 2)\n        a * b",
    "        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                val product = arr(i) * arr(j)\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = Long.MinValue\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                max = max(max, arr(i) * arr(j))\n            }\n        }\n        return max",
    "        val sorted = arr.sorted\n        val n = sorted.length\n        val last = sorted(n - 1)\n        val secondLast = sorted(n - 2)\n        val thirdLast = sorted(n - 3)\n        val first = sorted(0)\n        val second = sorted(1)\n        val third = sorted(2)\n        val product1 = last * secondLast * thirdLast\n        val product2 = last * first * second\n        if (product1 > product2) product1 else product2",
    "        val sorted = arr.sorted\n        val n = sorted.length\n        val p1 = sorted(n - 1) * sorted(n - 2)\n        val p2 = sorted(0) * sorted(1)\n        max(p1, p2)",
    "        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                val product = arr(i) * arr(j)\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) * arr(j) > max) max = arr(i) * arr(j)\n            }\n        }\n        max",
    "        var max = Long.MinValue\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                max = max(max, arr(i) * arr(j))\n            }\n        }\n        max"
  ]
}