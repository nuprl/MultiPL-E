{
  "name": "mbpp_577_last_Digit_Factorial",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last digit in factorial of a given number.\n    def lastDigitFactorial(n : Long) : Long = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_577_last_Digit_Factorial.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(lastDigitFactorial((4l)) == (4l));\n    assert(lastDigitFactorial((21l)) == (0l));\n    assert(lastDigitFactorial((30l)) == (0l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var fact = 1L\n        for (i <- 1 to n.toInt) {\n            fact = (fact * i) % 10\n        }\n        fact",
    "        def lastDigitFactorialRec(n : Long, acc : Long) : Long = {\n            if (n == 0) acc\n            else lastDigitFactorialRec(n - 1, (acc * n) % 10)\n        }\n        lastDigitFactorialRec(n, 1)",
    "        var fact = 1L\n        for (i <- 1L to n) fact = (fact * i) % 10\n        fact",
    "        if (n == 0) 1\n        else {\n            var result = 1L\n            for (i <- 1 to n.toInt) {\n                result = (result * i) % 10\n            }\n            result\n        }",
    "        var factorial = 1L\n        for (i <- 1 to n.toInt) {\n            factorial *= i\n            factorial %= 10\n        }\n        factorial",
    "        var result = 1L\n        for (i <- 1L to n) {\n            result = (result * i) % 10\n        }\n        result",
    "        var factorial = 1L\n        for (i <- 1L to n) {\n            factorial = (factorial * i) % 10\n        }\n        factorial",
    "        var factorial = 1L\n        for (i <- 1L to n) {\n            factorial = (factorial * i) % 10\n        }\n        factorial",
    "        var factorial = 1L\n        for (i <- 1L to n) {\n            factorial = (factorial * i) % 10\n        }\n        factorial",
    "        def factorial(n : Long) : Long = {\n            if (n == 0) 1\n            else n * factorial(n - 1)\n        }\n        factorial(n).toString.last.asDigit",
    "        var result = 1L\n        for (i <- 1L to n) {\n            result = (result * i) % 10\n        }\n        result",
    "        var fact = 1L\n        for (i <- 1L to n) {\n            fact *= i\n            fact %= 10\n        }\n        fact",
    "        var fact = 1L\n        for (i <- 1L to n) {\n            fact = (fact * i) % 10\n        }\n        return fact",
    "        var factorial = 1L\n        for (i <- 1L to n) factorial = (factorial * i) % 10\n        factorial",
    "        var factorial = 1L\n        for (i <- 1L to n) {\n            factorial = (factorial * i) % 10\n        }\n        factorial",
    "        var fact = 1L\n        for (i <- 1L to n) {\n            fact *= i\n            fact %= 10\n        }\n        fact",
    "        var factorial = 1L\n        for (i <- 1 to n.toInt) {\n            factorial = (factorial * i) % 10\n        }\n        factorial",
    "        var factorial = 1L\n        for (i <- 1L to n) {\n            factorial *= i\n            factorial %= 10\n        }\n        return factorial",
    "        var result = 1L\n        for (i <- 1L to n) {\n            result = (result * i) % 10\n        }\n        result",
    "        def factorial(n : Long) : Long = {\n            if (n == 0) 1\n            else n * factorial(n - 1)\n        }\n        val f = factorial(n)\n        f % 10"
  ]
}