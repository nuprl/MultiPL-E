{
  "name": "mbpp_577_last_Digit_Factorial",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last digit in factorial of a given number.\n    def lastDigitFactorial(n : Long) : Long = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_577_last_Digit_Factorial.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(lastDigitFactorial((4l)) == (4l));\n    assert(lastDigitFactorial((21l)) == (0l));\n    assert(lastDigitFactorial((30l)) == (0l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var fact = 1L\n        for (i <- 1 to n.toInt) {\n            fact = (fact * i) % 10\n        }\n        fact",
    "        def lastDigitFactorialRec(n : Long, acc : Long) : Long = {\n            if (n == 0) acc\n            else lastDigitFactorialRec(n - 1, (acc * n) % 10)\n        }\n        lastDigitFactorialRec(n, 1)",
    "        var fact = 1L\n        for (i <- 1L to n) fact = (fact * i) % 10\n        fact",
    "        if (n == 0) 1\n        else {\n            var result = 1L\n            for (i <- 1 to n.toInt) {\n                result = (result * i) % 10\n            }\n            result\n        }",
    "        var factorial = 1L\n        for (i <- 1 to n.toInt) {\n            factorial *= i\n            factorial %= 10\n        }\n        factorial",
    "        var result = 1L\n        for (i <- 1L to n) {\n            result = (result * i) % 10\n        }\n        result",
    "        var factorial = 1L\n        for (i <- 1L to n) {\n            factorial = (factorial * i) % 10\n        }\n        factorial",
    "        var factorial = 1L\n        for (i <- 1L to n) {\n            factorial = (factorial * i) % 10\n        }\n        factorial",
    "        var factorial = 1L\n        for (i <- 1L to n) {\n            factorial = (factorial * i) % 10\n        }\n        factorial",
    "        def factorial(n : Long) : Long = {\n            if (n == 0) 1\n            else n * factorial(n - 1)\n        }\n        factorial(n).toString.last.asDigit",
    "        var result = 1L\n        for (i <- 1L to n) {\n            result = (result * i) % 10\n        }\n        result",
    "        var fact = 1L\n        for (i <- 1L to n) {\n            fact *= i\n            fact %= 10\n        }\n        fact",
    "        var fact = 1L\n        for (i <- 1L to n) {\n            fact = (fact * i) % 10\n        }\n        return fact",
    "        var factorial = 1L\n        for (i <- 1L to n) factorial = (factorial * i) % 10\n        factorial",
    "        var factorial = 1L\n        for (i <- 1L to n) {\n            factorial = (factorial * i) % 10\n        }\n        factorial",
    "        var fact = 1L\n        for (i <- 1L to n) {\n            fact *= i\n            fact %= 10\n        }\n        fact",
    "        var factorial = 1L\n        for (i <- 1 to n.toInt) {\n            factorial = (factorial * i) % 10\n        }\n        factorial",
    "        var factorial = 1L\n        for (i <- 1L to n) {\n            factorial *= i\n            factorial %= 10\n        }\n        return factorial",
    "        var result = 1L\n        for (i <- 1L to n) {\n            result = (result * i) % 10\n        }\n        result",
    "        def factorial(n : Long) : Long = {\n            if (n == 0) 1\n            else n * factorial(n - 1)\n        }\n        val f = factorial(n)\n        f % 10",
    "        val primes = ArrayBuffer[Long]()\n        val primeFactorCounts = ArrayBuffer[Long]()\n        var nn = n\n        for (i <- 2 to n) {\n            var count = 0\n            while (nn % i == 0) {\n                count += 1\n                nn /= i\n            }\n            if (count > 0) {\n                primes += i\n                primeFactorCounts += count\n            }\n        }\n        var result = 1L\n        for (i <- 0 until primes.length) {\n            val p = primes(i)\n            val c = primeFactorCounts(i)\n            var pp = p\n            var cc = c\n            while (cc > 0) {\n                result = (result * pp) % 10\n                cc -= 1\n                pp = (pp * p) % 10\n            }\n        }\n        result",
    "        var result = 1L\n        for (i <- 1L to n) {\n            result = (result * i) % 10\n        }\n        result",
    "        var factorial = 1L\n        for (i <- 1L to n) factorial = (factorial * i) % 10\n        return factorial",
    "        var factorial = 1L\n        for (i <- 1L to n) {\n            factorial = (factorial * i) % 10\n        }\n        factorial",
    "        var sum = 1L\n        for (i <- 1 to n.toInt) {\n            sum = (sum * i) % 10\n        }\n        sum",
    "        var factorial = 1L\n        for (i <- 1L to n) {\n            factorial *= i\n            factorial %= 10\n        }\n        factorial",
    "        var result = 1L\n        for (i <- 2L to n) {\n            result = (result * i) % 10\n        }\n        result",
    "        var factorial = 1L\n        for (i <- 1L to n) {\n            factorial *= i\n            factorial %= 10\n        }\n        factorial",
    "        var result = 1L\n        for (i <- 1L to n) {\n            result = (result * i) % 10\n        }\n        result",
    "        var factorial = 1L\n        for (i <- 1L to n) {\n            factorial = (factorial * i) % 10\n        }\n        factorial",
    "        var fact = 1L\n        for (i <- 1L to n) fact = (fact * i) % 10\n        fact",
    "        var result = 1L\n        for (i <- 1L to n) {\n            result = (result * i) % 10\n        }\n        result",
    "        var factorial = 1L\n        for (i <- 1L to n) factorial = (factorial * i) % 10\n        factorial",
    "        var result = 1L\n        for (i <- 2L to n) {\n            result = (result * i) % 10\n        }\n        result",
    "        var result = 1L\n        for (i <- 2L to n) {\n            result = (result * i) % 10\n        }\n        result",
    "        var result = 1L\n        for (i <- 1L to n) {\n            result = (result * i) % 10\n        }\n        result",
    "        var factorial = 1L\n        for (i <- 1 to n.toInt) {\n            factorial *= i\n            factorial %= 10\n        }\n        factorial",
    "        var result = 1L\n        for (i <- 1L to n) {\n            result = (result * i) % 10\n        }\n        result",
    "        var fact = 1L\n        for (i <- 1 to n.toInt) {\n            fact = (fact * i) % 10\n        }\n        return fact",
    "        var fact = 1L\n        for (i <- 1 to n.toInt) {\n            fact = (fact * i) % 10\n        }\n        fact",
    "        var fact = 1L\n        for (i <- 1L to n) {\n            fact = (fact * i) % 10\n        }\n        fact",
    "        var fact = 1L\n        for (i <- 1L to n) fact = (fact * i) % 10\n        return fact",
    "        var fact = 1L\n        for (i <- 1 to n.toInt) {\n            fact = (fact * i) % 10\n        }\n        fact",
    "        var fact = 1L\n        for (i <- 1 to n.toInt) {\n            fact *= i\n            fact %= 10\n        }\n        fact",
    "        var result = 1L\n        for (i <- 2L to n) {\n            result = (result * i) % 10\n        }\n        result",
    "        var fact = 1L\n        for (i <- 1 to n.toInt) {\n            fact = fact * i\n        }\n        fact % 10",
    "        var fact = 1L\n        for (i <- 1 to n.toInt) {\n            fact = (fact * i) % 10\n        }\n        fact",
    "        var fact = 1L\n        for (i <- 1L to n) {\n            fact *= i\n            fact %= 10\n        }\n        fact",
    "        var fact = 1L\n        for (i <- 1L to n) {\n            fact = (fact * i) % 10\n        }\n        return fact",
    "        var fact = 1L\n        for (i <- 1 to n.toInt) {\n            fact = (fact * i) % 10\n        }\n        fact",
    "        var factorial = 1L\n        for (i <- 1L to n) {\n            factorial = (factorial * i) % 10\n        }\n        factorial",
    "        var fact = 1L\n        for (i <- 1 to n.toInt) fact = (fact * i) % 10\n        return fact",
    "        def factorial(n : Long) : Long = {\n            if (n == 0) 1\n            else n * factorial(n - 1)\n        }\n        factorial(n).toString.last.toString.toLong",
    "        var factorial = 1L\n        for (i <- 1L to n) {\n            factorial = (factorial * i) % 10\n        }\n        factorial",
    "        var factorial = 1L\n        for (i <- 1L to n) factorial = (factorial * i) % 10\n        factorial",
    "        var factorial = 1L\n        for (i <- 1L to n) {\n            factorial = (factorial * i) % 10\n        }\n        factorial",
    "        var factorial = 1L\n        for (i <- 1L to n) {\n            factorial = (factorial * i) % 10\n        }\n        factorial",
    "        var fact = 1L\n        for (i <- 1 to n.toInt) {\n            fact *= i\n            fact %= 10\n        }\n        fact",
    "        var factorial = 1L\n        for (i <- 1L to n) {\n            factorial = (factorial * i) % 10\n        }\n        return factorial",
    "        var fact = 1L\n        for (i <- 1L to n) {\n            fact = (fact * i) % 10\n        }\n        fact",
    "        var fact = 1L\n        for (i <- 1L to n) fact = (fact * i) % 10\n        return fact",
    "        var factorial = 1L\n        for (i <- 1 to n.toInt) {\n            factorial *= i\n            factorial %= 10\n        }\n        return factorial",
    "        var fact = 1L\n        var i = 2L\n        while (i <= n) {\n            fact = (fact * i) % 10\n            i += 1\n        }\n        return fact",
    "        var fact = 1L\n        for (i <- 1L to n) {\n            fact = (fact * i) % 10\n        }\n        fact",
    "        var fact = 1L\n        for (i <- 1L to n) {\n            fact = (fact * i) % 10\n        }\n        fact",
    "        def factorial(n : Long) : Long = {\n            if (n == 0) 1\n            else n * factorial(n - 1)\n        }\n        factorial(n).toString.last.toString.toLong",
    "        var result = 1L\n        for (i <- 2L to n) {\n            result = (result * i) % 10\n        }\n        result",
    "        var fact = 1L\n        for (i <- 1L to n) {\n            fact = (fact * i) % 10\n        }\n        fact",
    "        var fact = 1L\n        for (i <- 1L to n) {\n            fact = (fact * i) % 10\n        }\n        fact",
    "        var fact = 1L\n        for (i <- 1 to n.toInt) fact = (fact * i) % 10\n        fact",
    "        var fact : Long = 1\n        for (i <- 1 to n.toInt) {\n            fact = (fact * i) % 10\n        }\n        return fact",
    "        def factorial(n : Long) : Long = {\n            if (n == 0) 1\n            else n * factorial(n - 1)\n        }\n        factorial(n).toString.last.toString.toLong",
    "        var fact = 1L\n        for (i <- 1L to n) {\n            fact = (fact * i) % 10\n        }\n        fact",
    "        var fact = 1L\n        for (i <- 1L to n) {\n            fact = (fact * i) % 10\n        }\n        fact",
    "        var fact = 1L\n        for (i <- 1L to n) {\n            fact *= i\n            fact %= 10\n        }\n        return fact",
    "        if (n == 0) 1\n        else n * lastDigitFactorial(n - 1)",
    "        var result = 1L\n        for (i <- 1L to n) {\n            result = (result * i) % 10\n        }\n        result",
    "        var fact = 1L\n        for (i <- 1L to n) {\n            fact = (fact * i) % 10\n        }\n        fact",
    "        var factorial = 1L\n        for (i <- 1 to n.toInt) {\n            factorial = (factorial * i) % 10\n        }\n        factorial",
    "        var factorial = 1L\n        for (i <- 1L to n) factorial = (factorial * i) % 10\n        factorial",
    "        var fact = 1L\n        for (i <- 1L to n) {\n            fact = (fact * i) % 10\n        }\n        return fact",
    "        var result = 1L\n        for (i <- 1L to n) {\n            result = (result * i) % 10\n        }\n        result",
    "        var fact = 1L\n        for (i <- 1L to n) {\n            fact = (fact * i) % 10\n        }\n        return fact",
    "        var fact = 1L\n        for (i <- 1L to n) {\n            fact = (fact * i) % 10\n        }\n        fact",
    "        var fact : Long = 1\n        for (i <- 1 to n.toInt) {\n            fact = (fact * i) % 10\n        }\n        fact",
    "        var fact = 1L\n        for (i <- 1 to n.toInt) {\n            fact = (fact * i) % 10\n        }\n        fact",
    "        var fact = 1L\n        for (i <- 1 to n.toInt) {\n            fact = (fact * i) % 10\n        }\n        fact",
    "        var factorial = 1L\n        for (i <- 1L to n) {\n            factorial = (factorial * i) % 10\n        }\n        factorial",
    "        var factorial = 1L\n        for (i <- 2L to n) {\n            factorial *= i\n            factorial %= 10\n        }\n        factorial",
    "        if (n == 0) 1\n        else (1 to n.toInt).foldLeft(1L)((a, b) => a * b % 10)",
    "        var result = 1L\n        for (i <- 1L to n) {\n            result *= i\n            result %= 10\n        }\n        result",
    "        var fact = 1L\n        for (i <- 1L to n) {\n            fact = (fact * i) % 10\n        }\n        fact",
    "        var fact = 1L\n        for (i <- 1 to n.toInt) {\n            fact = (fact * i) % 10\n        }\n        fact",
    "        var fact = 1L\n        for (i <- 1 to n.toInt) fact = (fact * i) % 10\n        fact",
    "        var fact = 1L\n        for (i <- 1 to n.toInt) fact = (fact * i) % 10\n        fact",
    "        var fact = 1L\n        for (i <- 1L to n) {\n            fact = (fact * i) % 10\n        }\n        return fact",
    "        var result = 1L\n        for (i <- 1L to n) {\n            result = (result * i) % 10\n        }\n        result",
    "        var factorial = 1L\n        for (i <- 1L to n) {\n            factorial = (factorial * i) % 10\n        }\n        factorial",
    "        var factorial = 1L\n        for (i <- 1 to n.toInt) {\n            factorial = (factorial * i) % 10\n        }\n        factorial",
    "        var factorial : Long = 1\n        for (i <- 1 to n.toInt) {\n            factorial *= i\n            factorial %= 10\n        }\n        factorial",
    "        if (n <= 1) 1\n        else n * lastDigitFactorial(n - 1)",
    "        var fact = 1L\n        for (i <- 1 to n.toInt) {\n            fact = (fact * i) % 10\n        }\n        fact",
    "        var fact = 1L\n        for (i <- 1 to n.toInt) fact = (fact * i) % 10\n        fact",
    "        var factorial = 1L\n        for (i <- 1L to n) {\n            factorial = (factorial * i) % 10\n        }\n        factorial",
    "        var factorial = 1L\n        for (i <- 1L to n) {\n            factorial = (factorial * i) % 10\n        }\n        factorial",
    "        var fact = 1L\n        for (i <- 1L to n) {\n            fact = (fact * i) % 10\n        }\n        fact",
    "        var result = 1L\n        for (i <- 1L to n) result = (result * i) % 10\n        result",
    "        var fact = 1L\n        for (i <- 1L to n) {\n            fact = (fact * i) % 10\n        }\n        fact",
    "        var fact = 1L\n        for (i <- 1 to n.toInt) fact = (fact * i) % 10\n        fact",
    "        var fact = 1L\n        for (i <- 1 to n.toInt) fact = (fact * i) % 10\n        fact",
    "        var fact = 1L\n        for (i <- 1L to n) {\n            fact = (fact * i) % 10\n        }\n        return fact",
    "        var fact = 1L\n        for (i <- 1 to n.toInt) {\n            fact = (fact * i) % 10\n        }\n        fact",
    "        var fact = 1L\n        for (i <- 1L to n) {\n            fact = (fact * i) % 10\n        }\n        return fact",
    "        if (n == 0) return 1\n        var fact = 1L\n        for (i <- 1 to n.toInt) {\n            fact = (fact * i) % 10\n        }\n        return fact",
    "        var factorial = 1L\n        for (i <- 1L to n) {\n            factorial = (factorial * i) % 10\n        }\n        return factorial",
    "        var fact = 1L\n        for (i <- 1 to n.toInt) fact = (fact * i) % 10\n        fact",
    "        if (n == 0) 1\n        else {\n            val factorials = ArrayBuffer[Long]()\n            factorials += 1\n            for (i <- 1 to n.toInt) {\n                factorials += (factorials(i - 1) * i) % 10\n            }\n            factorials(n.toInt)\n        }",
    "        var fact = 1L\n        for (i <- 1 to n.toInt) {\n            fact = (fact * i) % 10\n        }\n        return fact",
    "        var factorial = 1L\n        for (i <- 1 to n.toInt) {\n            factorial = (factorial * i) % 10\n        }\n        factorial",
    "        var factorial = 1L\n        for (i <- 1L to n) {\n            factorial = (factorial * i) % 10\n        }\n        factorial",
    "        var fact = 1L\n        for (i <- 1L to n) fact = (fact * i) % 10\n        fact",
    "        var fact = 1L\n        for (i <- 1L to n) {\n            fact = (fact * i) % 10\n        }\n        fact",
    "        def factorial(n : Long) : Long = {\n            if (n == 0) 1\n            else n * factorial(n - 1)\n        }\n        factorial(n).toString.last.toString.toLong",
    "        var factorial = 1L\n        for (i <- 1L to n) {\n            factorial *= i\n            factorial %= 10\n        }\n        factorial",
    "        var fact = 1L\n        for (i <- 1L to n) {\n            fact = (fact * i) % 10\n        }\n        fact",
    "        var fact = 1L\n        for (i <- 1L to n) {\n            fact = (fact * i) % 10\n        }\n        fact",
    "        var result = 1L\n        for (i <- 2L to n) {\n            result = (result * i) % 10\n        }\n        result",
    "        var fact = 1L\n        for (i <- 1L to n) {\n            fact = (fact * i) % 10\n        }\n        return fact",
    "        var result = 1L\n        for (i <- 1L to n) {\n            result = (result * i) % 10\n        }\n        result",
    "        var factorial = 1L\n        for (i <- 1L to n) {\n            factorial *= i\n            factorial %= 10\n        }\n        factorial",
    "        var factorial = 1L\n        for (i <- 1 to n.toInt) {\n            factorial *= i\n            factorial %= 10\n        }\n        factorial",
    "        var result = 1L\n        for (i <- 1L to n) {\n            result = (result * i) % 10\n        }\n        result",
    "        var factorial = 1L\n        for (i <- 1L to n) factorial = (factorial * i) % 10\n        factorial",
    "        var fact = 1L\n        for (i <- 1L to n) {\n            fact = (fact * i) % 10\n        }\n        fact",
    "        var fact = 1L\n        for (i <- 1L to n) {\n            fact = (fact * i) % 10\n        }\n        return fact",
    "        var fact = 1L\n        for (i <- 1 to n.toInt) fact = (fact * i) % 10\n        fact",
    "        var fact = 1L\n        for (i <- 1 to n.toInt) {\n            fact = (fact * i) % 10\n        }\n        fact",
    "        var fact = 1L\n        for (i <- 1L to n) {\n            fact = (fact * i) % 10\n        }\n        return fact",
    "        var fact = 1L\n        for (i <- 1L to n) fact = (fact * i) % 10\n        return fact",
    "        var fact = 1L\n        for (i <- 1 to n.toInt) {\n            fact *= i\n            fact %= 10\n        }\n        fact",
    "        var result = 1L\n        for (i <- 2L to n) {\n            result = (result * i) % 10\n        }\n        result",
    "        var result = 1L\n        for (i <- 1L to n) {\n            result = (result * i) % 10\n        }\n        result",
    "        var result = 1L\n        for (i <- 1L to n) {\n            result = (result * i) % 10\n        }\n        result",
    "        if (n == 0) 1\n        else n * lastDigitFactorial(n - 1)",
    "        var a = 1L\n        for (i <- 1 to n.toInt) {\n            a = (a * i) % 10\n        }\n        return a",
    "        var factorial = 1L\n        for (i <- 1L to n) {\n            factorial = (factorial * i) % 10\n        }\n        factorial",
    "        if (n == 0) 1 else n * lastDigitFactorial(n - 1)",
    "        var factorial = 1L\n        for (i <- 1 to n.toInt) factorial = (factorial * i) % 10\n        factorial",
    "        var fact = 1L\n        for (i <- 1L to n) {\n            fact = (fact * i) % 10\n        }\n        return fact",
    "        if (n < 2) 1\n        else {\n            var result = 1L\n            for (i <- 2L to n) {\n                result = (result * i) % 10\n            }\n            result\n        }",
    "        var factorial = 1L\n        for (i <- 1L to n) {\n            factorial = (factorial * i) % 10\n        }\n        return factorial",
    "        val factorials = Array(1, 1, 2, 6, 4, 2, 2, 4, 2, 8)\n        if (n < 10) factorials(n.toInt)\n        else {\n            val lastDigit = n % 10\n            val lastDigitFactorial = factorials(lastDigit.toInt)\n            val remainingFactorial = lastDigitFactorialFactorial(n / 10)\n            (lastDigitFactorial * remainingFactorial) % 10\n        }",
    "        val primes = ArrayBuffer[Int]()\n        val primeFactors = ArrayBuffer[Int]()\n        for (i <- 2 to n.toInt) {\n            var isPrime = true\n            for (j <- 2 to sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime = false\n                    break\n                }\n            }\n            if (isPrime) primes += i\n        }\n        for (i <- primes) {\n            var temp = n\n            while (temp >= i) {\n                temp /= i\n                primeFactors += i\n            }\n        }\n        var result = 1L\n        for (i <- primeFactors) {\n            result *= i\n            result %= 10\n        }\n        result",
    "        var factorial = 1L\n        for (i <- 1L to n) {\n            factorial *= i\n            factorial %= 10\n        }\n        factorial",
    "        var factorial = 1L\n        for (i <- 1 to n.toInt) factorial *= i\n        factorial % 10",
    "        def factorial(n : Long, acc : Long) : Long = {\n            if (n == 0) acc\n            else factorial(n - 1, acc * n)\n        }\n        factorial(n, 1) % 10",
    "        var fact = 1L\n        for (i <- 1 to n.toInt) {\n            fact = (fact * i) % 10\n        }\n        fact",
    "        var fact = 1L\n        for (i <- 1L to n) {\n            fact *= i\n            fact %= 10\n        }\n        return fact",
    "        val primes = ArrayBuffer[Long]()\n        var i = 2L\n        while (i <= n) {\n            if (isPrime(i)) primes += i\n            i += 1\n        }\n        var result = 1L\n        for (p <- primes) {\n            var count = 0L\n            var j = p\n            while (j <= n) {\n                count += n / j\n                j *= p\n            }\n            result = (result * pow(p, count).toLong) % 10\n        }\n        result",
    "        var fact = 1L\n        for (i <- 1L to n) {\n            fact *= i\n            fact %= 10\n        }\n        return fact",
    "        var fact = 1L\n        for (i <- 1 to n.toInt) {\n            fact = (fact * i) % 10\n        }\n        return fact",
    "        val factorials = Array(1, 1, 2, 6, 4, 2, 2, 4, 2, 8)\n        if (n < 10) return factorials(n.toInt)\n        var result = 1L\n        for (i <- 2 to n.toInt) {\n            result = (result * i) % 10\n        }\n        return result",
    "        var fact = 1L\n        for (i <- 1L to n) fact = (fact * i) % 10\n        fact",
    "        var factorial = 1L\n        for (i <- 1L to n) factorial = (factorial * i) % 10\n        factorial",
    "        var fact = 1L\n        for (i <- 2L to n) {\n            fact = (fact * i) % 10\n        }\n        fact",
    "        var fact = 1L\n        for (i <- 2L to n) {\n            fact = (fact * i) % 10\n        }\n        return fact",
    "        if (n == 0) 1\n        else n * lastDigitFactorial(n - 1)",
    "        var fact = 1L\n        for (i <- 1L to n) {\n            fact = (fact * i) % 10\n        }\n        return fact",
    "        val factorials = Array(1L, 1L, 2L, 6L, 4L, 2L, 2L, 4L, 2L, 8L)\n        var result = 1L\n        for (i <- 2 to n.toInt) {\n            result = (result * i) % 10\n        }\n        result",
    "        var factorial = 1L\n        for (i <- 1 to n.toInt) {\n            factorial = (factorial * i) % 10\n        }\n        factorial",
    "        var fact = 1L\n        for (i <- 1 to n.toInt) {\n            fact = (fact * i) % 10\n        }\n        fact",
    "        var fact = 1L\n        for (i <- 1 to n.toInt) {\n            fact = (fact * i) % 10\n        }\n        return fact",
    "        if (n == 0) 1\n        else n * lastDigitFactorial(n - 1)",
    "        var fact = 1L\n        for (i <- 1 to n.toInt) fact = (fact * i) % 10\n        fact",
    "        var fact = 1L\n        for (i <- 1 to n.toInt) {\n            fact = (fact * i) % 10\n        }\n        fact",
    "        var fact = 1L\n        for (i <- 1 to n.toInt) fact = (fact * i) % 10\n        fact",
    "        var fact = 1L\n        for (i <- 1L to n) {\n            fact = (fact * i) % 10\n        }\n        fact",
    "        var result = 1L\n        for (i <- 1L to n) {\n            result = (result * i) % 10\n        }\n        result",
    "        if (n == 0) 1\n        else (1 to n.toInt).foldLeft(1L)((a, b) => (a * b) % 10)",
    "        var factorial = 1L\n        for (i <- 1 to n.toInt) {\n            factorial *= i\n            factorial %= 10\n        }\n        factorial",
    "        var factorial = 1L\n        for (i <- 1L to n) {\n            factorial *= i\n            factorial %= 10\n        }\n        factorial",
    "        var factorial = 1L\n        for (i <- 1L to n) {\n            factorial = (factorial * i) % 10\n        }\n        factorial",
    "        var result = 1L\n        for (i <- 1L to n) {\n            result = (result * i) % 10\n        }\n        result",
    "        var result = 1L\n        for (i <- 1L to n) {\n            result = (result * i) % 10\n        }\n        result",
    "        var result = 1L\n        for (i <- 2L to n) {\n            result *= i\n            result %= 10\n        }\n        result",
    "        var fact = 1L\n        for (i <- 1L to n) {\n            fact = (fact * i) % 10\n        }\n        return fact",
    "        var fact = 1L\n        for (i <- 1L to n) fact = (fact * i) % 10\n        fact",
    "        var fact = 1L\n        for (i <- 1L to n) {\n            fact = (fact * i) % 10\n        }\n        fact",
    "        var fact = 1L\n        for (i <- 1L to n) {\n            fact = (fact * i) % 10\n        }\n        fact",
    "        if (n == 0) 1\n        else n * lastDigitFactorial(n - 1)",
    "        var fact = 1L\n        for (i <- 1 to n.toInt) {\n            fact *= i\n            fact %= 10\n        }\n        fact",
    "        var factorial = 1L\n        for (i <- 1 to n.toInt) factorial = (factorial * i) % 10\n        factorial",
    "        var result = 1L\n        for (i <- 2L to n) {\n            result = (result * i) % 10\n        }\n        result",
    "        var fact = 1L\n        for (i <- 1L to n) {\n            fact = (fact * i) % 10\n        }\n        return fact",
    "        var factorial = 1L\n        for (i <- 1L to n) {\n            factorial = (factorial * i) % 10\n        }\n        factorial",
    "        var fact = 1L\n        for (i <- 1L to n) {\n            fact = (fact * i) % 10\n        }\n        return fact",
    "        if (n == 0) 1 else n * lastDigitFactorial(n - 1)",
    "        var result = 1L\n        for (i <- 1 to n.toInt) {\n            result = (result * i) % 10\n        }\n        result",
    "        var fact = 1L\n        for (i <- 1 to n.toInt) {\n            fact = (fact * i) % 10\n        }\n        fact",
    "        var fact : Long = 1\n        for (i <- 1 to n.toInt) {\n            fact *= i\n            fact %= 10\n        }\n        fact"
  ]
}