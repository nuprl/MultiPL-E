{
  "name": "mbpp_424_extract_rear",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : String) : List[String] = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_424_extract_rear.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(extractRear((String((\"Mers\", \"for\", \"Vers\")))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear((String((\"Avenge\", \"for\", \"People\")))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear((String((\"Gotta\", \"get\", \"go\")))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val test_list = test_tuple.split(\",\").toList\n        val result = test_list.map(x => x.substring(x.length - 1))\n        return result",
    "        val test_list = test_tuple.split(\",\").toList\n        val result = for (i <- 0 until test_list.length) yield test_list(i).reverse.head.toString\n        result.toList",
    "        var result = List[String]()\n        for (i <- 0 until test_tuple.length) {\n            if (i == test_tuple.length - 1) {\n                result = result :+ test_tuple(i).toString\n            }\n        }\n        return result",
    "        val result = new ListBuffer[String]()\n        for (i <- 0 until test_tuple.length) {\n            if (i == test_tuple.length - 1) result += test_tuple(i).toString\n        }\n        result.toList",
    "        val test_list = test_tuple.split(\" \").toList\n        val rear_list = test_list.map(x => x.takeRight(1))\n        rear_list",
    "        val result = ListBuffer[String]()\n        for (i <- 0 until test_tuple.length) {\n            if (i == test_tuple.length - 1) result += test_tuple(i).toString\n        }\n        result.toList",
    "        var result : List[String] = List()\n        for (i <- 0 until test_tuple.length) {\n            if (i % 2 == 0) result = result :+ test_tuple(i).toString\n        }\n        return result",
    "        val test_list = test_tuple.split(\" \").toList\n        val result = test_list.map(x => x.substring(x.length - 1))\n        return result",
    "        var result = List[String]()\n        for (i <- 0 until test_tuple.length) {\n            result = result :+ test_tuple(test_tuple.length - i - 1).toString\n        }\n        return result",
    "        val test_list = test_tuple.split(\" \").toList\n        val result = test_list.map(x => x.charAt(x.length - 1).toString)\n        return result",
    "        val test_list = test_tuple.split(\" \").toList\n        val result = test_list.map(x => x(x.length - 1).toString)\n        return result",
    "        val test_list = test_tuple.split(\",\").toList\n        val rear_list = test_list.map(x => x.substring(x.length - 1))\n        return rear_list",
    "        val test_list = test_tuple.split(\",\").toList\n        val result = for (i <- 0 until test_list.length) yield test_list(i).charAt(test_list(i).length - 1)\n        result.toList.map(_.toString)",
    "        val test_list = test_tuple.split(\" \").toList\n        val rear_list = test_list.map(x => x.charAt(x.length - 1).toString)\n        return rear_list",
    "        val test_list = test_tuple.split(\",\").toList\n        val result = test_list.map(x => x.split(\" \").last)\n        return result",
    "        val test_list = test_tuple.split(\" \").toList\n        val rear_list = ListBuffer[String]()\n        for (i <- 0 until test_list.length) {\n            rear_list += test_list(i).substring(test_list(i).length - 1)\n        }\n        rear_list.toList",
    "        val test_list = test_tuple.split(\" \").toList\n        val rear_list = test_list.map(x => x(x.length - 1).toString)\n        return rear_list",
    "        val test_list = test_tuple.split(\",\").toList\n        val result = test_list.map(x => x.split(\" \").last)\n        return result",
    "        test_tuple.split(\" \").toList.map(x => x(x.length - 1).toString)",
    "        var result = List[String]()\n        for (i <- 0 until test_tuple.length) {\n            if (i == test_tuple.length - 1) result = test_tuple(i).toString :: result\n        }\n        return result"
  ]
}