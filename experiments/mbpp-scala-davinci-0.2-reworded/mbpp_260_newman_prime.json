{
  "name": "mbpp_260_newman_prime",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    def newmanPrime(n : Long) : Long = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_260_newman_prime.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(newmanPrime((3l)) == (7l));\n    assert(newmanPrime((4l)) == (17l));\n    assert(newmanPrime((5l)) == (41l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var p = 2L\n        var i = 1L\n        while (i < n) {\n            p += 2L\n            if (BigInt(p).isProbablePrime(100)) i += 1\n        }\n        p",
    "        var p = 2L\n        var i = 1L\n        while (i < n) {\n            p = nextNewmanPrime(p)\n            i += 1\n        }\n        p",
    "        var p = 0L\n        var i = 0L\n        while (p < n) {\n            i += 1\n            if (BigInt(2).modPow(i, i * i - 1) == 1) p += 1\n        }\n        i * i - 1",
    "        var p = 2L\n        var i = 1L\n        while (i < n) {\n            p = p * 2 + 1\n            if (BigInt(p).isProbablePrime(10)) i += 1\n        }\n        p",
    "        var count = 0L\n        var i = 1L\n        while (count < n) {\n            i += 1\n            if (BigInt(i).isProbablePrime(10)) {\n                val s = (i - 1) / 2\n                val t = s * s\n                if (t % i == 1) count += 1\n            }\n        }\n        i",
    "        var p = 2L\n        var i = 1L\n        while (i < n) {\n            p = p * 2 + 1\n            if (BigInt(p).isProbablePrime(100)) i += 1\n        }\n        p",
    "        var p = 2L\n        var count = 0L\n        while (count < n) {\n            p = p + 1\n            if (isPrime(p) && isPrime((p - 1) / 2)) count = count + 1\n        }\n        p",
    "        var p = 2L\n        var count = 0L\n        while (count < n) {\n            p = nextPrime(p)\n            if (p % 4 == 3) count += 1\n        }\n        p",
    "        val primes = new ArrayBuffer[Long]\n        primes += 2\n        primes += 3\n        var k = 1\n        while (primes.length < n) {\n            val p = primes(k)\n            val q = primes(k - 1)\n            val candidate = p * p - 2 * q\n            if (isPrime(candidate)) primes += candidate\n            k += 1\n        }\n        primes.last",
    "        val primes = new ArrayBuffer[Long]\n        primes += 2\n        primes += 3\n        var i = 5\n        while (primes.size < n) {\n            if (primes.forall(i % _ != 0)) primes += i\n            i += 2\n        }\n        primes.last",
    "        var count = 0L\n        var i = 1L\n        while (count < n) {\n            i += 1\n            if (i % 2 == 1 && i % 3 == 1 && i % 5 == 1 && i % 7 == 1) {\n                count += 1\n            }\n        }\n        i",
    "        var p = 2L\n        var i = 0L\n        while (i < n) {\n            p = nextNewmanPrime(p)\n            i += 1\n        }\n        return p",
    "        var count = 0L\n        var i = 2L\n        while (count < n) {\n            if (isPrime(i) && isPrime(2 * i + 1)) count += 1\n            i += 1\n        }\n        i - 1",
    "        var p = 1L\n        var i = 1L\n        while(i <= n) {\n            p = p + 2 * i + 1\n            i = i + 1\n        }\n        return p",
    "        var p = 2L\n        var i = 1L\n        while (i < n) {\n            p = nextNewmanPrime(p)\n            i += 1\n        }\n        p",
    "        val primes = new ArrayBuffer[Long]\n        primes += 2\n        primes += 3\n        var i = 1\n        while (primes.length < n) {\n            val p = primes(i)\n            val q = primes(i - 1)\n            val candidate = p * p - q * q\n            if (isPrime(candidate)) primes += candidate\n            i += 1\n        }\n        primes(n - 1)",
    "        var i = 1;\n        var p = 2;\n        while (i < n) {\n            p = nextPrime(p);\n            if (p % 5 == 1) i += 1;\n        }\n        return p;",
    "        var p = 2L\n        var i = 1L\n        while (i < n) {\n            p = nextNewmanPrime(p)\n            i += 1\n        }\n        return p",
    "        var p = 1L\n        var i = 1L\n        while (i <= n) {\n            p = nextNewmanPrime(p)\n            i += 1\n        }\n        return p",
    "        var p = 2L\n        var i = 0L\n        while (i < n) {\n            p = nextNewmanPrime(p)\n            i += 1\n        }\n        p"
  ]
}