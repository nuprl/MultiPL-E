{
  "name": "mbpp_426_filter_oddnumbers",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_426_filter_oddnumbers.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 != 0)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 != 0)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        return nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123318,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(n => n % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123318,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        return nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123318,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 != 0)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 != 0)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(_ % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123318,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 != 0)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(n => n % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123318,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(n => n % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123318,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 != 0)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 != 0)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(_ % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123318,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(_ % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123318,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(n => n % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123318,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 != 0)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        var result = List[Long]()\n        for (num <- nums) {\n            if (num % 2 == 1) result = result :+ num\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123318,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(n => n % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123318,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 != 0)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums.filter(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}