{
  "name": "mbpp_734_sum_Of_Subarray_Prod",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    def sumOfSubarrayProd(arr : List[Long]) : Long = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_734_sum_Of_Subarray_Prod.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(sumOfSubarrayProd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (20l));\n    assert(sumOfSubarrayProd((List[Long](1l.toLong, 2l.toLong))) == (5l));\n    assert(sumOfSubarrayProd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (84l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val n = arr.length\n        val sum = arr.sum\n        val prod = arr.product\n        val sumOfProd = (1 to n).map(i => (1 to n).map(j => (i to j).map(k => arr(k - 1)).product).sum).sum\n        sumOfProd - sum + prod",
    "        val n = arr.length\n        val sum = arr.sum\n        val prod = arr.product\n        val sumOfProd = (1 to n).map(i => prod / pow(arr(i - 1), n - i).toLong).sum\n        sum * sumOfProd",
    "        val n = arr.length\n        val sum = arr.sum\n        val prod = arr.product\n        val sumOfProd = (0 until n).map(i => (0 until n).map(j => (i to j).map(k => arr(k)).product).sum).sum\n        sumOfProd - sum + prod",
    "        val n = arr.length\n        val sum = arr.sum\n        var prod = 1L\n        for (i <- 0 until n) {\n            prod *= (sum - arr(i))\n        }\n        prod",
    "        val n = arr.length\n        var sum = 0L\n        for (i <- 0 until n) {\n            var prod = 1L\n            for (j <- i until n) {\n                prod *= arr(j)\n                sum += prod\n            }\n        }\n        sum",
    "        val n = arr.length\n        val sum = arr.sum\n        val prod = arr.product\n        var result = 0L\n        for (i <- 0 until n) {\n            result += (sum - arr(i)) * (prod / arr(i))\n        }\n        result",
    "        val n = arr.size\n        val sum = arr.sum\n        val prod = arr.product\n        val sumOfProd = (1 to n).map(i => (i to n).map(j => prod / arr(j - 1)).sum).sum\n        sumOfProd - sum",
    "        val n = arr.length\n        val sum = arr.sum\n        val prod = arr.product\n        val result = (n * prod) + sum\n        result",
    "        val n = arr.length\n        val sum = arr.sum\n        val prod = arr.product\n        val sumOfProd = (1 to n).map(i => prod / arr(i - 1)).sum\n        sum * sumOfProd",
    "        val n = arr.length\n        var sum = 0L\n        for (i <- 0 until n) {\n            var prod = 1L\n            for (j <- i until n) {\n                prod *= arr(j)\n                sum += prod\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 0 until arr.length) {\n            var prod = 1L\n            for (j <- i until arr.length) {\n                prod *= arr(j)\n                sum += prod\n            }\n        }\n        sum",
    "        if (arr.length == 0) return 0\n        val sum = arr.sum\n        val prod = arr.product\n        val n = arr.length\n        val sumOfSubarrayProd = n * sum * prod\n        sumOfSubarrayProd",
    "        val n = arr.length\n        var sum = 0L\n        for (i <- 0 until n) {\n            var prod = 1L\n            for (j <- i until n) {\n                prod *= arr(j)\n                sum += prod\n            }\n        }\n        sum",
    "        val n = arr.length\n        val sum = arr.sum\n        val prod = arr.product\n        val res = (n * prod) + sum\n        res",
    "        var sum = 0L\n        for (i <- 0 until arr.length) {\n            var prod = 1L\n            for (j <- i until arr.length) {\n                prod *= arr(j)\n                sum += prod\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 0 until arr.length) {\n            var prod = 1L\n            for (j <- i until arr.length) {\n                prod *= arr(j)\n                sum += prod\n            }\n        }\n        sum",
    "        val n = arr.length\n        val sum = arr.sum\n        val prod = arr.product\n        val sumOfProd = (0 until n).map(i => (0 until n).map(j => if (i == j) prod else arr(i) * arr(j)).sum).sum\n        sumOfProd - sum * prod",
    "        val n = arr.length\n        val sum = arr.sum\n        val prod = arr.product\n        val sumOfProd = (0 until n).map(i => (sum - arr(i)) * (prod / arr(i))).sum\n        sumOfProd",
    "        val n = arr.length\n        val sum = arr.sum\n        val prod = arr.product\n        val sumOfProd = (1 to n).map(i => sum * prod / arr(i - 1)).sum\n        sumOfProd",
    "        var sum = 0L\n        for (i <- 0 to arr.length - 1) {\n            var prod = 1L\n            for (j <- i to arr.length - 1) {\n                prod *= arr(j)\n                sum += prod\n            }\n        }\n        sum"
  ]
}