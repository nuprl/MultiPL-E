{
  "name": "mbpp_123_amicable_numbers_sum",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_123_amicable_numbers_sum.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        var sum = 0L\n        for (i <- 1L to limit) {\n            val divisors = divisors(i)\n            val sumOfDivisors = divisors.sum\n            if (sumOfDivisors != i && divisors(sumOfDivisors) == i) {\n                sum += i\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1665509957,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp0vlkyee6.scala:8:27 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mdivisors\u001b[0m = divisors(i)\n\u001b[31m\u001b[31m  |\u001b[0m                           ^\u001b[0m\n\u001b[31m  |\u001b[0m                           Recursive \u001b[33mvalue\u001b[0m \u001b[35mdivisors\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = sumOfDivisors(i)\n            if (a != i && sumOfDivisors(a) == i) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1665509957,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpd9qho39t.scala:8:20 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36ma\u001b[0m = sumOfDivisors(i)\n\u001b[31m\u001b[31m  |\u001b[0m                    ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                    Not found: sumOfDivisors\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = sumOfDivisors(i)\n            if (a != i && sumOfDivisors(a) == i) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1665509957,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpd9qho39t.scala:8:20 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36ma\u001b[0m = sumOfDivisors(i)\n\u001b[31m\u001b[31m  |\u001b[0m                    ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                    Not found: sumOfDivisors\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = sumOfDivisors(i)\n            if (a != i && sumOfDivisors(a) == i) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1665509957,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpd9qho39t.scala:8:20 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36ma\u001b[0m = sumOfDivisors(i)\n\u001b[31m\u001b[31m  |\u001b[0m                    ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                    Not found: sumOfDivisors\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) > i && divisors(i) <= limit.toInt && divisors(divisors(i)) == i) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1665509959,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpxcq2t83q.scala:19)\n\tat Problem.main(tmpxcq2t83q.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = sumOfDivisors(i)\n            if (a != i && sumOfDivisors(a) == i) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1665509957,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpd9qho39t.scala:8:20 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36ma\u001b[0m = sumOfDivisors(i)\n\u001b[31m\u001b[31m  |\u001b[0m                    ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                    Not found: sumOfDivisors\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val j = divisors(i)\n            if (j <= limit.toInt && divisors(j) == i && i != j) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1665509959,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        val sumOfDivisors = Array.fill(limit.toInt + 1)(0L)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                sumOfDivisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (sumOfDivisors(i) != i && sumOfDivisors(i) <= limit && sumOfDivisors(sumOfDivisors(i).toInt) == i) {\n                sum += i\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1665509959,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = sumOfDivisors(i)\n            if (a > i && sumOfDivisors(a) == i) sum += i + a\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1665509957,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_o7vjbzh.scala:8:20 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36ma\u001b[0m = sumOfDivisors(i)\n\u001b[31m\u001b[31m  |\u001b[0m                    ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                    Not found: sumOfDivisors\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val j = divisors(i)\n            if (j > i && divisors(j) == i) {\n                sum += i\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1665509959,
      "stdout": "",
      "stderr": "java.lang.ArrayIndexOutOfBoundsException: Index 1032 out of bounds for length 1000\n\tat Problem$.amicableNumbersSum$$anonfun$2(tmprcu69jyy.scala:15)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.amicableNumbersSum(tmprcu69jyy.scala:18)\n\tat Problem$.main(tmprcu69jyy.scala:22)\n\tat Problem.main(tmprcu69jyy.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val j = divisors(i)\n            if (j <= limit.toInt && divisors(j) == i && i != j) {\n                sum += i\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1665509959,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        val divisorSums = new Array[Long](limit.toInt + 1)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisorSums(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisorSums(i) > i && divisorSums(i) <= limit.toInt && divisorSums(divisorSums(i).toInt) == i) {\n                sum += i\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1665509959,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpdtmtle7n.scala:21)\n\tat Problem.main(tmpdtmtle7n.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) > i && divisors(i) <= limit.toInt && divisors(divisors(i)) == i) {\n                sum += i + divisors(i)\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1665509959,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = sumOfDivisors(i)\n            val b = sumOfDivisors(a)\n            if (i == b && a != b) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1665509957,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3au9zorl.scala:8:20 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36ma\u001b[0m = sumOfDivisors(i)\n\u001b[31m\u001b[31m  |\u001b[0m                    ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                    Not found: sumOfDivisors\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3au9zorl.scala:9:20 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mb\u001b[0m = sumOfDivisors(a)\n\u001b[31m\u001b[31m  |\u001b[0m                    ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                    Not found: sumOfDivisors\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- 2 * i to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val j = divisors(i)\n            if (j <= limit.toInt && divisors(j) == i && i != j) {\n                sum += i\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1665509959,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) > i && divisors(divisors(i)) == i) {\n                sum += i\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1665509959,
      "stdout": "",
      "stderr": "java.lang.ArrayIndexOutOfBoundsException: Index 1032 out of bounds for length 1000\n\tat Problem$.amicableNumbersSum$$anonfun$2(tmpsm5l6lt7.scala:14)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.amicableNumbersSum(tmpsm5l6lt7.scala:17)\n\tat Problem$.main(tmpsm5l6lt7.scala:21)\n\tat Problem.main(tmpsm5l6lt7.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        val factors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                factors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val j = factors(i)\n            if (j != i && factors(j) == i) {\n                sum += i\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1665509959,
      "stdout": "",
      "stderr": "java.lang.ArrayIndexOutOfBoundsException: Index 1032 out of bounds for length 1000\n\tat Problem$.amicableNumbersSum$$anonfun$2(tmp_3vsh6um.scala:15)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.amicableNumbersSum(tmp_3vsh6um.scala:18)\n\tat Problem$.main(tmp_3vsh6um.scala:22)\n\tat Problem.main(tmp_3vsh6um.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        var sum = 0L\n        for (i <- 1L to limit) {\n            val sumOfDivisors = divisors(i).sum\n            if (i != sumOfDivisors && divisors(sumOfDivisors).sum == i) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1665509957,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdp5qr909.scala:8:32 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36msumOfDivisors\u001b[0m = divisors(i).sum\n\u001b[31m\u001b[31m  |\u001b[0m                                ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                Not found: divisors\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) > i && divisors(i) <= limit.toInt && divisors(divisors(i)) == i) {\n                sum += i\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1665509959,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpcm4gfwth.scala:21)\n\tat Problem.main(tmpcm4gfwth.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        val divisorSums = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisorSums(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisorSums(i) > i && divisorSums(i) <= limit.toInt && divisorSums(divisorSums(i)) == i) {\n                sum += i\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1665509959,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpxe0au80y.scala:21)\n\tat Problem.main(tmpxe0au80y.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val sumOfDivisors = divisors(i).sum\n            if (sumOfDivisors != i && divisors(sumOfDivisors).sum == i) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122672,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqfbtuois.scala:8:32 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36msumOfDivisors\u001b[0m = divisors(i).sum\n\u001b[31m\u001b[31m  |\u001b[0m                                ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                Not found: divisors\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val sumOfDivisors = divisors(i).sum\n            if (sumOfDivisors != i && divisors(sumOfDivisors).sum == i) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122672,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqfbtuois.scala:8:32 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36msumOfDivisors\u001b[0m = divisors(i).sum\n\u001b[31m\u001b[31m  |\u001b[0m                                ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                Not found: divisors\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = sumOfDivisors(i)\n            if (a != i && sumOfDivisors(a) == i) {\n                sum += i\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122672,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp14kutmy_.scala:8:20 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36ma\u001b[0m = sumOfDivisors(i)\n\u001b[31m\u001b[31m  |\u001b[0m                    ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                    Not found: sumOfDivisors\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val divisors = divisorsOf(i)\n            val sumOfDivisors = divisors.sum\n            if (sumOfDivisors != i && divisorsOf(sumOfDivisors).sum == i) {\n                sum += i\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122672,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp742hq01v.scala:8:27 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mdivisors\u001b[0m = divisorsOf(i)\n\u001b[31m\u001b[31m  |\u001b[0m                           ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                           Not found: divisorsOf\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val j = divisors(i)\n            if (j <= limit.toInt && divisors(j) == i && i != j) {\n                sum += i\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1665509959,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        val divisors = Array.fill[Long](limit.toInt + 1)(1)\n        for (i <- 2 to limit.toInt) {\n            for (j <- 2 to (limit.toInt / i)) {\n                divisors(i * j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 2 to limit.toInt) {\n            if (divisors(i) != i && divisors(i) <= limit && divisors(divisors(i).toInt) == i) {\n                sum += i\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122676,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        val sumOfDivisors = Array.fill(limit.toInt + 1)(1L)\n        for (i <- 2 to limit.toInt) {\n            for (j <- 2 * i to limit.toInt by i) {\n                sumOfDivisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 2 to limit.toInt) {\n            if (sumOfDivisors(i) <= limit && sumOfDivisors(i) != i && sumOfDivisors(sumOfDivisors(i).toInt) == i) {\n                sum += i\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122676,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) < limit.toInt && divisors(divisors(i)) == i && divisors(i) != i) {\n                sum += i\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122676,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        val sumOfDivisors = Array.fill(limit.toInt + 1)(0L)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                sumOfDivisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (sumOfDivisors(i) > i && sumOfDivisors(i) <= limit && sumOfDivisors(sumOfDivisors(i).toInt) == i) {\n                sum += i + sumOfDivisors(i)\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122676,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = sumOfDivisors(i)\n            if (a != i && sumOfDivisors(a) == i) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1665509957,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpd9qho39t.scala:8:20 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36ma\u001b[0m = sumOfDivisors(i)\n\u001b[31m\u001b[31m  |\u001b[0m                    ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                    Not found: sumOfDivisors\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        val divisors = Array.fill(limit.toInt + 1)(0L)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) <= limit.toInt && divisors(i) != i && divisors(divisors(i).toInt) == i) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122676,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) > i && divisors(i) <= limit.toInt && divisors(divisors(i)) == i) {\n                sum += i\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122676,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpwq_ahvuh.scala:21)\n\tat Problem.main(tmpwq_ahvuh.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val j = divisors(i)\n            if (j > i && divisors(j) == i) {\n                sum += i\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1665509959,
      "stdout": "",
      "stderr": "java.lang.ArrayIndexOutOfBoundsException: Index 1032 out of bounds for length 1000\n\tat Problem$.amicableNumbersSum$$anonfun$2(tmprcu69jyy.scala:15)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.amicableNumbersSum(tmprcu69jyy.scala:18)\n\tat Problem$.main(tmprcu69jyy.scala:22)\n\tat Problem.main(tmprcu69jyy.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) > i && divisors(i) <= limit.toInt && divisors(divisors(i)) == i) {\n                sum += i\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122676,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpwq_ahvuh.scala:21)\n\tat Problem.main(tmpwq_ahvuh.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        val divisorSums = new Array[Long](limit.toInt + 1)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisorSums(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisorSums(i) > i && divisorSums(i) <= limit && divisorSums(divisorSums(i).toInt) == i) {\n                sum += i\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122676,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp5c356vky.scala:21)\n\tat Problem.main(tmp5c356vky.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val j = divisors(i)\n            if (j <= limit.toInt && j != i && divisors(j) == i) {\n                sum += i\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122676,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        val sumOfDivisors = Array.fill(limit.toInt + 1)(0L)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                sumOfDivisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val j = sumOfDivisors(i)\n            if (i != j && sumOfDivisors(j) == i) {\n                sum += i\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122675,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpi3fo1rxa.scala:15:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            \u001b[33mif\u001b[0m (i != j && sumOfDivisors(j) == i) {\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^\u001b[0m\n\u001b[31m   |\u001b[0m                                        Found:    (j : Long)\n\u001b[31m   |\u001b[0m                                        Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) != i && divisors(divisors(i)) == i) {\n                sum += i\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122676,
      "stdout": "",
      "stderr": "java.lang.ArrayIndexOutOfBoundsException: Index 1032 out of bounds for length 1000\n\tat Problem$.amicableNumbersSum$$anonfun$2(tmp4nj3not_.scala:14)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.amicableNumbersSum(tmp4nj3not_.scala:17)\n\tat Problem$.main(tmp4nj3not_.scala:21)\n\tat Problem.main(tmp4nj3not_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = sumOfDivisors(i)\n            if (a != i && sumOfDivisors(a) == i) {\n                sum += i\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122672,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp14kutmy_.scala:8:20 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36ma\u001b[0m = sumOfDivisors(i)\n\u001b[31m\u001b[31m  |\u001b[0m                    ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                    Not found: sumOfDivisors\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val j = divisors(i)\n            if (j > i && divisors(j) == i) {\n                sum += i + j\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122676,
      "stdout": "",
      "stderr": "java.lang.ArrayIndexOutOfBoundsException: Index 1032 out of bounds for length 1000\n\tat Problem$.amicableNumbersSum$$anonfun$2(tmp7ztnxxt1.scala:15)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.amicableNumbersSum(tmp7ztnxxt1.scala:18)\n\tat Problem$.main(tmp7ztnxxt1.scala:22)\n\tat Problem.main(tmp7ztnxxt1.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = sumOfProperDivisors(i)\n            if (a != i) {\n                val b = sumOfProperDivisors(a)\n                if (b == i) {\n                    sum += i\n                }\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122672,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmptm8u9xe8.scala:8:20 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36ma\u001b[0m = sumOfProperDivisors(i)\n\u001b[31m\u001b[31m  |\u001b[0m                    ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                    Not found: sumOfProperDivisors\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmptm8u9xe8.scala:10:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                \u001b[33mval\u001b[0m \u001b[36mb\u001b[0m = sumOfProperDivisors(a)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: sumOfProperDivisors\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) > i && divisors(i) <= limit.toInt && divisors(divisors(i)) == i) {\n                sum += i\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122676,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpwq_ahvuh.scala:21)\n\tat Problem.main(tmpwq_ahvuh.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = sumOfDivisors(i)\n            if (a != i && sumOfDivisors(a) == i) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1665509957,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpd9qho39t.scala:8:20 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36ma\u001b[0m = sumOfDivisors(i)\n\u001b[31m\u001b[31m  |\u001b[0m                    ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                    Not found: sumOfDivisors\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        val sumOfDivisors = Array.fill(limit.toInt + 1)(0L)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                sumOfDivisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val j = sumOfDivisors(i)\n            if (j > i && j <= limit.toInt && sumOfDivisors(j) == i) {\n                sum += i + j\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122675,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo4duq4o2.scala:15:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            \u001b[33mif\u001b[0m (j > i && j <= limit.toInt && sumOfDivisors(j) == i) {\n\u001b[31m\u001b[31m   |\u001b[0m                                                           ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                    Found:    (j : Long)\n\u001b[31m   |\u001b[0m                                                    Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = sumOfProperDivisors(i)\n            if (a != i && sumOfProperDivisors(a) == i) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122673,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqcjlbw_v.scala:8:20 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36ma\u001b[0m = sumOfProperDivisors(i)\n\u001b[31m\u001b[31m  |\u001b[0m                    ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                    Not found: sumOfProperDivisors\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = sumOfProperDivisors(i)\n            if (a != i && sumOfProperDivisors(a) == i) {\n                sum += i\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122672,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpo4e_5c5a.scala:8:20 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36ma\u001b[0m = sumOfProperDivisors(i)\n\u001b[31m\u001b[31m  |\u001b[0m                    ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                    Not found: sumOfProperDivisors\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val sumOfDivisors = sumOfDivisorsOf(i)\n            if (sumOfDivisors != i && sumOfDivisorsOf(sumOfDivisors) == i) {\n                sum += i\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122673,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2aaqq6nq.scala:8:32 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36msumOfDivisors\u001b[0m = sumOfDivisorsOf(i)\n\u001b[31m\u001b[31m  |\u001b[0m                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                Not found: sumOfDivisorsOf\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val j = divisors(i)\n            if (j <= limit.toInt && divisors(j) == i && i != j) {\n                sum += i\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1665509959,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) != i && divisors(divisors(i)) == i) {\n                sum += i\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122676,
      "stdout": "",
      "stderr": "java.lang.ArrayIndexOutOfBoundsException: Index 1032 out of bounds for length 1000\n\tat Problem$.amicableNumbersSum$$anonfun$2(tmp4nj3not_.scala:14)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.amicableNumbersSum(tmp4nj3not_.scala:17)\n\tat Problem$.main(tmp4nj3not_.scala:21)\n\tat Problem.main(tmp4nj3not_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        val divisorSums = new Array[Long](limit.toInt + 1)\n        for (i <- 1 to limit.toInt) {\n            for (j <- 2 * i to limit.toInt by i) {\n                divisorSums(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisorSums(i) > i && divisorSums(i) <= limit && divisorSums(divisorSums(i).toInt) == i) {\n                sum += i\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122676,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpb8vxhuoh.scala:21)\n\tat Problem.main(tmpb8vxhuoh.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        val factors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i to limit.toInt by i) {\n                factors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val j = factors(i)\n            if (j != i && factors(j) == i) {\n                sum += i\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122676,
      "stdout": "",
      "stderr": "java.lang.ArrayIndexOutOfBoundsException: Index 1170 out of bounds for length 1000\n\tat Problem$.amicableNumbersSum$$anonfun$2(tmp9l_5h3tc.scala:15)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.amicableNumbersSum(tmp9l_5h3tc.scala:18)\n\tat Problem$.main(tmp9l_5h3tc.scala:22)\n\tat Problem.main(tmp9l_5h3tc.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) < limit.toInt && divisors(divisors(i)) == i && i != divisors(i)) {\n                sum += i\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122676,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val j = divisors(i)\n            if (j <= limit.toInt && i != j && divisors(j) == i) {\n                sum += i\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122676,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val divisors = divisors(i)\n            val divisorsSum = divisors.sum\n            val divisorsSumDivisors = divisors(divisorsSum)\n            if (divisorsSumDivisors.sum == i && i != divisorsSum) {\n                sum += i\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122679,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpzpr7pi12.scala:8:27 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mdivisors\u001b[0m = divisors(i)\n\u001b[31m\u001b[31m  |\u001b[0m                           ^\u001b[0m\n\u001b[31m  |\u001b[0m                           Recursive \u001b[33mvalue\u001b[0m \u001b[35mdivisors\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = sumOfDivisors(i)\n            if (a > i && sumOfDivisors(a) == i) sum += i + a\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1665509957,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_o7vjbzh.scala:8:20 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36ma\u001b[0m = sumOfDivisors(i)\n\u001b[31m\u001b[31m  |\u001b[0m                    ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                    Not found: sumOfDivisors\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = sumOfProperDivisors(i)\n            if (a != i) {\n                val b = sumOfProperDivisors(a)\n                if (b == i) {\n                    sum += i\n                }\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122672,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmptm8u9xe8.scala:8:20 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36ma\u001b[0m = sumOfProperDivisors(i)\n\u001b[31m\u001b[31m  |\u001b[0m                    ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                    Not found: sumOfProperDivisors\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmptm8u9xe8.scala:10:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                \u001b[33mval\u001b[0m \u001b[36mb\u001b[0m = sumOfProperDivisors(a)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: sumOfProperDivisors\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = sumOfProperDivisors(i)\n            if (a != i && sumOfProperDivisors(a) == i) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122673,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqcjlbw_v.scala:8:20 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36ma\u001b[0m = sumOfProperDivisors(i)\n\u001b[31m\u001b[31m  |\u001b[0m                    ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                    Not found: sumOfProperDivisors\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = sumOfDivisors(i)\n            val b = sumOfDivisors(a)\n            if (i == b && i != a) {\n                sum += i\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122678,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpri6hjd1z.scala:8:20 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36ma\u001b[0m = sumOfDivisors(i)\n\u001b[31m\u001b[31m  |\u001b[0m                    ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                    Not found: sumOfDivisors\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpri6hjd1z.scala:9:20 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mb\u001b[0m = sumOfDivisors(a)\n\u001b[31m\u001b[31m  |\u001b[0m                    ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                    Not found: sumOfDivisors\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        var sum = 0L\n        for (i <- 1L to limit) {\n            val divisors = divisors(i)\n            val divisorsSum = divisors.sum\n            if (divisorsSum != i && divisors(divisorsSum) == i) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122678,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpijv1v27n.scala:8:27 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mdivisors\u001b[0m = divisors(i)\n\u001b[31m\u001b[31m  |\u001b[0m                           ^\u001b[0m\n\u001b[31m  |\u001b[0m                           Recursive \u001b[33mvalue\u001b[0m \u001b[35mdivisors\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) > i && divisors(i) <= limit.toInt && divisors(divisors(i)) == i) {\n                sum += i + divisors(i)\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1665509959,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) > i && divisors(i) <= limit.toInt && divisors(divisors(i)) == i) {\n                sum += i + divisors(i)\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1665509959,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) != i && divisors(divisors(i)) == i) {\n                sum += i\n            }\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122684,
      "stdout": "",
      "stderr": "java.lang.ArrayIndexOutOfBoundsException: Index 1032 out of bounds for length 1000\n\tat Problem$.amicableNumbersSum$$anonfun$2(tmp22oxa9xn.scala:14)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.amicableNumbersSum(tmp22oxa9xn.scala:17)\n\tat Problem$.main(tmp22oxa9xn.scala:21)\n\tat Problem.main(tmp22oxa9xn.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        val divisors = Array.fill(limit.toInt + 1)(0L)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val j = divisors(i)\n            if (j <= limit.toInt && i == divisors(j) && i != j) {\n                sum += i\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122682,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppn6yo8f8.scala:15:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            \u001b[33mif\u001b[0m (j <= limit.toInt && i == divisors(j) && i != j) {\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (j : Long)\n\u001b[31m   |\u001b[0m                                                  Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = divisorsSum(i)\n            val b = divisorsSum(a)\n            if (i == b && i != a) {\n                sum += i\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122679,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpq25yixin.scala:8:20 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36ma\u001b[0m = divisorsSum(i)\n\u001b[31m\u001b[31m  |\u001b[0m                    ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                    Not found: divisorsSum\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpq25yixin.scala:9:20 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mb\u001b[0m = divisorsSum(a)\n\u001b[31m\u001b[31m  |\u001b[0m                    ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                    Not found: divisorsSum\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) > i && divisors(i) <= limit.toInt && divisors(divisors(i)) == i) {\n                sum += i\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122676,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpwq_ahvuh.scala:21)\n\tat Problem.main(tmpwq_ahvuh.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) > i && divisors(i) <= limit.toInt && divisors(divisors(i)) == i) {\n                sum += i\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122676,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpwq_ahvuh.scala:21)\n\tat Problem.main(tmpwq_ahvuh.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = sumOfDivisors(i)\n            if (a != i && sumOfDivisors(a) == i) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1665509957,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpd9qho39t.scala:8:20 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36ma\u001b[0m = sumOfDivisors(i)\n\u001b[31m\u001b[31m  |\u001b[0m                    ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                    Not found: sumOfDivisors\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        val divisors = Array.fill(limit.toInt + 1)(0L)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) != i && divisors(i) <= limit && divisors(divisors(i).toInt) == i) {\n                sum += i\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122684,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = sumOfDivisors(i)\n            if (a != i && sumOfDivisors(a) == i) {\n                sum += i\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122672,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp14kutmy_.scala:8:20 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36ma\u001b[0m = sumOfDivisors(i)\n\u001b[31m\u001b[31m  |\u001b[0m                    ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                    Not found: sumOfDivisors\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) > i && divisors(divisors(i)) == i) {\n                sum += i\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1665509959,
      "stdout": "",
      "stderr": "java.lang.ArrayIndexOutOfBoundsException: Index 1032 out of bounds for length 1000\n\tat Problem$.amicableNumbersSum$$anonfun$2(tmpsm5l6lt7.scala:14)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.amicableNumbersSum(tmpsm5l6lt7.scala:17)\n\tat Problem$.main(tmpsm5l6lt7.scala:21)\n\tat Problem.main(tmpsm5l6lt7.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) > i && divisors(i) <= limit.toInt && divisors(divisors(i)) == i) {\n                sum += i\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122676,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpwq_ahvuh.scala:21)\n\tat Problem.main(tmpwq_ahvuh.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = sumOfProperDivisors(i)\n            if (a != i && sumOfProperDivisors(a) == i) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122673,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqcjlbw_v.scala:8:20 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36ma\u001b[0m = sumOfProperDivisors(i)\n\u001b[31m\u001b[31m  |\u001b[0m                    ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                    Not found: sumOfProperDivisors\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- 2 * i to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) > i && divisors(i) <= limit.toInt && divisors(divisors(i)) == i) {\n                sum += i + divisors(i)\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122685,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = divisorsSum(i)\n            val b = divisorsSum(a)\n            if (i == b && i != a) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122682,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpunxn43se.scala:8:20 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36ma\u001b[0m = divisorsSum(i)\n\u001b[31m\u001b[31m  |\u001b[0m                    ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                    Not found: divisorsSum\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpunxn43se.scala:9:20 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mb\u001b[0m = divisorsSum(a)\n\u001b[31m\u001b[31m  |\u001b[0m                    ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                    Not found: divisorsSum\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) > i && divisors(i) <= limit.toInt && divisors(divisors(i)) == i) {\n                sum += i + divisors(i)\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1665509959,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = sumOfDivisors(i)\n            if (a != i && sumOfDivisors(a) == i) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1665509957,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpd9qho39t.scala:8:20 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36ma\u001b[0m = sumOfDivisors(i)\n\u001b[31m\u001b[31m  |\u001b[0m                    ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                    Not found: sumOfDivisors\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 2 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 2 to limit.toInt) {\n            if (divisors(i) > i && divisors(i) <= limit.toInt && divisors(divisors(i)) == i) {\n                sum += i + divisors(i)\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122686,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpdhk724rj.scala:21)\n\tat Problem.main(tmpdhk724rj.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val j = sumOfDivisors(i)\n            if (i != j && sumOfDivisors(j) == i) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122683,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpft4le0ou.scala:8:20 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mj\u001b[0m = sumOfDivisors(i)\n\u001b[31m\u001b[31m  |\u001b[0m                    ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                    Not found: sumOfDivisors\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val j = divisors(i)\n            if (j <= limit.toInt && i == divisors(j) && i != j) {\n                sum += i\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = sumOfDivisors(i)\n            if (a != i && sumOfDivisors(a) == i) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1665509957,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpd9qho39t.scala:8:20 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36ma\u001b[0m = sumOfDivisors(i)\n\u001b[31m\u001b[31m  |\u001b[0m                    ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                    Not found: sumOfDivisors\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) != i && divisors(i) <= limit.toInt && divisors(divisors(i)) == i) {\n                sum += i\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122687,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        val divisors = Array.fill(limit.toInt + 1)(0L)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) < limit && divisors(i) != i && divisors(divisors(i).toInt) == i) {\n                sum += i\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122687,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpjg1bxdkv.scala:21)\n\tat Problem.main(tmpjg1bxdkv.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        val sums = Array.fill(limit.toInt + 1)(1L)\n        for (i <- 2 to limit.toInt) {\n            for (j <- 2 * i to limit.toInt by i) {\n                sums(j) += i\n            }\n        }\n        (1 to limit.toInt).filter(i => i < sums(i) && i == sums(sums(i))).sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122685,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbepx7er4.scala:12:68 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        (\u001b[31m1\u001b[0m to limit.toInt).filter(\u001b[36mi\u001b[0m => i < sums(i) && i == sums(sums(i))).sum\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Found:    Long\n\u001b[31m   |\u001b[0m                                                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val j = divisors(i)\n            if (i != j && divisors(j) == i) {\n                sum += i\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122686,
      "stdout": "",
      "stderr": "java.lang.ArrayIndexOutOfBoundsException: Index 1032 out of bounds for length 1000\n\tat Problem$.amicableNumbersSum$$anonfun$2(tmpcmua9lqv.scala:15)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.amicableNumbersSum(tmpcmua9lqv.scala:18)\n\tat Problem$.main(tmpcmua9lqv.scala:22)\n\tat Problem.main(tmpcmua9lqv.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val divisors = divisorsSum(i)\n            if (divisors != i && divisors <= limit && divisorsSum(divisors) == i) {\n                sum += i\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122683,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv579j_zd.scala:8:27 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mdivisors\u001b[0m = divisorsSum(i)\n\u001b[31m\u001b[31m  |\u001b[0m                           ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                           Not found: divisorsSum\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        val divisors = Array.fill(limit.toInt + 1)(0L)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) != i && divisors(i) <= limit && divisors(divisors(i).toInt) == i) {\n                sum += i\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122684,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        val amicables = new HashSet[Long]\n        for (i <- 1 to limit.toInt) {\n            val sum = divisors(i).sum\n            if (sum != i && divisors(sum).sum == i) {\n                amicables += i\n                amicables += sum\n            }\n        }\n        amicables.sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122682,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpl9tlo16i.scala:8:22 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36msum\u001b[0m = divisors(i).sum\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Not found: divisors\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        def sumOfDivisors(n : Long) : Long = {\n            val sqrt = sqrt(n).toLong\n            val divisors = ArrayBuffer[Long]()\n            for (i <- 1 to sqrt) {\n                if (n % i == 0) {\n                    divisors += i\n                    if (i != n / i) divisors += n / i\n                }\n            }\n            divisors.sum - n\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val sumOfDivisorsOfI = sumOfDivisors(i)\n            if (sumOfDivisorsOfI > i && sumOfDivisors(sumOfDivisorsOfI) == i) sum += i + sumOfDivisorsOfI\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122684,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpd_gielhi.scala:7:23 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                       ^\u001b[0m\n\u001b[31m  |\u001b[0m                       Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) > i && divisors(i) <= limit.toInt && divisors(divisors(i)) == i) {\n                sum += i + divisors(i)\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1665509959,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 2 to limit.toInt) {\n            for (j <- i to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 2 to limit.toInt) {\n            if (divisors(i) != i && divisors(i) <= limit && divisors(divisors(i)) == i) {\n                sum += i\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122687,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp9sov3pw6.scala:21)\n\tat Problem.main(tmp9sov3pw6.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) > i && divisors(i) <= limit.toInt && divisors(divisors(i)) == i) {\n                sum += i\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122676,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpwq_ahvuh.scala:21)\n\tat Problem.main(tmpwq_ahvuh.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val j = divisors(i)\n            if (j <= limit.toInt && divisors(j) == i && i != j) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1665509959,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) > i && divisors(i) <= limit.toInt && divisors(divisors(i)) == i) {\n                sum += i + divisors(i)\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1665509959,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) > i && divisors(i) <= limit.toInt && divisors(divisors(i)) == i) {\n                sum += i\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122676,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpwq_ahvuh.scala:21)\n\tat Problem.main(tmpwq_ahvuh.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        var sum = 0L\n        for (i <- 2L to limit) {\n            val a = sumOfProperDivisors(i)\n            if (a != i && sumOfProperDivisors(a) == i) {\n                sum += i\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122683,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpcio07nxe.scala:8:20 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36ma\u001b[0m = sumOfProperDivisors(i)\n\u001b[31m\u001b[31m  |\u001b[0m                    ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                    Not found: sumOfProperDivisors\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val sumOfDivisors = divisors(i).sum\n            if (i != sumOfDivisors && divisors(sumOfDivisors).sum == i) {\n                sum += i\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122683,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpq3bk2ho_.scala:8:32 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36msumOfDivisors\u001b[0m = divisors(i).sum\n\u001b[31m\u001b[31m  |\u001b[0m                                ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                Not found: divisors\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        val sumOfDivisors = Array.fill(limit.toInt + 1)(0L)\n        for (i <- 1 to limit.toInt) {\n            for (j <- 2 * i to limit.toInt by i) {\n                sumOfDivisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (sumOfDivisors(i) > i && sumOfDivisors(i) <= limit && sumOfDivisors(sumOfDivisors(i).toInt) == i) {\n                sum += i\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122687,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpipk42x94.scala:21)\n\tat Problem.main(tmpipk42x94.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = sumOfProperDivisors(i)\n            if (a != i && sumOfProperDivisors(a) == i) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122673,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqcjlbw_v.scala:8:20 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36ma\u001b[0m = sumOfProperDivisors(i)\n\u001b[31m\u001b[31m  |\u001b[0m                    ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                    Not found: sumOfProperDivisors\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val j = divisors(i)\n            if (divisors(j) == i && i != j) {\n                sum += i\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122690,
      "stdout": "",
      "stderr": "java.lang.ArrayIndexOutOfBoundsException: Index 1032 out of bounds for length 1000\n\tat Problem$.amicableNumbersSum$$anonfun$2(tmpsz4jl7d4.scala:15)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.amicableNumbersSum(tmpsz4jl7d4.scala:18)\n\tat Problem$.main(tmpsz4jl7d4.scala:22)\n\tat Problem.main(tmpsz4jl7d4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        val primes = new PrimeSet(limit)\n        val divisors = Array.fill(limit.toInt + 1)(0L)\n        for (i <- 2 to limit.toInt) {\n            if (divisors(i) == 0) {\n                var j = i\n                while (j <= limit) {\n                    divisors(j) += i\n                    j += i\n                }\n            }\n        }\n        var sum = 0L\n        for (i <- 2 to limit.toInt) {\n            val j = divisors(i)\n            if (divisors(j) == i && i != j) {\n                sum += i\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122687,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_eugv7ny.scala:6:25 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mPrimeSet\u001b[0m(limit)\n\u001b[31m\u001b[31m  |\u001b[0m                         ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                         Not found: type PrimeSet\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_eugv7ny.scala:20:25 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m            \u001b[33mif\u001b[0m (divisors(j) == i && i != j) {\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         Found:    (j : Long)\n\u001b[31m   |\u001b[0m                         Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        var sum = 0L\n        for (i <- 1L to limit) {\n            val a = sumOfProperDivisors(i)\n            if (a != i && sumOfProperDivisors(a) == i) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122686,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp0fk9z90x.scala:8:20 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36ma\u001b[0m = sumOfProperDivisors(i)\n\u001b[31m\u001b[31m  |\u001b[0m                    ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                    Not found: sumOfProperDivisors\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val sum1 = divisors(i).sum\n            val sum2 = divisors(sum1).sum\n            if (sum2 == i && sum1 != i) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122686,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpw_6dbvq0.scala:8:23 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36msum1\u001b[0m = divisors(i).sum\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Not found: divisors\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpw_6dbvq0.scala:9:23 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36msum2\u001b[0m = divisors(sum1).sum\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Not found: divisors\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) > i && divisors(i) <= limit.toInt && divisors(divisors(i)) == i) {\n                sum += i + divisors(i)\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1665509959,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        val divisorSums = Array.fill(limit.toInt + 1)(0L)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisorSums(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisorSums(i) > i && divisorSums(i) <= limit.toInt && divisorSums(divisorSums(i).toInt) == i) {\n                sum += i + divisorSums(i)\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122693,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        val factors = Array.fill[List[Long]](limit.toInt + 1)(Nil)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                factors(j) = i :: factors(j)\n            }\n        }\n        val sums = Array.fill[Long](limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            sums(i) = factors(i).sum\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (sums(i) <= limit && sums(i) != i && sums(sums(i).toInt) == i) {\n                sum += i\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122694,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        val factors = Array.fill(limit.toInt + 1)(List[Int]())\n        for (i <- 1 to limit.toInt) {\n            for (j <- i to limit.toInt by i) {\n                factors(j) = i :: factors(j)\n            }\n        }\n        val sums = factors.map(x => x.sum)\n        val amicable = new HashSet[Int]\n        for (i <- 1 to limit.toInt) {\n            val sum = sums(i)\n            if (sum <= limit.toInt && sum != i && sums(sum) == i) {\n                amicable += i\n                amicable += sum\n            }\n        }\n        amicable.sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122694,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpcbata7ux.scala:24)\n\tat Problem.main(tmpcbata7ux.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) > i && divisors(i) <= limit.toInt && divisors(divisors(i)) == i) {\n                sum += i + divisors(i)\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1665509959,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = sumOfDivisors(i)\n            if (a != i && sumOfDivisors(a) == i) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1665509957,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpd9qho39t.scala:8:20 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36ma\u001b[0m = sumOfDivisors(i)\n\u001b[31m\u001b[31m  |\u001b[0m                    ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                    Not found: sumOfDivisors\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        var sum = 0L\n        for (i <- 1L to limit) {\n            val a = sumOfDivisors(i)\n            if (a != i && sumOfDivisors(a) == i) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122690,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp01fibyjx.scala:8:20 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36ma\u001b[0m = sumOfDivisors(i)\n\u001b[31m\u001b[31m  |\u001b[0m                    ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                    Not found: sumOfDivisors\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        val sumOfDivisors = Array.fill(limit.toInt + 1)(0L)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                sumOfDivisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (sumOfDivisors(i) <= limit.toInt && sumOfDivisors(i) != i && sumOfDivisors(sumOfDivisors(i)) == i) {\n                sum += i\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122692,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp85myppsj.scala:14:103 -------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            \u001b[33mif\u001b[0m (sumOfDivisors(i) <= limit.toInt && sumOfDivisors(i) != i && sumOfDivisors(sumOfDivisors(i)) == i) {\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                          ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Found:    Long\n\u001b[31m   |\u001b[0m                                                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) > i && divisors(i) <= limit.toInt && divisors(divisors(i)) == i) {\n                sum += i\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122676,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpwq_ahvuh.scala:21)\n\tat Problem.main(tmpwq_ahvuh.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) > i && divisors(divisors(i)) == i) {\n                sum += i\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1665509959,
      "stdout": "",
      "stderr": "java.lang.ArrayIndexOutOfBoundsException: Index 1032 out of bounds for length 1000\n\tat Problem$.amicableNumbersSum$$anonfun$2(tmpsm5l6lt7.scala:14)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.amicableNumbersSum(tmpsm5l6lt7.scala:17)\n\tat Problem$.main(tmpsm5l6lt7.scala:21)\n\tat Problem.main(tmpsm5l6lt7.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) > i && divisors(divisors(i)) == i) {\n                sum += i\n            }\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122694,
      "stdout": "",
      "stderr": "java.lang.ArrayIndexOutOfBoundsException: Index 1032 out of bounds for length 1000\n\tat Problem$.amicableNumbersSum$$anonfun$2(tmpw9q0nsou.scala:14)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.amicableNumbersSum(tmpw9q0nsou.scala:17)\n\tat Problem$.main(tmpw9q0nsou.scala:21)\n\tat Problem.main(tmpw9q0nsou.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        val sumOfDivisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                sumOfDivisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (sumOfDivisors(i) > i && sumOfDivisors(i) <= limit.toInt && sumOfDivisors(sumOfDivisors(i)) == i) {\n                sum += i\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122693,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp6xzpo09l.scala:21)\n\tat Problem.main(tmp6xzpo09l.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        val factors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                factors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val j = factors(i)\n            if (j != i && factors(j) == i) {\n                sum += i\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1665509959,
      "stdout": "",
      "stderr": "java.lang.ArrayIndexOutOfBoundsException: Index 1032 out of bounds for length 1000\n\tat Problem$.amicableNumbersSum$$anonfun$2(tmp_3vsh6um.scala:15)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.amicableNumbersSum(tmp_3vsh6um.scala:18)\n\tat Problem$.main(tmp_3vsh6um.scala:22)\n\tat Problem.main(tmp_3vsh6um.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val sumOfDivisors = divisors(i).sum\n            if (sumOfDivisors != i && divisors(sumOfDivisors).sum == i) {\n                sum += i\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122690,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpm_zpbb3l.scala:8:32 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36msumOfDivisors\u001b[0m = divisors(i).sum\n\u001b[31m\u001b[31m  |\u001b[0m                                ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                Not found: divisors\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) < limit.toInt && divisors(divisors(i)) == i && divisors(i) != i) {\n                sum += i\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122676,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = sumOfProperDivisors(i)\n            if (a != i && sumOfProperDivisors(a) == i) {\n                sum += i\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122672,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpo4e_5c5a.scala:8:20 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36ma\u001b[0m = sumOfProperDivisors(i)\n\u001b[31m\u001b[31m  |\u001b[0m                    ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                    Not found: sumOfProperDivisors\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = sumOfProperDivisors(i)\n            if (a != i && sumOfProperDivisors(a) == i) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122673,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqcjlbw_v.scala:8:20 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36ma\u001b[0m = sumOfProperDivisors(i)\n\u001b[31m\u001b[31m  |\u001b[0m                    ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                    Not found: sumOfProperDivisors\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) > i && divisors(i) <= limit.toInt && divisors(divisors(i)) == i) {\n                sum += i\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122676,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpwq_ahvuh.scala:21)\n\tat Problem.main(tmpwq_ahvuh.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        val sumOfDivisors = Array.fill(limit.toInt + 1)(1L)\n        for (i <- 2 to limit.toInt) {\n            for (j <- 2 * i to limit.toInt by i) {\n                sumOfDivisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 2 to limit.toInt) {\n            val j = sumOfDivisors(i)\n            if (j <= limit && sumOfDivisors(j) == i && i != j) {\n                sum += i\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122693,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprvm80uqu.scala:15:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            \u001b[33mif\u001b[0m (j <= limit && sumOfDivisors(j) == i && i != j) {\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (j : Long)\n\u001b[31m   |\u001b[0m                                            Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val sum1 = (1 to (i / 2)).filter(i % _ == 0).sum\n            val sum2 = (1 to (sum1 / 2)).filter(sum1 % _ == 0).sum\n            if (sum2 == i && sum1 != i) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122695,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = divisorsSum(i)\n            if (a != i && divisorsSum(a) == i) {\n                sum += i\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122692,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpk4hzjs6a.scala:8:20 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36ma\u001b[0m = divisorsSum(i)\n\u001b[31m\u001b[31m  |\u001b[0m                    ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                    Not found: divisorsSum\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = divisors(i).sum\n            val b = divisors(a).sum\n            if (i == b && i != a) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122693,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvbthpfd0.scala:8:20 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36ma\u001b[0m = divisors(i).sum\n\u001b[31m\u001b[31m  |\u001b[0m                    ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                    Not found: divisors\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvbthpfd0.scala:9:20 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mb\u001b[0m = divisors(a).sum\n\u001b[31m\u001b[31m  |\u001b[0m                    ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                    Not found: divisors\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        def sumOfDivisors(n : Long) : Long = {\n            var sum = 1L\n            for (i <- 2L to sqrt(n).toLong) {\n                if (n % i == 0) {\n                    sum += i\n                    if (i != n / i) sum += n / i\n                }\n            }\n            sum\n        }\n        var sum = 0L\n        for (i <- 1L to limit) {\n            val a = sumOfDivisors(i)\n            if (a != i && sumOfDivisors(a) == i) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122697,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) > i && divisors(i) <= limit.toInt && divisors(divisors(i)) == i) {\n                sum += i\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122676,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpwq_ahvuh.scala:21)\n\tat Problem.main(tmpwq_ahvuh.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = sumOfProperDivisors(i)\n            val b = sumOfProperDivisors(a)\n            if (i == b && a != b) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122693,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9e0x1byv.scala:8:20 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36ma\u001b[0m = sumOfProperDivisors(i)\n\u001b[31m\u001b[31m  |\u001b[0m                    ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                    Not found: sumOfProperDivisors\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9e0x1byv.scala:9:20 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mb\u001b[0m = sumOfProperDivisors(a)\n\u001b[31m\u001b[31m  |\u001b[0m                    ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                    Not found: sumOfProperDivisors\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = sumOfDivisors(i)\n            if (a != i && sumOfDivisors(a) == i) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1665509957,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpd9qho39t.scala:8:20 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36ma\u001b[0m = sumOfDivisors(i)\n\u001b[31m\u001b[31m  |\u001b[0m                    ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                    Not found: sumOfDivisors\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        val sumOfDivisors = Array.fill(limit.toInt + 1)(1L)\n        for (i <- 2 to limit.toInt) {\n            for (j <- 2 * i to limit.toInt by i) {\n                sumOfDivisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (sumOfDivisors(i) <= limit && sumOfDivisors(i) != i && sumOfDivisors(sumOfDivisors(i).toInt) == i) {\n                sum += i\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = sumOfProperDivisors(i)\n            if (a != i && sumOfProperDivisors(a) == i) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122673,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqcjlbw_v.scala:8:20 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36ma\u001b[0m = sumOfProperDivisors(i)\n\u001b[31m\u001b[31m  |\u001b[0m                    ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                    Not found: sumOfProperDivisors\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) != i && divisors(divisors(i)) == i) {\n                sum += i\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122676,
      "stdout": "",
      "stderr": "java.lang.ArrayIndexOutOfBoundsException: Index 1032 out of bounds for length 1000\n\tat Problem$.amicableNumbersSum$$anonfun$2(tmp4nj3not_.scala:14)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.amicableNumbersSum(tmp4nj3not_.scala:17)\n\tat Problem$.main(tmp4nj3not_.scala:21)\n\tat Problem.main(tmp4nj3not_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) > i && divisors(divisors(i)) == i) {\n                sum += i\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1665509959,
      "stdout": "",
      "stderr": "java.lang.ArrayIndexOutOfBoundsException: Index 1032 out of bounds for length 1000\n\tat Problem$.amicableNumbersSum$$anonfun$2(tmpsm5l6lt7.scala:14)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.amicableNumbersSum(tmpsm5l6lt7.scala:17)\n\tat Problem$.main(tmpsm5l6lt7.scala:21)\n\tat Problem.main(tmpsm5l6lt7.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        val sumOfDivisors = Array.fill(limit.toInt + 1)(0L)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                sumOfDivisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (sumOfDivisors(i) > i && sumOfDivisors(i) <= limit && sumOfDivisors(sumOfDivisors(i).toInt) == i) {\n                sum += i\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122697,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpbmckdoqq.scala:21)\n\tat Problem.main(tmpbmckdoqq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = sumOfProperDivisors(i)\n            if (a != i) {\n                val b = sumOfProperDivisors(a)\n                if (b == i) {\n                    sum += i\n                }\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122672,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmptm8u9xe8.scala:8:20 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36ma\u001b[0m = sumOfProperDivisors(i)\n\u001b[31m\u001b[31m  |\u001b[0m                    ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                    Not found: sumOfProperDivisors\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmptm8u9xe8.scala:10:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                \u001b[33mval\u001b[0m \u001b[36mb\u001b[0m = sumOfProperDivisors(a)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: sumOfProperDivisors\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        val sumOfDivisors = Array.fill(limit.toInt + 1)(0L)\n        for (i <- 1 to limit.toInt) {\n            for (j <- 2 * i to limit.toInt by i) {\n                sumOfDivisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (sumOfDivisors(i) > i && sumOfDivisors(i) <= limit.toInt && sumOfDivisors(sumOfDivisors(i).toInt) == i) {\n                sum += i\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122697,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp_oqftdml.scala:21)\n\tat Problem.main(tmp_oqftdml.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) > i && divisors(i) <= limit.toInt && divisors(divisors(i)) == i) {\n                sum += i\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1665509959,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpcm4gfwth.scala:21)\n\tat Problem.main(tmpcm4gfwth.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        var sum = 0L\n        for (i <- 1L to limit) {\n            val a = sumOfProperDivisors(i)\n            if (a != i && sumOfProperDivisors(a) == i) sum += i\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122694,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgmcjqffm.scala:8:20 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36ma\u001b[0m = sumOfProperDivisors(i)\n\u001b[31m\u001b[31m  |\u001b[0m                    ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                    Not found: sumOfProperDivisors\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) > i && divisors(i) <= limit.toInt && divisors(divisors(i)) == i) {\n                sum += i + divisors(i)\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1665509959,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) > i && divisors(i) <= limit.toInt && divisors(divisors(i)) == i) {\n                sum += i + divisors(i)\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1665509959,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = sumOfProperDivisors(i)\n            if (a != i) {\n                val b = sumOfProperDivisors(a)\n                if (b == i) sum += i\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122693,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp01rqajog.scala:8:20 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36ma\u001b[0m = sumOfProperDivisors(i)\n\u001b[31m\u001b[31m  |\u001b[0m                    ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                    Not found: sumOfProperDivisors\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp01rqajog.scala:10:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                \u001b[33mval\u001b[0m \u001b[36mb\u001b[0m = sumOfProperDivisors(a)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: sumOfProperDivisors\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) divisors(j) += i\n        }\n        (1 to limit.toInt).filter(i => divisors(i) != i && divisors(divisors(i)) == i).sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122698,
      "stdout": "",
      "stderr": "java.lang.ArrayIndexOutOfBoundsException: Index 1032 out of bounds for length 1000\n\tat Problem$.amicableNumbersSum$$anonfun$2(tmp2qbdlvsz.scala:10)\n\tat scala.runtime.java8.JFunction1$mcZI$sp.apply(JFunction1$mcZI$sp.scala:17)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl(StrictOptimizedIterableOps.scala:227)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl$(StrictOptimizedIterableOps.scala:222)\n\tat scala.collection.immutable.Range.filterImpl(Range.scala:59)\n\tat scala.collection.StrictOptimizedIterableOps.filter(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.StrictOptimizedIterableOps.filter$(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.immutable.Range.filter(Range.scala:59)\n\tat Problem$.amicableNumbersSum(tmp2qbdlvsz.scala:10)\n\tat Problem$.main(tmp2qbdlvsz.scala:13)\n\tat Problem.main(tmp2qbdlvsz.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGene",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = sumOfProperDivisors(i)\n            val b = sumOfProperDivisors(a)\n            if (i == b && i != a) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122694,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvcqrglb0.scala:8:20 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36ma\u001b[0m = sumOfProperDivisors(i)\n\u001b[31m\u001b[31m  |\u001b[0m                    ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                    Not found: sumOfProperDivisors\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvcqrglb0.scala:9:20 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mb\u001b[0m = sumOfProperDivisors(a)\n\u001b[31m\u001b[31m  |\u001b[0m                    ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                    Not found: sumOfProperDivisors\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- 2 * i to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) > i && divisors(i) <= limit.toInt && divisors(divisors(i)) == i) {\n                sum += i\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122699,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpa3l_yz4l.scala:21)\n\tat Problem.main(tmpa3l_yz4l.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        val primes = Array.fill(limit.toInt + 1)(true)\n        primes(0) = false\n        primes(1) = false\n        for (i <- 2 to sqrt(limit).toInt) {\n            if (primes(i)) {\n                var j = i * i\n                while (j <= limit) {\n                    primes(j) = false\n                    j += i\n                }\n            }\n        }\n        val primeList = primes.zipWithIndex.filter(_._1).map(_._2)\n        val primeSet = primeList.toSet\n        val primeFactorization = Array.fill(limit.toInt + 1)(List[Int]())\n        for (i <- 2 to limit.toInt) {\n            if (primeFactorization(i).isEmpty) {\n                var j = i\n                var k = 0\n                while (j > 1) {\n                    if (j % primeList(k) == 0) {\n                        primeFactorization(i) = primeList(k) :: primeFactorization(i)\n                        j /= primeList(k)\n                    }\n                    else k += 1\n                }\n                var m = i\n                while (m <= limit) {\n                    primeFactorization(m) = primeFactorization(i)\n                    m += i\n                }\n            }\n        }\n        val divisorSums = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            var j = 1\n            for (k <- primeFactorization(i)) {\n                j *= (pow(k, primeFactorization(i).count(_ == k) + 1) - 1) / (k - 1)\n            }\n            divisorSums(i) = j.toInt - i\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisorSums(i) <= limit && divisorSums(i) > 0 && divisorSums(divisorSums(i)) == i && i != divisorSums(i)) {\n                sum += i\n            }\n        }\n       \n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122700,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpmr7frbvh.scala:43:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m                j *= (pow(k, primeFactorization(i).count(_ == k) + \u001b[31m1\u001b[0m) - \u001b[31m1\u001b[0m) / (k - \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value *= is not a member of Int - did you mean Int.!=?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmr7frbvh.scala:48:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to limit.toInt) {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    Unit\n\u001b[31m   |\u001b[0m        Required: Long\n\u001b[31m49 |\u001b[0m            \u001b[33mif\u001b[0m (divisorSums(i) <= limit && divisorSums(i) > \u001b[31m0\u001b[0m && divisorSums(divisorSums(i)) == i && i != divisorSums(i)) {\n\u001b[31m50 |\u001b[0m                sum += i\n\u001b[31m51 |\u001b[0m            }\n\u001b[31m52 |\u001b[0m        }\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        val sumOfDivisors = Array.fill(limit.toInt + 1)(0L)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                sumOfDivisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (sumOfDivisors(i) < limit && i == sumOfDivisors(sumOfDivisors(i).toInt) && i != sumOfDivisors(i)) {\n                sum += i\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122701,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val sumOfDivisors = divisors(i).sum\n            if (sumOfDivisors != i && divisors(sumOfDivisors).sum == i) {\n                sum += i\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122690,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpm_zpbb3l.scala:8:32 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36msumOfDivisors\u001b[0m = divisors(i).sum\n\u001b[31m\u001b[31m  |\u001b[0m                                ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                Not found: divisors\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = divisorsSum(i)\n            if (a != i && divisorsSum(a) == i) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122697,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkql8r6bb.scala:8:20 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36ma\u001b[0m = divisorsSum(i)\n\u001b[31m\u001b[31m  |\u001b[0m                    ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                    Not found: divisorsSum\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        val divisors = Array.fill(limit.toInt + 1)(0L)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) > i && divisors(i) <= limit && divisors(divisors(i).toInt) == i) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122703,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpsk209s_3.scala:19)\n\tat Problem.main(tmpsk209s_3.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = sumOfProperDivisors(i)\n            if (a != i && sumOfProperDivisors(a) == i) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122673,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqcjlbw_v.scala:8:20 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36ma\u001b[0m = sumOfProperDivisors(i)\n\u001b[31m\u001b[31m  |\u001b[0m                    ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                    Not found: sumOfProperDivisors\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = sumOfDivisors(i)\n            val b = sumOfDivisors(a)\n            if (i == b && a != b) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1665509957,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3au9zorl.scala:8:20 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36ma\u001b[0m = sumOfDivisors(i)\n\u001b[31m\u001b[31m  |\u001b[0m                    ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                    Not found: sumOfDivisors\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3au9zorl.scala:9:20 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mb\u001b[0m = sumOfDivisors(a)\n\u001b[31m\u001b[31m  |\u001b[0m                    ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                    Not found: sumOfDivisors\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) > i && divisors(i) <= limit.toInt && divisors(divisors(i)) == i) {\n                sum += i\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122676,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpwq_ahvuh.scala:21)\n\tat Problem.main(tmpwq_ahvuh.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = sumOfDivisors(i)\n            if (a != i && sumOfDivisors(a) == i) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1665509957,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpd9qho39t.scala:8:20 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36ma\u001b[0m = sumOfDivisors(i)\n\u001b[31m\u001b[31m  |\u001b[0m                    ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                    Not found: sumOfDivisors\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val sumOfDivisors = divisors(i).sum\n            if (sumOfDivisors != i && divisors(sumOfDivisors).sum == i) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122672,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqfbtuois.scala:8:32 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36msumOfDivisors\u001b[0m = divisors(i).sum\n\u001b[31m\u001b[31m  |\u001b[0m                                ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                Not found: divisors\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = divisorsSum(i)\n            if (a != i) {\n                val b = divisorsSum(a)\n                if (b == i) {\n                    sum += i\n                }\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122700,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpwx_0kbmb.scala:8:20 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36ma\u001b[0m = divisorsSum(i)\n\u001b[31m\u001b[31m  |\u001b[0m                    ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                    Not found: divisorsSum\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpwx_0kbmb.scala:10:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                \u001b[33mval\u001b[0m \u001b[36mb\u001b[0m = divisorsSum(a)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: divisorsSum\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) > i && divisors(i) <= limit.toInt && divisors(divisors(i)) == i) {\n                sum += i\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122676,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpwq_ahvuh.scala:21)\n\tat Problem.main(tmpwq_ahvuh.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 2 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 2 to limit.toInt) {\n            if (divisors(i) < limit.toInt && divisors(divisors(i)) == i && divisors(i) != i) {\n                sum += i\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122703,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp58lt5n86.scala:21)\n\tat Problem.main(tmp58lt5n86.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) > i && divisors(i) <= limit.toInt && divisors(divisors(i)) == i) {\n                sum += i\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122676,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpwq_ahvuh.scala:21)\n\tat Problem.main(tmpwq_ahvuh.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        var sum = 0L\n        for (i <- 1L to limit) {\n            val sumOfDivisors = divisors(i).sum\n            if (i != sumOfDivisors && divisors(sumOfDivisors).sum == i) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1665509957,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdp5qr909.scala:8:32 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36msumOfDivisors\u001b[0m = divisors(i).sum\n\u001b[31m\u001b[31m  |\u001b[0m                                ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                Not found: divisors\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = sumOfProperDivisors(i)\n            if (a != i && sumOfProperDivisors(a) == i) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122673,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqcjlbw_v.scala:8:20 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36ma\u001b[0m = sumOfProperDivisors(i)\n\u001b[31m\u001b[31m  |\u001b[0m                    ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                    Not found: sumOfProperDivisors\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = sumOfDivisors(i)\n            val b = sumOfDivisors(a)\n            if (i == b && i != a) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122699,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxkf7g91z.scala:8:20 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36ma\u001b[0m = sumOfDivisors(i)\n\u001b[31m\u001b[31m  |\u001b[0m                    ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                    Not found: sumOfDivisors\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxkf7g91z.scala:9:20 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mb\u001b[0m = sumOfDivisors(a)\n\u001b[31m\u001b[31m  |\u001b[0m                    ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                    Not found: sumOfDivisors\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) > i && divisors(i) <= limit.toInt && divisors(divisors(i)) == i) {\n                sum += i + divisors(i)\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1665509959,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        val sumOfDivisors = Array.fill(limit.toInt + 1)(0L)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                sumOfDivisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val j = sumOfDivisors(i)\n            if (j <= limit && i != j && sumOfDivisors(j) == i) {\n                sum += i\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122701,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwbqmo2rr.scala:15:54 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            \u001b[33mif\u001b[0m (j <= limit && i != j && sumOfDivisors(j) == i) {\n\u001b[31m\u001b[31m   |\u001b[0m                                                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                    Found:    (j : Long)\n\u001b[31m   |\u001b[0m                                                    Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val j = divisors(i)\n            if (j <= limit.toInt && divisors(j) == i && i != j) {\n                sum += i\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1665509959,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = sumOfProperDivisors(i)\n            if (a != i && sumOfProperDivisors(a) == i) {\n                sum += i\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122672,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpo4e_5c5a.scala:8:20 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36ma\u001b[0m = sumOfProperDivisors(i)\n\u001b[31m\u001b[31m  |\u001b[0m                    ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                    Not found: sumOfProperDivisors\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val j = divisors(i)\n            if (j != i && divisors(j) == i) {\n                sum += i\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122703,
      "stdout": "",
      "stderr": "java.lang.ArrayIndexOutOfBoundsException: Index 1032 out of bounds for length 1000\n\tat Problem$.amicableNumbersSum$$anonfun$2(tmpy_vyu2mw.scala:15)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.amicableNumbersSum(tmpy_vyu2mw.scala:18)\n\tat Problem$.main(tmpy_vyu2mw.scala:22)\n\tat Problem.main(tmpy_vyu2mw.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        val sums = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- 2 * i to limit.toInt by i) {\n                sums(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (sums(i) > i && sums(i) <= limit.toInt && sums(sums(i)) == i) {\n                sum += i + sums(i)\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122704,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        var sum = 0L\n        for (i <- 1L to limit) {\n            val sumOfDivisors = divisors(i).sum\n            if (sumOfDivisors > i && divisors(sumOfDivisors).sum == i) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122701,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgy8p7lrt.scala:8:32 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36msumOfDivisors\u001b[0m = divisors(i).sum\n\u001b[31m\u001b[31m  |\u001b[0m                                ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                Not found: divisors\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val divisors = divisors(i)\n            val sumOfDivisors = divisors.sum\n            if (sumOfDivisors > i) {\n                val sumOfDivisorsOfSumOfDivisors = divisors(sumOfDivisors).sum\n                if (sumOfDivisorsOfSumOfDivisors == i) {\n                    sum += i\n                }\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122701,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpn3c8mmr6.scala:8:27 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mdivisors\u001b[0m = divisors(i)\n\u001b[31m\u001b[31m  |\u001b[0m                           ^\u001b[0m\n\u001b[31m  |\u001b[0m                           Recursive \u001b[33mvalue\u001b[0m \u001b[35mdivisors\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) > i && divisors(i) <= limit.toInt && divisors(divisors(i)) == i) {\n                sum += i\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122676,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpwq_ahvuh.scala:21)\n\tat Problem.main(tmpwq_ahvuh.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val sum1 = divisorsSum(i)\n            val sum2 = divisorsSum(sum1)\n            if (sum2 == i && sum1 != sum2) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122700,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpegamc8_b.scala:8:23 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36msum1\u001b[0m = divisorsSum(i)\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Not found: divisorsSum\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpegamc8_b.scala:9:23 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36msum2\u001b[0m = divisorsSum(sum1)\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Not found: divisorsSum\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) != i && divisors(divisors(i)) == i) {\n                sum += i\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122676,
      "stdout": "",
      "stderr": "java.lang.ArrayIndexOutOfBoundsException: Index 1032 out of bounds for length 1000\n\tat Problem$.amicableNumbersSum$$anonfun$2(tmp4nj3not_.scala:14)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.amicableNumbersSum(tmp4nj3not_.scala:17)\n\tat Problem$.main(tmp4nj3not_.scala:21)\n\tat Problem.main(tmp4nj3not_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        val divisors = Array.fill[Long](limit.toInt + 1)(1)\n        for (i <- 2 to limit.toInt) {\n            for (j <- 2 to (limit.toInt / i)) {\n                divisors(i * j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 2 to limit.toInt) {\n            if (divisors(i) != i && divisors(i) <= limit && divisors(divisors(i).toInt) == i) {\n                sum += i\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122676,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 2 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 2 to limit.toInt) {\n            val j = divisors(i)\n            if (i != j && divisors(j) == i) {\n                sum += i\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122705,
      "stdout": "",
      "stderr": "java.lang.ArrayIndexOutOfBoundsException: Index 1031 out of bounds for length 1000\n\tat Problem$.amicableNumbersSum$$anonfun$2(tmpctos95_y.scala:15)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.amicableNumbersSum(tmpctos95_y.scala:18)\n\tat Problem$.main(tmpctos95_y.scala:22)\n\tat Problem.main(tmpctos95_y.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val j = divisors(i)\n            if (i != j && divisors(j) == i) {\n                sum += i\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122704,
      "stdout": "",
      "stderr": "java.lang.ArrayIndexOutOfBoundsException: Index 1170 out of bounds for length 1000\n\tat Problem$.amicableNumbersSum$$anonfun$2(tmpbakyaorc.scala:15)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.amicableNumbersSum(tmpbakyaorc.scala:18)\n\tat Problem$.main(tmpbakyaorc.scala:22)\n\tat Problem.main(tmpbakyaorc.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val j = sumOfProperDivisors(i)\n            if (i != j && sumOfProperDivisors(j) == i) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122700,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqzkxvzsw.scala:8:20 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mj\u001b[0m = sumOfProperDivisors(i)\n\u001b[31m\u001b[31m  |\u001b[0m                    ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                    Not found: sumOfProperDivisors\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        val sumOfProperDivisors = Array.fill(limit.toInt + 1)(0L)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                sumOfProperDivisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (sumOfProperDivisors(i) > i && sumOfProperDivisors(i) <= limit.toInt && sumOfProperDivisors(sumOfProperDivisors(i).toInt) == i) {\n                sum += i + sumOfProperDivisors(i)\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122705,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = sumOfDivisors(i)\n            val b = sumOfDivisors(a)\n            if (i == b && i != a) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122699,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxkf7g91z.scala:8:20 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36ma\u001b[0m = sumOfDivisors(i)\n\u001b[31m\u001b[31m  |\u001b[0m                    ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                    Not found: sumOfDivisors\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxkf7g91z.scala:9:20 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mb\u001b[0m = sumOfDivisors(a)\n\u001b[31m\u001b[31m  |\u001b[0m                    ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                    Not found: sumOfDivisors\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        var sum = 0L\n        for (i <- 1L to limit) {\n            val a = sumOfDivisors(i)\n            if (i != a && sumOfDivisors(a) == i) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122704,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprplsh9ot.scala:8:20 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36ma\u001b[0m = sumOfDivisors(i)\n\u001b[31m\u001b[31m  |\u001b[0m                    ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                    Not found: sumOfDivisors\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        val d = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                d(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (d(i) > i && d(i) <= limit.toInt && d(d(i)) == i) {\n                sum += i\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122707,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpoe_9a_00.scala:21)\n\tat Problem.main(tmpoe_9a_00.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        val sum = new Array[Long](limit.toInt + 1)\n        for (i <- 1 to limit.toInt) {\n            val j = sumOfProperDivisors(i)\n            if (j <= limit.toInt) sum(j) += i\n        }\n        var result = 0L\n        for (i <- 1 to limit.toInt) {\n            if (sum(i) > i && sum(i) <= limit.toInt && sum(sum(i)) == i) result += i + sum(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122706,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphu03_nbe.scala:8:20 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mj\u001b[0m = sumOfProperDivisors(i)\n\u001b[31m\u001b[31m  |\u001b[0m                    ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                    Not found: sumOfProperDivisors\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphu03_nbe.scala:13:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m            \u001b[33mif\u001b[0m (sum(i) > i && sum(i) <= limit.toInt && sum(sum(i)) == i) result += i + sum(i)\n\u001b[31m\u001b[31m   |\u001b[0m                                                           ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Found:    Long\n\u001b[31m   |\u001b[0m                                                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) > i && divisors(i) <= limit.toInt && divisors(divisors(i)) == i) {\n                sum += i\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122676,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpwq_ahvuh.scala:21)\n\tat Problem.main(tmpwq_ahvuh.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- 2 * i to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) < limit.toInt && divisors(divisors(i)) == i && divisors(i) != i) {\n                sum += i\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        def sumOfDivisors(n : Long) : Long = {\n            var sum = 1L\n            for (i <- 2L to sqrt(n).toLong) {\n                if (n % i == 0) {\n                    sum += i\n                    if (i != n / i) sum += n / i\n                }\n            }\n            sum\n        }\n        var sum = 0L\n        for (i <- 1L to limit) {\n            val j = sumOfDivisors(i)\n            if (i != j && sumOfDivisors(j) == i) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val d = divisorSum(i)\n            if (i != d && divisorSum(d) == i) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122705,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5ke3p6rc.scala:8:20 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36md\u001b[0m = divisorSum(i)\n\u001b[31m\u001b[31m  |\u001b[0m                    ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                    Not found: divisorSum\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = sumOfDivisors(i)\n            if (a > i && sumOfDivisors(a) == i) {\n                sum += i + a\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122705,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpe42fojk6.scala:8:20 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36ma\u001b[0m = sumOfDivisors(i)\n\u001b[31m\u001b[31m  |\u001b[0m                    ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                    Not found: sumOfDivisors\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        val sums = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                sums(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (sums(i) > i && sums(i) <= limit.toInt && sums(sums(i)) == i) {\n                sum += i\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122707,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpf3gy_3o8.scala:21)\n\tat Problem.main(tmpf3gy_3o8.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = sumOfProperDivisors(i)\n            if (a != i) {\n                val b = sumOfProperDivisors(a)\n                if (b == i) sum += i\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122693,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp01rqajog.scala:8:20 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36ma\u001b[0m = sumOfProperDivisors(i)\n\u001b[31m\u001b[31m  |\u001b[0m                    ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                    Not found: sumOfProperDivisors\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp01rqajog.scala:10:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                \u001b[33mval\u001b[0m \u001b[36mb\u001b[0m = sumOfProperDivisors(a)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: sumOfProperDivisors\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = sumOfDivisors(i)\n            if (a != i && sumOfDivisors(a) == i) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1665509957,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpd9qho39t.scala:8:20 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36ma\u001b[0m = sumOfDivisors(i)\n\u001b[31m\u001b[31m  |\u001b[0m                    ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                    Not found: sumOfDivisors\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        val divisors = Array.ofDim[Long](limit.toInt + 1)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val j = divisors(i)\n            if (j <= limit && divisors(j) == i && i != j) {\n                sum += i\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122707,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpap5pduu5.scala:15:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            \u001b[33mif\u001b[0m (j <= limit && divisors(j) == i && i != j) {\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (j : Long)\n\u001b[31m   |\u001b[0m                                       Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val sumOfDivisors = divisors(i).sum\n            if (sumOfDivisors != i && divisors(sumOfDivisors).sum == i) {\n                sum += i\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122690,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpm_zpbb3l.scala:8:32 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36msumOfDivisors\u001b[0m = divisors(i).sum\n\u001b[31m\u001b[31m  |\u001b[0m                                ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                Not found: divisors\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = sumOfProperDivisors(i)\n            val b = sumOfProperDivisors(a)\n            if (b == i && a != b) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122706,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsofrj8oq.scala:8:20 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36ma\u001b[0m = sumOfProperDivisors(i)\n\u001b[31m\u001b[31m  |\u001b[0m                    ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                    Not found: sumOfProperDivisors\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsofrj8oq.scala:9:20 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mb\u001b[0m = sumOfProperDivisors(a)\n\u001b[31m\u001b[31m  |\u001b[0m                    ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                    Not found: sumOfProperDivisors\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        val sumOfDivisors = Array.fill(limit.toInt + 1)(0L)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                sumOfDivisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (sumOfDivisors(i) > i && sumOfDivisors(i) <= limit && sumOfDivisors(sumOfDivisors(i).toInt) == i) {\n                sum += i\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122697,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpbmckdoqq.scala:21)\n\tat Problem.main(tmpbmckdoqq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) > i && divisors(i) <= limit.toInt && divisors(divisors(i)) == i) {\n                sum += i\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122676,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpwq_ahvuh.scala:21)\n\tat Problem.main(tmpwq_ahvuh.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        val factors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                factors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val j = factors(i)\n            if (j != i && j <= limit.toInt && factors(j) == i) {\n                sum += i\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        val sumOfDivisors = Array.fill(limit.toInt + 1)(1L)\n        for (i <- 2 to limit.toInt) {\n            for (j <- 2 * i to limit.toInt by i) {\n                sumOfDivisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 2 to limit.toInt) {\n            if (sumOfDivisors(i) != i && sumOfDivisors(i) <= limit && sumOfDivisors(sumOfDivisors(i).toInt) == i) {\n                sum += i\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        var sum = 0L\n        for (i <- 1L to limit) {\n            val a = sumOfProperDivisors(i)\n            if (a != i && sumOfProperDivisors(a) == i) {\n                sum += i\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122706,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpiyg1eb_2.scala:8:20 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36ma\u001b[0m = sumOfProperDivisors(i)\n\u001b[31m\u001b[31m  |\u001b[0m                    ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                    Not found: sumOfProperDivisors\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) != i && divisors(i) <= limit.toInt && divisors(divisors(i)) == i) {\n                sum += i\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122687,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = sumOfProperDivisors(i)\n            val b = sumOfProperDivisors(a)\n            if (i == b && i != a) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122694,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvcqrglb0.scala:8:20 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36ma\u001b[0m = sumOfProperDivisors(i)\n\u001b[31m\u001b[31m  |\u001b[0m                    ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                    Not found: sumOfProperDivisors\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvcqrglb0.scala:9:20 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mb\u001b[0m = sumOfProperDivisors(a)\n\u001b[31m\u001b[31m  |\u001b[0m                    ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                    Not found: sumOfProperDivisors\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) > i && divisors(i) <= limit.toInt && divisors(divisors(i)) == i) {\n                sum += i + divisors(i)\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122708,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp6uamc9is.scala:21)\n\tat Problem.main(tmp6uamc9is.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = divisors(i).sum\n            val b = divisors(a).sum\n            if (i == b && i != a) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1666122693,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvbthpfd0.scala:8:20 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36ma\u001b[0m = divisors(i).sum\n\u001b[31m\u001b[31m  |\u001b[0m                    ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                    Not found: divisors\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvbthpfd0.scala:9:20 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mb\u001b[0m = divisors(a).sum\n\u001b[31m\u001b[31m  |\u001b[0m                    ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                    Not found: divisors\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}