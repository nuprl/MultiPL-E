{
  "name": "mbpp_720_add_dict_to_tuple",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_720_add_dict_to_tuple.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        val tup = (test_tup, test_dict)\n        Right(tup._2)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpomvxe7gb.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpomvxe7gb.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpomvxe7gb.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510514,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj9wc36lf.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj9wc36lf.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj9wc36lf.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Your code goes here\n        Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpht3r3lq5.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpht3r3lq5.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpht3r3lq5.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        val new_dict = test_dict + (\"test_key\" -> test_tup)\n        Right(new_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpke3ao0_n.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpke3ao0_n.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpke3ao0_n.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        if (test_tup == 0) {\n            Left(test_tup)\n        } else {\n            Right(test_dict)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8smro8mw.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8smro8mw.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8smro8mw.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Add your code here\n        return Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpquwaeec4.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpquwaeec4.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpquwaeec4.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        if (test_tup == 0) {\n            return Right(test_dict)\n        }\n        else {\n            return Left(test_tup)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdronl73w.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdronl73w.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdronl73w.scala:16:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        if (test_tup == 0) {\n            return Right(test_dict)\n        } else {\n            return Left(test_tup)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxeszi58n.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxeszi58n.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxeszi58n.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        if (test_tup < 0) {\n            Left(test_tup)\n        } else {\n            Right(test_dict)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510514,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd3ebzpso.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd3ebzpso.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd3ebzpso.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        if (test_tup > 0) {\n            Right(test_dict)\n        } else {\n            Left(test_tup)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510514,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkw_hfpz4.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkw_hfpz4.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkw_hfpz4.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        val new_tup = (test_tup, test_dict)\n        return Right(new_tup._2)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpazza492o.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpazza492o.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpazza492o.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510514,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj9wc36lf.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj9wc36lf.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj9wc36lf.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510514,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj9wc36lf.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj9wc36lf.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj9wc36lf.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd91kvhmv.scala:9:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m  |\u001b[0m                          Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd91kvhmv.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd91kvhmv.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                     ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        if (test_tup > 0) {\n            Right(test_dict)\n        } else {\n            Left(test_tup)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510514,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkw_hfpz4.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkw_hfpz4.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkw_hfpz4.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510514,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj9wc36lf.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj9wc36lf.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj9wc36lf.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        return Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510514,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3o58g2wd.scala:9:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m  |\u001b[0m                          Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3o58g2wd.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3o58g2wd.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                     ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        val new_tup = (test_tup, test_dict)\n        Right(new_tup)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp84qtq8ju.scala:7:14 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        Right(new_tup)\n\u001b[31m\u001b[31m  |\u001b[0m              ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m        Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mnew\u001b[0m\u001b[1m\u001b[31m_\u001b[0m\u001b[1m\u001b[31mtup\u001b[0m\u001b[1m\u001b[31m \u001b[0m\u001b[1m\u001b[31m:\u001b[0m\u001b[1m\u001b[31m \u001b[0m\u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mcollection.mutable.Map[String, Long]\u001b[1m\u001b[31m)\u001b[0m\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m        Required: collection.mutable.Map[String, Long]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp84qtq8ju.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp84qtq8ju.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd91kvhmv.scala:9:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m  |\u001b[0m                          Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd91kvhmv.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd91kvhmv.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                     ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        if (test_tup > 0) {\n            Left(test_tup)\n        } else {\n            Right(test_dict)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnthyhk5f.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnthyhk5f.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnthyhk5f.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        if (test_tup > 0) {\n            Left(test_tup)\n        }\n        else {\n            Right(test_dict)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1666123698,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpno9stari.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpno9stari.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpno9stari.scala:16:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        return Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510514,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3o58g2wd.scala:9:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m  |\u001b[0m                          Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3o58g2wd.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3o58g2wd.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                     ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd91kvhmv.scala:9:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m  |\u001b[0m                          Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd91kvhmv.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd91kvhmv.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                     ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        val new_tup = (test_tup, test_dict)\n        Right(new_tup._2)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1666123698,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8ydmimk8.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8ydmimk8.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8ydmimk8.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510514,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj9wc36lf.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj9wc36lf.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj9wc36lf.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        Left(test_tup)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1666123698,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpozt2j_ez.scala:9:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m  |\u001b[0m                          Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpozt2j_ez.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpozt2j_ez.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                     ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        if (test_tup == 0) {\n            Left(test_tup)\n        } else {\n            Right(test_dict)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8smro8mw.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8smro8mw.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8smro8mw.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        if (test_tup < 0) {\n            Left(test_tup)\n        } else {\n            Right(test_dict)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510514,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd3ebzpso.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd3ebzpso.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd3ebzpso.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        val test_tup_list = test_tup.toString.split(\"\").toList\n        val test_tup_list_int = test_tup_list.map(x => x.toInt)\n        val test_tup_list_int_sum = test_tup_list_int.sum\n        if (test_tup_list_int_sum % 2 == 0) {\n            Right(test_dict)\n        }\n        else {\n            Left(test_tup)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1666123698,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0nh4p7ox.scala:17:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0nh4p7ox.scala:18:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0nh4p7ox.scala:19:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510514,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj9wc36lf.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj9wc36lf.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj9wc36lf.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        return Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510514,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3o58g2wd.scala:9:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m  |\u001b[0m                          Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3o58g2wd.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3o58g2wd.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                     ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        if (test_tup > 0) {\n            Right(test_dict)\n        } else {\n            Left(test_tup)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510514,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkw_hfpz4.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkw_hfpz4.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkw_hfpz4.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        return Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1666123698,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdfkzvj4v.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdfkzvj4v.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdfkzvj4v.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510514,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj9wc36lf.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj9wc36lf.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj9wc36lf.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        return Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510514,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3o58g2wd.scala:9:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m  |\u001b[0m                          Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3o58g2wd.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3o58g2wd.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                     ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        return Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510514,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3o58g2wd.scala:9:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m  |\u001b[0m                          Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3o58g2wd.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3o58g2wd.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                     ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        return Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510514,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3o58g2wd.scala:9:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m  |\u001b[0m                          Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3o58g2wd.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3o58g2wd.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                     ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        return Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1666123698,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdfkzvj4v.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdfkzvj4v.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdfkzvj4v.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        if (test_tup < 0) Left(test_tup)\n        else Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1666123698,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcczmt5tn.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcczmt5tn.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcczmt5tn.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Add your code here\n        return Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpquwaeec4.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpquwaeec4.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpquwaeec4.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        val new_tup = (test_tup, test_dict)\n        Right(new_tup._2)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgfj34j9e.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgfj34j9e.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgfj34j9e.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        return Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510514,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3o58g2wd.scala:9:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m  |\u001b[0m                          Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3o58g2wd.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3o58g2wd.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                     ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Add your code here\n        return Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpquwaeec4.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpquwaeec4.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpquwaeec4.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        return Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1666123698,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdfkzvj4v.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdfkzvj4v.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdfkzvj4v.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        if (test_tup < 0) {\n            Left(test_tup)\n        } else {\n            Right(test_dict)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510514,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd3ebzpso.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd3ebzpso.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd3ebzpso.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd91kvhmv.scala:9:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m  |\u001b[0m                          Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd91kvhmv.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd91kvhmv.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                     ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        val test_tup_list = test_tup.toString.split(\"\").toList.map(_.toInt)\n        val test_dict_list = test_dict.toList.map(_._2)\n        val test_tup_dict = test_tup_list.zip(test_dict_list).toMap\n        Right(test_tup_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1666123698,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpu9bz3m0d.scala:9:14 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        Right(test_tup_dict)\n\u001b[31m\u001b[31m  |\u001b[0m              ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m              Found:    (test_tup_dict : Map[Int, Long])\n\u001b[31m  |\u001b[0m              Required: collection.mutable.Map[String, Long]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpu9bz3m0d.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpu9bz3m0d.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpu9bz3m0d.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd91kvhmv.scala:9:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m  |\u001b[0m                          Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd91kvhmv.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd91kvhmv.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                     ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        return Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510514,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3o58g2wd.scala:9:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m  |\u001b[0m                          Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3o58g2wd.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3o58g2wd.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                     ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        if (test_tup < 0) {\n            Left(test_tup)\n        }\n        else {\n            Right(test_dict)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4lkd56vo.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4lkd56vo.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4lkd56vo.scala:16:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd91kvhmv.scala:9:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m  |\u001b[0m                          Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd91kvhmv.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd91kvhmv.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                     ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510514,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj9wc36lf.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj9wc36lf.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj9wc36lf.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        Left(test_tup)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1666123698,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpozt2j_ez.scala:9:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m  |\u001b[0m                          Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpozt2j_ez.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpozt2j_ez.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                     ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        if (test_tup == 0) {\n            Right(test_dict)\n        } else {\n            Left(test_tup)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9v6dhnqt.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9v6dhnqt.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9v6dhnqt.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510514,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj9wc36lf.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj9wc36lf.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj9wc36lf.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        val test_tup_list = test_tup.toString.split(\"\").toList\n        val test_dict_list = test_dict.toList\n        val test_tup_list_int = test_tup_list.map(x => x.toInt)\n        val test_dict_list_int = test_dict_list.map(x => x._2.toInt)\n        val test_tup_list_int_sum = test_tup_list_int.sum\n        val test_dict_list_int_sum = test_dict_list_int.sum\n        if (test_tup_list_int_sum > test_dict_list_int_sum) {\n            Left(test_tup_list_int_sum)\n        } else {\n            Right(test_dict)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1666123698,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8_fjndd9.scala:20:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8_fjndd9.scala:21:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8_fjndd9.scala:22:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        if (test_tup < 0) {\n            Left(test_tup)\n        } else {\n            Right(test_dict)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510514,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd3ebzpso.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd3ebzpso.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd3ebzpso.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        Left(test_tup)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1666123698,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpozt2j_ez.scala:9:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m  |\u001b[0m                          Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpozt2j_ez.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpozt2j_ez.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                     ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        val test_tup_dict = test_tup -> test_dict\n        Right(test_tup_dict._2)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph9fbhn7a.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph9fbhn7a.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph9fbhn7a.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Add your code here\n        return Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpquwaeec4.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpquwaeec4.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpquwaeec4.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        Left(test_tup)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc9mcs8vd.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc9mcs8vd.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc9mcs8vd.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510514,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj9wc36lf.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj9wc36lf.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj9wc36lf.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        val test_tup_list = test_tup.toString.toList\n        val test_dict_list = test_dict.toList\n        val test_tup_list_length = test_tup_list.length\n        val test_dict_list_length = test_dict_list.length\n        val test_tup_list_sum = test_tup_list.map(_.toString.toInt).sum\n        val test_dict_list_sum = test_dict_list.map(_._2).sum\n        val test_tup_list_product = test_tup_list.map(_.toString.toInt).product\n        val test_dict_list_product = test_dict_list.map(_._2).product\n        val test_tup_list_max = test_tup_list.map(_.toString.toInt).max\n        val test_dict_list_max = test_dict_list.map(_._2).max\n        val test_tup_list_min = test_tup_list.map(_.toString.toInt).min\n        val test_dict_list_min = test_dict_list.map(_._2).min\n        val test_tup_list_mean = test_tup_list.map(_.toString.toInt).sum.toDouble / test_tup_list.length\n        val test_dict_list_mean = test_dict_list.map(_._2).sum.toDouble / test_dict_list.length\n        val test_tup_list_median = test_tup_list.map(_.toString.toInt).sorted.apply(test_tup_list.length / 2)\n        val test_dict_list_median = test_dict_list.map(_._2).sorted.apply(test_dict_list.length / 2)\n        val test_tup_list_mode = test_tup_list.groupBy(identity).mapValues(_.size).maxBy(_._2)._1.toString.toInt\n        val test_dict_list_mode = test_dict_list.groupBy(identity).mapValues(_.size\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1666123698,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmptv_yfxt3.scala:24:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptv_yfxt3.scala:24:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Either[Long, collection.mutable.Map[String, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptv_yfxt3.scala:26:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptv_yfxt3.scala:27:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling wi",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd91kvhmv.scala:9:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m  |\u001b[0m                          Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd91kvhmv.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd91kvhmv.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                     ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        val test_tup_list = test_tup.toString.split(\"\").toList.map(_.toInt)\n        val test_dict_list = test_dict.toList.map(_._2)\n        val test_tup_list_sum = test_tup_list.sum\n        val test_dict_list_sum = test_dict_list.sum\n        if (test_tup_list_sum > test_dict_list_sum) {\n            Left(test_tup_list_sum)\n        } else {\n            Right(test_dict)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1666123698,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7r9dw01r.scala:17:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7r9dw01r.scala:18:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7r9dw01r.scala:19:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        if (test_tup > 0) {\n            Left(test_tup)\n        } else {\n            Right(test_dict)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnthyhk5f.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnthyhk5f.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnthyhk5f.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510514,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj9wc36lf.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj9wc36lf.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj9wc36lf.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        Left(test_tup)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1666123698,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpozt2j_ez.scala:9:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m  |\u001b[0m                          Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpozt2j_ez.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpozt2j_ez.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                     ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        return Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510514,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3o58g2wd.scala:9:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m  |\u001b[0m                          Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3o58g2wd.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3o58g2wd.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                     ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        val new_tup = (test_tup, test_dict)\n        Right(new_tup._2)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgfj34j9e.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgfj34j9e.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgfj34j9e.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd91kvhmv.scala:9:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m  |\u001b[0m                          Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd91kvhmv.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd91kvhmv.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                     ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        val tup_list = test_tup.toString.toList\n        val tup_list_int = tup_list.map(_.toString.toInt)\n        val tup_list_int_sum = tup_list_int.sum\n        if (tup_list_int_sum % 2 == 0) {\n            Right(test_dict)\n        } else {\n            Left(test_tup)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1666123698,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqsz2gt01.scala:16:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqsz2gt01.scala:17:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqsz2gt01.scala:18:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        Left(test_tup)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1666123698,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpozt2j_ez.scala:9:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m  |\u001b[0m                          Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpozt2j_ez.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpozt2j_ez.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                     ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd91kvhmv.scala:9:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m  |\u001b[0m                          Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd91kvhmv.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd91kvhmv.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                     ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        val result = test_tup + test_dict.values.sum\n        Right(test_dict + (\"Result\" -> result))\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1666123699,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpt_mcenvc.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpt_mcenvc.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpt_mcenvc.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        if (test_tup == 0) {\n            Left(test_tup)\n        } else {\n            Right(test_dict)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8smro8mw.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8smro8mw.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8smro8mw.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        val ret_tup = (test_tup, test_dict)\n        return Right(ret_tup._2)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1666123698,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp39ena51r.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp39ena51r.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp39ena51r.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        val tup_dict = test_tup -> test_dict\n        Right(tup_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1666123698,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqtrhq3b_.scala:7:14 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        Right(tup_dict)\n\u001b[31m\u001b[31m  |\u001b[0m              ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m       Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mtup\u001b[0m\u001b[1m\u001b[31m_\u001b[0m\u001b[1m\u001b[31mdict\u001b[0m\u001b[1m\u001b[31m \u001b[0m\u001b[1m\u001b[31m:\u001b[0m\u001b[1m\u001b[31m \u001b[0m\u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mcollection.mutable.Map[String, Long]\u001b[1m\u001b[31m)\u001b[0m\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m       Required: collection.mutable.Map[String, Long]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqtrhq3b_.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqtrhq3b_.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        return Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510514,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3o58g2wd.scala:9:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m  |\u001b[0m                          Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3o58g2wd.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3o58g2wd.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                     ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        return Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1666123698,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdfkzvj4v.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdfkzvj4v.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdfkzvj4v.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Add your code here\n        Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1666123698,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpi1dx5ire.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpi1dx5ire.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpi1dx5ire.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        return Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510514,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3o58g2wd.scala:9:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m  |\u001b[0m                          Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3o58g2wd.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3o58g2wd.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                     ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        val new_tup = (test_tup, test_dict)\n        Right(new_tup)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp84qtq8ju.scala:7:14 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        Right(new_tup)\n\u001b[31m\u001b[31m  |\u001b[0m              ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m        Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mnew\u001b[0m\u001b[1m\u001b[31m_\u001b[0m\u001b[1m\u001b[31mtup\u001b[0m\u001b[1m\u001b[31m \u001b[0m\u001b[1m\u001b[31m:\u001b[0m\u001b[1m\u001b[31m \u001b[0m\u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mcollection.mutable.Map[String, Long]\u001b[1m\u001b[31m)\u001b[0m\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m        Required: collection.mutable.Map[String, Long]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp84qtq8ju.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp84qtq8ju.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        return Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510514,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3o58g2wd.scala:9:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m  |\u001b[0m                          Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3o58g2wd.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3o58g2wd.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                     ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510514,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj9wc36lf.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj9wc36lf.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj9wc36lf.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Add your code here\n        return Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpquwaeec4.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpquwaeec4.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpquwaeec4.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        if (test_tup > 0) {\n            Right(test_dict)\n        } else {\n            Left(test_tup)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510514,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkw_hfpz4.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkw_hfpz4.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkw_hfpz4.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        if (test_tup > 0) {\n            Right(test_dict)\n        } else {\n            Left(test_tup)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510514,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkw_hfpz4.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkw_hfpz4.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkw_hfpz4.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        return Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510514,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3o58g2wd.scala:9:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m  |\u001b[0m                          Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3o58g2wd.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3o58g2wd.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                     ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Add your code here\n        val tup = (test_tup, test_dict)\n        Right(tup._2)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1666123698,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplkw8_jcg.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplkw8_jcg.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplkw8_jcg.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        if (test_tup > 0) {\n            Right(test_dict)\n        } else {\n            Left(test_tup)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510514,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkw_hfpz4.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkw_hfpz4.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkw_hfpz4.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Add code here\n        return Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1666123698,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyrvcvn_6.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyrvcvn_6.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyrvcvn_6.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        return Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510514,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3o58g2wd.scala:9:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m  |\u001b[0m                          Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3o58g2wd.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3o58g2wd.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                     ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        Left(test_tup)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1666123698,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpozt2j_ez.scala:9:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m  |\u001b[0m                          Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpozt2j_ez.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpozt2j_ez.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                     ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        if (test_tup > 0) {\n            Right(test_dict)\n        } else {\n            Left(test_tup)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510514,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkw_hfpz4.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkw_hfpz4.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkw_hfpz4.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        if (test_tup < 0) {\n            Left(test_tup)\n        } else {\n            Right(test_dict)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510514,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd3ebzpso.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd3ebzpso.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd3ebzpso.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Add your code here\n        val tup = (test_tup, test_dict)\n        Right(tup._2)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1666123698,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplkw8_jcg.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplkw8_jcg.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplkw8_jcg.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        if (test_tup < 0) {\n            Left(test_tup)\n        } else {\n            Right(test_dict)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510514,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd3ebzpso.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd3ebzpso.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd3ebzpso.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        if (test_tup < 0) {\n            Left(test_tup)\n        } else {\n            Right(test_dict)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510514,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd3ebzpso.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd3ebzpso.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd3ebzpso.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        if(test_tup > 0) {\n            Right(test_dict)\n        } else {\n            Left(test_tup)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4pkdv5ve.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4pkdv5ve.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4pkdv5ve.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        return Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510514,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3o58g2wd.scala:9:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m  |\u001b[0m                          Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3o58g2wd.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3o58g2wd.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                     ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        val new_tup = (test_tup, test_dict)\n        Right(new_tup._2)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgfj34j9e.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgfj34j9e.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgfj34j9e.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        if (test_tup < 0) {\n            Left(test_tup)\n        } else {\n            Right(test_dict)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510514,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd3ebzpso.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd3ebzpso.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd3ebzpso.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        if (test_tup < 0) {\n            Left(test_tup)\n        } else {\n            Right(test_dict)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510514,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd3ebzpso.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd3ebzpso.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd3ebzpso.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        return Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1666123698,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdfkzvj4v.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdfkzvj4v.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdfkzvj4v.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        return Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1666123698,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdfkzvj4v.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdfkzvj4v.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdfkzvj4v.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        if (test_tup == 0) {\n            Left(test_tup)\n        }\n        else {\n            Right(test_dict)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1666123707,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5oopcjsq.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5oopcjsq.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5oopcjsq.scala:16:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        return Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1666123698,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdfkzvj4v.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdfkzvj4v.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdfkzvj4v.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        val return_tuple = (test_tup, test_dict)\n        Right(return_tuple._2)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1666123708,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf8ctsay0.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf8ctsay0.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf8ctsay0.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        val result = test_tup match {\n            case 0 => Left(test_tup)\n            case _ => Right(test_dict)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1666123708,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_5ujb8wf.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_5ujb8wf.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_5ujb8wf.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        Left(test_tup)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1666123698,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpozt2j_ez.scala:9:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m  |\u001b[0m                          Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpozt2j_ez.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpozt2j_ez.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                     ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510514,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj9wc36lf.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj9wc36lf.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj9wc36lf.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        if (test_tup == 0) {\n            return Right(test_dict)\n        }\n        else {\n            return Left(test_tup)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdronl73w.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdronl73w.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdronl73w.scala:16:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        if (test_tup > 0) {\n            Right(test_dict)\n        } else {\n            Left(test_tup)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510514,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkw_hfpz4.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkw_hfpz4.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkw_hfpz4.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        if (test_tup > 0) {\n            Right(test_dict)\n        } else {\n            Left(test_tup)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510514,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkw_hfpz4.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkw_hfpz4.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkw_hfpz4.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        if (test_tup > 0) {\n            Left(test_tup)\n        } else {\n            Right(test_dict)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnthyhk5f.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnthyhk5f.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnthyhk5f.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510514,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj9wc36lf.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj9wc36lf.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj9wc36lf.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd91kvhmv.scala:9:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m  |\u001b[0m                          Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd91kvhmv.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd91kvhmv.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                     ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        val tup = (test_tup, test_dict)\n        Right(tup._2)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpomvxe7gb.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpomvxe7gb.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpomvxe7gb.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        val test_tup_list = test_tup.toString.split(\"\").toList\n        val test_tup_list_int = test_tup_list.map(x => x.toInt)\n        val test_tup_list_int_sum = test_tup_list_int.sum\n        if (test_tup_list_int_sum > 10) {\n            Right(test_dict)\n        }\n        else {\n            Left(test_tup)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1666123708,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0_62jyhu.scala:17:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0_62jyhu.scala:18:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0_62jyhu.scala:19:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        return Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510514,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3o58g2wd.scala:9:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m  |\u001b[0m                          Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3o58g2wd.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3o58g2wd.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                     ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        val test_tuple = (test_tup, test_dict)\n        Right(test_tuple._2)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1666123708,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpacev5d20.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpacev5d20.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpacev5d20.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        val tup_list = test_tup.toString.split(\"\").toList.map(_.toInt)\n        val tup_sum = tup_list.sum\n        if (tup_sum % 2 == 0) {\n            Right(test_dict)\n        }\n        else {\n            Left(test_tup)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1666123708,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwsy2vraz.scala:16:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwsy2vraz.scala:17:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwsy2vraz.scala:18:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd91kvhmv.scala:9:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m  |\u001b[0m                          Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd91kvhmv.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd91kvhmv.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                     ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        val test_tup_list = test_tup.toString.split(\"\").map(_.toInt).toList\n        val test_tup_sum = test_tup_list.sum\n        if (test_tup_sum % 2 == 0) {\n            Right(test_dict)\n        }\n        else {\n            Left(test_tup)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1666123708,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1awkxpra.scala:16:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1awkxpra.scala:17:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1awkxpra.scala:18:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd91kvhmv.scala:9:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m  |\u001b[0m                          Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd91kvhmv.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd91kvhmv.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                     ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Add your code here\n        return Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpquwaeec4.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpquwaeec4.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpquwaeec4.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        if (test_tup < 0) {\n            Left(test_tup)\n        } else {\n            Right(test_dict)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510514,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd3ebzpso.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd3ebzpso.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd3ebzpso.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        try {\n            Right(test_dict)\n        } catch {\n            case e : Exception => Left(test_tup)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1666123708,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpezimnifz.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpezimnifz.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpezimnifz.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        Left(test_tup)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1666123698,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpozt2j_ez.scala:9:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m  |\u001b[0m                          Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpozt2j_ez.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpozt2j_ez.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                     ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        return Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510514,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3o58g2wd.scala:9:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m  |\u001b[0m                          Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3o58g2wd.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3o58g2wd.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                     ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        if (test_tup == 0) {\n            Right(test_dict)\n        } else {\n            Left(test_tup)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9v6dhnqt.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9v6dhnqt.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9v6dhnqt.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        return Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510514,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3o58g2wd.scala:9:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m  |\u001b[0m                          Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3o58g2wd.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3o58g2wd.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                     ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        val tup = test_tup\n        val dict = test_dict\n        val tup_dict = (tup, dict)\n        Right(tup_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1666123708,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc5k9vzi_.scala:9:14 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        Right(tup_dict)\n\u001b[31m\u001b[31m  |\u001b[0m              ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m       Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mtup\u001b[0m\u001b[1m\u001b[31m_\u001b[0m\u001b[1m\u001b[31mdict\u001b[0m\u001b[1m\u001b[31m \u001b[0m\u001b[1m\u001b[31m:\u001b[0m\u001b[1m\u001b[31m \u001b[0m\u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mcollection.mutable.Map[String, Long]\u001b[1m\u001b[31m)\u001b[0m\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m       Required: collection.mutable.Map[String, Long]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc5k9vzi_.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc5k9vzi_.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510514,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj9wc36lf.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj9wc36lf.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj9wc36lf.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        if (test_tup < 0) {\n            Left(test_tup)\n        }\n        else {\n            Right(test_dict)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4lkd56vo.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4lkd56vo.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4lkd56vo.scala:16:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        return Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1666123698,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdfkzvj4v.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdfkzvj4v.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdfkzvj4v.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        if (test_tup > 0) {\n            Right(test_dict)\n        } else {\n            Left(test_tup)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510514,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkw_hfpz4.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkw_hfpz4.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkw_hfpz4.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        Left(test_tup)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1666123698,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpozt2j_ez.scala:9:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m  |\u001b[0m                          Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpozt2j_ez.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpozt2j_ez.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                     ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        if (test_tup > 0) {\n            Left(test_tup)\n        } else {\n            Right(test_dict)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnthyhk5f.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnthyhk5f.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnthyhk5f.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        if (test_tup < 0) {\n            Left(test_tup)\n        } else {\n            Right(test_dict)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510514,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd3ebzpso.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd3ebzpso.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd3ebzpso.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        if (test_tup > 0) {\n            Left(test_tup)\n        } else {\n            Right(test_dict)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnthyhk5f.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnthyhk5f.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnthyhk5f.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510514,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj9wc36lf.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj9wc36lf.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj9wc36lf.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        return Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510514,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3o58g2wd.scala:9:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m  |\u001b[0m                          Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3o58g2wd.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3o58g2wd.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                     ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd91kvhmv.scala:9:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m  |\u001b[0m                          Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd91kvhmv.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd91kvhmv.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                     ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        if (test_tup > 0) {\n            Left(test_tup)\n        }\n        else {\n            Right(test_dict)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1666123698,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpno9stari.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpno9stari.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpno9stari.scala:16:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        if (test_tup < 0) {\n            Left(test_tup)\n        } else {\n            Right(test_dict)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510514,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd3ebzpso.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd3ebzpso.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd3ebzpso.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        return Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510514,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3o58g2wd.scala:9:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m  |\u001b[0m                          Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3o58g2wd.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3o58g2wd.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                     ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        val test_tup_list = test_tup.toString.split(\"\").toList\n        val test_tup_list_int = test_tup_list.map(x => x.toInt)\n        val test_tup_list_int_sum = test_tup_list_int.sum\n        val test_tup_list_int_sum_str = test_tup_list_int_sum.toString\n        val test_tup_list_int_sum_str_list = test_tup_list_int_sum_str.split(\"\").toList\n        val test_tup_list_int_sum_str_list_int = test_tup_list_int_sum_str_list.map(x => x.toInt)\n        val test_tup_list_int_sum_str_list_int_sum = test_tup_list_int_sum_str_list_int.sum\n        if (test_tup_list_int_sum_str_list_int_sum > 10) {\n            val test_tup_list_int_sum_str_list_int_sum_str = test_tup_list_int_sum_str_list_int_sum.toString\n            val test_tup_list_int_sum_str_list_int_sum_str_list = test_tup_list_int_sum_str_list_int_sum_str.split(\"\").toList\n            val test_tup_list_int_sum_str_list_int_sum_str_list_int = test_tup_list_int_sum_str_list_int_sum_str_list.map(x => x.toInt)\n            val test_tup_list_int_sum_str_list_int_sum_str_list_int_sum = test_tup_list_int_sum_str_list_int_sum_str_list_int.sum\n            val test_tup_list_int_sum_str_list_int_sum_str_list_int_sum_str = test_tup_list_int_sum_str_list_int_\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1666123708,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpxpmh38xu.scala:27:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxpmh38xu.scala:18:78 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mtest_tup_list_int_sum_str_list_int_sum_str_list_int_sum_str\u001b[0m = test_tup_list_int_sum_str_list_int_\n\u001b[31m\u001b[31m   |\u001b[0m                                                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: test_tup_list_int_sum_str_list_int_\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxpmh38xu.scala:21:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxpmh38xu.scala:22:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        return Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510514,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3o58g2wd.scala:9:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m  |\u001b[0m                          Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3o58g2wd.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3o58g2wd.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                     ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        if (test_tup < 0) {\n            Left(test_tup)\n        } else {\n            Right(test_dict)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510514,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd3ebzpso.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd3ebzpso.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd3ebzpso.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd91kvhmv.scala:9:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m  |\u001b[0m                          Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd91kvhmv.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd91kvhmv.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                     ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        val result = (test_tup, test_dict)\n        Right(result)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1666123707,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9zk102qo.scala:8:14 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        Right(result)\n\u001b[31m\u001b[31m  |\u001b[0m              ^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m         Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mresult\u001b[0m\u001b[1m\u001b[31m \u001b[0m\u001b[1m\u001b[31m:\u001b[0m\u001b[1m\u001b[31m \u001b[0m\u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mcollection.mutable.Map[String, Long]\u001b[1m\u001b[31m)\u001b[0m\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m         Required: collection.mutable.Map[String, Long]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9zk102qo.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9zk102qo.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation availa",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        return Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510514,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3o58g2wd.scala:9:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m  |\u001b[0m                          Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3o58g2wd.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3o58g2wd.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                     ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        val test_tup_list = test_tup.toString.map(_.asDigit).toList\n        val test_dict_list = test_dict.toList\n        val test_tup_list_sum = test_tup_list.sum\n        val test_dict_list_sum = test_dict_list.map(_._2).sum\n        if (test_tup_list_sum > test_dict_list_sum) {\n            Left(test_tup_list_sum)\n        } else {\n            Right(test_dict)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1666123708,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpp8t3cuh2.scala:17:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpp8t3cuh2.scala:18:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpp8t3cuh2.scala:19:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        return Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510514,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3o58g2wd.scala:9:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m  |\u001b[0m                          Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3o58g2wd.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3o58g2wd.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                     ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        if (test_tup > 0) {\n            Right(test_dict)\n        } else {\n            Left(test_tup)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510514,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkw_hfpz4.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkw_hfpz4.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkw_hfpz4.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        if (test_tup > 0) {\n            Left(test_tup)\n        } else {\n            Right(test_dict)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnthyhk5f.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnthyhk5f.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnthyhk5f.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        if (test_tup > 0) {\n            Left(test_tup)\n        } else {\n            Right(test_dict)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnthyhk5f.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnthyhk5f.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnthyhk5f.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        if (test_tup > 0) {\n            Right(test_dict)\n        } else {\n            Left(test_tup)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510514,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkw_hfpz4.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkw_hfpz4.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkw_hfpz4.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        return Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1666123698,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdfkzvj4v.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdfkzvj4v.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdfkzvj4v.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510514,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj9wc36lf.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj9wc36lf.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj9wc36lf.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        if (test_tup > 0) {\n            Right(test_dict)\n        } else {\n            Left(test_tup)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510514,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkw_hfpz4.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkw_hfpz4.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkw_hfpz4.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        return Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510514,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3o58g2wd.scala:9:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m  |\u001b[0m                          Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3o58g2wd.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3o58g2wd.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                     ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd91kvhmv.scala:9:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m  |\u001b[0m                          Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd91kvhmv.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd91kvhmv.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                     ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        if (test_tup > 0) {\n            Left(test_tup)\n        } else {\n            Right(test_dict)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnthyhk5f.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnthyhk5f.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnthyhk5f.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        return Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510514,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3o58g2wd.scala:9:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m  |\u001b[0m                          Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3o58g2wd.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3o58g2wd.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                     ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        val tup = (test_tup, test_dict)\n        Right(tup._2)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1666123708,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj5vtnezr.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj5vtnezr.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj5vtnezr.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        if (test_tup > 0) {\n            Left(test_tup)\n        } else {\n            Right(test_dict)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnthyhk5f.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnthyhk5f.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnthyhk5f.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        return Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510514,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3o58g2wd.scala:9:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m  |\u001b[0m                          Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3o58g2wd.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3o58g2wd.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                     ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        return Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510514,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3o58g2wd.scala:9:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m  |\u001b[0m                          Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3o58g2wd.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3o58g2wd.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                     ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        return Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1666123698,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdfkzvj4v.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdfkzvj4v.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdfkzvj4v.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        return Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510514,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3o58g2wd.scala:9:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m  |\u001b[0m                          Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3o58g2wd.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3o58g2wd.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                     ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        val test_tup_map = Map(test_tup -> test_dict)\n        val test_tup_map_list = List(test_tup_map)\n        val test_tup_map_list_tup = (test_tup_map_list, test_dict)\n        Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1666123708,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpptn8utxz.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpptn8utxz.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpptn8utxz.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        return Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510514,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3o58g2wd.scala:9:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m  |\u001b[0m                          Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3o58g2wd.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3o58g2wd.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                     ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        Left(test_tup)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1666123698,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpozt2j_ez.scala:9:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m  |\u001b[0m                          Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpozt2j_ez.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpozt2j_ez.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                     ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        return Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510514,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3o58g2wd.scala:9:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m  |\u001b[0m                          Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3o58g2wd.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3o58g2wd.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                     ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        val tup = (test_tup, test_dict)\n        Right(tup._2)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1666123708,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj5vtnezr.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj5vtnezr.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj5vtnezr.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Add your code here\n        return Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpquwaeec4.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpquwaeec4.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpquwaeec4.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        val new_tup = (test_tup, test_dict)\n        Right(new_tup)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp84qtq8ju.scala:7:14 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        Right(new_tup)\n\u001b[31m\u001b[31m  |\u001b[0m              ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m        Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mnew\u001b[0m\u001b[1m\u001b[31m_\u001b[0m\u001b[1m\u001b[31mtup\u001b[0m\u001b[1m\u001b[31m \u001b[0m\u001b[1m\u001b[31m:\u001b[0m\u001b[1m\u001b[31m \u001b[0m\u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mcollection.mutable.Map[String, Long]\u001b[1m\u001b[31m)\u001b[0m\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m        Required: collection.mutable.Map[String, Long]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp84qtq8ju.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp84qtq8ju.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        Left(test_tup)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1666123698,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpozt2j_ez.scala:9:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m  |\u001b[0m                          Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpozt2j_ez.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpozt2j_ez.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                     ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        if (test_tup > 0) {\n            Right(test_dict)\n        } else {\n            Left(test_tup)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510514,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkw_hfpz4.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkw_hfpz4.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkw_hfpz4.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        val tup = test_tup\n        val dict = test_dict\n        val tup_dict = (tup, dict)\n        Right(tup_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1666123708,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc5k9vzi_.scala:9:14 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        Right(tup_dict)\n\u001b[31m\u001b[31m  |\u001b[0m              ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m       Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mtup\u001b[0m\u001b[1m\u001b[31m_\u001b[0m\u001b[1m\u001b[31mdict\u001b[0m\u001b[1m\u001b[31m \u001b[0m\u001b[1m\u001b[31m:\u001b[0m\u001b[1m\u001b[31m \u001b[0m\u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mcollection.mutable.Map[String, Long]\u001b[1m\u001b[31m)\u001b[0m\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m       Required: collection.mutable.Map[String, Long]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc5k9vzi_.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc5k9vzi_.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        return Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1666123698,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdfkzvj4v.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdfkzvj4v.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdfkzvj4v.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        return Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510514,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3o58g2wd.scala:9:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m  |\u001b[0m                          Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3o58g2wd.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3o58g2wd.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                     ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510514,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj9wc36lf.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj9wc36lf.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj9wc36lf.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd91kvhmv.scala:9:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m  |\u001b[0m                          Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd91kvhmv.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd91kvhmv.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                     ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510514,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj9wc36lf.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj9wc36lf.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj9wc36lf.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        if (test_tup < 0) {\n            Left(test_tup)\n        } else {\n            Right(test_dict)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510514,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd3ebzpso.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd3ebzpso.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd3ebzpso.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        if (test_tup > 0) {\n            Right(test_dict)\n        } else {\n            Left(test_tup)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510514,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkw_hfpz4.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkw_hfpz4.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkw_hfpz4.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510514,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj9wc36lf.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj9wc36lf.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj9wc36lf.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        if (test_tup > 0) {\n            Right(test_dict)\n        } else {\n            Left(test_tup)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510514,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkw_hfpz4.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkw_hfpz4.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkw_hfpz4.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        return Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510514,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3o58g2wd.scala:9:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m  |\u001b[0m                          Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3o58g2wd.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3o58g2wd.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                     ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        val test_tuple = (test_tup, test_dict)\n        Right(test_tuple._2)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1666123708,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpacev5d20.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpacev5d20.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpacev5d20.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        return Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510514,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3o58g2wd.scala:9:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m  |\u001b[0m                          Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3o58g2wd.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3o58g2wd.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                     ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        Left(test_tup)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1666123698,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpozt2j_ez.scala:9:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m  |\u001b[0m                          Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpozt2j_ez.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpozt2j_ez.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                     ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        if (test_tup > 0) {\n            Left(test_tup)\n        } else {\n            Right(test_dict)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1666123708,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnrr8z0xp.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnrr8z0xp.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnrr8z0xp.scala:16:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        if (test_tup > 0) {\n            Left(test_tup)\n        } else {\n            Right(test_dict)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnthyhk5f.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnthyhk5f.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnthyhk5f.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        // Write your code here\n        val tup = (test_tup, test_dict)\n        Right(tup._2)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1666123708,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj5vtnezr.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj5vtnezr.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj5vtnezr.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n        Right(test_dict)\n    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd91kvhmv.scala:9:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(addDictToTuple((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))).equals((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"MSAM\"\u001b[0m -> \u001b[31m1l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"best\"\u001b[0m -> \u001b[31m3l\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m  |\u001b[0m                          Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd91kvhmv.scala:10:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(addDictToTuple((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))).equals((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"UTS\"\u001b[0m -> \u001b[31m2l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"Worst\"\u001b[0m -> \u001b[31m4l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd91kvhmv.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addDictToTuple((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m), (Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))).equals((\u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, Map[\u001b[35mString\u001b[0m,\u001b[35mLong\u001b[0m](\u001b[31m\"POS\"\u001b[0m -> \u001b[31m3l\u001b[0m, \u001b[31m\"is\"\u001b[0m -> \u001b[31m4l\u001b[0m, \u001b[31m\"Okay\"\u001b[0m -> \u001b[31m5l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                     ",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}