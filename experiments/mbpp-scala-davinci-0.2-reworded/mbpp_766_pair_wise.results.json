{
  "name": "mbpp_766_pair_wise",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_766_pair_wise.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 to l1.length - 2) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519675,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp80fsiczj.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp80fsiczj.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp80fsiczj.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 : List[Long] = Nil\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkaktmyqh.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkaktmyqh.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkaktmyqh.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for(i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnr87su87.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnr87su87.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnr87su87.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 to l1.length - 2) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptzy6mgya.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptzy6mgya.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptzy6mgya.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 : List[Long] = List()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph6arghk2.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph6arghk2.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph6arghk2.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        if (l1.length < 2) return List()\n        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptohb2c27.scala:14:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptohb2c27.scala:14:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptohb2c27.scala:14:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        l1.zip(l1.tail).map(x => x._1 * x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp89qc_i0f.scala:9:141 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                    Found:    (Long, Long)\n\u001b[31m  |\u001b[0m                                                    Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp89qc_i0f.scala:9:151 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                    Found:    (Long, Long)\n\u001b[31m  |\u001b[0m                                                    Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp89qc_i0f.scala:9:161 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 to l1.length - 2) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519675,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp80fsiczj.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp80fsiczj.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp80fsiczj.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        if (l1.length == 1) return List(l1(0))\n        else return List(l1(0), l1(1)) ::: pairWise(l1.tail.tail)\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmj378fsw.scala:10:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmj378fsw.scala:10:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmj378fsw.scala:10:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 : List[Long] = List()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1666124003,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8z7guha3.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8z7guha3.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8z7guha3.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 : List[Long] = List()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1666124003,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8z7guha3.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8z7guha3.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8z7guha3.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        if (l1.length <= 1) {\n            List()\n        } else {\n            l1.head + l1.tail.head :: pairWise(l1.tail.tail)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1666124003,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpye4tsoaj.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpye4tsoaj.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpye4tsoaj.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 : List[Long] = List()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1666124003,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8z7guha3.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8z7guha3.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8z7guha3.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 : List[Long] = List()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1666124003,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8z7guha3.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8z7guha3.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8z7guha3.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            result = result :+ l1(i) * l1(i + 1)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1666124003,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpho4g871v.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpho4g871v.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpho4g871v.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 : List[Long] = List()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1666124003,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8z7guha3.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8z7guha3.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8z7guha3.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ (l1(i) * l1(i + 1))\n        }\n        return l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1666124003,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmjg2uc08.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmjg2uc08.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmjg2uc08.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 : List[Long] = List()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1666124003,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8z7guha3.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8z7guha3.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8z7guha3.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 : List[Long] = List()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1666124003,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8z7guha3.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8z7guha3.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8z7guha3.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 to l1.length - 2) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519675,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp80fsiczj.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp80fsiczj.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp80fsiczj.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 : List[Long] = List()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph6arghk2.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph6arghk2.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph6arghk2.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 : List[Long] = List()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph6arghk2.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph6arghk2.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph6arghk2.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 : List[Long] = List()\n        for (i <- 1 until l1.length) {\n            l2 = l2 :+ l1(i) * l1(i - 1)\n        }\n        return l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1666124003,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplh_grh1l.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplh_grh1l.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplh_grh1l.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 : List[Long] = List()\n        for (i <- 0 to l1.length - 2) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1666124002,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcigl8irh.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcigl8irh.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcigl8irh.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        val l2 = l1.zip(l1.tail)\n        l2.map(x => x._1 + x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1666124003,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp689cr06a.scala:10:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp689cr06a.scala:10:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp689cr06a.scala:10:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        l1.sliding(2).map(x => x.reduce(_ * _)).toList\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1666124002,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5ql4h_f2.scala:9:141 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                    Found:    (Long, Long)\n\u001b[31m  |\u001b[0m                                                    Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5ql4h_f2.scala:9:151 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                    Found:    (Long, Long)\n\u001b[31m  |\u001b[0m                                                    Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5ql4h_f2.scala:9:161 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = (l1(i) * l1(i + 1)) :: l2\n        }\n        l2.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1666124002,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoln81dn7.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoln81dn7.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoln81dn7.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 : List[Long] = List()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1666124003,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8z7guha3.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8z7guha3.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8z7guha3.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 to l1.length - 2) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptzy6mgya.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptzy6mgya.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptzy6mgya.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            result = result :+ l1(i) * l1(i + 1)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1666124003,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpho4g871v.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpho4g871v.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpho4g871v.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 to l1.length - 2) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptzy6mgya.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptzy6mgya.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptzy6mgya.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 1 until l1.size) {\n            l2 = l2 :+ l1(i - 1) * l1(i)\n        }\n        l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1666124003,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd4k8h1p5.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd4k8h1p5.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd4k8h1p5.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        val l2 = new ListBuffer[Long]\n        for (i <- 0 until l1.length - 1) {\n            l2 += l1(i) * l1(i + 1)\n        }\n        l2.toList\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1666124003,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9p5pc5el.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9p5pc5el.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9p5pc5el.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        val l2 = l1.sliding(2).toList\n        l2.map(x => x(0) * x(1))\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1666124003,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf29wdycl.scala:10:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf29wdycl.scala:10:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf29wdycl.scala:10:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 : List[Long] = List()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph6arghk2.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph6arghk2.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph6arghk2.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        if (l1.length < 2) return List()\n        return List(l1(0) * l1(1)) ::: pairWise(l1.tail)\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1666124003,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0clzho58.scala:10:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0clzho58.scala:10:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0clzho58.scala:10:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 : List[Long] = List()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph6arghk2.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph6arghk2.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph6arghk2.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 to l1.length - 2) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519675,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp80fsiczj.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp80fsiczj.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp80fsiczj.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 to l1.length - 2) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519675,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp80fsiczj.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp80fsiczj.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp80fsiczj.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 : List[Long] = List()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1666124003,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8z7guha3.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8z7guha3.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8z7guha3.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        val l2 = l1.zip(l1.tail)\n        l2.map(x => x._1 + x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1666124003,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp689cr06a.scala:10:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp689cr06a.scala:10:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp689cr06a.scala:10:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        val l2 = l1.zip(l1.tail)\n        l2.map(x => x._1 * x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1666124003,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpeqx7pbaw.scala:10:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpeqx7pbaw.scala:10:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpeqx7pbaw.scala:10:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        l1.zip(l1.tail).map(x => x._1 * x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp89qc_i0f.scala:9:141 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                    Found:    (Long, Long)\n\u001b[31m  |\u001b[0m                                                    Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp89qc_i0f.scala:9:151 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                    Found:    (Long, Long)\n\u001b[31m  |\u001b[0m                                                    Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp89qc_i0f.scala:9:161 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        l1.sliding(2).map(x => x.reduce(_ * _)).toList\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1666124002,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5ql4h_f2.scala:9:141 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                    Found:    (Long, Long)\n\u001b[31m  |\u001b[0m                                                    Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5ql4h_f2.scala:9:151 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                    Found:    (Long, Long)\n\u001b[31m  |\u001b[0m                                                    Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5ql4h_f2.scala:9:161 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 : List[Long] = List()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1666124003,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8z7guha3.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8z7guha3.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8z7guha3.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 to l1.length - 2) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519675,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp80fsiczj.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp80fsiczj.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp80fsiczj.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 to l1.length - 2) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519675,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp80fsiczj.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp80fsiczj.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp80fsiczj.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 : List[Long] = List()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1666124003,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8z7guha3.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8z7guha3.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8z7guha3.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 to l1.length - 2) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519675,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp80fsiczj.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp80fsiczj.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp80fsiczj.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 : List[Long] = List()\n        for (i <- 0 to l1.length - 2) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1666124002,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcigl8irh.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcigl8irh.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcigl8irh.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 to l1.length - 2) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptzy6mgya.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptzy6mgya.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptzy6mgya.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 : List[Long] = List()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ (l1(i) * l1(i + 1))\n        }\n        l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1666124003,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo2blhx2q.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo2blhx2q.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo2blhx2q.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 to l1.length - 2) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519675,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp80fsiczj.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp80fsiczj.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp80fsiczj.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 to l1.length - 2) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519675,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp80fsiczj.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp80fsiczj.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp80fsiczj.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 to l1.length - 2) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519675,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp80fsiczj.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp80fsiczj.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp80fsiczj.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 : List[Long] = List()\n        for (i <- 0 to l1.length - 2) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1666124002,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcigl8irh.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcigl8irh.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcigl8irh.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 to l1.length - 2) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519675,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp80fsiczj.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp80fsiczj.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp80fsiczj.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        val l2 = l1.sliding(2).toList\n        val l3 = l2.map(x => x(0) * x(1))\n        l3\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1666124003,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsgtrxzk7.scala:11:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsgtrxzk7.scala:11:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsgtrxzk7.scala:11:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 to l1.length - 2) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptzy6mgya.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptzy6mgya.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptzy6mgya.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 : List[Long] = List()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1666124003,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8z7guha3.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8z7guha3.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8z7guha3.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 to l1.length - 2) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519675,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp80fsiczj.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp80fsiczj.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp80fsiczj.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 : List[Long] = List()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1666124003,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8z7guha3.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8z7guha3.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8z7guha3.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 : List[Long] = List()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1666124003,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8z7guha3.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8z7guha3.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8z7guha3.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 to l1.length - 2) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519675,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp80fsiczj.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp80fsiczj.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp80fsiczj.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        val l2 = l1.zip(l1.tail)\n        l2.map(x => x._1 * x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1666124003,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpeqx7pbaw.scala:10:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpeqx7pbaw.scala:10:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpeqx7pbaw.scala:10:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 to l1.length - 2) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519675,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp80fsiczj.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp80fsiczj.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp80fsiczj.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = new ListBuffer[Long]\n        for (i <- 0 until l1.length - 1) {\n            l2 += l1(i) * l1(i + 1)\n        }\n        l2.toList\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1666124003,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpp4e4mir7.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpp4e4mir7.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpp4e4mir7.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = new ListBuffer[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 += l1(i) * l1(i + 1)\n        }\n        return l2.toList\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1666124003,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg2z8oy_j.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg2z8oy_j.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg2z8oy_j.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        l1.sliding(2).map(x => x(0) * x(1)).toList\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1666124003,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcy77n_nb.scala:9:141 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                    Found:    (Long, Long)\n\u001b[31m  |\u001b[0m                                                    Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcy77n_nb.scala:9:151 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                    Found:    (Long, Long)\n\u001b[31m  |\u001b[0m                                                    Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcy77n_nb.scala:9:161 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = new ListBuffer[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 += l1(i) * l1(i + 1)\n        }\n        return l2.toList\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1666124003,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg2z8oy_j.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg2z8oy_j.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg2z8oy_j.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 : List[Long] = List()\n        for (i <- 0 to l1.length-2) {\n            l2 = l2 :+ l1(i) * l1(i+1)\n        }\n        return l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1666124003,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp41xw4q9u.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp41xw4q9u.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp41xw4q9u.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 to l1.length - 2) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519675,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp80fsiczj.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp80fsiczj.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp80fsiczj.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 : List[Long] = List()\n        for(i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1666124003,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1hzjx7xh.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1hzjx7xh.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1hzjx7xh.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 : List[Long] = List()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1666124003,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8z7guha3.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8z7guha3.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8z7guha3.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = new ListBuffer[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 += l1(i) * l1(i + 1)\n        }\n        l2.toList\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1666124003,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqfpb0m47.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqfpb0m47.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqfpb0m47.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 : List[Long] = List()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1666124003,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8z7guha3.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8z7guha3.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8z7guha3.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        l1.zip(l1.tail).map(x => x._1 * x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp89qc_i0f.scala:9:141 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                    Found:    (Long, Long)\n\u001b[31m  |\u001b[0m                                                    Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp89qc_i0f.scala:9:151 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                    Found:    (Long, Long)\n\u001b[31m  |\u001b[0m                                                    Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp89qc_i0f.scala:9:161 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 to l1.length - 2) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519675,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp80fsiczj.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp80fsiczj.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp80fsiczj.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 : List[Long] = List()\n        for (i <- 0 to l1.length - 2) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1666124002,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcigl8irh.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcigl8irh.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcigl8irh.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var result : List[Long] = List()\n        for (i <- 0 until l1.length - 1) {\n            result = result :+ l1(i) * l1(i + 1)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1666124003,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpevp5np46.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpevp5np46.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpevp5np46.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 : List[Long] = List()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1666124003,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8z7guha3.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8z7guha3.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8z7guha3.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 : List[Long] = List()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1666124003,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8z7guha3.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8z7guha3.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8z7guha3.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 : List[Long] = List()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1666124003,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8z7guha3.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8z7guha3.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8z7guha3.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 : List[Long] = List()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph6arghk2.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph6arghk2.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph6arghk2.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        val l2 = new ListBuffer[Long]\n        for (i <- 0 until l1.length - 1) {\n            l2 += l1(i) * l1(i + 1)\n        }\n        l2.toList\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1666124003,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9p5pc5el.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9p5pc5el.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9p5pc5el.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptskfk1fs.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 to l1.length - 2) {\n            l2 = l2 :+ (l1(i) * l1(i + 1))\n        }\n        return l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1666124007,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvntaxnuk.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvntaxnuk.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvntaxnuk.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Long] = {\n        var l2 = List[Long]()\n        for (i <- 0 until l1.length - 1) {\n            l2 = l2 :+ l1(i) * l1(i + 1)\n        }\n        return l2\n    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Long]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n",
      "timestamp": 1665519674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:141 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:151 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(pairWise((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong))).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp722qtuxd.scala:13:161 -------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}