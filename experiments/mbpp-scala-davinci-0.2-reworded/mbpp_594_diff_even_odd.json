{
  "name": "mbpp_594_diff_even_odd",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the difference of the first even and first odd number of a given list.\n    def diffEvenOdd(list1 : List[Long]) : Long = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_594_diff_even_odd.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(diffEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (3l));\n    assert(diffEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (1l));\n    assert(diffEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (9l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head - odd.head",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 == 1)\n        even.head - odd.head",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head - odd.head",
    "        val even = list1.filter(_ % 2 == 0)\n        val odd = list1.filter(_ % 2 != 0)\n        even.head - odd.head",
    "        val even = list1.filter(_ % 2 == 0)\n        val odd = list1.filter(_ % 2 != 0)\n        even.head - odd.head",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        if (even.isEmpty || odd.isEmpty) 0 else even.head - odd.head",
    "        var even = 0L\n        var odd = 0L\n        var flag = false\n        for (i <- list1) {\n            if (i % 2 == 0) {\n                if (!flag) {\n                    even = i\n                    flag = true\n                }\n            } else {\n                odd = i\n                return even - odd\n            }\n        }\n        return 0L",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        if (even.length == 0 || odd.length == 0)\n            0\n        else\n            even(0) - odd(0)",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head - odd.head",
    "        val even = list1.filter(_ % 2 == 0).head\n        val odd = list1.filter(_ % 2 != 0).head\n        even - odd",
    "        var even : Long = 0\n        var odd : Long = 0\n        for (i <- list1) {\n            if (i % 2 == 0) {\n                even = i\n                return even - odd\n            }\n            else {\n                odd = i\n            }\n        }\n        return even - odd",
    "        val even = list1.filter(_ % 2 == 0)\n        val odd = list1.filter(_ % 2 != 0)\n        if (even.isEmpty || odd.isEmpty) 0\n        else even.head - odd.head",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head - odd.head",
    "        val even = list1.filter(_ % 2 == 0)\n        val odd = list1.filter(_ % 2 != 0)\n        if (even.length > 0 && odd.length > 0)\n            even.head - odd.head\n        else\n            0",
    "        val evens = list1.filter(x => x % 2 == 0)\n        val odds = list1.filter(x => x % 2 == 1)\n        if (evens.length == 0 || odds.length == 0) 0\n        else evens.head - odds.head",
    "        val even = list1.filter(_ % 2 == 0)\n        val odd = list1.filter(_ % 2 != 0)\n        even.head - odd.head",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        if (even.length > 0 && odd.length > 0) even(0) - odd(0) else 0",
    "        val even = list1.filter(_ % 2 == 0)\n        val odd = list1.filter(_ % 2 != 0)\n        even.head - odd.head",
    "        val even = list1.filter(_ % 2 == 0)\n        val odd = list1.filter(_ % 2 != 0)\n        even.head - odd.head",
    "        var even = 0L\n        var odd = 0L\n        for (i <- list1) {\n            if (i % 2 == 0) {\n                even = i\n                return even - odd\n            }\n            else {\n                odd = i\n            }\n        }\n        return even - odd",
    "        var even = 0\n        var odd = 0\n        var flag = false\n        for (i <- 0 until list1.length) {\n            if (list1(i) % 2 == 0) {\n                even = list1(i)\n                flag = true\n                break\n            }\n        }\n        if (flag == false) {\n            return 0\n        }\n        for (i <- 0 until list1.length) {\n            if (list1(i) % 2 == 1) {\n                odd = list1(i)\n                break\n            }\n        }\n        even - odd",
    "        var even = 0L\n        var odd = 0L\n        var foundEven = false\n        var foundOdd = false\n        for (i <- list1) {\n            if (i % 2 == 0 && !foundEven) {\n                even = i\n                foundEven = true\n            }\n            if (i % 2 != 0 && !foundOdd) {\n                odd = i\n                foundOdd = true\n            }\n            if (foundEven && foundOdd) return even - odd\n        }\n        return 0L",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head - odd.head",
    "        val even = list1.filter(_ % 2 == 0).head\n        val odd = list1.filter(_ % 2 != 0).head\n        even - odd",
    "        val even = list1.filter(x => x % 2 == 0).head\n        val odd = list1.filter(x => x % 2 == 1).head\n        even - odd",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        if (even.length == 0 || odd.length == 0)\n            return 0\n        even.head - odd.head",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head - odd.head",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head - odd.head",
    "        val evens = list1.filter(_ % 2 == 0)\n        val odds = list1.filter(_ % 2 != 0)\n        if (evens.isEmpty || odds.isEmpty) 0\n        else evens.head - odds.head",
    "        val even = list1.filter(_ % 2 == 0)\n        val odd = list1.filter(_ % 2 != 0)\n        if (even.isEmpty || odd.isEmpty) 0\n        else even.head - odd.head",
    "        val even = list1.filter(_ % 2 == 0)\n        val odd = list1.filter(_ % 2 == 1)\n        if (even.length == 0)\n            0\n        else if (odd.length == 0)\n            0\n        else\n            even.head - odd.head",
    "        val even = list1.filter(_ % 2 == 0).head\n        val odd = list1.filter(_ % 2 == 1).head\n        even - odd",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head - odd.head",
    "        val even = list1.filter(x => x % 2 == 0).head\n        val odd = list1.filter(x => x % 2 != 0).head\n        even - odd",
    "        val even = list1.filter(_ % 2 == 0)\n        val odd = list1.filter(_ % 2 != 0)\n        even.head - odd.head",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 == 1)\n        even.head - odd.head",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 == 1)\n        if (even.length == 0 || odd.length == 0) 0\n        else even.head - odd.head",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head - odd.head",
    "        val even = list1.filter(_ % 2 == 0)\n        val odd = list1.filter(_ % 2 != 0)\n        even.head - odd.head",
    "        val even = list1.filter(_ % 2 == 0)\n        val odd = list1.filter(_ % 2 != 0)\n        if (even.isEmpty || odd.isEmpty) 0\n        else even.head - odd.head",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head - odd.head",
    "        var even = 0L\n        var odd = 0L\n        var foundEven = false\n        var foundOdd = false\n        for (i <- list1) {\n            if (i % 2 == 0 && !foundEven) {\n                even = i\n                foundEven = true\n            }\n            if (i % 2 == 1 && !foundOdd) {\n                odd = i\n                foundOdd = true\n            }\n            if (foundEven && foundOdd) return even - odd\n        }\n        return 0L",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head - odd.head",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head - odd.head",
    "        val even = list1.filter(_ % 2 == 0)\n        val odd = list1.filter(_ % 2 != 0)\n        even.head - odd.head",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head - odd.head",
    "        val even = list1.filter(x => x % 2 == 0).head\n        val odd = list1.filter(x => x % 2 != 0).head\n        even - odd",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 == 1)\n        even.head - odd.head",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head - odd.head",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head - odd.head",
    "        val even = list1.filter(_ % 2 == 0)\n        val odd = list1.filter(_ % 2 != 0)\n        even.head - odd.head",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head - odd.head",
    "        val even = list1.filter(x => x % 2 == 0).head\n        val odd = list1.filter(x => x % 2 != 0).head\n        even - odd",
    "        val even = list1.filter(_ % 2 == 0)\n        val odd = list1.filter(_ % 2 != 0)\n        if (even.length == 0 || odd.length == 0) return 0\n        even.head - odd.head",
    "        val even = list1.filter(_ % 2 == 0)\n        val odd = list1.filter(_ % 2 == 1)\n        even.head - odd.head",
    "        val evens = list1.filter(_ % 2 == 0)\n        val odds = list1.filter(_ % 2 != 0)\n        if (evens.isEmpty || odds.isEmpty) 0\n        else evens.head - odds.head",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head - odd.head",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 == 1)\n        even.head - odd.head",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        if (even.isEmpty || odd.isEmpty)\n            return 0\n        even.head - odd.head",
    "        val even = list1.filter(_ % 2 == 0).head\n        val odd = list1.filter(_ % 2 == 1).head\n        even - odd",
    "        var even = 0L\n        var odd = 0L\n        var foundEven = false\n        var foundOdd = false\n        for (i <- list1) {\n            if (i % 2 == 0 && !foundEven) {\n                even = i\n                foundEven = true\n            }\n            if (i % 2 != 0 && !foundOdd) {\n                odd = i\n                foundOdd = true\n            }\n            if (foundEven && foundOdd) return even - odd\n        }\n        return 0",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head - odd.head",
    "        val even = list1.filter(_ % 2 == 0)\n        val odd = list1.filter(_ % 2 != 0)\n        if (even.isEmpty || odd.isEmpty)\n            0\n        else\n            even.head - odd.head",
    "        val even = list1.filter(_ % 2 == 0)\n        val odd = list1.filter(_ % 2 != 0)\n        even.head - odd.head",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head - odd.head",
    "        val even = list1.filter(_ % 2 == 0).head\n        val odd = list1.filter(_ % 2 != 0).head\n        even - odd",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head - odd.head",
    "        val even = list1.filter(_ % 2 == 0)\n        val odd = list1.filter(_ % 2 != 0)\n        even.head - odd.head",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        if (even.isEmpty || odd.isEmpty) 0\n        else even.head - odd.head",
    "        var even = 0L\n        var odd = 0L\n        var flag = false\n        for (i <- list1) {\n            if (i % 2 == 0) {\n                if (!flag) {\n                    even = i\n                    flag = true\n                }\n            }\n            else {\n                odd = i\n                return even - odd\n            }\n        }\n        return even - odd",
    "        val even = list1.filter(_ % 2 == 0).head\n        val odd = list1.filter(_ % 2 != 0).head\n        even - odd",
    "        val even = list1.filter(_ % 2 == 0).head\n        val odd = list1.filter(_ % 2 != 0).head\n        even - odd",
    "        var even = 0L\n        var odd = 0L\n        for (i <- list1) {\n            if (i % 2 == 0) {\n                even = i\n                return even - odd\n            }\n            else {\n                odd = i\n            }\n        }\n        return even - odd",
    "        val even = list1.filter(_ % 2 == 0).head\n        val odd = list1.filter(_ % 2 != 0).head\n        even - odd",
    "        val even = list1.filter(_ % 2 == 0)\n        val odd = list1.filter(_ % 2 == 1)\n        if (even.length == 0 || odd.length == 0) 0\n        else even.head - odd.head",
    "        val even = list1.filter(x => x % 2 == 0).head\n        val odd = list1.filter(x => x % 2 != 0).head\n        even - odd",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head - odd.head",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head - odd.head",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head - odd.head",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        val evenFirst = even.head\n        val oddFirst = odd.head\n        evenFirst - oddFirst",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head - odd.head",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head - odd.head",
    "        val even = list1.filter(_ % 2 == 0).head\n        val odd = list1.filter(_ % 2 != 0).head\n        even - odd",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        if (even.length == 0 || odd.length == 0) {\n            return 0\n        }\n        even.head - odd.head",
    "        val even = list1.filter(x => x % 2 == 0).head\n        val odd = list1.filter(x => x % 2 == 1).head\n        even - odd",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head - odd.head",
    "        var even = 0L\n        var odd = 0L\n        var foundEven = false\n        var foundOdd = false\n        for (i <- list1) {\n            if (i % 2 == 0 && !foundEven) {\n                even = i\n                foundEven = true\n            }\n            if (i % 2 == 1 && !foundOdd) {\n                odd = i\n                foundOdd = true\n            }\n            if (foundEven && foundOdd) return even - odd\n        }\n        return 0L",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head - odd.head",
    "        val even = list1.filter(_ % 2 == 0)\n        val odd = list1.filter(_ % 2 != 0)\n        even.head - odd.head",
    "        val even = list1.filter(_ % 2 == 0)\n        val odd = list1.filter(_ % 2 != 0)\n        even.head - odd.head",
    "        val even = list1.filter(_ % 2 == 0).head\n        val odd = list1.filter(_ % 2 != 0).head\n        even - odd",
    "        val even = list1.filter(_ % 2 == 0).head\n        val odd = list1.filter(_ % 2 == 1).head\n        even - odd",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head - odd.head",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head - odd.head",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head - odd.head",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        if (even.length == 0 || odd.length == 0) 0\n        else even.head - odd.head",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head - odd.head",
    "        var even = 0L\n        var odd = 0L\n        for (i <- list1) {\n            if (i % 2 == 0) {\n                even = i\n                return even - odd\n            }\n            else {\n                odd = i\n            }\n        }\n        even - odd",
    "        var even = 0L\n        var odd = 0L\n        for (i <- list1) {\n            if (i % 2 == 0) {\n                even = i\n                return even - odd\n            }\n            else {\n                odd = i\n            }\n        }\n        return even - odd",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head - odd.head",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        if (even.length == 0 || odd.length == 0) 0\n        else even.head - odd.head",
    "        val even = list1.filter(_ % 2 == 0).head\n        val odd = list1.filter(_ % 2 == 1).head\n        even - odd",
    "        val even = list1.filter(_ % 2 == 0)\n        val odd = list1.filter(_ % 2 != 0)\n        if (even.isEmpty || odd.isEmpty) 0\n        else even.head - odd.head",
    "        val even = list1.filter(_ % 2 == 0).head\n        val odd = list1.filter(_ % 2 != 0).head\n        even - odd",
    "        val evens = list1.filter(x => x % 2 == 0)\n        val odds = list1.filter(x => x % 2 != 0)\n        if (evens.isEmpty || odds.isEmpty) return 0\n        evens.head - odds.head",
    "        val even = list1.filter(_ % 2 == 0)\n        val odd = list1.filter(_ % 2 != 0)\n        even.head - odd.head",
    "        var even = 0L\n        var odd = 0L\n        var foundEven = false\n        var foundOdd = false\n        for (i <- list1) {\n            if (i % 2 == 0 && !foundEven) {\n                even = i\n                foundEven = true\n            }\n            if (i % 2 == 1 && !foundOdd) {\n                odd = i\n                foundOdd = true\n            }\n        }\n        even - odd",
    "        val even = list1.filter(_ % 2 == 0)\n        val odd = list1.filter(_ % 2 != 0)\n        even.head - odd.head",
    "        if (list1.isEmpty) 0\n        else {\n            val evens = list1.filter(x => x % 2 == 0)\n            val odds = list1.filter(x => x % 2 == 1)\n            if (evens.isEmpty || odds.isEmpty) 0\n            else evens.head - odds.head\n        }",
    "        val even = list1.filter(x => x % 2 == 0).head\n        val odd = list1.filter(x => x % 2 != 0).head\n        even - odd",
    "        val even = list1.filter(x => x % 2 == 0).head\n        val odd = list1.filter(x => x % 2 != 0).head\n        even - odd",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        if (even.length == 0) {\n            return 0\n        }\n        if (odd.length == 0) {\n            return 0\n        }\n        even.head - odd.head",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head - odd.head",
    "        var even = 0L\n        var odd = 0L\n        var flag = false\n        for (i <- list1) {\n            if (i % 2 == 0) {\n                even = i\n                flag = true\n                break\n            }\n        }\n        if (flag == false) even = 0\n        flag = false\n        for (i <- list1) {\n            if (i % 2 != 0) {\n                odd = i\n                flag = true\n                break\n            }\n        }\n        if (flag == false) odd = 0\n        even - odd",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head - odd.head",
    "        var even = 0\n        var odd = 0\n        for (i <- list1) {\n            if (i % 2 == 0) {\n                even = i\n                return even - odd\n            }\n            else {\n                odd = i\n            }\n        }\n        return even - odd",
    "        val evens = list1.filter(x => x % 2 == 0)\n        val odds = list1.filter(x => x % 2 != 0)\n        if (evens.isEmpty || odds.isEmpty) 0\n        else evens.head - odds.head",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 == 1)\n        even.head - odd.head",
    "        var even = 0L\n        var odd = 0L\n        var flag = false\n        for (i <- list1) {\n            if (i % 2 == 0 && !flag) {\n                even = i\n                flag = true\n            }\n            else if (i % 2 != 0) {\n                odd = i\n                return even - odd\n            }\n        }\n        return even - odd",
    "        val even = list1.filter(x => x % 2 == 0).head\n        val odd = list1.filter(x => x % 2 != 0).head\n        even - odd",
    "        val even = list1.filter(_ % 2 == 0).head\n        val odd = list1.filter(_ % 2 == 1).head\n        even - odd",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head - odd.head",
    "        val even = list1.filter(x => x % 2 == 0).head\n        val odd = list1.filter(x => x % 2 == 1).head\n        even - odd",
    "        val even = list1.filter(_ % 2 == 0)\n        val odd = list1.filter(_ % 2 != 0)\n        even.head - odd.head",
    "        val even = list1.filter(_ % 2 == 0).head\n        val odd = list1.filter(_ % 2 != 0).head\n        even - odd",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head - odd.head",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        if (even.length == 0 || odd.length == 0)\n            return -1\n        even.head - odd.head",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        if (even.length == 0 || odd.length == 0)\n            return 0\n        even.head - odd.head",
    "        var even = 0\n        var odd = 0\n        for (i <- list1) {\n            if (i % 2 == 0) {\n                even = i\n                return even - odd\n            }\n            else {\n                odd = i\n            }\n        }\n        even - odd",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even(0) - odd(0)",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head - odd.head",
    "        val even = list1.filter(x => x % 2 == 0).head\n        val odd = list1.filter(x => x % 2 != 0).head\n        even - odd",
    "        val even = list1.filter(_ % 2 == 0).head\n        val odd = list1.filter(_ % 2 != 0).head\n        even - odd",
    "        val even = list1.filter(_ % 2 == 0)\n        val odd = list1.filter(_ % 2 != 0)\n        even.head - odd.head",
    "        var even = 0L\n        var odd = 0L\n        for (i <- list1) {\n            if (i % 2 == 0) {\n                even = i\n                return even - odd\n            }\n            else {\n                odd = i\n            }\n        }\n        return even - odd",
    "        val even = list1.filter(_ % 2 == 0).head\n        val odd = list1.filter(_ % 2 != 0).head\n        even - odd",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        if (even.length == 0 || odd.length == 0)\n            return 0\n        even.head - odd.head",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head - odd.head",
    "        val even = list1.filter(_ % 2 == 0).head\n        val odd = list1.filter(_ % 2 == 1).head\n        even - odd",
    "        val even = list1.filter(_ % 2 == 0)\n        val odd = list1.filter(_ % 2 != 0)\n        if (even.isEmpty || odd.isEmpty) 0\n        else even.head - odd.head",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        if (even.length == 0 || odd.length == 0) return 0\n        even.head - odd.head",
    "        val even = list1.filter(_ % 2 == 0)\n        val odd = list1.filter(_ % 2 != 0)\n        if (even.length > 0 && odd.length > 0) even.head - odd.head else 0",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head - odd.head",
    "        var even = 0L\n        var odd = 0L\n        list1.foreach(x => {\n            if (x % 2 == 0) {\n                even = x\n                return even - odd\n            }\n            else {\n                odd = x\n            }\n        })\n        even - odd",
    "        val evens = list1.filter(x => x % 2 == 0)\n        val odds = list1.filter(x => x % 2 != 0)\n        evens.head - odds.head",
    "        val even = list1.filter(_ % 2 == 0).head\n        val odd = list1.filter(_ % 2 != 0).head\n        even - odd",
    "        var even = 0L\n        var odd = 0L\n        var flag = false\n        for (i <- list1) {\n            if (i % 2 == 0) {\n                if (!flag) {\n                    even = i\n                    flag = true\n                }\n            } else {\n                odd = i\n                return even - odd\n            }\n        }\n        return even - odd",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head - odd.head",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        if (even.isEmpty || odd.isEmpty) 0\n        else even.head - odd.head",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head - odd.head",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head - odd.head",
    "        val even = list1.filter(_ % 2 == 0)\n        val odd = list1.filter(_ % 2 == 1)\n        if (even.length == 0 || odd.length == 0) return 0\n        even.head - odd.head",
    "        val even = list1.filter(x => x % 2 == 0).head\n        val odd = list1.filter(x => x % 2 != 0).head\n        even - odd",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head - odd.head",
    "        val even = list1.filter(_ % 2 == 0)\n        val odd = list1.filter(_ % 2 != 0)\n        even.head - odd.head",
    "        val even = list1.filter(x => x % 2 == 0).head\n        val odd = list1.filter(x => x % 2 != 0).head\n        even - odd",
    "        val even = list1.filter(_ % 2 == 0).head\n        val odd = list1.filter(_ % 2 != 0).head\n        even - odd",
    "        val even = list1.filter(x => x % 2 == 0).head\n        val odd = list1.filter(x => x % 2 != 0).head\n        even - odd",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        if (even.length == 0 || odd.length == 0) 0\n        else even.head - odd.head",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        if (even.length == 0 || odd.length == 0)\n            return 0\n        else\n            return even.head - odd.head",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        val evenMin = even.min\n        val oddMin = odd.min\n        evenMin - oddMin",
    "        val evens = list1.filter(x => x % 2 == 0)\n        val odds = list1.filter(x => x % 2 != 0)\n        if (evens.length == 0)\n            return -1\n        if (odds.length == 0)\n            return -1\n        evens.head - odds.head",
    "        val even = list1.filter(_ % 2 == 0)\n        val odd = list1.filter(_ % 2 != 0)\n        if (even.isEmpty || odd.isEmpty) return 0\n        even.head - odd.head",
    "        def diffEvenOddHelper(list1 : List[Long], even : Long, odd : Long) : Long = {\n            if (list1.isEmpty) even - odd\n            else if (list1.head % 2 == 0) diffEvenOddHelper(list1.tail, list1.head, odd)\n            else diffEvenOddHelper(list1.tail, even, list1.head)\n        }\n        diffEvenOddHelper(list1, 0, 0)",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head - odd.head",
    "        var even = 0L\n        var odd = 0L\n        for (i <- list1) {\n            if (i % 2 == 0) {\n                even = i\n                return even - odd\n            }\n            else {\n                odd = i\n            }\n        }\n        return even - odd",
    "        val even = list1.filter(x => x % 2 == 0).head\n        val odd = list1.filter(x => x % 2 == 1).head\n        even - odd",
    "        val evens = list1.filter(x => x % 2 == 0)\n        val odds = list1.filter(x => x % 2 != 0)\n        if (evens.length == 0) {\n            odds.head\n        } else if (odds.length == 0) {\n            -evens.head\n        } else {\n            evens.head - odds.head\n        }",
    "        var even = 0L\n        var odd = 0L\n        var foundEven = false\n        var foundOdd = false\n        for (i <- list1) {\n            if (i % 2 == 0 && !foundEven) {\n                even = i\n                foundEven = true\n            }\n            if (i % 2 == 1 && !foundOdd) {\n                odd = i\n                foundOdd = true\n            }\n            if (foundEven && foundOdd) return even - odd\n        }\n        return -1",
    "        val even = list1.filter(x => x % 2 == 0).head\n        val odd = list1.filter(x => x % 2 == 1).head\n        even - odd",
    "        val evens = list1.filter(x => x % 2 == 0)\n        val odds = list1.filter(x => x % 2 != 0)\n        evens.head - odds.head",
    "        var even : Long = 0\n        var odd : Long = 0\n        var flag = true\n        for (i <- list1) {\n            if (flag) {\n                if (i % 2 == 0) {\n                    even = i\n                    flag = false\n                }\n            }\n            else {\n                if (i % 2 == 1) {\n                    odd = i\n                    return even - odd\n                }\n            }\n        }\n        return 0",
    "        val even = list1.filter(_ % 2 == 0)\n        val odd = list1.filter(_ % 2 != 0)\n        even.head - odd.head",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head - odd.head",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        if (even.length == 0 || odd.length == 0) return 0\n        even.head - odd.head",
    "        val even = list1.filter(x => x % 2 == 0).head\n        val odd = list1.filter(x => x % 2 != 0).head\n        even - odd",
    "        val even = list1.filter(x => x % 2 == 0).head\n        val odd = list1.filter(x => x % 2 != 0).head\n        even - odd",
    "        var even = 0L\n        var odd = 0L\n        for (i <- list1) {\n            if (i % 2 == 0) {\n                even = i\n                return even - odd\n            }\n            else {\n                odd = i\n            }\n        }\n        return even - odd",
    "        val even = list1.filter(_ % 2 == 0)\n        val odd = list1.filter(_ % 2 != 0)\n        if (even.isEmpty || odd.isEmpty) 0\n        else even.head - odd.head",
    "        val even = list1.filter(_ % 2 == 0)\n        val odd = list1.filter(_ % 2 != 0)\n        even.head - odd.head",
    "        val even = list1.filter(x => x % 2 == 0).head\n        val odd = list1.filter(x => x % 2 != 0).head\n        even - odd",
    "        val even = list1.filter(_ % 2 == 0)\n        val odd = list1.filter(_ % 2 != 0)\n        even.head - odd.head",
    "        val evens = list1.filter(x => x % 2 == 0)\n        val odds = list1.filter(x => x % 2 != 0)\n        if (evens.length == 0 || odds.length == 0) 0\n        else evens.head - odds.head",
    "        val even = list1.filter(_ % 2 == 0)\n        val odd = list1.filter(_ % 2 != 0)\n        even.head - odd.head",
    "        val even = list1.filter(_ % 2 == 0)\n        val odd = list1.filter(_ % 2 != 0)\n        even.head - odd.head",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head - odd.head",
    "        val even = list1.filter(_ % 2 == 0)\n        val odd = list1.filter(_ % 2 != 0)\n        even.head - odd.head",
    "        var even = 0L\n        var odd = 0L\n        for (i <- list1) {\n            if (i % 2 == 0) {\n                even = i\n                return even - odd\n            }\n            else {\n                odd = i\n            }\n        }\n        even - odd",
    "        val even = list1.filter(_ % 2 == 0)\n        val odd = list1.filter(_ % 2 != 0)\n        even(0) - odd(0)",
    "        val even = list1.filter(_ % 2 == 0)\n        val odd = list1.filter(_ % 2 != 0)\n        if (even.isEmpty || odd.isEmpty) 0\n        else even.head - odd.head",
    "        val even = list1.filter(_ % 2 == 0)\n        val odd = list1.filter(_ % 2 != 0)\n        even.head - odd.head",
    "        val even = list1.filter(_ % 2 == 0).head\n        val odd = list1.filter(_ % 2 != 0).head\n        even - odd",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head - odd.head",
    "        var even = 0L\n        var odd = 0L\n        var foundEven = false\n        var foundOdd = false\n        for (i <- list1) {\n            if (i % 2 == 0 && !foundEven) {\n                even = i\n                foundEven = true\n            }\n            if (i % 2 == 1 && !foundOdd) {\n                odd = i\n                foundOdd = true\n            }\n            if (foundEven && foundOdd) return even - odd\n        }\n        return even - odd",
    "        val evens = list1.filter(x => x % 2 == 0)\n        val odds = list1.filter(x => x % 2 != 0)\n        evens.head - odds.head",
    "        val even = list1.filter(x => x % 2 == 0).head\n        val odd = list1.filter(x => x % 2 != 0).head\n        even - odd",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head - odd.head",
    "        val even = list1.filter(x => x % 2 == 0).head\n        val odd = list1.filter(x => x % 2 != 0).head\n        even - odd",
    "        val even = list1.filter(x => x % 2 == 0).head\n        val odd = list1.filter(x => x % 2 != 0).head\n        even - odd",
    "        val even = list1.filter(x => x % 2 == 0).head\n        val odd = list1.filter(x => x % 2 == 1).head\n        even - odd"
  ]
}