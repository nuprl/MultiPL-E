{
  "name": "mbpp_440_find_adverb_position",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_440_find_adverb_position.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.length == 0) Left(\"No adverbs found\")\n        else Right(words.indexOf(adverbs(0)))\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1665510613,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp38j7q5_w.scala:12)\n\tat Problem.main(tmp38j7q5_w.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val wordList = text.split(\" \")\n        val adverbList = wordList.filter(x => x.endsWith(\"ly\"))\n        if (adverbList.length == 0) Left(\"No adverb found\")\n        else Right(wordList.indexOf(adverbList(0)))\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1665510613,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpdwsc6cas.scala:12)\n\tat Problem.main(tmpdwsc6cas.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val words = text.split(\" \")\n        val adverb = words.filter(word => word.endsWith(\"ly\"))\n        if (adverb.length == 0) Left(\"No adverb found\")\n        else Right(words.indexOf(adverb(0)))\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1665510613,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpiy0iv635.scala:12)\n\tat Problem.main(tmpiy0iv635.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val adverbs = List(\"quickly\", \"slowly\", \"elegantly\", \"beautifully\", \"carefully\", \"happily\", \"sadly\", \"angrily\", \"lazily\", \"sleepily\")\n        val words = text.split(\" \")\n        val index = words.indexWhere(word => adverbs.contains(word))\n        if (index == -1) Left(\"No adverb found\")\n        else Right(index)\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1665510613,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpupy579sj.scala:13)\n\tat Problem.main(tmpupy579sj.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.length == 0) Left(\"No adverbs found\")\n        else Right(words.indexOf(adverbs(0)))\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1665510613,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp38j7q5_w.scala:12)\n\tat Problem.main(tmp38j7q5_w.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty) {\n            Left(\"No adverbs found\")\n        } else {\n            val adverb = adverbs.head\n            val position = words.indexOf(adverb)\n            Right(position)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1665510613,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp6_c8bq1k.scala:17)\n\tat Problem.main(tmp6_c8bq1k.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val adverbs = text.split(\" \").filter(x => x.endsWith(\"ly\"))\n        if (adverbs.length == 0) Left(\"No adverbs found\")\n        else Right(text.indexOf(adverbs(0)))\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1665510613,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpb50zqzsj.scala:11)\n\tat Problem.main(tmpb50zqzsj.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val adverbs = List(\"quickly\", \"slowly\", \"eagerly\", \"happily\", \"sadly\", \"angrily\")\n        val words = text.split(\" \")\n        val index = words.indexWhere(adverbs.contains(_))\n        if (index == -1) Left(\"No adverb found\")\n        else Right(index)\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1665510613,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpe3ei5a1f.scala:13)\n\tat Problem.main(tmpe3ei5a1f.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val words = text.split(\" \")\n        val adverbs = words.filter(_.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverbs found\")\n        else Right(words.indexOf(adverbs(0)))\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1665510613,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpw52xv9ew.scala:12)\n\tat Problem.main(tmpw52xv9ew.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverb found\")\n        else Right(words.indexOf(adverbs(0)))\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1665510613,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp7egillsd.scala:12)\n\tat Problem.main(tmp7egillsd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val words = text.split(\" \")\n        val adverbs = words.filter(x => x.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverbs found\")\n        else Right(words.indexOf(adverbs(0)))\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1665510613,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp3pgqmym_.scala:12)\n\tat Problem.main(tmp3pgqmym_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val adverbs = text.split(\" \").zipWithIndex.filter(x => x._1.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverbs found\")\n        else Right(adverbs.head._2)\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1665510613,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp_yy9_d0z.scala:11)\n\tat Problem.main(tmp_yy9_d0z.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val adverbs = List(\"quickly\", \"slowly\", \"elegantly\", \"noisily\", \"excitedly\")\n        val words = text.split(\" \")\n        val adverbPositions = words.zipWithIndex.filter(x => adverbs.contains(x._1)).map(x => x._2)\n        if (adverbPositions.isEmpty) Left(\"No adverbs found\")\n        else Right(adverbPositions.head)\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1665510613,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp3hpjw9sd.scala:13)\n\tat Problem.main(tmp3hpjw9sd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val adverbs = List(\"quickly\", \"slowly\", \"eagerly\", \"happily\", \"sadly\", \"angrily\")\n        val adverbRegex = adverbs.map(_.r).mkString(\"|\")\n        val adverbRegexPattern = adverbRegex.r\n        val adverbMatches = adverbRegexPattern.findAllMatchIn(text)\n        if (adverbMatches.isEmpty)\n            Left(\"No adverbs found\")\n        else\n            Right(adverbMatches.next.start)\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1665510613,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpx8sbqket.scala:16)\n\tat Problem.main(tmpx8sbqket.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverb found\")\n        else Right(words.indexOf(adverbs(0)))\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1665510613,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp7egillsd.scala:12)\n\tat Problem.main(tmp7egillsd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val pattern = \"\"\"(\\w+ly)\"\"\".r\n        pattern.findFirstMatchIn(text) match {\n            case Some(m) => Right(m.start)\n            case None => Left(\"No adverb found\")\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1665510613,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpz8yp4w8r.scala:13)\n\tat Problem.main(tmpz8yp4w8r.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverb found\")\n        else Right(words.indexOf(adverbs(0)))\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1665510613,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp7egillsd.scala:12)\n\tat Problem.main(tmp7egillsd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverb found\")\n        else Right(words.indexOf(adverbs(0)))\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1665510613,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp7egillsd.scala:12)\n\tat Problem.main(tmp7egillsd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val adverbs = List(\"quickly\", \"slowly\", \"elegantly\", \"noisily\")\n        val words = text.split(\" \")\n        for (i <- 0 until words.length) {\n            if (adverbs.contains(words(i))) {\n                return Right(i)\n            }\n        }\n        Left(\"No adverb found\")\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1665510613,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmptkjgxybx.scala:16)\n\tat Problem.main(tmptkjgxybx.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverbs found\")\n        else Right(words.indexOf(adverbs(0)))\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1665510613,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmphcrjgyfo.scala:12)\n\tat Problem.main(tmphcrjgyfo.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val adverbs = List(\"quickly\", \"slowly\", \"elegantly\", \"loudly\", \"quietly\")\n        val words = text.split(\" \")\n        val adverb = words.find(adverbs.contains(_))\n        adverb match {\n            case Some(a) => Right(words.indexOf(a))\n            case None => Left(\"No adverb found\")\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123485,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp3lqb8sy5.scala:15)\n\tat Problem.main(tmp3lqb8sy5.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val adverbs = List(\"quickly\", \"slowly\", \"eagerly\", \"happily\", \"sadly\")\n        val words = text.split(\" \")\n        val adverbPositions = words.zipWithIndex.filter(x => adverbs.contains(x._1)).map(x => x._2)\n        if (adverbPositions.isEmpty) {\n            Left(\"No adverbs found\")\n        } else {\n            Right(adverbPositions.head)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123485,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpym6kp17y.scala:16)\n\tat Problem.main(tmpym6kp17y.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.length > 0) {\n            val adverb = adverbs(0)\n            val index = words.indexOf(adverb)\n            Right(index)\n        } else {\n            Left(\"No adverb found\")\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123485,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp46_7fpvs.scala:17)\n\tat Problem.main(tmp46_7fpvs.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val adverbs = List(\"quickly\", \"slowly\", \"eagerly\", \"happily\", \"sadly\")\n        val adverb = adverbs.find(text.contains(_))\n        adverb match {\n            case Some(adverb) => Right(text.indexOf(adverb))\n            case None => Left(\"No adverb found\")\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123485,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp6_t4hzc4.scala:14)\n\tat Problem.main(tmp6_t4hzc4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val words = text.split(\" \")\n        val adverbs = words.filter(w => w.endsWith(\"ly\"))\n        if (adverbs.length == 0) Left(\"No adverbs found\")\n        else Right(words.indexOf(adverbs(0)))\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123485,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp1opffnfj.scala:12)\n\tat Problem.main(tmp1opffnfj.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.length == 0) Left(\"No adverbs found\")\n        else Right(words.indexOf(adverbs(0)))\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1665510613,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp38j7q5_w.scala:12)\n\tat Problem.main(tmp38j7q5_w.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val adverbs = List(\"quickly\", \"slowly\", \"elegantly\", \"noisily\", \"excitedly\")\n        val adverbsWithPositions = adverbs.map(adverb => (adverb, text.indexOf(adverb)))\n        val adverbWithPosition = adverbsWithPositions.find(tuple => tuple._2 != -1)\n        adverbWithPosition match {\n            case Some(tuple) => Right(tuple._2)\n            case None => Left(\"No adverb found\")\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123484,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpfkeqh3fq.scala:15)\n\tat Problem.main(tmpfkeqh3fq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.length == 0) Left(\"No adverb found\")\n        else Right(words.indexOf(adverbs(0)))\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123484,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpkt6gck_0.scala:12)\n\tat Problem.main(tmpkt6gck_0.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val adverbs = List(\"quickly\", \"slowly\", \"elegantly\", \"noisily\", \"excitedly\")\n        val words = text.split(\" \")\n        val adverbPosition = words.zipWithIndex.filter(x => adverbs.contains(x._1)).map(x => x._2)\n        if (adverbPosition.isEmpty) Left(\"No adverb found\")\n        else Right(adverbPosition.head)\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123485,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpzz5_qqfe.scala:13)\n\tat Problem.main(tmpzz5_qqfe.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val adverbs = List(\"quickly\", \"slowly\", \"elegantly\", \"noisily\", \"excitedly\")\n        val adverb = adverbs.find(text.contains(_))\n        adverb match {\n            case Some(x) => Right(text.indexOf(x))\n            case None => Left(\"No adverb found\")\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123485,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmps47o5u_l.scala:14)\n\tat Problem.main(tmps47o5u_l.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val words = text.split(\" \")\n        val adverbs = words.filter(w => w.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverbs found\")\n        else Right(words.indexOf(adverbs(0)))\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123485,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp4s6roaip.scala:12)\n\tat Problem.main(tmp4s6roaip.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val adverbs = List(\"quickly\", \"slowly\", \"elegantly\", \"noisily\", \"excitedly\")\n        val words = text.split(\" \")\n        val adverbPositions = words.zipWithIndex.filter(x => adverbs.contains(x._1))\n        if (adverbPositions.isEmpty) Left(\"No adverbs found\")\n        else Right(adverbPositions.head._2)\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123485,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmps5m1hgu_.scala:13)\n\tat Problem.main(tmps5m1hgu_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val adverbs = List(\"quickly\", \"slowly\", \"eagerly\", \"happily\", \"sadly\", \"angrily\", \"fearfully\", \"anxiously\")\n        val words = text.split(\" \")\n        val adverbPositions = words.zipWithIndex.filter(word => adverbs.contains(word._1))\n        if (adverbPositions.isEmpty) Left(\"No adverbs found\")\n        else Right(adverbPositions.head._2)\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123485,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpdv_w4xq2.scala:13)\n\tat Problem.main(tmpdv_w4xq2.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val words = text.split(\" \")\n        val adverb = words.filter(word => word.endsWith(\"ly\"))\n        if (adverb.length == 0)\n            Left(\"No adverb found\")\n        else\n            Right(words.indexOf(adverb(0)))\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123484,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpnf4b55v8.scala:14)\n\tat Problem.main(tmpnf4b55v8.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val words = text.split(\" \")\n        val adverbs = words.filter(x => x.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverbs found\")\n        else Right(words.indexOf(adverbs(0)))\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1665510613,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp3pgqmym_.scala:12)\n\tat Problem.main(tmp3pgqmym_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverbs found\")\n        else Right(words.indexOf(adverbs(0)))\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1665510613,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmphcrjgyfo.scala:12)\n\tat Problem.main(tmphcrjgyfo.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val words = text.split(\" \")\n        val adverb = words.filter(word => word.endsWith(\"ly\"))\n        if (adverb.isEmpty) Left(\"No adverb found\")\n        else Right(words.indexOf(adverb(0)))\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123484,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp507b_a1z.scala:12)\n\tat Problem.main(tmp507b_a1z.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val adverbs = text.split(\" \").filter(x => x.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverbs found\")\n        else Right(text.split(\" \").indexOf(adverbs(0)))\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123484,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp0nozvhew.scala:11)\n\tat Problem.main(tmp0nozvhew.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.length == 0) Left(\"No adverb found\")\n        else Right(words.indexOf(adverbs(0)))\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123484,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpkt6gck_0.scala:12)\n\tat Problem.main(tmpkt6gck_0.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverbs found\")\n        else Right(words.indexOf(adverbs(0)))\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1665510613,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmphcrjgyfo.scala:12)\n\tat Problem.main(tmphcrjgyfo.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val adverbs = List(\"quickly\", \"slowly\", \"elegantly\", \"rudely\", \"happily\", \"sadly\", \"angrily\", \"foolishly\", \"merrily\", \"jovially\")\n        val words = text.split(\" \")\n        val adverbPositions = words.zipWithIndex.filter(x => adverbs.contains(x._1)).map(x => x._2)\n        if (adverbPositions.isEmpty) Left(\"No adverbs found\")\n        else Right(adverbPositions.head)\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123485,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp9jy1mgtl.scala:13)\n\tat Problem.main(tmp9jy1mgtl.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val adverbs = List(\"quickly\", \"slowly\", \"carefully\", \"happily\", \"sadly\")\n        val adverbPositions = adverbs.map(adverb => text.indexOf(adverb))\n        val adverbPosition = adverbPositions.find(position => position != -1)\n        adverbPosition match {\n            case Some(position) => Right(position)\n            case None => Left(\"No adverb found\")\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123485,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpaknt03ua.scala:15)\n\tat Problem.main(tmpaknt03ua.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.length == 0) {\n            Left(\"No adverb found\")\n        } else {\n            val adverb = adverbs(0)\n            val index = words.indexOf(adverb)\n            Right(index)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123484,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp5i4qrwh0.scala:17)\n\tat Problem.main(tmp5i4qrwh0.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val adverbs = List(\"quickly\", \"slowly\", \"elegantly\", \"noisily\", \"excitedly\")\n        val adverbsPositions = adverbs.map(adverb => (adverb, text.indexOf(adverb)))\n        val adverbPosition = adverbsPositions.filter(_._2 != -1).headOption\n        adverbPosition match {\n            case Some(adverb) => Right(adverb._2)\n            case None => Left(\"No adverb found\")\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123485,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpjiiorfz6.scala:15)\n\tat Problem.main(tmpjiiorfz6.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val adverbs = List(\"quickly\", \"slowly\", \"elegantly\", \"loudly\", \"quietly\")\n        val words = text.split(\" \")\n        val adverb = words.find(adverbs.contains(_))\n        adverb match {\n            case Some(x) => Right(words.indexOf(x))\n            case None => Left(\"No adverb found\")\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123485,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp6vxugm0_.scala:15)\n\tat Problem.main(tmp6vxugm0_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val pattern = \"\\\\w+ly\".r\n        val adverb = pattern.findFirstIn(text)\n        adverb match {\n            case Some(x) => Right(text.indexOf(x))\n            case None => Left(\"No adverb found\")\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123484,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmptgdn41tj.scala:14)\n\tat Problem.main(tmptgdn41tj.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val words = text.split(\" \")\n        val adverbs = words.filter(w => w.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverbs found\")\n        else Right(words.indexOf(adverbs(0)))\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123485,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp4s6roaip.scala:12)\n\tat Problem.main(tmp4s6roaip.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val adverbs = List(\"quickly\", \"slowly\", \"elegantly\", \"noisily\", \"awkwardly\")\n        val words = text.split(\" \")\n        val adverbPositions = words.zipWithIndex.filter(x => adverbs.contains(x._1)).map(_._2)\n        if (adverbPositions.isEmpty) Left(\"No adverbs found\")\n        else Right(adverbPositions.head)\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123485,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmppjdxdb5f.scala:13)\n\tat Problem.main(tmppjdxdb5f.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val adverbs = List(\"quickly\", \"slowly\", \"eagerly\", \"happily\", \"sadly\", \"angrily\", \"fearfully\", \"anxiously\")\n        val words = text.split(\" \")\n        val adverbPosition = words.zipWithIndex.filter(x => adverbs.contains(x._1)).map(x => x._2)\n        if (adverbPosition.isEmpty) Left(\"No adverb found\")\n        else Right(adverbPosition(0))\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123485,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp73zuib8_.scala:13)\n\tat Problem.main(tmp73zuib8_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val adverbs = List(\"quickly\", \"slowly\", \"elegantly\", \"noisily\", \"excitedly\")\n        val words = text.split(\" \")\n        val position = words.zipWithIndex.filter(x => adverbs.contains(x._1)).map(_._2).headOption\n        position match {\n            case Some(x) => Right(x)\n            case None => Left(\"No adverb found\")\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123495,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpbudqp7qm.scala:15)\n\tat Problem.main(tmpbudqp7qm.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val words = text.split(\" \")\n        val adverbs = words.zipWithIndex.filter(x => x._1.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverb found\")\n        else Right(adverbs(0)._2)\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123495,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpa_dr3kjb.scala:12)\n\tat Problem.main(tmpa_dr3kjb.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val adverbs = List(\"quickly\", \"slowly\", \"elegantly\", \"noisily\", \"excitedly\")\n        val adverbPositions = adverbs.map(adverb => text.indexOf(adverb))\n        val adverbPosition = adverbPositions.filter(_ != -1).head\n        if (adverbPosition == -1) Left(\"No adverb found\") else Right(adverbPosition)\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123495,
      "stdout": "",
      "stderr": "java.util.NoSuchElementException: head of empty list\n\tat scala.collection.immutable.Nil$.head(List.scala:662)\n\tat scala.collection.immutable.Nil$.head(List.scala:661)\n\tat Problem$.findAdverbPosition(tmphq_k1h3m.scala:8)\n\tat Problem$.main(tmphq_k1h3m.scala:12)\n\tat Problem.main(tmphq_k1h3m.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverbs found\")\n        else Right(words.indexOf(adverbs.head))\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123495,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpcehikod2.scala:12)\n\tat Problem.main(tmpcehikod2.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.length == 0) {\n            Left(\"No adverb found\")\n        } else {\n            Right(words.indexOf(adverbs(0)))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123495,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp07yfk4z0.scala:15)\n\tat Problem.main(tmp07yfk4z0.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val pattern = \"\\\\w+ly\".r\n        val result = pattern.findFirstIn(text)\n        result match {\n            case Some(x) => Right(text.indexOf(x))\n            case None => Left(\"No adverb found\")\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123495,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp_9rj29t9.scala:14)\n\tat Problem.main(tmp_9rj29t9.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.length > 0) Right(words.indexOf(adverbs(0)))\n        else Left(\"No adverb found\")\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123495,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpwlfnpi8g.scala:12)\n\tat Problem.main(tmpwlfnpi8g.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val adverbs = List(\"quickly\", \"slowly\", \"elegantly\", \"noisily\")\n        val adverbPositions = adverbs.map(adverb => text.indexOf(adverb))\n        adverbPositions.find(_ != -1) match {\n            case Some(position) => Right(position)\n            case None => Left(\"No adverb found\")\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123495,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp0fkkiozb.scala:14)\n\tat Problem.main(tmp0fkkiozb.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val pattern = \"\"\"(\\w+ly)\"\"\".r\n        pattern.findFirstMatchIn(text) match {\n            case Some(m) => Right(m.start)\n            case None => Left(\"No adverb found\")\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1665510613,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpz8yp4w8r.scala:13)\n\tat Problem.main(tmpz8yp4w8r.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverbs found\")\n        else Right(words.indexOf(adverbs(0)))\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1665510613,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmphcrjgyfo.scala:12)\n\tat Problem.main(tmphcrjgyfo.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val words = text.split(\" \")\n        val adverbs = words.filter(x => x.endsWith(\"ly\"))\n        if (adverbs.length > 0) {\n            val adverb = adverbs(0)\n            val position = words.indexOf(adverb)\n            Right(position)\n        } else {\n            Left(\"No adverb found\")\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123495,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpj2tac9vn.scala:17)\n\tat Problem.main(tmpj2tac9vn.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val adverbs = List(\"quickly\", \"slowly\", \"eagerly\", \"happily\", \"sadly\", \"angrily\", \"lazily\", \"loudly\", \"quietly\", \"noisily\")\n        val words = text.split(\" \")\n        val adverbPositions = words.zipWithIndex.filter(x => adverbs.contains(x._1)).map(x => x._2)\n        if (adverbPositions.isEmpty)\n            Left(\"No adverb found\")\n        else\n            Right(adverbPositions.head)\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123496,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpyqjtvnuu.scala:15)\n\tat Problem.main(tmpyqjtvnuu.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val adverbs = List(\"quickly\", \"slowly\", \"elegantly\", \"lazily\", \"noisily\", \"excitedly\")\n        val words = text.split(\" \")\n        val adverb = words.find(adverbs.contains(_))\n        adverb match {\n            case Some(x) => Right(words.indexOf(x))\n            case None => Left(\"No adverb found\")\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123495,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpi8vb_t2w.scala:15)\n\tat Problem.main(tmpi8vb_t2w.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val adverbs = List(\"quickly\", \"slowly\", \"eagerly\", \"happily\", \"sadly\")\n        val words = text.split(\" \")\n        val adverb = words.find(adverbs.contains(_))\n        adverb match {\n            case Some(a) => Right(words.indexOf(a))\n            case None => Left(\"No adverb found\")\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123495,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpdvp0qhy2.scala:15)\n\tat Problem.main(tmpdvp0qhy2.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val adverbs = List(\"quickly\", \"slowly\", \"elegantly\", \"noisily\")\n        val adverbPosition = adverbs.map(adverb => text.indexOf(adverb)).filter(_ != -1)\n        if (adverbPosition.isEmpty) Left(\"No adverb found\")\n        else Right(adverbPosition.head)\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123495,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp0arb75cy.scala:12)\n\tat Problem.main(tmp0arb75cy.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val words = text.split(\" \")\n        val adverb = words.find(word => word.endsWith(\"ly\"))\n        adverb match {\n            case Some(adv) => Right(words.indexOf(adv))\n            case None => Left(\"No adverb found\")\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123495,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpkx5jq19c.scala:14)\n\tat Problem.main(tmpkx5jq19c.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty) {\n            Left(\"No adverbs found\")\n        } else {\n            val adverb = adverbs(0)\n            val position = words.indexOf(adverb)\n            Right(position)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123495,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp8inlcx0b.scala:17)\n\tat Problem.main(tmp8inlcx0b.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val pattern = \"\\\\w+ly\".r\n        pattern.findFirstMatchIn(text) match {\n            case Some(x) => Right(x.start)\n            case None => Left(\"No adverb found\")\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123495,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpdz4w9wlp.scala:13)\n\tat Problem.main(tmpdz4w9wlp.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val adverbs = List(\"quickly\", \"slowly\", \"elegantly\", \"noisily\")\n        val adverbPosition = text.split(\" \").zipWithIndex.filter(x => adverbs.contains(x._1)).map(x => x._2).headOption\n        adverbPosition match {\n            case Some(x) => Right(x)\n            case None => Left(\"No adverb found\")\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123496,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp2vnx1sxg.scala:14)\n\tat Problem.main(tmp2vnx1sxg.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty) {\n            Left(\"No adverbs found\")\n        } else {\n            val adverb = adverbs(0)\n            val index = words.indexOf(adverb)\n            Right(index)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123496,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp165idpuk.scala:17)\n\tat Problem.main(tmp165idpuk.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val adverbs = List(\"quickly\", \"slowly\", \"eagerly\", \"happily\", \"sadly\")\n        val words = text.split(\" \")\n        val index = words.indexWhere(adverbs.contains(_))\n        if (index == -1) Left(\"No adverb found\")\n        else Right(index)\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123495,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpl8c5_vqs.scala:13)\n\tat Problem.main(tmpl8c5_vqs.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val words = text.split(\" \")\n        val adverbs = words.filter(w => w.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverbs found\")\n        else Right(words.indexOf(adverbs(0)))\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123485,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp4s6roaip.scala:12)\n\tat Problem.main(tmp4s6roaip.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val words = text.split(\" \")\n        val adverbs = words.filter(_.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverbs found\")\n        else Right(words.indexOf(adverbs(0)))\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1665510613,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpw52xv9ew.scala:12)\n\tat Problem.main(tmpw52xv9ew.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val words = text.split(\" \")\n        val adverbs = words.filter(_.endsWith(\"ly\"))\n        if (adverbs.length == 0) Left(\"No adverbs found\")\n        else Right(words.indexOf(adverbs(0)))\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123495,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp2lto8ucs.scala:12)\n\tat Problem.main(tmp2lto8ucs.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val adverbs = List(\"quickly\", \"slowly\", \"eagerly\", \"happily\", \"sadly\", \"angrily\", \"lazily\", \"loudly\", \"quietly\", \"humbly\")\n        val words = text.split(\" \")\n        val adverbPositions = words.zipWithIndex.filter(x => adverbs.contains(x._1)).map(x => x._2)\n        if (adverbPositions.isEmpty) Left(\"No adverbs found\")\n        else Right(adverbPositions.head)\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123496,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp6npqz0yj.scala:13)\n\tat Problem.main(tmp6npqz0yj.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.length == 0) {\n            Left(\"No adverb found\")\n        } else {\n            val adverb = adverbs(0)\n            val index = words.indexOf(adverb)\n            Right(index)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123484,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp5i4qrwh0.scala:17)\n\tat Problem.main(tmp5i4qrwh0.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val adverbs = List(\"quickly\", \"slowly\", \"eagerly\", \"happily\", \"sadly\", \"angrily\")\n        val words = text.split(\" \")\n        val adverb = words.filter(adverbs.contains(_))\n        if (adverb.isEmpty) Left(\"No adverb found\")\n        else Right(words.indexOf(adverb.head))\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123496,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpyulxlgn6.scala:13)\n\tat Problem.main(tmpyulxlgn6.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val adverbs = List(\"quickly\", \"slowly\", \"elegantly\", \"lazily\")\n        val adverb = adverbs.find(text.contains(_))\n        adverb match {\n            case None => Left(\"No adverb found\")\n            case Some(x) => Right(text.indexOf(x))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123496,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpzkvwqxb7.scala:14)\n\tat Problem.main(tmpzkvwqxb7.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val pattern = \".*(ly|ally|like|wise).*\".r\n        val result = pattern.findFirstIn(text)\n        result match {\n            case Some(x) => Right(text.indexOf(x))\n            case None => Left(\"No adverb found\")\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123505,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp0sbb90xr.scala:14)\n\tat Problem.main(tmp0sbb90xr.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val words = text.split(\" \")\n        val adverbs = words.filter(w => w.endsWith(\"ly\"))\n        if (adverbs.length == 0) Left(\"No adverbs found\")\n        else Right(words.indexOf(adverbs(0)))\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123485,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp1opffnfj.scala:12)\n\tat Problem.main(tmp1opffnfj.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.length == 0) Left(\"No adverb found\")\n        else Right(words.indexOf(adverbs(0)))\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123484,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpkt6gck_0.scala:12)\n\tat Problem.main(tmpkt6gck_0.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val adverbs = List(\"quickly\", \"slowly\", \"elegantly\", \"noisily\", \"excitedly\")\n        val words = text.split(\" \")\n        val adverbPositions = words.zipWithIndex.filter(x => adverbs.contains(x._1)).map(x => x._2)\n        if (adverbPositions.isEmpty) Left(\"No adverbs found\")\n        else Right(adverbPositions.head)\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1665510613,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp3hpjw9sd.scala:13)\n\tat Problem.main(tmp3hpjw9sd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val pattern = \"\\\\w+ly\".r\n        pattern.findFirstMatchIn(text) match {\n            case Some(x) => Right(x.start)\n            case None => Left(\"No adverb found\")\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123495,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpdz4w9wlp.scala:13)\n\tat Problem.main(tmpdz4w9wlp.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val words = text.split(\" \")\n        val adverbs = words.filter(w => w.endsWith(\"ly\"))\n        if (adverbs.length == 0) Left(\"No adverbs found\")\n        else Right(words.indexOf(adverbs(0)))\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123485,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp1opffnfj.scala:12)\n\tat Problem.main(tmp1opffnfj.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val adverbs = List(\"quickly\", \"slowly\", \"eagerly\", \"happily\", \"sadly\", \"angrily\", \"foolishly\", \"carefully\")\n        val words = text.split(\" \")\n        val adverbPositions = words.zipWithIndex.filter(x => adverbs.contains(x._1)).map(x => x._2)\n        if (adverbPositions.isEmpty) Left(\"No adverbs found\") else Right(adverbPositions.head)\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123506,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpxp2u7f_e.scala:12)\n\tat Problem.main(tmpxp2u7f_e.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverb found\")\n        else Right(words.indexOf(adverbs.head))\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123505,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpwo5qtvg4.scala:12)\n\tat Problem.main(tmpwo5qtvg4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverbs found\")\n        else Right(words.indexOf(adverbs.head))\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123495,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpcehikod2.scala:12)\n\tat Problem.main(tmpcehikod2.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val adverbs = List(\"quickly\", \"slowly\", \"eagerly\", \"happily\", \"sadly\", \"angrily\", \"fearfully\", \"anxiously\", \"calmly\", \"carefully\", \"cautiously\", \"cheerfully\", \"clearly\", \"closely\", \"coolly\", \"curiously\", \"eagerly\", \"elegantly\", \"enormously\", \"evenly\", \"eventually\", \"exactly\", \"faithfully\", \"finally\", \"fondly\", \"foolishly\", \"fortunately\", \"frankly\", \"frantically\", \"frequently\", \"frightfully\", \"fully\", \"furiously\", \"generally\", \"generously\", \"gently\", \"gladly\", \"gracefully\", \"greedily\", \"happily\", \"hastily\", \"honestly\", \"hopelessly\", \"hourly\", \"hungrily\", \"innocently\", \"inquisitively\", \"irritably\", \"jealously\", \"justly\", \"kindly\", \"lazily\", \"loosely\", \"madly\", \"merrily\", \"mortally\", \"mysteriously\", \"naturally\", \"nervously\", \"never\", \"nicely\", \"noisily\", \"obediently\", \"obnoxiously\", \"occasionally\", \"often\", \"only\", \"openly\", \"painfully\", \"patiently\", \"perfectly\", \"politely\", \"poorly\", \"powerfully\", \"promptly\", \"quickly\", \"quietly\", \"rapidly\", \"rarely\", \"readily\", \"really\", \"reassuringly\", \"recklessly\", \"regularly\", \"reluctantly\", \"repeatedly\", \"reproachfully\", \"restlessly\", \"roughly\", \"rudely\", \"sadly\", \"safely\", \"seldom\", \"selfishly\", \"seriously\", \"shakily\", \"sharply\", \"sheepishly\", \"silently\", \"sleepily\", \"slowly\", \"smoothly\", \"softly\", \"solemnly\", \"solidly\", \"sometimes\", \"soon\", \"speedily\", \"stealthily\", \"sternly\", \"strictly\", \"strongly\", \"stupidly\", \"successfully\", \"suddenly\",\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123505,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp7ztj8efi.scala:7:4 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m    }\n\u001b[31m\u001b[31m  |\u001b[0m    ^\u001b[0m\n\u001b[31m  |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7ztj8efi.scala:7:5 ----------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m    }\n\u001b[31m\u001b[31m  |\u001b[0m     ^\u001b[0m\n\u001b[31m  |\u001b[0m     Found:    Unit\n\u001b[31m  |\u001b[0m     Required: Either[String, Long]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.length == 0) Left(\"No adverbs found\")\n        else Right(words.indexOf(adverbs(0)))\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1665510613,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp38j7q5_w.scala:12)\n\tat Problem.main(tmp38j7q5_w.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val words = text.split(\" \")\n        val adverbs = words.filter(x => x.endsWith(\"ly\"))\n        if (adverbs.length == 0) Left(\"No adverb found\")\n        else Right(words.indexOf(adverbs(0)))\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123505,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp6xi3rxr2.scala:12)\n\tat Problem.main(tmp6xi3rxr2.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val adverbs = List(\"quickly\", \"slowly\", \"elegantly\", \"lazily\", \"noisily\", \"excitedly\")\n        val words = text.split(\" \")\n        val adverb = words.find(adverbs.contains(_))\n        adverb match {\n            case Some(a) => Right(words.indexOf(a))\n            case None => Left(\"No adverb found\")\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123506,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmphfjf880b.scala:15)\n\tat Problem.main(tmphfjf880b.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverb found\")\n        else Right(words.indexOf(adverbs(0)))\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1665510613,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp7egillsd.scala:12)\n\tat Problem.main(tmp7egillsd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val adverbs = List(\"quickly\", \"slowly\", \"elegantly\", \"noisily\")\n        val adverbPositions = adverbs.map(adverb => text.indexOf(adverb))\n        val adverbPosition = adverbPositions.filter(position => position != -1).head\n        if (adverbPosition == -1) Left(\"No adverb found\")\n        else Right(adverbPosition)\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123506,
      "stdout": "",
      "stderr": "java.util.NoSuchElementException: head of empty list\n\tat scala.collection.immutable.Nil$.head(List.scala:662)\n\tat scala.collection.immutable.Nil$.head(List.scala:661)\n\tat Problem$.findAdverbPosition(tmp6y2a2lq9.scala:8)\n\tat Problem$.main(tmp6y2a2lq9.scala:13)\n\tat Problem.main(tmp6y2a2lq9.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.length > 0) Right(words.indexOf(adverbs(0)))\n        else Left(\"No adverb found\")\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123495,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpwlfnpi8g.scala:12)\n\tat Problem.main(tmpwlfnpi8g.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.length == 0) Left(\"No adverbs found\")\n        else Right(words.indexOf(adverbs(0)))\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1665510613,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp38j7q5_w.scala:12)\n\tat Problem.main(tmp38j7q5_w.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverb found\")\n        else Right(words.indexOf(adverbs(0)))\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1665510613,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp7egillsd.scala:12)\n\tat Problem.main(tmp7egillsd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.length > 0) {\n            val adverb = adverbs(0)\n            val index = words.indexOf(adverb)\n            Right(index)\n        } else {\n            Left(\"No adverb found\")\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123485,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp46_7fpvs.scala:17)\n\tat Problem.main(tmp46_7fpvs.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val adverbs = List(\"quickly\", \"slowly\", \"eagerly\", \"happily\")\n        val words = text.split(\" \")\n        val adverbPositions = words.zipWithIndex.filter(x => adverbs.contains(x._1))\n        if (adverbPositions.isEmpty) Left(\"No adverbs found\")\n        else Right(adverbPositions.head._2)\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123506,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpsv7ivohn.scala:13)\n\tat Problem.main(tmpsv7ivohn.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val words = text.split(\" \")\n        val adverbs = words.filter(w => w.endsWith(\"ly\"))\n        if (adverbs.length > 0)\n            Right(words.indexOf(adverbs(0)))\n        else\n            Left(\"No adverb found\")\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123506,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpsuto4zbt.scala:14)\n\tat Problem.main(tmpsuto4zbt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.length > 0) {\n            val adverb = adverbs(0)\n            val index = words.indexOf(adverb)\n            return Right(index)\n        }\n        Left(\"No adverb found\")\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123506,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpjou2zdgg.scala:16)\n\tat Problem.main(tmpjou2zdgg.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val adverbs = List(\"quickly\", \"slowly\", \"quietly\", \"loudly\", \"happily\", \"sadly\")\n        val words = text.split(\" \")\n        val index = words.indexWhere(adverbs.contains(_))\n        if (index == -1) Left(\"No adverb found\") else Right(index)\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123506,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmppnubwv6s.scala:12)\n\tat Problem.main(tmppnubwv6s.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.length == 0) {\n            Left(\"No adverbs found\")\n        } else {\n            val adverb = adverbs(0)\n            val index = words.indexOf(adverb)\n            Right(index)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123506,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp638ls6en.scala:17)\n\tat Problem.main(tmp638ls6en.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val adverbs = List(\"quickly\", \"slowly\", \"eagerly\", \"happily\", \"sadly\", \"angrily\", \"carefully\", \"lazily\", \"loudly\", \"quietly\")\n        val textArray = text.split(\" \")\n        val adverbPosition = textArray.zipWithIndex.filter(x => adverbs.contains(x._1)).headOption\n        adverbPosition match {\n            case Some(x) => Right(x._2)\n            case None => Left(\"No adverb found\")\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123506,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp5qocceye.scala:15)\n\tat Problem.main(tmp5qocceye.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty) {\n            Left(\"No adverbs found\")\n        } else {\n            val adverb = adverbs.head\n            val index = words.indexOf(adverb)\n            Right(index)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123506,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp4a3g_mbw.scala:17)\n\tat Problem.main(tmp4a3g_mbw.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val words = text.split(\" \")\n        val adverbs = words.filter(_.endsWith(\"ly\"))\n        if (adverbs.length == 0) {\n            Left(\"No adverbs found\")\n        } else {\n            val adverb = adverbs(0)\n            val position = words.indexOf(adverb)\n            Right(position)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123506,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpybbxgi0c.scala:17)\n\tat Problem.main(tmpybbxgi0c.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val words = text.split(\" \")\n        val adverbs = words.filter(x => x.endsWith(\"ly\"))\n        if (adverbs.length == 0)\n            Left(\"No adverb found\")\n        else\n            Right(words.indexOf(adverbs(0)))\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123506,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpr0o0lgj1.scala:14)\n\tat Problem.main(tmpr0o0lgj1.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val adverbs = List(\"quickly\", \"slowly\", \"eagerly\", \"happily\", \"sadly\", \"angrily\", \"fearfully\", \"anxiously\")\n        val words = text.split(\" \")\n        val adverbPositions = words.zipWithIndex.filter(word => adverbs.contains(word._1)).map(word => word._2)\n        if (adverbPositions.isEmpty) Left(\"No adverbs found\") else Right(adverbPositions.head)\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123506,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpj24ufue0.scala:12)\n\tat Problem.main(tmpj24ufue0.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.length == 0)\n            Left(\"No adverb found\")\n        else\n            Right(words.indexOf(adverbs(0)))\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123506,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpp9x457e4.scala:14)\n\tat Problem.main(tmpp9x457e4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val words = text.split(\" \")\n        val adverbs = words.filter(x => x.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverb found\")\n        else Right(words.indexOf(adverbs(0)))\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123506,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpy8oxwzft.scala:12)\n\tat Problem.main(tmpy8oxwzft.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty) {\n            Left(\"No adverbs found\")\n        } else {\n            val adverb = adverbs(0)\n            val position = words.indexOf(adverb)\n            Right(position)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123495,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp8inlcx0b.scala:17)\n\tat Problem.main(tmp8inlcx0b.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverbs found\")\n        else Right(words.indexOf(adverbs(0)))\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1665510613,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmphcrjgyfo.scala:12)\n\tat Problem.main(tmphcrjgyfo.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val words = text.split(\" \")\n        val adverbs = words.filter(w => w.endsWith(\"ly\"))\n        if (adverbs.length == 0) Left(\"No adverb found\")\n        else Right(words.indexOf(adverbs(0)))\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123506,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpvxcq1o94.scala:12)\n\tat Problem.main(tmpvxcq1o94.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverbs found\")\n        else Right(words.indexOf(adverbs.head))\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123495,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpcehikod2.scala:12)\n\tat Problem.main(tmpcehikod2.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val words = text.split(\" \")\n        val adverbs = words.filter(x => x.endsWith(\"ly\"))\n        if (adverbs.length == 0) Left(\"No adverbs found\")\n        else Right(words.indexOf(adverbs(0)))\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123506,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpnsu27aio.scala:12)\n\tat Problem.main(tmpnsu27aio.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val adverbs = text.split(\" \").filter(x => x.endsWith(\"ly\"))\n        if (adverbs.length == 0) Left(\"No adverbs found\")\n        else Right(text.indexOf(adverbs(0)))\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1665510613,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpb50zqzsj.scala:11)\n\tat Problem.main(tmpb50zqzsj.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val adverbs = List(\"quickly\", \"slowly\", \"elegantly\", \"noisily\", \"excitedly\")\n        val words = text.split(\" \")\n        val adverbPosition = words.zipWithIndex.filter(x => adverbs.contains(x._1)).map(_._2)\n        if (adverbPosition.isEmpty) Left(\"No adverbs found\")\n        else Right(adverbPosition.head)\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123507,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp8j8_w1pl.scala:13)\n\tat Problem.main(tmp8j8_w1pl.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverbs found\")\n        else Right(words.indexOf(adverbs(0)))\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1665510613,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmphcrjgyfo.scala:12)\n\tat Problem.main(tmphcrjgyfo.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val adverbs = List(\"quickly\", \"slowly\", \"elegantly\", \"noisily\", \"excitedly\")\n        val words = text.split(\" \")\n        val adverbIndex = words.indexWhere(adverbs.contains(_))\n        if (adverbIndex == -1) Left(\"No adverb found\")\n        else Right(adverbIndex)\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123507,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpy7daxoxw.scala:13)\n\tat Problem.main(tmpy7daxoxw.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.length == 0) {\n            Left(\"No adverbs found\")\n        } else {\n            val adverb = adverbs(0)\n            val position = words.indexOf(adverb)\n            Right(position)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123515,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmps2oivwbe.scala:17)\n\tat Problem.main(tmps2oivwbe.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val words = text.split(\" \")\n        val adverbs = words.filter(w => w.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverb found\")\n        else Right(words.indexOf(adverbs(0)))\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123516,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp1qwm5vuo.scala:12)\n\tat Problem.main(tmp1qwm5vuo.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val words = text.split(\" \")\n        val adverbs = words.filter(_.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverb found\")\n        else Right(words.indexOf(adverbs(0)))\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123515,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmplq957xzq.scala:12)\n\tat Problem.main(tmplq957xzq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val adverbs = text.split(\" \").filter(x => x.endsWith(\"ly\"))\n        if (adverbs.length == 0) Left(\"No adverbs found\")\n        else Right(text.indexOf(adverbs(0)))\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1665510613,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpb50zqzsj.scala:11)\n\tat Problem.main(tmpb50zqzsj.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val pattern = \"\"\"(\\w+ly)\"\"\".r\n        val result = pattern.findFirstMatchIn(text)\n        if (result.isEmpty) Left(\"No adverb found\")\n        else Right(result.get.start)\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123516,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpt3oe5cik.scala:12)\n\tat Problem.main(tmpt3oe5cik.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val adverbs = List(\"quickly\", \"slowly\", \"elegantly\", \"noisily\", \"excitedly\")\n        val words = text.split(\" \")\n        val adverbPositions = words.zipWithIndex.filter(word => adverbs.contains(word._1))\n        if (adverbPositions.isEmpty) Left(\"No adverbs found\")\n        else Right(adverbPositions.head._2)\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123517,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp27h6j_rt.scala:13)\n\tat Problem.main(tmp27h6j_rt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty) {\n            Left(\"No adverbs found\")\n        } else {\n            Right(words.indexOf(adverbs.head))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123516,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmptkv0mc_e.scala:15)\n\tat Problem.main(tmptkv0mc_e.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val adverbs = Array(\"quickly\", \"slowly\", \"elegantly\", \"noisily\", \"excitedly\")\n        val adverbPositions = adverbs.map(adverb => text.indexOf(adverb))\n        val adverbPosition = adverbPositions.filter(position => position != -1)(0)\n        if (adverbPosition == -1) Left(\"No adverb found\")\n        else Right(adverbPosition)\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123516,
      "stdout": "",
      "stderr": "java.lang.ArrayIndexOutOfBoundsException: Index 0 out of bounds for length 0\n\tat Problem$.findAdverbPosition(tmpo5goa9lj.scala:8)\n\tat Problem$.main(tmpo5goa9lj.scala:13)\n\tat Problem.main(tmpo5goa9lj.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverbs found\")\n        else Right(words.indexOf(adverbs(0)))\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1665510613,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmphcrjgyfo.scala:12)\n\tat Problem.main(tmphcrjgyfo.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val adverbs = List(\"quickly\", \"slowly\", \"elegantly\", \"noisily\", \"excitedly\")\n        val words = text.split(\" \")\n        val adverb = words.filter(adverbs.contains(_))\n        if (adverb.isEmpty) Left(\"No adverb found\")\n        else Right(words.indexOf(adverb.head))\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123517,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp287io5fo.scala:13)\n\tat Problem.main(tmp287io5fo.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val adverbs = List(\"quickly\", \"slowly\", \"eagerly\", \"happily\", \"sadly\", \"angrily\")\n        val words = text.split(\" \")\n        val index = words.indexWhere(adverbs.contains(_))\n        if (index == -1) Left(\"No adverb found\")\n        else Right(index)\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1665510613,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpe3ei5a1f.scala:13)\n\tat Problem.main(tmpe3ei5a1f.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val adverbs = List(\"quickly\", \"slowly\", \"elegantly\", \"noisily\", \"excitedly\")\n        val adverbPosition = text.split(\" \").zipWithIndex.filter(x => adverbs.contains(x._1)).map(x => x._2).headOption\n        adverbPosition match {\n            case Some(x) => Right(x)\n            case None => Left(\"No adverb found\")\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123517,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpcfnuo2pa.scala:14)\n\tat Problem.main(tmpcfnuo2pa.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val adverbs = List(\"quickly\", \"slowly\", \"elegantly\", \"lazily\")\n        val words = text.split(\" \")\n        val adverb = words.find(adverbs.contains(_))\n        adverb match {\n            case Some(adverb) => Right(words.indexOf(adverb))\n            case None => Left(\"No adverb found\")\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123517,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpr3xt6khg.scala:15)\n\tat Problem.main(tmpr3xt6khg.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val adverbs = List(\"quickly\", \"slowly\", \"elegantly\", \"noisily\")\n        val words = text.split(\" \")\n        val positions = words.zipWithIndex.filter(x => adverbs.contains(x._1)).map(_._2)\n        if (positions.isEmpty) Left(\"No adverbs found\")\n        else Right(positions.head)\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123517,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpq8f360zv.scala:13)\n\tat Problem.main(tmpq8f360zv.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverbs found\")\n        else Right(words.indexOf(adverbs.head))\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123495,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpcehikod2.scala:12)\n\tat Problem.main(tmpcehikod2.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val words = text.split(\" \")\n        val adverbs = words.filter(x => x.endsWith(\"ly\"))\n        if (adverbs.length == 0) Left(\"No adverbs found\")\n        else Right(words.indexOf(adverbs(0)))\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123506,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpnsu27aio.scala:12)\n\tat Problem.main(tmpnsu27aio.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val words = text.split(\" \")\n        val adverbs = words.zipWithIndex.filter(x => x._1.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverb found\")\n        else Right(adverbs.head._2)\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123517,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpjeq0r5c7.scala:12)\n\tat Problem.main(tmpjeq0r5c7.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverbs found\")\n        else Right(words.indexOf(adverbs(0)))\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1665510613,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmphcrjgyfo.scala:12)\n\tat Problem.main(tmphcrjgyfo.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.length == 0) Left(\"No adverbs found\")\n        else Right(words.indexOf(adverbs(0)))\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1665510613,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp38j7q5_w.scala:12)\n\tat Problem.main(tmp38j7q5_w.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val adverbs = List(\"quickly\", \"slowly\", \"elegantly\", \"noisily\", \"excitedly\")\n        val words = text.split(\" \")\n        for (i <- 0 until words.length) {\n            if (adverbs.contains(words(i))) {\n                return Right(i)\n            }\n        }\n        Left(\"No adverbs found\")\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123517,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmptak1f4xw.scala:16)\n\tat Problem.main(tmptak1f4xw.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.length == 0) Left(\"No adverbs found\")\n        else Right(words.indexOf(adverbs(0)))\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1665510613,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp38j7q5_w.scala:12)\n\tat Problem.main(tmp38j7q5_w.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val adverbs = List(\"quickly\", \"slowly\", \"elegantly\", \"noisily\", \"excitedly\")\n        val adverbPosition = text.split(\" \").zipWithIndex.filter(x => adverbs.contains(x._1)).map(x => x._2).headOption\n        adverbPosition match {\n            case Some(x) => Right(x)\n            case None => Left(\"No adverb found\")\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123517,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpcfnuo2pa.scala:14)\n\tat Problem.main(tmpcfnuo2pa.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val adverbs = List(\"quickly\", \"slowly\", \"elegantly\", \"noisily\")\n        val words = text.split(\" \")\n        val adverbPositions = words.zipWithIndex.filter(x => adverbs.contains(x._1))\n        if (adverbPositions.isEmpty) Left(\"No adverbs found\")\n        else Right(adverbPositions.head._2)\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123517,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpwq9hoong.scala:13)\n\tat Problem.main(tmpwq9hoong.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val adverbs = List(\"quickly\", \"slowly\", \"elegantly\", \"noisily\")\n        val words = text.split(\" \")\n        val positions = words.zipWithIndex.filter(x => adverbs.contains(x._1))\n        if (positions.isEmpty) Left(\"No adverbs found\")\n        else Right(positions.head._2)\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123517,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpff1_340t.scala:13)\n\tat Problem.main(tmpff1_340t.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val adverbs = List(\"quickly\", \"slowly\", \"elegantly\", \"noisily\")\n        val words = text.split(\" \")\n        val adverbIndex = words.zipWithIndex.filter(x => adverbs.contains(x._1)).map(x => x._2)\n        if (adverbIndex.isEmpty) Left(\"No adverb found\")\n        else Right(adverbIndex.head)\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123517,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp0u9d96ka.scala:13)\n\tat Problem.main(tmp0u9d96ka.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val adverbs = List(\"quickly\", \"slowly\", \"eagerly\", \"happily\", \"sadly\")\n        val words = text.split(\" \")\n        val adverbPositions = words.zipWithIndex.filter(x => adverbs.contains(x._1)).map(_._2)\n        if (adverbPositions.isEmpty) Left(\"No adverbs found\")\n        else Right(adverbPositions.head)\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123517,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpwyscjcmo.scala:13)\n\tat Problem.main(tmpwyscjcmo.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val adverbs = Map(\"quickly\" -> 1, \"slowly\" -> 2, \"eagerly\" -> 3)\n        val words = text.split(\" \")\n        val adverb = words.filter(adverbs.contains(_))\n        if (adverb.length == 0) {\n            Left(\"No adverb found\")\n        } else {\n            Right(adverbs(adverb(0)))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123517,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpk1qjap8g.scala:16)\n\tat Problem.main(tmpk1qjap8g.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.length == 0) Left(\"No adverbs found\")\n        else Right(words.indexOf(adverbs(0)))\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1665510613,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp38j7q5_w.scala:12)\n\tat Problem.main(tmp38j7q5_w.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverb found\")\n        else Right(words.indexOf(adverbs(0)))\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1665510613,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp7egillsd.scala:12)\n\tat Problem.main(tmp7egillsd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverb found\")\n        else Right(words.indexOf(adverbs(0)))\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1665510613,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp7egillsd.scala:12)\n\tat Problem.main(tmp7egillsd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.length > 0) {\n            val adverb = adverbs(0)\n            val index = words.indexOf(adverb)\n            Right(index)\n        } else {\n            Left(\"No adverb found\")\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123485,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp46_7fpvs.scala:17)\n\tat Problem.main(tmp46_7fpvs.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverbs found\")\n        else Right(words.indexOf(adverbs(0)))\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1665510613,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmphcrjgyfo.scala:12)\n\tat Problem.main(tmphcrjgyfo.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val adverbs = List(\"quickly\", \"slowly\", \"elegantly\", \"lazily\", \"noisily\")\n        val words = text.split(\" \")\n        for (i <- 0 until words.length) {\n            if (adverbs.contains(words(i))) {\n                return Right(i)\n            }\n        }\n        Left(\"No adverb found\")\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123517,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpac2palv6.scala:16)\n\tat Problem.main(tmpac2palv6.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val adverbs = List(\"quickly\", \"slowly\", \"carefully\", \"happily\", \"sadly\")\n        val words = text.split(\" \")\n        val adverbPosition = words.zipWithIndex.filter(x => adverbs.contains(x._1)).map(_._2)\n        if (adverbPosition.isEmpty) Left(\"No adverb found\")\n        else Right(adverbPosition.head)\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123517,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpta5n_7eg.scala:13)\n\tat Problem.main(tmpta5n_7eg.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val words = text.split(\" \")\n        val adverbs = words.filter(x => x.endsWith(\"ly\"))\n        if (adverbs.length == 0) Left(\"No adverbs found\")\n        else Right(words.indexOf(adverbs(0)))\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123506,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpnsu27aio.scala:12)\n\tat Problem.main(tmpnsu27aio.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverbs found\")\n        else Right(words.indexOf(adverbs(0)))\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1665510613,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmphcrjgyfo.scala:12)\n\tat Problem.main(tmphcrjgyfo.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val words = text.split(\" \")\n        val adverbs = words.filter(w => w.endsWith(\"ly\"))\n        if (adverbs.length == 0) Left(\"No adverbs found\")\n        else Right(words.indexOf(adverbs(0)))\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123485,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp1opffnfj.scala:12)\n\tat Problem.main(tmp1opffnfj.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverbs found\")\n        else Right(words.indexOf(adverbs(0)))\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1665510613,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmphcrjgyfo.scala:12)\n\tat Problem.main(tmphcrjgyfo.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverbs found\")\n        else Right(words.indexOf(adverbs(0)))\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1665510613,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmphcrjgyfo.scala:12)\n\tat Problem.main(tmphcrjgyfo.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverb found\")\n        else Right(words.indexOf(adverbs(0)))\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1665510613,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp7egillsd.scala:12)\n\tat Problem.main(tmp7egillsd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val adverbs = List(\"quickly\", \"slowly\", \"eagerly\", \"happily\", \"sadly\", \"angrily\", \"carefully\", \"lazily\", \"sleepily\", \"noisily\", \"hungrily\", \"thirstily\", \"cheerfully\", \"loudly\", \"quietly\", \"merrily\", \"bravely\", \"foolishly\", \"slyly\", \"bashfully\", \"greedily\", \"jealously\", \"anxiously\", \"nervously\", \"hastily\", \"loudly\", \"quietly\", \"merrily\", \"bravely\", \"foolishly\", \"slyly\", \"bashfully\", \"greedily\", \"jealously\", \"anxiously\", \"nervously\", \"hastily\")\n        val words = text.split(\" \")\n        val adverbPositions = words.zipWithIndex.filter(x => adverbs.contains(x._1)).map(x => x._2)\n        if (adverbPositions.isEmpty) Left(\"No adverbs found\")\n        else Right(adverbPositions.head)\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123517,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpf5w2hdfh.scala:13)\n\tat Problem.main(tmpf5w2hdfh.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val adverbs = List(\"quickly\", \"slowly\", \"eagerly\", \"happily\", \"sadly\")\n        val words = text.split(\" \")\n        val adverbPosition = words.zipWithIndex.filter(x => adverbs.contains(x._1)).headOption\n        if (adverbPosition.isEmpty) Left(\"No adverb found\")\n        else Right(adverbPosition.get._2)\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123518,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp_aqeay2f.scala:13)\n\tat Problem.main(tmp_aqeay2f.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val words = text.split(\" \")\n        val adverbs = words.filter(w => w.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverb found\")\n        else Right(words.indexOf(adverbs(0)))\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123516,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp1qwm5vuo.scala:12)\n\tat Problem.main(tmp1qwm5vuo.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val adverbs = List(\"quickly\", \"slowly\", \"eagerly\", \"happily\", \"sadly\", \"angrily\", \"fearfully\", \"joyfully\", \"calmly\", \"passionately\")\n        val words = text.split(\" \")\n        val index = words.indexWhere(adverbs.contains(_))\n        if (index == -1) Left(\"No adverb found\")\n        else Right(index)\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123518,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpe9_hp2b5.scala:13)\n\tat Problem.main(tmpe9_hp2b5.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty) {\n            Left(\"No adverbs found\")\n        } else {\n            val adverb = adverbs(0)\n            val index = words.indexOf(adverb)\n            Right(index)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123496,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp165idpuk.scala:17)\n\tat Problem.main(tmp165idpuk.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val words = text.split(\" \")\n        val adverbs = words.filter(w => w.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverbs found\")\n        else Right(words.indexOf(adverbs(0)))\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123485,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp4s6roaip.scala:12)\n\tat Problem.main(tmp4s6roaip.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val adverbs = List(\"quickly\", \"slowly\", \"eagerly\", \"happily\", \"sadly\", \"angrily\", \"fearfully\", \"anxiously\", \"calmly\", \"carefully\", \"cautiously\", \"cheerfully\", \"eagerly\", \"elegantly\", \"frantically\", \"gracefully\", \"happily\", \"hastily\", \"jovially\", \"joyfully\", \"lazily\", \"loudly\", \"merrily\", \"mysteriously\", \"noisily\", \"obediently\", \"patiently\", \"politely\", \"powerfully\", \"quietly\", \"rapidly\", \"sharply\", \"silently\", \"sleepily\", \"slowly\", \"softly\", \"swiftly\", \"tenderly\", \"vivaciously\", \"warmly\", \"weakly\", \"wearily\", \"wildly\", \"worriedly\", \"zealously\")\n        val words = text.split(\" \")\n        for (i <- 0 until words.length) {\n            if (adverbs.contains(words(i))) {\n                return Right(i)\n            }\n        }\n        Left(\"No adverb found\")\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123524,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpq9t9p_v8.scala:16)\n\tat Problem.main(tmpq9t9p_v8.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty) {\n            Left(\"No adverb found\")\n        } else {\n            val adverb = adverbs(0)\n            val position = words.indexOf(adverb)\n            Right(position)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpko82jvi3.scala:17)\n\tat Problem.main(tmpko82jvi3.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val words = text.split(\" \")\n        val adverb = words.filter(word => word.endsWith(\"ly\"))\n        if (adverb.isEmpty) Left(\"No adverb found\")\n        else Right(words.indexOf(adverb(0)))\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123484,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp507b_a1z.scala:12)\n\tat Problem.main(tmp507b_a1z.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty) {\n            Left(\"No adverbs found\")\n        } else {\n            val adverb = adverbs(0)\n            val position = words.indexOf(adverb)\n            Right(position)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123495,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp8inlcx0b.scala:17)\n\tat Problem.main(tmp8inlcx0b.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.length == 0) {\n            Left(\"No adverb found\")\n        } else {\n            val adverb = adverbs(0)\n            val adverbPosition = words.indexOf(adverb)\n            Right(adverbPosition)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp730wgt8t.scala:17)\n\tat Problem.main(tmp730wgt8t.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val adverbs = text.split(\" \").filter(x => x.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverb found\")\n        else Right(text.split(\" \").indexOf(adverbs(0)))\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp9q89q43m.scala:11)\n\tat Problem.main(tmp9q89q43m.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val words = text.split(\" \")\n        val adverb = words.filter(word => word.endsWith(\"ly\"))\n        if (adverb.length == 0) Left(\"No adverb found\")\n        else Right(words.indexOf(adverb(0)))\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1665510613,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpiy0iv635.scala:12)\n\tat Problem.main(tmpiy0iv635.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val adverbs = Array(\"quickly\", \"slowly\", \"carefully\", \"hastily\", \"loudly\", \"quietly\", \"happily\", \"sadly\", \"angrily\", \"merrily\", \"joyfully\", \"jovially\", \"cheerfully\", \"playfully\", \"cautiously\", \"warily\", \"boldly\", \"bravely\", \"fearlessly\", \"courageously\", \"recklessly\", \"foolishly\", \"carelessly\", \"thoughtlessly\", \"gracefully\", \"graciously\", \"elegantly\", \"smoothly\", \"clumsily\", \"awkwardly\", \"clumsily\", \"awkwardly\", \"clumsily\", \"awkwardly\", \"clumsily\", \"awkwardly\", \"clumsily\", \"awkwardly\", \"clumsily\", \"awkwardly\", \"clumsily\", \"awkwardly\", \"clumsily\", \"awkwardly\", \"clumsily\", \"awkwardly\", \"clumsily\", \"awkwardly\", \"clumsily\", \"awkwardly\", \"clumsily\", \"awkwardly\", \"clumsily\", \"awkwardly\", \"clumsily\", \"awkwardly\", \"clumsily\", \"awkwardly\", \"clumsily\", \"awkwardly\", \"clumsily\", \"awkwardly\", \"clumsily\", \"awkwardly\", \"clumsily\", \"awkwardly\", \"clumsily\", \"awkwardly\", \"clumsily\", \"awkwardly\", \"clumsily\", \"awkwardly\", \"clumsily\", \"awkwardly\", \"clumsily\", \"awkwardly\", \"clumsily\", \"awkwardly\", \"clumsily\", \"awkwardly\", \"clumsily\", \"awkwardly\", \"clumsily\", \"awkwardly\", \"clumsily\", \"awkwardly\", \"clumsily\", \"awkwardly\", \"clumsily\", \"awkwardly\", \"clumsily\", \"awkwardly\", \"clumsily\", \"awkwardly\", \"clumsily\", \"awkwardly\", \"clumsily\", \"awkwardly\", \"clumsily\", \"awkwardly\", \"clumsily\", \"awkwardly\", \"clumsily\", \"awkwardly\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123524,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp74c136g8.scala:6:1310 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36madverbs\u001b[0m = Array(\u001b[31m\"quickly\"\u001b[0m, \u001b[31m\"slowly\"\u001b[0m, \u001b[31m\"carefully\"\u001b[0m, \u001b[31m\"hastily\"\u001b[0m, \u001b[31m\"loudly\"\u001b[0m, \u001b[31m\"quietly\"\u001b[0m, \u001b[31m\"happily\"\u001b[0m, \u001b[31m\"sadly\"\u001b[0m, \u001b[31m\"angrily\"\u001b[0m, \u001b[31m\"merrily\"\u001b[0m, \u001b[31m\"joyfully\"\u001b[0m, \u001b[31m\"jovially\"\u001b[0m, \u001b[31m\"cheerfully\"\u001b[0m, \u001b[31m\"playfully\"\u001b[0m, \u001b[31m\"cautiously\"\u001b[0m, \u001b[31m\"warily\"\u001b[0m, \u001b[31m\"boldly\"\u001b[0m, \u001b[31m\"bravely\"\u001b[0m, \u001b[31m\"fearlessly\"\u001b[0m, \u001b[31m\"courageously\"\u001b[0m, \u001b[31m\"recklessly\"\u001b[0m, \u001b[31m\"foolishly\"\u001b[0m, \u001b[31m\"carelessly\"\u001b[0m, \u001b[31m\"thoughtlessly\"\u001b[0m, \u001b[31m\"gracefully\"\u001b[0m, \u001b[31m\"graciously\"\u001b[0m, \u001b[31m\"elegantly\"\u001b[0m, \u001b[31m\"smoothly\"\u001b[0m, \u001b[31m\"clumsily\"\u001b[0m, \u001b[31m\"awkwardly\"\u001b[0m, \u001b[31m\"clumsily\"\u001b[0m, \u001b[31m\"awkwardly\"\u001b[0m, \u001b[31m\"clumsily\"\u001b[0m, \u001b[31m\"awkwardly\"\u001b[0m, \u001b[31m\"clumsily\"\u001b[0m, \u001b[31m\"awkwardly\"\u001b[0m, \u001b[31m\"clumsily\"\u001b[0m, \u001b[31m\"awkwardly\"\u001b[0m, \u001b[31m\"clumsily\"\u001b[0m, \u001b[31m\"awkwardly\"\u001b[0m, \u001b[31m\"clumsily\"\u001b[0m, \u001b[31m\"awkwardly\"\u001b[0m, \u001b[31m\"clumsily\"\u001b[0m, \u001b[31m\"awkwardly\"\u001b[0m, \u001b[31m\"clumsily\"\u001b[0m, \u001b[31m\"awkwardly\"\u001b[0m, \u001b[31m\"clumsily\"\u001b[0m, \u001b[31m\"awkwardly\"\u001b[0m, \u001b[31m\"clumsily\"\u001b[0m, \u001b[31m\"awkwardly\"\u001b[0m, \u001b[31m\"clumsily\"\u001b[0m, \u001b[31m\"awkwardly\"\u001b[0m, \u001b[31m\"clumsily\"\u001b[0m, \u001b[31m\"awkwardly\"\u001b[0m, \u001b[31m\"clumsily\"\u001b[0m, \u001b[31m\"awkwardly\"\u001b[0m, \u001b[31m\"clumsily\"\u001b[0m, \u001b[31m\"awkwardly\"\u001b[0m, \u001b[31m\"clumsily\"\u001b[0m, \u001b[31m\"awkwardly\"\u001b[0m, \u001b[31m\"clumsily\"\u001b[0m, \u001b[31m\"awkwardly\"\u001b[0m, \u001b[31m\"clumsily\"\u001b[0m, \u001b[31m\"awkwardly\"\u001b[0m, \u001b[31m\"clumsily\"\u001b[0m, \u001b[31m\"awkwardly\"\u001b[0m, \u001b[31m\"clumsily\"\u001b[0m, \u001b[31m\"awkwardly\"\u001b[0m, \u001b[31m\"clumsily\"\u001b[0m, \u001b[31m\"awkwardly\"\u001b[0m, \u001b[31m\"clumsily\"\u001b[0m, \u001b[31m\"awkwardly\"\u001b[0m, \u001b[31m\"clumsily\"\u001b[0m, \u001b[31m\"awkwardly\"\u001b[0m, \u001b[31m\"clumsily\"\u001b[0m, \u001b[31m\"awkwardly\"\u001b[0m, \u001b[31m\"clumsily\"\u001b[0m, \u001b[31m\"awkwardly\"\u001b[0m, \u001b[31m\"clumsily\"\u001b[0m, \u001b[31m\"awkwardly\"\u001b[0m, \u001b[31m\"clumsily\"\u001b[0m, \u001b[31m\"awkwardly\"\u001b[0m, \u001b[31m\"clumsily\"\u001b[0m, \u001b[31m\"awkwardly\"\u001b[0m, \u001b[31m\"clumsily\"\u001b[0m, \u001b[31m\"awkwardly\"\u001b[0m, \u001b[31m\"clumsily\"\u001b[0m, \u001b[31m\"awkwardly\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.length > 0) {\n            val adverb = adverbs(0)\n            val index = words.indexOf(adverb)\n            Right(index)\n        } else {\n            Left(\"No adverb found\")\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123485,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp46_7fpvs.scala:17)\n\tat Problem.main(tmp46_7fpvs.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val words = text.split(\" \")\n        val adverbs = words.filter(_.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverb found\")\n        else Right(words.indexOf(adverbs(0)))\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123515,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmplq957xzq.scala:12)\n\tat Problem.main(tmplq957xzq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val adverbs = List(\"quickly\", \"slowly\", \"eagerly\", \"happily\", \"sadly\", \"angrily\", \"fearfully\", \"anxiously\")\n        val words = text.split(\" \")\n        val result = words.zipWithIndex.filter(x => adverbs.contains(x._1))\n        if (result.length == 0) Left(\"No adverbs found\")\n        else Right(result(0)._2)\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123526,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpaofv4ecz.scala:13)\n\tat Problem.main(tmpaofv4ecz.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val pattern = \"\\\\w+ly\".r\n        pattern.findFirstMatchIn(text) match {\n            case Some(x) => Right(x.start)\n            case None => Left(\"No adverb found\")\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123495,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpdz4w9wlp.scala:13)\n\tat Problem.main(tmpdz4w9wlp.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val adverbs = text.split(\" \").filter(x => x.endsWith(\"ly\"))\n        if (adverbs.length == 0) Left(\"No adverb found\")\n        else Right(text.indexOf(adverbs(0)))\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123526,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpptx3uqzi.scala:11)\n\tat Problem.main(tmpptx3uqzi.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val adverbs = List(\"quickly\", \"slowly\", \"elegantly\", \"lazily\", \"noisily\")\n        val words = text.split(\" \")\n        for (i <- 0 until words.length) {\n            if (adverbs.contains(words(i))) {\n                return Right(i)\n            }\n        }\n        Left(\"No adverb found\")\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123517,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpac2palv6.scala:16)\n\tat Problem.main(tmpac2palv6.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val adverbs = List(\"quickly\", \"slowly\", \"elegantly\", \"noisily\", \"excitedly\")\n        val positions = adverbs.map(text.indexOf(_))\n        val firstAdverb = positions.filter(_ != -1).min\n        if (firstAdverb == -1) Left(\"No adverb found\")\n        else Right(firstAdverb)\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123526,
      "stdout": "",
      "stderr": "java.lang.UnsupportedOperationException: empty.min\n\tat scala.collection.IterableOnceOps.min(IterableOnce.scala:914)\n\tat scala.collection.IterableOnceOps.min$(IterableOnce.scala:912)\n\tat scala.collection.AbstractIterable.min(Iterable.scala:926)\n\tat Problem$.findAdverbPosition(tmpu4rzfzhp.scala:8)\n\tat Problem$.main(tmpu4rzfzhp.scala:13)\n\tat Problem.main(tmpu4rzfzhp.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val words = text.split(\" \")\n        for (i <- 0 until words.length) {\n            if (words(i).endsWith(\"ly\")) {\n                return Right(i)\n            }\n        }\n        Left(\"No adverb found\")\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123526,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp3_w99g9b.scala:15)\n\tat Problem.main(tmp3_w99g9b.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val adverbs = List(\"quickly\", \"slowly\", \"eagerly\", \"happily\", \"sadly\", \"angrily\")\n        val words = text.split(\" \")\n        val position = words.zipWithIndex.filter(x => adverbs.contains(x._1)).map(x => x._2).headOption\n        position match {\n            case Some(x) => Right(x)\n            case None => Left(\"No adverbs found\")\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123526,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp3qs1min3.scala:15)\n\tat Problem.main(tmp3qs1min3.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val words = text.split(\" \")\n        val adverbs = words.filter(_.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverbs found\")\n        else Right(words.indexOf(adverbs.head))\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123526,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp7p3bcomt.scala:12)\n\tat Problem.main(tmp7p3bcomt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverb found\")\n        else Right(words.indexOf(adverbs.head))\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123505,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpwo5qtvg4.scala:12)\n\tat Problem.main(tmpwo5qtvg4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val adverbs = List(\"quickly\", \"slowly\", \"eagerly\", \"happily\", \"sadly\")\n        val words = text.split(\" \")\n        for (i <- 0 until words.length) {\n            if (adverbs.contains(words(i))) {\n                return Right(i)\n            }\n        }\n        Left(\"No adverbs found\")\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123526,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpc1u84ezq.scala:16)\n\tat Problem.main(tmpc1u84ezq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.length == 0) Left(\"No adverbs found\")\n        else Right(words.indexOf(adverbs(0)))\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1665510613,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp38j7q5_w.scala:12)\n\tat Problem.main(tmp38j7q5_w.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val adverbs = List(\"quickly\", \"slowly\", \"elegantly\", \"lazily\")\n        val words = text.split(\" \")\n        for (i <- 0 until words.length) {\n            if (adverbs.contains(words(i))) {\n                return Right(i)\n            }\n        }\n        Left(\"No adverb found\")\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123526,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp3hz72i66.scala:16)\n\tat Problem.main(tmp3hz72i66.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverbs found\")\n        else Right(words.indexOf(adverbs(0)))\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1665510613,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmphcrjgyfo.scala:12)\n\tat Problem.main(tmphcrjgyfo.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val words = text.split(\" \")\n        val adverbs = words.filter(_.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverb found\")\n        else Right(words.indexOf(adverbs(0)))\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123515,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmplq957xzq.scala:12)\n\tat Problem.main(tmplq957xzq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverbs found\")\n        else Right(words.indexOf(adverbs(0)))\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1665510613,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmphcrjgyfo.scala:12)\n\tat Problem.main(tmphcrjgyfo.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val words = text.split(\" \")\n        val adverbs = words.filter(x => x.endsWith(\"ly\"))\n        if (adverbs.length == 0) {\n            Left(\"No adverb found\")\n        } else {\n            Right(words.indexOf(adverbs(0)))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123526,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpxgo_tg45.scala:15)\n\tat Problem.main(tmpxgo_tg45.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val words = text.split(\" \")\n        val adverb = words.filter(word => word.endsWith(\"ly\"))\n        if (adverb.length == 0) Left(\"No adverb found\")\n        else Right(words.indexOf(adverb(0)))\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1665510613,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpiy0iv635.scala:12)\n\tat Problem.main(tmpiy0iv635.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val adverbs = text.split(\" \").filter(x => x.endsWith(\"ly\"))\n        if (adverbs.length == 0) Left(\"No adverb found\")\n        else Right(text.indexOf(adverbs(0)))\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123526,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpptx3uqzi.scala:11)\n\tat Problem.main(tmpptx3uqzi.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.length > 0) {\n            val firstAdverb = adverbs(0)\n            val index = words.indexOf(firstAdverb)\n            Right(index)\n        } else {\n            Left(\"No adverbs found\")\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123526,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmprprmdd01.scala:17)\n\tat Problem.main(tmprprmdd01.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val pattern = \"\\\\w+ly\".r\n        val adverb = pattern.findFirstIn(text)\n        adverb match {\n            case Some(x) => Right(text.indexOf(x))\n            case None => Left(\"No adverb found\")\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123484,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmptgdn41tj.scala:14)\n\tat Problem.main(tmptgdn41tj.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if(adverbs.length == 0) {\n            Left(\"No adverbs found\")\n        } else {\n            Right(words.indexOf(adverbs(0)))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123526,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmplkvjj510.scala:15)\n\tat Problem.main(tmplkvjj510.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val words = text.split(\" \")\n        val adverbs = words.filter(x => x.endsWith(\"ly\"))\n        if (adverbs.isEmpty)\n            Left(\"No adverbs found\")\n        else\n            Right(words.indexOf(adverbs(0)))\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123526,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp8_rs1x5x.scala:14)\n\tat Problem.main(tmp8_rs1x5x.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverbs found\")\n        else Right(words.indexOf(adverbs(0)))\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1665510613,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmphcrjgyfo.scala:12)\n\tat Problem.main(tmphcrjgyfo.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val adverbs = List(\"quickly\", \"slowly\", \"elegantly\", \"lazily\", \"noisily\")\n        val words = text.split(\" \")\n        val adverbPositions = words.zipWithIndex.filter(x => adverbs.contains(x._1)).map(x => x._2)\n        if (adverbPositions.isEmpty) Left(\"No adverbs found\")\n        else Right(adverbPositions.head)\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123526,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmptuv2exju.scala:13)\n\tat Problem.main(tmptuv2exju.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val adverbRegex = \"\"\"(?i)(\\w+ly)\"\"\".r\n        val adverb = adverbRegex.findFirstIn(text)\n        adverb match {\n            case Some(adverb) => Right(text.indexOf(adverb))\n            case None => Left(\"No adverb found\")\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123526,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpegwfwvb8.scala:14)\n\tat Problem.main(tmpegwfwvb8.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val words = text.split(\" \")\n        val adverb = words.filter(word => word.endsWith(\"ly\"))\n        if (adverb.isEmpty) Left(\"No adverb found\")\n        else Right(words.indexOf(adverb(0)))\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123484,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp507b_a1z.scala:12)\n\tat Problem.main(tmp507b_a1z.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.size == 0) Left(\"No adverb found\")\n        else Right(words.indexOf(adverbs(0)))\n    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
      "timestamp": 1666123526,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpzvhwffkb.scala:12)\n\tat Problem.main(tmpzvhwffkb.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    }
  ]
}