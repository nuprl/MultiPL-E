{
  "name": "mbpp_773_occurance_substring",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_773_occurance_substring.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val index = text.indexOf(pattern)\n        if (index == -1) None\n        else Some(Right(index))",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        var i = 0\n        var j = 0\n        var occurance = 0\n        var position = 0\n        var found = false\n        while (i < textLength && j < patternLength) {\n            if (text(i) == pattern(j)) {\n                i += 1\n                j += 1\n            } else {\n                i = i - j + 1\n                j = 0\n            }\n            if (j == patternLength) {\n                occurance += 1\n                position = i - j\n                j = 0\n                found = true\n            }\n        }\n        if (found) Some(Right(position)) else None",
    "        val index = text.indexOf(pattern)\n        if (index == -1) None\n        else Some(Right(index.toLong))",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            return None\n        }\n        var i = 0\n        while (i <= textLength - patternLength) {\n            var j = 0\n            while (j < patternLength && text(i + j) == pattern(j)) {\n                j += 1\n            }\n            if (j == patternLength) {\n                return Some(Right(i))\n            }\n            i += 1\n        }\n        return None",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return None\n        var i = 0\n        var j = 0\n        var found = false\n        var position = 0\n        var count = 0\n        while (i < textLength) {\n            if (text(i) == pattern(j)) {\n                if (j == 0) position = i\n                j += 1\n                if (j == patternLength) {\n                    count += 1\n                    j = 0\n                }\n            }\n            else {\n                j = 0\n            }\n            i += 1\n        }\n        if (count == 0) return None\n        if (count == 1) return Some(Right(position))\n        return Some(Left(count.toString))",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        val textArray = text.toCharArray\n        val patternArray = pattern.toCharArray\n        var i = 0\n        var j = 0\n        var found = false\n        var position = 0L\n        while(i < textLength && j < patternLength) {\n            if(textArray(i) == patternArray(j)) {\n                i += 1\n                j += 1\n            } else {\n                i = i - j + 1\n                j = 0\n            }\n            if(j == patternLength) {\n                found = true\n                position = i - j\n            }\n        }\n        if(found) {\n            Some(Right(position))\n        } else {\n            None\n        }",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return None\n        val patternHash = pattern.hashCode\n        var textHash = text.substring(0, patternLength).hashCode\n        var i = 0\n        while (i < textLength - patternLength + 1) {\n            if (patternHash == textHash) {\n                if (pattern == text.substring(i, i + patternLength)) return Some(Right(i))\n            }\n            if (i < textLength - patternLength) {\n                textHash = (textHash - text(i).toInt * pow(31, patternLength - 1).toInt) * 31 + text(i + patternLength).toInt\n            }\n            i += 1\n        }\n        None",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (patternLength > textLength) return None\n        var i = 0\n        var j = 0\n        while (i < textLength && j < patternLength) {\n            if (text(i) == pattern(j)) {\n                i += 1\n                j += 1\n            } else {\n                i = i - j + 1\n                j = 0\n            }\n        }\n        if (j == patternLength) return Some(Right(i - j))\n        return None",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) None\n        else {\n            var i = 0\n            var j = 0\n            var occurance = 0\n            var position = 0\n            while (i < textLength) {\n                if (text(i) == pattern(j)) {\n                    if (j == 0) position = i\n                    j += 1\n                    if (j == patternLength) {\n                        occurance += 1\n                        j = 0\n                    }\n                }\n                else {\n                    j = 0\n                }\n                i += 1\n            }\n            if (occurance == 0) None\n            else Some(Left(occurance.toString))\n        }",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            return None\n        }\n        var i = 0\n        while (i <= textLength - patternLength) {\n            var j = 0\n            while (j < patternLength && text(i + j) == pattern(j)) {\n                j += 1\n            }\n            if (j == patternLength) {\n                return Some(Right(i))\n            }\n            i += 1\n        }\n        return None",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength)\n            return None\n        for (i <- 0 to textLength - patternLength) {\n            var j = 0\n            while (j < patternLength && text(i + j) == pattern(j)) {\n                j += 1\n            }\n            if (j == patternLength)\n                return Some(Right(i))\n        }\n        return None",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            None\n        } else {\n            val textArray = text.toCharArray\n            val patternArray = pattern.toCharArray\n            var i = 0\n            var j = 0\n            var k = 0\n            while (i < textLength && j < patternLength) {\n                if (textArray(i) == patternArray(j)) {\n                    i += 1\n                    j += 1\n                } else {\n                    j = 0\n                    k += 1\n                    i = k\n                }\n            }\n            if (j == patternLength) {\n                Some(Right(k.toLong))\n            } else {\n                None\n            }\n        }",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        var index = 0\n        var occurance = 0\n        var result = new ListBuffer[Long]()\n        while (index < textLength) {\n            if (text.substring(index, index + patternLength) == pattern) {\n                occurance += 1\n                result += index\n            }\n            index += 1\n        }\n        if (occurance == 0) None\n        else Some(Right(result.toList))",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return None\n        for (i <- 0 to textLength - patternLength) {\n            if (text.substring(i, i + patternLength) == pattern) return Some(Right(i))\n        }\n        None",
    "        val len = pattern.length\n        val lenText = text.length\n        var i = 0\n        var j = 0\n        var count = 0\n        var pos = 0\n        while (i < lenText) {\n            if (text(i) == pattern(j)) {\n                count += 1\n                if (count == len) {\n                    pos = i - len + 1\n                    return Some(Right(pos))\n                }\n                j += 1\n            }\n            else {\n                count = 0\n                j = 0\n            }\n            i += 1\n        }\n        None",
    "        val index = text.indexOf(pattern)\n        if (index == -1) None\n        else Some(Right(index))",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        var i = 0\n        var j = 0\n        var index = 0\n        while (i < textLength) {\n            if (text(i) == pattern(j)) {\n                if (j == patternLength - 1) {\n                    return Some(Right(index))\n                }\n                i += 1\n                j += 1\n            } else {\n                if (j != 0) {\n                    j = 0\n                }\n                i += 1\n                index = i\n            }\n        }\n        None",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            None\n        } else {\n            val textArray = text.toCharArray\n            val patternArray = pattern.toCharArray\n            val textHash = new Array[Long](textLength)\n            val patternHash = new Array[Long](patternLength)\n            var i = 0\n            while (i < textLength) {\n                textHash(i) = textArray(i).toLong\n                i += 1\n            }\n            i = 0\n            while (i < patternLength) {\n                patternHash(i) = patternArray(i).toLong\n                i += 1\n            }\n            val hash = new Array[Long](textLength - patternLength + 1)\n            hash(0) = 0\n            i = 0\n            while (i < patternLength) {\n                hash(0) += textHash(i) * pow(31, patternLength - i - 1).toLong\n                i += 1\n            }\n            i = 1\n            while (i < textLength - patternLength + 1) {\n                hash(i) = hash(i - 1) - textHash(i - 1) * pow(31, patternLength - 1).toLong + textHash(i + patternLength - 1) * pow(31, patternLength - 1).toLong\n                i += 1\n            }\n            val patternHashValue = patternHash.sum\n            i = 0\n            while (i < textLength - patternLength + 1) {\n                if (hash(i) == patternHashValue) {\n                    var j = 0\n                    var matchFound = true\n                    while (j < patternLength) {\n                        if (textArray(i + j) != patternArray(j)) {\n                            matchFound = false\n                            j = patternLength\n                        }\n                        j += 1\n                    }\n                    if (matchFound) {\n                        return Some(Right(i))\n                    }\n                }\n                i += 1\n            }\n            None\n        }",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        var i = 0\n        var j = 0\n        var k = 0\n        var found = false\n        while (i < textLength && j < patternLength) {\n            if (text(i) == pattern(j)) {\n                i += 1\n                j += 1\n            }\n            else {\n                j = 0\n                i = k + 1\n                k = i\n            }\n            if (j == patternLength) {\n                found = true\n                return Some(Right(i - patternLength))\n            }\n        }\n        if (!found) return Some(Left(\"No match\"))\n        None",
    "        val regex = pattern.r\n        val result = regex.findFirstMatchIn(text)\n        if (result.isEmpty) None\n        else Some(Right(result.get.start))"
  ]
}