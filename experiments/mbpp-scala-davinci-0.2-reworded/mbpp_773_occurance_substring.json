{
  "name": "mbpp_773_occurance_substring",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_773_occurance_substring.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val index = text.indexOf(pattern)\n        if (index == -1) None\n        else Some(Right(index))",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        var i = 0\n        var j = 0\n        var occurance = 0\n        var position = 0\n        var found = false\n        while (i < textLength && j < patternLength) {\n            if (text(i) == pattern(j)) {\n                i += 1\n                j += 1\n            } else {\n                i = i - j + 1\n                j = 0\n            }\n            if (j == patternLength) {\n                occurance += 1\n                position = i - j\n                j = 0\n                found = true\n            }\n        }\n        if (found) Some(Right(position)) else None",
    "        val index = text.indexOf(pattern)\n        if (index == -1) None\n        else Some(Right(index.toLong))",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            return None\n        }\n        var i = 0\n        while (i <= textLength - patternLength) {\n            var j = 0\n            while (j < patternLength && text(i + j) == pattern(j)) {\n                j += 1\n            }\n            if (j == patternLength) {\n                return Some(Right(i))\n            }\n            i += 1\n        }\n        return None",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return None\n        var i = 0\n        var j = 0\n        var found = false\n        var position = 0\n        var count = 0\n        while (i < textLength) {\n            if (text(i) == pattern(j)) {\n                if (j == 0) position = i\n                j += 1\n                if (j == patternLength) {\n                    count += 1\n                    j = 0\n                }\n            }\n            else {\n                j = 0\n            }\n            i += 1\n        }\n        if (count == 0) return None\n        if (count == 1) return Some(Right(position))\n        return Some(Left(count.toString))",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        val textArray = text.toCharArray\n        val patternArray = pattern.toCharArray\n        var i = 0\n        var j = 0\n        var found = false\n        var position = 0L\n        while(i < textLength && j < patternLength) {\n            if(textArray(i) == patternArray(j)) {\n                i += 1\n                j += 1\n            } else {\n                i = i - j + 1\n                j = 0\n            }\n            if(j == patternLength) {\n                found = true\n                position = i - j\n            }\n        }\n        if(found) {\n            Some(Right(position))\n        } else {\n            None\n        }",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return None\n        val patternHash = pattern.hashCode\n        var textHash = text.substring(0, patternLength).hashCode\n        var i = 0\n        while (i < textLength - patternLength + 1) {\n            if (patternHash == textHash) {\n                if (pattern == text.substring(i, i + patternLength)) return Some(Right(i))\n            }\n            if (i < textLength - patternLength) {\n                textHash = (textHash - text(i).toInt * pow(31, patternLength - 1).toInt) * 31 + text(i + patternLength).toInt\n            }\n            i += 1\n        }\n        None",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (patternLength > textLength) return None\n        var i = 0\n        var j = 0\n        while (i < textLength && j < patternLength) {\n            if (text(i) == pattern(j)) {\n                i += 1\n                j += 1\n            } else {\n                i = i - j + 1\n                j = 0\n            }\n        }\n        if (j == patternLength) return Some(Right(i - j))\n        return None",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) None\n        else {\n            var i = 0\n            var j = 0\n            var occurance = 0\n            var position = 0\n            while (i < textLength) {\n                if (text(i) == pattern(j)) {\n                    if (j == 0) position = i\n                    j += 1\n                    if (j == patternLength) {\n                        occurance += 1\n                        j = 0\n                    }\n                }\n                else {\n                    j = 0\n                }\n                i += 1\n            }\n            if (occurance == 0) None\n            else Some(Left(occurance.toString))\n        }",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            return None\n        }\n        var i = 0\n        while (i <= textLength - patternLength) {\n            var j = 0\n            while (j < patternLength && text(i + j) == pattern(j)) {\n                j += 1\n            }\n            if (j == patternLength) {\n                return Some(Right(i))\n            }\n            i += 1\n        }\n        return None",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength)\n            return None\n        for (i <- 0 to textLength - patternLength) {\n            var j = 0\n            while (j < patternLength && text(i + j) == pattern(j)) {\n                j += 1\n            }\n            if (j == patternLength)\n                return Some(Right(i))\n        }\n        return None",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            None\n        } else {\n            val textArray = text.toCharArray\n            val patternArray = pattern.toCharArray\n            var i = 0\n            var j = 0\n            var k = 0\n            while (i < textLength && j < patternLength) {\n                if (textArray(i) == patternArray(j)) {\n                    i += 1\n                    j += 1\n                } else {\n                    j = 0\n                    k += 1\n                    i = k\n                }\n            }\n            if (j == patternLength) {\n                Some(Right(k.toLong))\n            } else {\n                None\n            }\n        }",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        var index = 0\n        var occurance = 0\n        var result = new ListBuffer[Long]()\n        while (index < textLength) {\n            if (text.substring(index, index + patternLength) == pattern) {\n                occurance += 1\n                result += index\n            }\n            index += 1\n        }\n        if (occurance == 0) None\n        else Some(Right(result.toList))",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return None\n        for (i <- 0 to textLength - patternLength) {\n            if (text.substring(i, i + patternLength) == pattern) return Some(Right(i))\n        }\n        None",
    "        val len = pattern.length\n        val lenText = text.length\n        var i = 0\n        var j = 0\n        var count = 0\n        var pos = 0\n        while (i < lenText) {\n            if (text(i) == pattern(j)) {\n                count += 1\n                if (count == len) {\n                    pos = i - len + 1\n                    return Some(Right(pos))\n                }\n                j += 1\n            }\n            else {\n                count = 0\n                j = 0\n            }\n            i += 1\n        }\n        None",
    "        val index = text.indexOf(pattern)\n        if (index == -1) None\n        else Some(Right(index))",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        var i = 0\n        var j = 0\n        var index = 0\n        while (i < textLength) {\n            if (text(i) == pattern(j)) {\n                if (j == patternLength - 1) {\n                    return Some(Right(index))\n                }\n                i += 1\n                j += 1\n            } else {\n                if (j != 0) {\n                    j = 0\n                }\n                i += 1\n                index = i\n            }\n        }\n        None",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            None\n        } else {\n            val textArray = text.toCharArray\n            val patternArray = pattern.toCharArray\n            val textHash = new Array[Long](textLength)\n            val patternHash = new Array[Long](patternLength)\n            var i = 0\n            while (i < textLength) {\n                textHash(i) = textArray(i).toLong\n                i += 1\n            }\n            i = 0\n            while (i < patternLength) {\n                patternHash(i) = patternArray(i).toLong\n                i += 1\n            }\n            val hash = new Array[Long](textLength - patternLength + 1)\n            hash(0) = 0\n            i = 0\n            while (i < patternLength) {\n                hash(0) += textHash(i) * pow(31, patternLength - i - 1).toLong\n                i += 1\n            }\n            i = 1\n            while (i < textLength - patternLength + 1) {\n                hash(i) = hash(i - 1) - textHash(i - 1) * pow(31, patternLength - 1).toLong + textHash(i + patternLength - 1) * pow(31, patternLength - 1).toLong\n                i += 1\n            }\n            val patternHashValue = patternHash.sum\n            i = 0\n            while (i < textLength - patternLength + 1) {\n                if (hash(i) == patternHashValue) {\n                    var j = 0\n                    var matchFound = true\n                    while (j < patternLength) {\n                        if (textArray(i + j) != patternArray(j)) {\n                            matchFound = false\n                            j = patternLength\n                        }\n                        j += 1\n                    }\n                    if (matchFound) {\n                        return Some(Right(i))\n                    }\n                }\n                i += 1\n            }\n            None\n        }",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        var i = 0\n        var j = 0\n        var k = 0\n        var found = false\n        while (i < textLength && j < patternLength) {\n            if (text(i) == pattern(j)) {\n                i += 1\n                j += 1\n            }\n            else {\n                j = 0\n                i = k + 1\n                k = i\n            }\n            if (j == patternLength) {\n                found = true\n                return Some(Right(i - patternLength))\n            }\n        }\n        if (!found) return Some(Left(\"No match\"))\n        None",
    "        val regex = pattern.r\n        val result = regex.findFirstMatchIn(text)\n        if (result.isEmpty) None\n        else Some(Right(result.get.start))",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return None\n        var i = 0\n        var j = 0\n        var occurance = 0\n        var position = 0\n        while (i < textLength) {\n            if (text(i) == pattern(j)) {\n                if (j == 0) position = i\n                j += 1\n                if (j == patternLength) {\n                    occurance += 1\n                    j = 0\n                }\n            }\n            else {\n                if (j != 0) {\n                    i = position\n                    j = 0\n                }\n            }\n            i += 1\n        }\n        if (occurance == 0) return None\n        else if (occurance == 1) return Some(Right(position))\n        else return Some(Left(occurance.toString))",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        var i = 0\n        while (i < textLength - patternLength) {\n            if (text.substring(i, i + patternLength) == pattern) {\n                return Some(Right(i))\n            }\n            i += 1\n        }\n        return None",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return None\n        var textIndex = 0\n        var patternIndex = 0\n        var result = \"\"\n        var position = 0L\n        while (textIndex < textLength) {\n            if (text(textIndex) == pattern(patternIndex)) {\n                if (patternIndex == patternLength - 1) {\n                    result += textIndex - patternLength + 1 + \" \"\n                    position += textIndex - patternLength + 1\n                    patternIndex = 0\n                } else patternIndex += 1\n            } else patternIndex = 0\n            textIndex += 1\n        }\n        if (result == \"\") None else Some(Right(position))",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return None\n        val patternHash = hash(pattern)\n        var textHash = hash(text.substring(0, patternLength))\n        if (patternHash == textHash) return Some(Right(0))\n        for (i <- 1 to textLength - patternLength) {\n            textHash = textHash - text.charAt(i - 1) * pow(31, patternLength - 1).toLong\n            textHash = textHash * 31 + text.charAt(i + patternLength - 1)\n            if (patternHash == textHash) return Some(Right(i))\n        }\n        None",
    "        val index = text.indexOf(pattern)\n        if (index == -1) None\n        else Some(Right(index))",
    "        val result = text.indexOf(pattern)\n        if (result == -1) None\n        else Some(Right(result.toLong))",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return None\n        val patternHash = pattern.hashCode\n        val textHash = text.substring(0, patternLength).hashCode\n        if (patternHash == textHash) {\n            if (pattern == text.substring(0, patternLength)) return Some(Right(0))\n        }\n        for (i <- 1 to textLength - patternLength) {\n            val newHash = textHash - text.charAt(i - 1).toInt + text.charAt(i + patternLength - 1).toInt\n            if (newHash == patternHash) {\n                if (pattern == text.substring(i, i + patternLength)) return Some(Right(i))\n            }\n        }\n        None",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) {\n            return None\n        }\n        val textArray = text.toCharArray\n        val patternArray = pattern.toCharArray\n        var i = 0\n        var j = 0\n        var found = false\n        while (i < textLength && j < patternLength) {\n            if (textArray(i) == patternArray(j)) {\n                i += 1\n                j += 1\n            } else {\n                i = i - j + 1\n                j = 0\n            }\n            if (j == patternLength) {\n                found = true\n                break\n            }\n        }\n        if (found) {\n            return Some(Right(i - j))\n        } else {\n            return Some(Left(\"Not found\"))\n        }",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return None\n        val textArray = text.toCharArray\n        val patternArray = pattern.toCharArray\n        for (i <- 0 to textLength - patternLength) {\n            var j = 0\n            while (j < patternLength && textArray(i + j) == patternArray(j)) j += 1\n            if (j == patternLength) return Some(Right(i))\n        }\n        None",
    "        if (text.contains(pattern)) {\n            val index = text.indexOf(pattern)\n            Some(Right(index))\n        } else {\n            None\n        }",
    "        val index = text.indexOf(pattern)\n        if (index == -1) None\n        else Some(Right(index))",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        var i = 0\n        var j = 0\n        var count = 0\n        while(i < textLength) {\n            if(text(i) == pattern(j)) {\n                i += 1\n                j += 1\n            }\n            else {\n                i = i - j + 1\n                j = 0\n            }\n            if(j == patternLength) {\n                count += 1\n                j = 0\n            }\n        }\n        if(count == 0) None\n        else Some(Right(count))",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return None\n        var i = 0\n        while (i < textLength - patternLength + 1) {\n            var j = 0\n            while (j < patternLength && text(i + j) == pattern(j)) j += 1\n            if (j == patternLength) return Some(Right(i))\n            i += 1\n        }\n        None",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (patternLength > textLength) return None\n        var i = 0\n        var j = 0\n        var index = 0\n        while (i < textLength) {\n            if (text(i) == pattern(j)) {\n                if (j == 0) index = i\n                j += 1\n                if (j == patternLength) return Some(Right(index))\n            } else {\n                if (j > 0) {\n                    i = index\n                    j = 0\n                }\n            }\n            i += 1\n        }\n        None",
    "        if (text.contains(pattern)) {\n            Some(Right(text.indexOf(pattern)))\n        } else {\n            None\n        }",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        var i = 0\n        var j = 0\n        var occurance = 0\n        var position = 0\n        while (i < textLength) {\n            if (text(i) == pattern(j)) {\n                if (j == 0) position = i\n                j += 1\n                if (j == patternLength) {\n                    occurance += 1\n                    j = 0\n                }\n            } else {\n                j = 0\n            }\n            i += 1\n        }\n        if (occurance == 0) None\n        else Some(Left(occurance.toString))",
    "        val index = text.indexOf(pattern)\n        if (index != -1) {\n            Some(Right(index.toLong))\n        } else {\n            None\n        }",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            return None\n        }\n        val textArray = text.toCharArray\n        val patternArray = pattern.toCharArray\n        var i = 0\n        var j = 0\n        var count = 0\n        var position = 0\n        while (i < textLength) {\n            if (textArray(i) == patternArray(j)) {\n                if (j == 0) {\n                    position = i\n                }\n                j += 1\n                if (j == patternLength) {\n                    count += 1\n                    j = 0\n                }\n            } else {\n                j = 0\n            }\n            i += 1\n        }\n        if (count == 0) {\n            return None\n        }\n        return Some(Right(position))",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength)\n            return None\n        val textArray = text.toCharArray\n        val patternArray = pattern.toCharArray\n        var i = 0\n        var j = 0\n        while (i < textLength) {\n            if (textArray(i) == patternArray(j)) {\n                j += 1\n                if (j == patternLength)\n                    return Some(Right(i - j + 1))\n            } else {\n                i -= j\n                j = 0\n            }\n            i += 1\n        }\n        return None",
    "        val index = text.indexOf(pattern)\n        if (index == -1) None\n        else Some(Right(index.toLong))",
    "        var index = 0\n        var result = \"\"\n        var found = false\n        while (index < text.length) {\n            if (text.substring(index).startsWith(pattern)) {\n                result += index + \" \"\n                found = true\n            }\n            index += 1\n        }\n        if (found) Some(Right(result.trim.toLong)) else None",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) {\n            None\n        } else {\n            var i = 0\n            var j = 0\n            var k = 0\n            var found = false\n            while (i < textLength && j < patternLength && !found) {\n                if (text(i) == pattern(j)) {\n                    i += 1\n                    j += 1\n                } else {\n                    j = 0\n                    i = k + 1\n                    k = i\n                }\n                if (j == patternLength) {\n                    found = true\n                }\n            }\n            if (found) {\n                Some(Right(i - patternLength))\n            } else {\n                None\n            }\n        }",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return None\n        val patternHash = pattern.hashCode\n        var currentHash = text.substring(0, patternLength).hashCode\n        var currentIndex = 0\n        while (currentIndex + patternLength <= textLength) {\n            if (currentHash == patternHash) {\n                val currentSubstring = text.substring(currentIndex, currentIndex + patternLength)\n                if (currentSubstring == pattern) return Some(Right(currentIndex))\n            }\n            if (currentIndex + patternLength < textLength) {\n                currentHash = currentHash - text(currentIndex).toInt + text(currentIndex + patternLength).toInt\n            }\n            currentIndex += 1\n        }\n        None",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return None\n        val patternHash = pattern.hashCode\n        var i = 0\n        while (i <= textLength - patternLength) {\n            val subString = text.substring(i, i + patternLength)\n            if (subString.hashCode == patternHash) {\n                if (subString == pattern) return Some(Right(i))\n                else return Some(Left(subString))\n            }\n            i += 1\n        }\n        None",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            return None\n        }\n        for (i <- 0 to textLength - patternLength) {\n            if (text.substring(i, i + patternLength) == pattern) {\n                return Some(Right(i))\n            }\n        }\n        return None",
    "        val index = text.indexOf(pattern)\n        if (index == -1) None\n        else Some(Right(index))",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            return None\n        }\n        var i = 0\n        var j = 0\n        var occurance = 0\n        var position = 0\n        while (i < textLength) {\n            if (text(i) == pattern(j)) {\n                j += 1\n                if (j == patternLength) {\n                    occurance += 1\n                    j = 0\n                }\n            } else {\n                j = 0\n            }\n            i += 1\n        }\n        if (occurance == 0) {\n            return None\n        }\n        return Some(Right(occurance))",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            return None\n        }\n        val textArray = text.toCharArray\n        val patternArray = pattern.toCharArray\n        for (i <- 0 to textLength - patternLength) {\n            var j = 0\n            while (j < patternLength && textArray(i + j) == patternArray(j)) {\n                j += 1\n            }\n            if (j == patternLength) {\n                return Some(Right(i))\n            }\n        }\n        return None",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return None\n        var index = 0\n        var occurance = 0\n        while (index < textLength) {\n            if (text.substring(index, index + patternLength) == pattern) {\n                occurance += 1\n                index += patternLength\n            }\n            else index += 1\n        }\n        if (occurance == 0) None\n        else Some(Right(occurance))",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        var i = 0\n        var j = 0\n        var count = 0\n        var position = 0\n        var found = false\n        while (i < textLength && j < patternLength) {\n            if (text(i) == pattern(j)) {\n                i += 1\n                j += 1\n                if (j == patternLength) {\n                    count += 1\n                    position = i - j\n                    j = 0\n                }\n            } else {\n                i = i - j + 1\n                j = 0\n            }\n        }\n        if (count == 0) None\n        else if (count == 1) Some(Right(position))\n        else Some(Left(count.toString))",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        var i = 0\n        var j = 0\n        var found = false\n        var count = 0\n        var position = 0\n        while(i < textLength) {\n            if(text(i) == pattern(j)) {\n                if(j == 0) position = i\n                j += 1\n                i += 1\n                if(j == patternLength) {\n                    count += 1\n                    j = 0\n                }\n            } else {\n                j = 0\n                i += 1\n            }\n        }\n        if(count == 0) None\n        else if(count == 1) Some(Right(position))\n        else Some(Left(count.toString))",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return None\n        var i = 0\n        var j = 0\n        var k = 0\n        var t = 0\n        val d = new Array[Int](patternLength + 1)\n        d(0) = -1\n        while (i < patternLength) {\n            if (j == -1 || pattern(i) == pattern(j)) {\n                i += 1\n                j += 1\n                d(i) = j\n            } else {\n                j = d(j)\n            }\n        }\n        i = 0\n        while (i < textLength) {\n            if (k == -1 || text(i) == pattern(k)) {\n                i += 1\n                k += 1\n                if (k == patternLength) {\n                    t += 1\n                    k = d(k)\n                }\n            } else {\n                k = d(k)\n            }\n        }\n        if (t == 0) return None\n        Some(Right(t))",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return None\n        var i = 0\n        var j = 0\n        var occurance = 0\n        var position = 0\n        while (i < textLength) {\n            if (text(i) == pattern(j)) {\n                if (j == 0) position = i\n                j += 1\n                if (j == patternLength) {\n                    occurance += 1\n                    j = 0\n                }\n            } else {\n                j = 0\n            }\n            i += 1\n        }\n        if (occurance == 0) return None\n        if (occurance == 1) return Some(Right(position))\n        Some(Left(occurance.toString))",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return None\n        val textArray = text.toCharArray\n        val patternArray = pattern.toCharArray\n        var i = 0\n        var j = 0\n        var found = false\n        while (i < textLength) {\n            if (textArray(i) == patternArray(j)) {\n                if (j == patternLength - 1) {\n                    found = true\n                    break\n                }\n                i += 1\n                j += 1\n            } else {\n                i += 1\n                j = 0\n            }\n        }\n        if (found) Some(Right(i - patternLength + 1)) else None",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return None\n        var i = 0\n        var j = 0\n        var occurance = 0\n        var position = 0\n        while (i < textLength) {\n            if (text(i) == pattern(j)) {\n                if (j == 0) position = i\n                j += 1\n                if (j == patternLength) {\n                    occurance += 1\n                    j = 0\n                }\n            } else {\n                j = 0\n            }\n            i += 1\n        }\n        if (occurance == 0) return None\n        else if (occurance == 1) return Some(Right(position))\n        else return Some(Left(occurance.toString))",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return None\n        val textArray = text.toCharArray\n        val patternArray = pattern.toCharArray\n        var i = 0\n        var j = 0\n        var k = 0\n        var found = false\n        while (i < textLength && !found) {\n            if (textArray(i) == patternArray(j)) {\n                k = i\n                while (j < patternLength && textArray(k) == patternArray(j)) {\n                    k += 1\n                    j += 1\n                }\n                if (j == patternLength) found = true\n                else j = 0\n            }\n            i += 1\n        }\n        if (found) Some(Right(i - 1)) else None",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return None\n        var i = 0\n        var j = 0\n        var found = false\n        var position = 0\n        var count = 0\n        while (i < textLength) {\n            if (text(i) == pattern(j)) {\n                if (j == 0) position = i\n                j += 1\n                if (j == patternLength) {\n                    count += 1\n                    j = 0\n                }\n            }\n            else {\n                if (j != 0) {\n                    i = position\n                    j = 0\n                }\n            }\n            i += 1\n        }\n        if (count == 0) return None\n        else if (count == 1) return Some(Right(position))\n        else return Some(Left(count.toString))",
    "        val index = text.indexOf(pattern)\n        if (index == -1) None\n        else Some(Right(index.toLong))",
    "        val index = text.indexOf(pattern)\n        if (index == -1) None\n        else Some(Right(index))",
    "        val result = text.indexOf(pattern)\n        if (result == -1) None\n        else Some(Right(result.toLong))",
    "        val n = text.length\n        val m = pattern.length\n        val lps = Array.fill(m)(0)\n        var i = 1\n        var len = 0\n        while (i < m) {\n            if (pattern(i) == pattern(len)) {\n                len += 1\n                lps(i) = len\n                i += 1\n            } else {\n                if (len != 0) {\n                    len = lps(len - 1)\n                } else {\n                    lps(i) = 0\n                    i += 1\n                }\n            }\n        }\n        var j = 0\n        var k = 0\n        while (j < n) {\n            if (text(j) == pattern(k)) {\n                j += 1\n                k += 1\n            }\n            if (k == m) {\n                return Some(Right(j - k))\n            } else if (j < n && text(j) != pattern(k)) {\n                if (k != 0) {\n                    k = lps(k - 1)\n                } else {\n                    j += 1\n                }\n            }\n        }\n        None",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return None\n        val textArray = text.toCharArray\n        val patternArray = pattern.toCharArray\n        var i = 0\n        var j = 0\n        var found = false\n        while (i < textLength) {\n            if (textArray(i) == patternArray(j)) {\n                j += 1\n                if (j == patternLength) {\n                    found = true\n                    break\n                }\n            }\n            else {\n                j = 0\n            }\n            i += 1\n        }\n        if (found) Some(Right(i - patternLength + 1)) else None",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return None\n        var i = 0\n        var j = 0\n        var index = 0\n        var found = false\n        while (i < textLength) {\n            if (text(i) == pattern(j)) {\n                if (j == 0) index = i\n                j += 1\n                if (j == patternLength) {\n                    found = true\n                    break\n                }\n            } else {\n                j = 0\n            }\n            i += 1\n        }\n        if (found) Some(Right(index)) else None",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            return None\n        }\n        var i = 0\n        var j = 0\n        var count = 0\n        var position = 0\n        while (i < textLength) {\n            if (text(i) == pattern(j)) {\n                if (j == 0) {\n                    position = i\n                }\n                j += 1\n                if (j == patternLength) {\n                    count += 1\n                    j = 0\n                }\n            } else {\n                j = 0\n            }\n            i += 1\n        }\n        if (count == 0) {\n            return None\n        } else {\n            return Some(Right(position))\n        }",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) {\n            None\n        } else {\n            val textArray = text.toCharArray\n            val patternArray = pattern.toCharArray\n            var i = 0\n            var j = 0\n            var found = false\n            var result = \"\"\n            while (i < textLength && j < patternLength) {\n                if (textArray(i) == patternArray(j)) {\n                    i += 1\n                    j += 1\n                } else {\n                    i = i - j + 1\n                    j = 0\n                }\n                if (j == patternLength) {\n                    found = true\n                    result += (i - patternLength).toString + \" \"\n                    j = 0\n                }\n            }\n            if (found) {\n                Some(Right(result.trim.toLong))\n            } else {\n                None\n            }\n        }",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return None\n        val textArray = text.toCharArray\n        val patternArray = pattern.toCharArray\n        var i = 0\n        var j = 0\n        var index = -1\n        while (i < textLength) {\n            if (textArray(i) == patternArray(j)) {\n                if (j == 0) index = i\n                j += 1\n                if (j == patternLength) return Some(Right(index.toLong))\n            }\n            else {\n                if (j != 0) i = index\n                j = 0\n            }\n            i += 1\n        }\n        None",
    "        val index = text.indexOf(pattern)\n        if (index == -1) None\n        else Some(Right(index))",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return None\n        var i = 0\n        var j = 0\n        var index = 0\n        var count = 0\n        while (i < textLength) {\n            if (text(i) == pattern(j)) {\n                if (j == 0) index = i\n                j += 1\n                if (j == patternLength) {\n                    count += 1\n                    j = 0\n                }\n            } else {\n                j = 0\n            }\n            i += 1\n        }\n        if (count == 0) return None\n        if (count == 1) return Some(Right(index))\n        Some(Left(count.toString))",
    "        val index = text.indexOf(pattern)\n        if (index == -1) None\n        else Some(Right(index.toLong))",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) {\n            None\n        } else {\n            var index = 0\n            var result = new ListBuffer[Long]\n            while (index < textLength - patternLength + 1) {\n                if (text.substring(index, index + patternLength) == pattern) {\n                    result += index\n                }\n                index += 1\n            }\n            if (result.length == 0) {\n                None\n            } else {\n                Some(Right(result.length))\n            }\n        }",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return None\n        var i = 0\n        while (i <= textLength - patternLength) {\n            var j = 0\n            while (j < patternLength && text(i + j) == pattern(j)) j += 1\n            if (j == patternLength) return Some(Right(i))\n            i += 1\n        }\n        None",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        val textArray = text.toCharArray\n        val patternArray = pattern.toCharArray\n        var i = 0\n        var j = 0\n        var occurance = 0\n        var position = 0\n        while(i < textLength) {\n            if(textArray(i) == patternArray(j)) {\n                if(j == 0) position = i\n                j += 1\n                if(j == patternLength) {\n                    occurance += 1\n                    j = 0\n                }\n            } else {\n                if(j != 0) {\n                    i = position\n                    j = 0\n                }\n            }\n            i += 1\n        }\n        if(occurance == 0) None\n        else Some(Left(occurance.toString))",
    "        val regex = pattern.r\n        val result = regex.findFirstMatchIn(text)\n        if (result.isEmpty) None\n        else {\n            val index = result.get.start\n            Some(Right(index))\n        }",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) {\n            return None\n        }\n        val textArray = text.toCharArray\n        val patternArray = pattern.toCharArray\n        var i = 0\n        var j = 0\n        var occurance = 0\n        var position = 0\n        while (i < textLength) {\n            if (textArray(i) == patternArray(j)) {\n                if (j == 0) {\n                    position = i\n                }\n                j += 1\n                if (j == patternLength) {\n                    occurance += 1\n                    j = 0\n                }\n            } else {\n                j = 0\n            }\n            i += 1\n        }\n        if (occurance == 0) {\n            return None\n        } else {\n            return Some(Right(position))\n        }",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return None\n        val textArray = text.toCharArray\n        val patternArray = pattern.toCharArray\n        var i = 0\n        var j = 0\n        var occurance = 0\n        var position = 0\n        while (i < textLength) {\n            if (textArray(i) == patternArray(j)) {\n                if (j == 0) position = i\n                j += 1\n            } else {\n                j = 0\n            }\n            if (j == patternLength) {\n                occurance += 1\n                j = 0\n            }\n            i += 1\n        }\n        if (occurance == 0) return None\n        else if (occurance == 1) return Some(Right(position))\n        else return Some(Left(occurance.toString))",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return None\n        var i = 0\n        var j = 0\n        var index = 0\n        var count = 0\n        var result = new ListBuffer[Long]\n        while (i < textLength) {\n            if (text(i) == pattern(j)) {\n                i += 1\n                j += 1\n            } else {\n                i = i - j + 1\n                j = 0\n            }\n            if (j == patternLength) {\n                count += 1\n                result += i - j\n                j = 0\n            }\n        }\n        if (count == 0) return None\n        if (count == 1) return Some(Right(result(0)))\n        Some(Left(result.mkString(\" \")))",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return None\n        var i = 0\n        var j = 0\n        var k = 0\n        var t = 0\n        var p = 0\n        var h = 0\n        var d = pow(10, 9).toInt + 7\n        for (i <- 0 until patternLength) {\n            h = (h * 10 + pattern(i)) % d\n            t = (t * 10 + text(i)) % d\n        }\n        val hPow = pow(10, patternLength - 1).toInt\n        var result = new ListBuffer[Long]\n        while (i < textLength - patternLength + 1) {\n            if (h == t) {\n                for (j <- 0 until patternLength) {\n                    if (text(i + j) != pattern(j)) break\n                }\n                if (j == patternLength) result += i\n            }\n            if (i < textLength - patternLength) {\n                t = (t - text(i) * hPow) % d\n                if (t < 0) t += d\n                t = (t * 10 + text(i + patternLength)) % d\n            }\n            i += 1\n        }\n        if (result.length == 0) None\n        else Some(Right(result.length))",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return None\n        for (i <- 0 to textLength - patternLength) {\n            var matchFound = true\n            for (j <- 0 to patternLength - 1) {\n                if (text(i + j) != pattern(j)) {\n                    matchFound = false\n                    break\n                }\n            }\n            if (matchFound) return Some(Right(i))\n        }\n        None",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return None\n        var i = 0\n        var j = 0\n        var k = 0\n        val lps = Array.fill(patternLength)(0)\n        computeLPSArray(pattern, patternLength, lps)\n        while (i < textLength) {\n            if (pattern(j) == text(i)) {\n                j += 1\n                i += 1\n            }\n            if (j == patternLength) {\n                return Some(Right(i - j))\n                j = lps(j - 1)\n            }\n            else if (i < textLength && pattern(j) != text(i)) {\n                if (j != 0) j = lps(j - 1)\n                else i += 1\n            }\n        }\n        None",
    "        val start = text.indexOf(pattern)\n        if (start == -1) None\n        else Some(Right(start.toLong))",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return None\n        val patternHash = pattern.hashCode\n        val textHash = text.substring(0, patternLength).hashCode\n        var i = 0\n        while (i <= textLength - patternLength) {\n            if (patternHash == textHash) {\n                if (pattern == text.substring(i, i + patternLength)) return Some(Right(i))\n            }\n            if (i < textLength - patternLength) {\n                textHash = (textHash - text(i).toInt * pow(31, patternLength - 1).toInt).toInt * 31 + text(i + patternLength).toInt\n            }\n            i += 1\n        }\n        None",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return None\n        val textArray = text.toCharArray\n        val patternArray = pattern.toCharArray\n        var i = 0\n        var j = 0\n        while (i < textLength) {\n            if (textArray(i) == patternArray(j)) {\n                if (j == patternLength - 1) return Some(Right(i - j))\n                i += 1\n                j += 1\n            }\n            else {\n                i = i - j + 1\n                j = 0\n            }\n        }\n        None",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            return None\n        }\n        val textArray = text.toCharArray\n        val patternArray = pattern.toCharArray\n        var i = 0\n        var j = 0\n        var count = 0\n        while (i < textLength) {\n            if (textArray(i) == patternArray(j)) {\n                i += 1\n                j += 1\n                if (j == patternLength) {\n                    count += 1\n                    j = 0\n                }\n            } else {\n                i += 1\n                j = 0\n            }\n        }\n        if (count == 0) {\n            return None\n        } else {\n            return Some(Right(count))\n        }",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        var i = 0\n        var j = 0\n        var count = 0\n        var position = 0\n        var found = false\n        while(i < textLength) {\n            if(text(i) == pattern(j)) {\n                if(j == 0) position = i\n                j += 1\n                if(j == patternLength) {\n                    count += 1\n                    j = 0\n                    found = true\n                }\n            }\n            else {\n                j = 0\n            }\n            i += 1\n        }\n        if(found) {\n            if(count == 1) Some(Right(position))\n            else Some(Left(count.toString))\n        }\n        else None",
    "        val index = text.indexOf(pattern)\n        if (index == -1) None\n        else Some(Right(index))",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            return None\n        }\n        var i = 0\n        while (i < textLength - patternLength + 1) {\n            var j = 0\n            while (j < patternLength && text(i + j) == pattern(j)) {\n                j += 1\n            }\n            if (j == patternLength) {\n                return Some(Right(i))\n            }\n            i += 1\n        }\n        return None",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            None\n        } else {\n            val textArray = text.toCharArray\n            val patternArray = pattern.toCharArray\n            var i = 0\n            var j = 0\n            while (i < textLength) {\n                if (textArray(i) == patternArray(j)) {\n                    j += 1\n                    if (j == patternLength) {\n                        return Some(Right(i - j + 1))\n                    }\n                } else {\n                    j = 0\n                }\n                i += 1\n            }\n            None\n        }",
    "        if (text.contains(pattern)) {\n            val index = text.indexOf(pattern)\n            Some(Right(index))\n        } else {\n            None\n        }",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        val textArray = text.toCharArray\n        val patternArray = pattern.toCharArray\n        var i = 0\n        var j = 0\n        var k = 0\n        var found = false\n        while (i < textLength && !found) {\n            if (textArray(i) == patternArray(j)) {\n                i += 1\n                j += 1\n            }\n            else {\n                i += 1\n                j = 0\n            }\n            if (j == patternLength) {\n                found = true\n                k = i - j\n            }\n        }\n        if (found) {\n            Some(Right(k))\n        }\n        else {\n            None\n        }",
    "        if (text.contains(pattern)) {\n            Some(Right(text.indexOf(pattern)))\n        } else {\n            Some(Left(\"No match\"))\n        }",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return None\n        var i = 0\n        var j = 0\n        var occurance = 0\n        var position = 0\n        while (i < textLength) {\n            if (text(i) == pattern(j)) {\n                if (j == 0) position = i\n                j += 1\n                if (j == patternLength) {\n                    occurance += 1\n                    j = 0\n                }\n            }\n            else {\n                if (j != 0) i = position\n                j = 0\n            }\n            i += 1\n        }\n        if (occurance == 0) None\n        else Some(Right(occurance))",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        val textArray = text.toCharArray\n        val patternArray = pattern.toCharArray\n        var i = 0\n        var j = 0\n        var count = 0\n        var index = 0\n        var flag = false\n        while (i < textLength) {\n            if (textArray(i) == patternArray(j)) {\n                if (j == 0) {\n                    index = i\n                }\n                if (j == patternLength - 1) {\n                    count += 1\n                    flag = true\n                    j = 0\n                }\n                else {\n                    j += 1\n                }\n            }\n            else {\n                j = 0\n            }\n            i += 1\n        }\n        if (flag) {\n            Some(Right(index))\n        }\n        else {\n            None\n        }",
    "        if (text.contains(pattern)) {\n            val index = text.indexOf(pattern)\n            Some(Right(index))\n        } else {\n            None\n        }",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return None\n        var i = 0\n        var j = 0\n        var occurance = 0\n        var position = 0\n        while (i < textLength) {\n            if (text(i) == pattern(j)) {\n                if (j == 0) position = i\n                j += 1\n                if (j == patternLength) {\n                    occurance += 1\n                    j = 0\n                }\n            } else {\n                if (j != 0) i = position\n                j = 0\n            }\n            i += 1\n        }\n        if (occurance == 0) None else Some(Right(position))",
    "        val index = text.indexOf(pattern)\n        if (index == -1) None\n        else Some(Right(index))",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return None\n        var i = 0\n        var j = 0\n        var occurance = 0\n        var position = 0\n        while (i < textLength) {\n            if (text(i) == pattern(j)) {\n                if (j == 0) position = i\n                j += 1\n                if (j == patternLength) {\n                    occurance += 1\n                    j = 0\n                }\n            } else {\n                j = 0\n            }\n            i += 1\n        }\n        if (occurance == 0) return None\n        else if (occurance == 1) return Some(Right(position))\n        else return Some(Left(occurance.toString))",
    "        val index = text.indexOf(pattern)\n        if (index == -1) None else Some(Right(index))",
    "        val regex = pattern.r\n        val result = regex.findFirstMatchIn(text)\n        if (result.isEmpty) None\n        else {\n            val index = result.get.start\n            Some(Right(index))\n        }",
    "        if (text.contains(pattern)) {\n            val index = text.indexOf(pattern)\n            Some(Right(index))\n        } else {\n            Some(Left(\"No match\"))\n        }",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            return None\n        }\n        val patternHash = pattern.hashCode\n        for (i <- 0 to textLength - patternLength) {\n            val substring = text.substring(i, i + patternLength)\n            if (substring.hashCode == patternHash) {\n                return Some(Right(i))\n            }\n        }\n        return None",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return None\n        for (i <- 0 to textLength - patternLength) {\n            if (text.substring(i, i + patternLength) == pattern) return Some(Right(i))\n        }\n        None",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            return None\n        }\n        var i = 0\n        while (i <= textLength - patternLength) {\n            if (text.substring(i, i + patternLength) == pattern) {\n                return Some(Right(i))\n            }\n            i += 1\n        }\n        return None",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return None\n        val textArray = text.toCharArray\n        val patternArray = pattern.toCharArray\n        for (i <- 0 until textLength - patternLength + 1) {\n            var matchCount = 0\n            for (j <- 0 until patternLength) {\n                if (textArray(i + j) == patternArray(j)) matchCount += 1\n                else break\n            }\n            if (matchCount == patternLength) return Some(Right(i))\n        }\n        None",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        val textCharArray = text.toCharArray\n        val patternCharArray = pattern.toCharArray\n        for (i <- 0 to textLength - patternLength) {\n            var j = 0\n            while (j < patternLength && textCharArray(i + j) == patternCharArray(j)) {\n                j += 1\n            }\n            if (j == patternLength) {\n                return Some(Right(i))\n            }\n        }\n        None",
    "        val n = text.length\n        val m = pattern.length\n        val lps = new Array[Int](m)\n        var i = 1\n        var j = 0\n        while (i < m) {\n            if (pattern(i) == pattern(j)) {\n                lps(i) = j + 1\n                i += 1\n                j += 1\n            } else if (j != 0) {\n                j = lps(j - 1)\n            } else {\n                lps(i) = 0\n                i += 1\n            }\n        }\n        i = 0\n        j = 0\n        while (i < n) {\n            if (text(i) == pattern(j)) {\n                i += 1\n                j += 1\n            }\n            if (j == m) {\n                return Some(Right(i - j))\n            } else if (i < n && text(i) != pattern(j)) {\n                if (j != 0) {\n                    j = lps(j - 1)\n                } else {\n                    i += 1\n                }\n            }\n        }\n        None",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            return None\n        }\n        val patternHash = pattern.hashCode\n        var textHash = text.substring(0, patternLength).hashCode\n        var i = 0\n        while (i < textLength - patternLength) {\n            if (textHash == patternHash) {\n                if (text.substring(i, i + patternLength) == pattern) {\n                    return Some(Right(i))\n                }\n            }\n            textHash = textHash - text.charAt(i).toInt + text.charAt(i + patternLength).toInt\n            i = i + 1\n        }\n        if (textHash == patternHash) {\n            if (text.substring(i, i + patternLength) == pattern) {\n                return Some(Right(i))\n            }\n        }\n        return None",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) {\n            return None\n        }\n        val textArray = text.toCharArray\n        val patternArray = pattern.toCharArray\n        var i = 0\n        var j = 0\n        var count = 0\n        var position = 0\n        while (i < textLength) {\n            if (textArray(i) == patternArray(j)) {\n                if (j == 0) {\n                    position = i\n                }\n                j += 1\n                if (j == patternLength) {\n                    count += 1\n                    j = 0\n                }\n            } else {\n                j = 0\n            }\n            i += 1\n        }\n        if (count == 0) {\n            return None\n        }\n        return Some(Right(position.toLong))",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return None\n        val patternHash = pattern.hashCode\n        var textHash = text.substring(0, patternLength).hashCode\n        var i = 0\n        while (i <= textLength - patternLength) {\n            if (patternHash == textHash) {\n                if (pattern == text.substring(i, i + patternLength)) {\n                    return Some(Right(i))\n                }\n            }\n            if (i < textLength - patternLength) {\n                textHash = textHash - text.charAt(i).toInt + text.charAt(i + patternLength).toInt\n            }\n            i += 1\n        }\n        None",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            return None\n        }\n        val textArray = text.toCharArray\n        val patternArray = pattern.toCharArray\n        var i = 0\n        var j = 0\n        var k = 0\n        var found = false\n        while (i < textLength && !found) {\n            if (textArray(i) == patternArray(j)) {\n                k = i\n                while (j < patternLength && k < textLength && textArray(k) == patternArray(j)) {\n                    k += 1\n                    j += 1\n                }\n                if (j == patternLength) {\n                    found = true\n                }\n                else {\n                    j = 0\n                }\n            }\n            i += 1\n        }\n        if (found) {\n            return Some(Right(i - 1))\n        }\n        else {\n            return None\n        }",
    "        if (text.contains(pattern)) {\n            val index = text.indexOf(pattern)\n            val count = text.split(pattern).length - 1\n            Some(Right(index))\n        } else {\n            None\n        }",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            return None\n        }\n        var i = 0\n        var j = 0\n        var count = 0\n        var position = 0\n        while (i < textLength) {\n            if (text(i) == pattern(j)) {\n                if (j == 0) {\n                    position = i\n                }\n                j += 1\n                if (j == patternLength) {\n                    count += 1\n                    j = 0\n                }\n            }\n            else {\n                j = 0\n            }\n            i += 1\n        }\n        if (count == 0) {\n            return None\n        }\n        return Some(Right(position))",
    "        if (text.length < pattern.length) return None\n        var i = 0\n        var j = 0\n        var found = false\n        while (i < text.length && j < pattern.length) {\n            if (text(i) == pattern(j)) {\n                i += 1\n                j += 1\n            } else {\n                i = i - j + 1\n                j = 0\n            }\n        }\n        if (j == pattern.length) {\n            found = true\n            return Some(Right(i - j))\n        }\n        if (found) return Some(Left(pattern))\n        else return None",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            return None\n        }\n        val patternHash = pattern.hashCode\n        var i = 0\n        while (i < textLength - patternLength + 1) {\n            val sub = text.substring(i, i + patternLength)\n            if (sub.hashCode == patternHash) {\n                if (sub == pattern) {\n                    return Some(Right(i))\n                }\n            }\n            i += 1\n        }\n        return None",
    "        if (text.contains(pattern)) {\n            val index = text.indexOf(pattern)\n            Some(Right(index))\n        } else {\n            None\n        }",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        val textArray = text.toCharArray\n        val patternArray = pattern.toCharArray\n        var i = 0\n        var j = 0\n        var found = false\n        var position = 0\n        var count = 0\n        while(i < textLength) {\n            if(textArray(i) == patternArray(j)) {\n                if(j == 0) position = i\n                j += 1\n                if(j == patternLength) {\n                    found = true\n                    count += 1\n                    j = 0\n                }\n            } else {\n                j = 0\n            }\n            i += 1\n        }\n        if(found) Some(Right(count)) else None",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        var i = 0\n        var j = 0\n        var count = 0\n        var position = 0\n        while(i < textLength) {\n            if(text(i) == pattern(j)) {\n                if(j == 0) position = i\n                j += 1\n                if(j == patternLength) {\n                    count += 1\n                    j = 0\n                }\n            }\n            else {\n                j = 0\n            }\n            i += 1\n        }\n        if(count == 0) None\n        else if(count == 1) Some(Right(position))\n        else Some(Left(count.toString))",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return None\n        var i = 0\n        while (i < textLength - patternLength + 1) {\n            var j = 0\n            while (j < patternLength && text(i + j) == pattern(j)) j += 1\n            if (j == patternLength) return Some(Right(i))\n            i += 1\n        }\n        None",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            return None\n        }\n        val patternHash = pattern.hashCode\n        var i = 0\n        while (i <= textLength - patternLength) {\n            val substring = text.substring(i, i + patternLength)\n            if (substring.hashCode == patternHash) {\n                return Some(Right(i))\n            }\n            i += 1\n        }\n        return None",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return None\n        var i = 0\n        var j = 0\n        var found = false\n        while (i < textLength && j < patternLength) {\n            if (text(i) == pattern(j)) {\n                i += 1\n                j += 1\n            } else {\n                i = i - j + 1\n                j = 0\n            }\n        }\n        if (j == patternLength) {\n            found = true\n            return Some(Right(i - j))\n        }\n        if (found) Some(Left(pattern)) else None",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) {\n            return None\n        }\n        for (i <- 0 to textLength - patternLength) {\n            if (text.substring(i, i + patternLength) == pattern) {\n                return Some(Right(i))\n            }\n        }\n        return None",
    "        val regex = pattern.r\n        val result = regex.findFirstMatchIn(text)\n        if (result.isEmpty) None\n        else {\n            val index = result.get.start\n            Some(Right(index))\n        }",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            return None\n        }\n        var i = 0\n        while (i < textLength) {\n            var j = 0\n            while (j < patternLength) {\n                if (text(i + j) != pattern(j)) {\n                    break\n                }\n                j += 1\n            }\n            if (j == patternLength) {\n                return Some(Right(i))\n            }\n            i += 1\n        }\n        return None",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (patternLength > textLength) return None\n        var i = 0\n        var j = 0\n        var occurance = 0\n        var position = 0\n        while (i < textLength) {\n            if (text(i) == pattern(j)) {\n                if (j == 0) position = i\n                j += 1\n                if (j == patternLength) {\n                    occurance += 1\n                    j = 0\n                }\n            } else {\n                j = 0\n            }\n            i += 1\n        }\n        if (occurance == 0) return None\n        if (occurance == 1) return Some(Right(position))\n        return Some(Left(occurance.toString))",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            return None\n        }\n        val patternHash = pattern.hashCode\n        var i = 0\n        while (i <= textLength - patternLength) {\n            val subString = text.substring(i, i + patternLength)\n            if (subString.hashCode == patternHash) {\n                return Some(Right(i))\n            }\n            i += 1\n        }\n        None",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        var occurance = 0\n        var position = 0\n        var found = false\n        for (i <- 0 until textLength - patternLength + 1) {\n            if (text.substring(i, i + patternLength) == pattern) {\n                occurance += 1\n                position = i\n                found = true\n            }\n        }\n        if (found) {\n            Some(Right(position))\n        } else {\n            None\n        }",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            return None\n        }\n        val textArray = text.toCharArray\n        val patternArray = pattern.toCharArray\n        var count = 0\n        var i = 0\n        while (i <= textLength - patternLength) {\n            var j = 0\n            while (j < patternLength && textArray(i + j) == patternArray(j)) {\n                j += 1\n            }\n            if (j == patternLength) {\n                count += 1\n                i += patternLength\n            } else {\n                i += 1\n            }\n        }\n        if (count == 0) {\n            return None\n        } else {\n            return Some(Right(count))\n        }",
    "        if (text.contains(pattern)) {\n            Some(Right(text.indexOf(pattern)))\n        } else {\n            Some(Left(\"No match\"))\n        }",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return None\n        var i = 0\n        var j = 0\n        var count = 0\n        var index = 0\n        while (i < textLength) {\n            if (text(i) == pattern(j)) {\n                if (j == 0) index = i\n                j += 1\n                if (j == patternLength) {\n                    count += 1\n                    j = 0\n                }\n            }\n            else {\n                j = 0\n            }\n            i += 1\n        }\n        if (count == 0) return None\n        if (count == 1) return Some(Right(index))\n        return Some(Left(count.toString))",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) {\n            return None\n        }\n        for (i <- 0 to textLength - patternLength) {\n            val sub = text.substring(i, i + patternLength)\n            if (sub == pattern) {\n                return Some(Right(i))\n            }\n        }\n        None",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) {\n            return None\n        }\n        var i = 0\n        while (i < textLength - patternLength + 1) {\n            var j = 0\n            while (j < patternLength) {\n                if (text(i + j) != pattern(j)) {\n                    break\n                }\n                j += 1\n            }\n            if (j == patternLength) {\n                return Some(Right(i))\n            }\n            i += 1\n        }\n        None",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return None\n        val textArray = text.toCharArray\n        val patternArray = pattern.toCharArray\n        for (i <- 0 until textLength - patternLength + 1) {\n            var j = 0\n            while (j < patternLength && textArray(i + j) == patternArray(j)) j += 1\n            if (j == patternLength) return Some(Right(i))\n        }\n        None",
    "        val n = text.length\n        val m = pattern.length\n        val p = new Array[Int](m + 1)\n        var k = 0\n        var q = 1\n        p(0) = 0\n        while (q < m) {\n            if (pattern(q) == pattern(k)) {\n                k += 1\n                p(q) = k\n                q += 1\n            } else {\n                if (k != 0) {\n                    k = p(k - 1)\n                } else {\n                    p(q) = 0\n                    q += 1\n                }\n            }\n        }\n        var i = 0\n        var j = 0\n        while (i < n) {\n            if (text(i) == pattern(j)) {\n                i += 1\n                j += 1\n            }\n            if (j == m) {\n                return Some(Right(i - j))\n                j = p(j - 1)\n            } else if (i < n && text(i) != pattern(j)) {\n                if (j != 0) {\n                    j = p(j - 1)\n                } else {\n                    i += 1\n                }\n            }\n        }\n        None",
    "        if (text.contains(pattern)) {\n            val index = text.indexOf(pattern)\n            Some(Right(index))\n        } else {\n            None\n        }",
    "        if (text.contains(pattern)) {\n            val index = text.indexOf(pattern)\n            Some(Right(index))\n        } else {\n            None\n        }",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            return None\n        }\n        val patternHash = pattern.hashCode\n        var i = 0\n        while (i <= textLength - patternLength) {\n            val subString = text.substring(i, i + patternLength)\n            if (subString.hashCode == patternHash) {\n                return Some(Right(i))\n            }\n            i += 1\n        }\n        return None",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return None\n        var i = 0\n        var j = 0\n        while (i < textLength) {\n            if (text(i) == pattern(j)) {\n                j += 1\n                if (j == patternLength) return Some(Right(i - patternLength + 1))\n            }\n            else {\n                j = 0\n            }\n            i += 1\n        }\n        return None",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            return None\n        }\n        var i = 0\n        while (i <= textLength - patternLength) {\n            var j = 0\n            while (j < patternLength && text(i + j) == pattern(j)) {\n                j += 1\n            }\n            if (j == patternLength) {\n                return Some(Right(i))\n            }\n            i += 1\n        }\n        return None",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            return None\n        }\n        val patternHash = pattern.hashCode\n        var textHash = text.substring(0, patternLength).hashCode\n        for (i <- 0 to textLength - patternLength) {\n            if (textHash == patternHash) {\n                if (text.substring(i, i + patternLength) == pattern) {\n                    return Some(Right(i))\n                }\n            }\n            if (i < textLength - patternLength) {\n                textHash = (textHash - text(i).toInt) / 256 + (text(i + patternLength).toInt * pow(256, patternLength - 1)).toInt\n            }\n        }\n        return None",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return None\n        val patternHash = pattern.hashCode\n        var textHash = text.substring(0, patternLength).hashCode\n        var i = 0\n        while (i <= textLength - patternLength) {\n            if (patternHash == textHash) {\n                if (pattern == text.substring(i, i + patternLength)) return Some(Right(i))\n            }\n            if (i < textLength - patternLength) {\n                textHash = textHash - text(i).toInt + text(i + patternLength).toInt\n            }\n            i += 1\n        }\n        None",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return None\n        var i = 0\n        var j = 0\n        var found = false\n        var index = -1\n        while (i < textLength && j < patternLength) {\n            if (text(i) == pattern(j)) {\n                if (j == 0) index = i\n                i += 1\n                j += 1\n            } else {\n                if (j != 0) {\n                    i = index + 1\n                    j = 0\n                } else {\n                    i += 1\n                }\n                index = -1\n            }\n            if (j == patternLength) {\n                found = true\n                return Some(Right(index.toLong))\n            }\n        }\n        if (found) Some(Right(index.toLong)) else None",
    "        val index = text.indexOf(pattern)\n        if (index == -1) None\n        else Some(Right(index))",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        val textCharArray = text.toCharArray\n        val patternCharArray = pattern.toCharArray\n        val textCharArrayLength = textCharArray.length\n        val patternCharArrayLength = patternCharArray.length\n        var i = 0\n        var j = 0\n        var k = 0\n        var found = false\n        var index = 0\n        var result = \"\"\n        while (i < textCharArrayLength && j < patternCharArrayLength) {\n            if (textCharArray(i) == patternCharArray(j)) {\n                i += 1\n                j += 1\n            } else {\n                j = 0\n                i = k + 1\n                k = i\n            }\n            if (j == patternCharArrayLength) {\n                found = true\n                result += (index + 1).toString + \" \"\n                index = i - patternCharArrayLength\n                j = 0\n            }\n        }\n        if (found) Some(Left(result)) else None",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) {\n            return None\n        }\n        val patternHash = pattern.hashCode\n        var textHash = text.substring(0, patternLength).hashCode\n        var i = 0\n        while (i < textLength - patternLength + 1) {\n            if (patternHash == textHash) {\n                if (pattern == text.substring(i, i + patternLength)) {\n                    return Some(Right(i))\n                }\n            }\n            if (i < textLength - patternLength) {\n                textHash = (textHash - text.charAt(i).toInt) / 31 + (text.charAt(i + patternLength).toInt * pow(31, patternLength - 1)).toInt\n            }\n            i += 1\n        }\n        return None",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return None\n        var i = 0\n        var j = 0\n        var index = 0\n        var count = 0\n        while (i < textLength) {\n            if (text(i) == pattern(j)) {\n                if (j == 0) index = i\n                j += 1\n                if (j == patternLength) {\n                    count += 1\n                    j = 0\n                }\n            } else {\n                j = 0\n            }\n            i += 1\n        }\n        if (count == 0) None\n        else if (count == 1) Some(Right(index))\n        else Some(Left(count.toString))",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength)\n            return None\n        val patternHash = pattern.hashCode\n        var textHash = text.substring(0, patternLength).hashCode\n        var i = 0\n        while (i <= textLength - patternLength) {\n            if (patternHash == textHash) {\n                if (pattern == text.substring(i, i + patternLength))\n                    return Some(Right(i))\n            }\n            if (i < textLength - patternLength) {\n                textHash = (textHash - text(i).toInt * pow(31, patternLength - 1).toInt) * 31 + text(i + patternLength).toInt\n            }\n            i += 1\n        }\n        None",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return None\n        val patternHash = pattern.hashCode\n        var textHash = text.substring(0, patternLength).hashCode\n        if (patternHash == textHash) return Some(Left(text.substring(0, patternLength)))\n        var i = 1\n        while (i <= textLength - patternLength) {\n            textHash = textHash - text.charAt(i - 1).toInt + text.charAt(i + patternLength - 1).toInt\n            if (patternHash == textHash) return Some(Left(text.substring(i, i + patternLength)))\n            i += 1\n        }\n        None",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return None\n        val patternHash = pattern.hashCode\n        var textHash = text.substring(0, patternLength).hashCode\n        var i = 0\n        while (i < textLength - patternLength) {\n            if (textHash == patternHash) {\n                if (text.substring(i, i + patternLength) == pattern) return Some(Right(i))\n            }\n            if (i < textLength - patternLength - 1) {\n                textHash = textHash - text.charAt(i).toInt + text.charAt(i + patternLength).toInt\n            }\n            i += 1\n        }\n        if (textHash == patternHash) {\n            if (text.substring(i, i + patternLength) == pattern) return Some(Right(i))\n        }\n        return None",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        var i = 0\n        var j = 0\n        var occurance = 0\n        var position = 0\n        while (i < textLength) {\n            if (text(i) == pattern(j)) {\n                if (j == 0) position = i\n                j += 1\n                if (j == patternLength) {\n                    occurance += 1\n                    j = 0\n                }\n            }\n            else {\n                if (j != 0) {\n                    i = position\n                    j = 0\n                }\n            }\n            i += 1\n        }\n        if (occurance == 0) None\n        else Some(Right(occurance))",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return None\n        var result = new ListBuffer[Long]\n        for (i <- 0 to textLength - patternLength) {\n            if (text.substring(i, i + patternLength) == pattern) result += i\n        }\n        if (result.length == 0) None\n        else Some(Right(result.length))",
    "        if (text.contains(pattern)) {\n            val index = text.indexOf(pattern)\n            val count = text.split(pattern).length - 1\n            Some(Right(count))\n        } else {\n            None\n        }",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return None\n        var i = 0\n        while (i <= textLength - patternLength) {\n            var j = 0\n            while (j < patternLength && text(i + j) == pattern(j)) j += 1\n            if (j == patternLength) return Some(Right(i))\n            i += 1\n        }\n        None",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) {\n            return None\n        }\n        for (i <- 0 to textLength - patternLength) {\n            if (text.substring(i, i + patternLength) == pattern) {\n                return Some(Right(i))\n            }\n        }\n        return None",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        var result = new ListBuffer[Long]\n        for (i <- 0 to textLength - patternLength) {\n            if (text.substring(i, i + patternLength) == pattern) {\n                result += i\n            }\n        }\n        if (result.length == 0) None\n        else Some(Right(result.length))",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return None\n        var i = 0\n        var j = 0\n        var found = false\n        while (i < textLength && j < patternLength) {\n            if (text(i) == pattern(j)) {\n                i += 1\n                j += 1\n            } else {\n                i = i - j + 1\n                j = 0\n            }\n        }\n        if (j == patternLength) {\n            found = true\n            return Some(Right(i - j))\n        }\n        if (!found) return None\n        return Some(Left(\"\"))",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) {\n            return None\n        }\n        for (i <- 0 to textLength - patternLength) {\n            if (text.substring(i, i + patternLength) == pattern) {\n                return Some(Right(i))\n            }\n        }\n        return None",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) {\n            return None\n        }\n        var i = 0\n        while (i < textLength) {\n            var j = 0\n            while (j < patternLength && i + j < textLength && text(i + j) == pattern(j)) {\n                j += 1\n            }\n            if (j == patternLength) {\n                return Some(Right(i))\n            }\n            i += 1\n        }\n        None",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) {\n            return None\n        }\n        var i = 0\n        while (i < textLength - patternLength + 1) {\n            if (text.substring(i, i + patternLength) == pattern) {\n                return Some(Right(i))\n            }\n            i += 1\n        }\n        None",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return None\n        val patternHash = pattern.hashCode\n        var i = 0\n        while (i <= textLength - patternLength) {\n            val subString = text.substring(i, i + patternLength)\n            if (subString.hashCode == patternHash) {\n                if (subString == pattern) return Some(Right(i))\n                else return Some(Left(subString))\n            }\n            i += 1\n        }\n        None",
    "        val index = text.indexOf(pattern)\n        if (index == -1) None\n        else Some(Right(index))",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return None\n        var i = 0\n        var j = 0\n        var found = false\n        var position = 0\n        while (i < textLength) {\n            if (text(i) == pattern(j)) {\n                if (j == 0) position = i\n                j += 1\n                if (j == patternLength) {\n                    found = true\n                    break\n                }\n            } else {\n                j = 0\n            }\n            i += 1\n        }\n        if (found) Some(Right(position)) else None",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            None\n        } else {\n            val textArray = text.toCharArray\n            val patternArray = pattern.toCharArray\n            var i = 0\n            var j = 0\n            var found = false\n            var position = -1\n            while (i < textLength && !found) {\n                if (textArray(i) == patternArray(j)) {\n                    if (j == 0) position = i\n                    j += 1\n                    if (j == patternLength) found = true\n                } else {\n                    j = 0\n                }\n                i += 1\n            }\n            if (found) Some(Right(position)) else None\n        }",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return None\n        var i = 0\n        var j = 0\n        var k = 0\n        var t = 0\n        var h = 1\n        for (i <- 0 until patternLength - 1) h = (h * 256) % 101\n        i = 0\n        j = 0\n        while (i < patternLength) {\n            j = (j * 256 + text(i).toInt) % 101\n            k = (k * 256 + pattern(i).toInt) % 101\n            i += 1\n        }\n        i = 0\n        while (i <= textLength - patternLength) {\n            if (j == k) {\n                t = 0\n                while (t < patternLength) {\n                    if (text(i + t) != pattern(t)) break\n                    t += 1\n                }\n                if (t == patternLength) return Some(Right(i))\n            }\n            if (i < textLength - patternLength) {\n                j = (j - h * text(i).toInt) % 101\n                if (j < 0) j += 101\n                j = (j * 256 + text(i + patternLength).toInt) % 101\n                i += 1\n            }\n        }\n        None",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        var i = 0\n        var j = 0\n        var count = 0\n        while (i < textLength) {\n            if (text(i) == pattern(j)) {\n                i += 1\n                j += 1\n            } else {\n                i = i - j + 1\n                j = 0\n            }\n            if (j == patternLength) {\n                count += 1\n                j = 0\n            }\n        }\n        if (count == 0) None\n        else Some(Right(count))",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        var index = 0\n        var found = false\n        while (index <= textLength - patternLength) {\n            if (text.substring(index, index + patternLength) == pattern) {\n                found = true\n                return Some(Right(index))\n            }\n            index += 1\n        }\n        if (!found) return Some(Left(\"No match\"))\n        None",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return None\n        var i = 0\n        var j = 0\n        var occurance = 0\n        var position = 0\n        while (i < textLength) {\n            if (text(i) == pattern(j)) {\n                if (j == 0) position = i\n                j += 1\n                if (j == patternLength) {\n                    occurance += 1\n                    j = 0\n                }\n            }\n            else {\n                j = 0\n            }\n            i += 1\n        }\n        if (occurance == 0) return None\n        else if (occurance == 1) return Some(Right(position))\n        else return Some(Left(occurance.toString))",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return None\n        var i = 0\n        var j = 0\n        var occurance = 0\n        var position = 0\n        while (i < textLength) {\n            if (text(i) == pattern(j)) {\n                if (j == 0) position = i\n                j += 1\n                if (j == patternLength) {\n                    occurance += 1\n                    j = 0\n                }\n            }\n            else {\n                if (j != 0) {\n                    j = 0\n                    i = position\n                }\n            }\n            i += 1\n        }\n        if (occurance == 0) None\n        else Some(Right(occurance))",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) {\n            return None\n        }\n        val textArray = text.toCharArray\n        val patternArray = pattern.toCharArray\n        var i = 0\n        var j = 0\n        var k = 0\n        var found = false\n        while (i < textLength) {\n            if (textArray(i) == patternArray(j)) {\n                if (j == 0) {\n                    k = i\n                }\n                if (j == patternLength - 1) {\n                    found = true\n                    return Some(Right(k))\n                }\n                i += 1\n                j += 1\n            } else {\n                i = i - j + 1\n                j = 0\n            }\n        }\n        if (!found) {\n            return None\n        }\n        return None",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return None\n        var i = 0\n        var j = 0\n        var found = false\n        while (i < textLength && j < patternLength) {\n            if (text(i) == pattern(j)) {\n                i += 1\n                j += 1\n            } else {\n                i = i - j + 1\n                j = 0\n            }\n        }\n        if (j == patternLength) {\n            found = true\n            return Some(Right(i - j))\n        }\n        if (found) return Some(Left(pattern))\n        return None",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (patternLength > textLength) return None\n        val patternHash = pattern.hashCode\n        var textHash = text.substring(0, patternLength).hashCode\n        var i = 0\n        while (i <= textLength - patternLength) {\n            if (textHash == patternHash) {\n                if (text.substring(i, i + patternLength) == pattern) return Some(Right(i))\n            }\n            if (i < textLength - patternLength) {\n                textHash = (textHash - text(i).toInt * pow(31, patternLength - 1).toInt) * 31 + text(i + patternLength).toInt\n            }\n            i += 1\n        }\n        None",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            return None\n        }\n        val textArray = text.toCharArray\n        val patternArray = pattern.toCharArray\n        var i = 0\n        var j = 0\n        var k = 0\n        var found = false\n        while (i < textLength && j < patternLength) {\n            if (textArray(i) == patternArray(j)) {\n                i += 1\n                j += 1\n            }\n            else {\n                j = 0\n                i = k + 1\n                k = i\n            }\n            if (j == patternLength) {\n                found = true\n            }\n        }\n        if (found) {\n            return Some(Right(i - patternLength))\n        }\n        return None",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        val textArray = text.toCharArray\n        val patternArray = pattern.toCharArray\n        var i = 0\n        var j = 0\n        var found = false\n        while (i < textLength && j < patternLength) {\n            if (textArray(i) == patternArray(j)) {\n                i += 1\n                j += 1\n            } else {\n                i = i - j + 1\n                j = 0\n            }\n        }\n        if (j == patternLength) {\n            found = true\n            return Some(Right(i - j))\n        }\n        if (!found) {\n            return Some(Left(\"No match\"))\n        }\n        None",
    "        val index = text.indexOf(pattern)\n        if (index == -1) None\n        else Some(Right(index))",
    "        val index = text.indexOf(pattern)\n        if (index == -1) None\n        else Some(Right(index))",
    "        val index = text.indexOf(pattern)\n        if (index == -1) None else Some(Right(index))",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        for (i <- 0 to textLength - patternLength) {\n            if (text.substring(i, i + patternLength) == pattern) {\n                return Some(Right(i))\n            }\n        }\n        None",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return None\n        val textArray = text.toCharArray\n        val patternArray = pattern.toCharArray\n        for (i <- 0 to textLength - patternLength) {\n            var j = 0\n            while (j < patternLength && textArray(i + j) == patternArray(j)) j += 1\n            if (j == patternLength) return Some(Right(i))\n        }\n        None",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            return None\n        }\n        var i = 0\n        var j = 0\n        var count = 0\n        var index = 0\n        while (i < textLength) {\n            if (text(i) == pattern(j)) {\n                i += 1\n                j += 1\n                if (j == patternLength) {\n                    count += 1\n                    index = i - patternLength\n                    j = 0\n                }\n            } else {\n                i = i - j + 1\n                j = 0\n            }\n        }\n        if (count == 0) {\n            return None\n        } else if (count == 1) {\n            return Some(Right(index))\n        } else {\n            return Some(Left(count + \" times at \" + index))\n        }",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return None\n        val textArray = text.toCharArray\n        val patternArray = pattern.toCharArray\n        for (i <- 0 to textLength - patternLength) {\n            var j = 0\n            while (j < patternLength && textArray(i + j) == patternArray(j)) j += 1\n            if (j == patternLength) return Some(Right(i))\n        }\n        None",
    "        val index = text.indexOf(pattern)\n        if (index == -1) None\n        else Some(Right(index))",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            return None\n        }\n        var i = 0\n        while (i < textLength - patternLength + 1) {\n            var j = 0\n            while (j < patternLength && text(i + j) == pattern(j)) {\n                j += 1\n            }\n            if (j == patternLength) {\n                return Some(Right(i))\n            }\n            i += 1\n        }\n        return None",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) None\n        else {\n            var i = 0\n            var j = 0\n            var occurance = 0\n            var position = 0\n            var found = false\n            while (i < textLength) {\n                if (text(i) == pattern(j)) {\n                    if (j == 0) position = i\n                    j += 1\n                    if (j == patternLength) {\n                        occurance += 1\n                        j = 0\n                        found = true\n                    }\n                }\n                else {\n                    j = 0\n                    if (text(i) == pattern(j)) {\n                        position = i\n                        j += 1\n                    }\n                }\n                i += 1\n            }\n            if (found) Some(Right(position))\n            else None\n        }",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return None\n        var i = 0\n        var j = 0\n        var count = 0\n        var index = 0\n        while (i < textLength) {\n            if (text(i) == pattern(j)) {\n                if (j == 0) index = i\n                j += 1\n                if (j == patternLength) {\n                    count += 1\n                    j = 0\n                }\n            } else {\n                j = 0\n            }\n            i += 1\n        }\n        if (count == 0) return None\n        if (count == 1) return Some(Right(index))\n        return Some(Left(count.toString))",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength)\n            return None\n        var i = 0\n        var j = 0\n        var index = -1\n        while (i < textLength) {\n            if (text(i) == pattern(j)) {\n                if (j == 0)\n                    index = i\n                j += 1\n                if (j == patternLength)\n                    return Some(Right(index))\n            }\n            else {\n                if (j != 0) {\n                    i = index\n                    j = 0\n                }\n            }\n            i += 1\n        }\n        None",
    "        val index = text.indexOf(pattern)\n        if (index == -1) None\n        else Some(Right(index))",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        val patternHash = pattern.hashCode\n        var textHash = text.substring(0, patternLength).hashCode\n        var i = 0\n        var j = 0\n        while (i < textLength - patternLength + 1) {\n            if (textHash == patternHash) {\n                j = 0\n                while (j < patternLength && text(i + j) == pattern(j)) j += 1\n                if (j == patternLength) return Some(Right(i))\n            }\n            if (i < textLength - patternLength) {\n                textHash -= text(i).toInt\n                textHash += text(i + patternLength).toInt\n            }\n            i += 1\n        }\n        None",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return None\n        var i = 0\n        var j = 0\n        var occurance = 0\n        var position = 0\n        while (i < textLength) {\n            if (text(i) == pattern(j)) {\n                if (j == 0) position = i\n                j += 1\n                if (j == patternLength) {\n                    occurance += 1\n                    j = 0\n                }\n            }\n            else {\n                if (j != 0) {\n                    i = position\n                    j = 0\n                }\n            }\n            i += 1\n        }\n        if (occurance == 0) return None\n        else return Some(Left(occurance.toString + \":\" + position.toString))",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return None\n        var i = 0\n        var j = 0\n        var index = 0\n        var found = false\n        while (i < textLength && j < patternLength) {\n            if (text(i) == pattern(j)) {\n                if (j == 0) index = i\n                i += 1\n                j += 1\n            } else {\n                if (j != 0) {\n                    j = 0\n                    i = index + 1\n                } else {\n                    i += 1\n                }\n            }\n            if (j == patternLength) {\n                found = true\n                break\n            }\n        }\n        if (found) Some(Right(index)) else None",
    "        if (text.contains(pattern)) {\n            val index = text.indexOf(pattern)\n            Some(Right(index))\n        } else {\n            None\n        }",
    "        if (text.contains(pattern)) {\n            val index = text.indexOf(pattern)\n            Some(Right(index))\n        } else {\n            None\n        }",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (patternLength > textLength) return None\n        var i = 0\n        while (i < textLength - patternLength + 1) {\n            var j = 0\n            while (j < patternLength && text(i + j) == pattern(j)) j += 1\n            if (j == patternLength) return Some(Right(i))\n            i += 1\n        }\n        None",
    "        val index = text.indexOf(pattern)\n        if (index == -1) None\n        else Some(Right(index))",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            return None\n        }\n        val textArray = text.toCharArray\n        val patternArray = pattern.toCharArray\n        for (i <- 0 to textLength - patternLength) {\n            var j = 0\n            while (j < patternLength && textArray(i + j) == patternArray(j)) {\n                j += 1\n            }\n            if (j == patternLength) {\n                return Some(Right(i))\n            }\n        }\n        return None",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            None\n        } else {\n            var index = 0\n            var result = List[Long]()\n            while (index <= textLength - patternLength) {\n                if (text.substring(index, index + patternLength) == pattern) {\n                    result = result :+ index\n                }\n                index += 1\n            }\n            if (result.isEmpty) {\n                None\n            } else {\n                Some(Right(result.length))\n            }\n        }",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            return None\n        }\n        var i = 0\n        while (i <= textLength - patternLength) {\n            var j = 0\n            while (j < patternLength && text(i + j) == pattern(j)) {\n                j += 1\n            }\n            if (j == patternLength) {\n                return Some(Right(i))\n            }\n            i += 1\n        }\n        None",
    "        val index = text.indexOf(pattern)\n        if (index == -1) None\n        else Some(Right(index))",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        var index = 0\n        var count = 0\n        var result = \"\"\n        while (index < textLength) {\n            if (text.substring(index, index + patternLength) == pattern) {\n                count += 1\n                result += index + \" \"\n            }\n            index += 1\n        }\n        if (count == 0) None\n        else if (count == 1) Some(Right(result.trim.toLong))\n        else Some(Left(result.trim))",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return None\n        for (i <- 0 to textLength - patternLength) {\n            if (text.substring(i, i + patternLength) == pattern) return Some(Right(i))\n        }\n        return None",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            return None\n        }\n        for (i <- 0 to textLength - patternLength) {\n            if (text.substring(i, i + patternLength) == pattern) {\n                return Some(Right(i))\n            }\n        }\n        return None",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        val textArray = text.toCharArray\n        val patternArray = pattern.toCharArray\n        var i = 0\n        var j = 0\n        var found = false\n        var position = 0\n        var count = 0\n        while (i < textLength && j < patternLength) {\n            if (textArray(i) == patternArray(j)) {\n                if (j == 0) {\n                    position = i\n                }\n                i += 1\n                j += 1\n                if (j == patternLength) {\n                    found = true\n                    count += 1\n                    j = 0\n                }\n            } else {\n                i = i - j + 1\n                j = 0\n            }\n        }\n        if (found) {\n            Some(Right(position))\n        } else {\n            None\n        }",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            return None\n        }\n        var i = 0\n        while (i < textLength - patternLength + 1) {\n            var j = 0\n            while (j < patternLength && text(i + j) == pattern(j)) {\n                j += 1\n            }\n            if (j == patternLength) {\n                return Some(Right(i))\n            }\n            i += 1\n        }\n        None"
  ]
}