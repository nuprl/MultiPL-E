{
  "name": "mbpp_644_reverse_Array_Upto_K",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to reverse a list upto a given position.\n    def reverseArrayUptoK(input : List[Long], k : Long) : List[Long] = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_644_reverse_Array_Upto_K.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(reverseArrayUptoK((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)), (4l)).equals((List[Long](4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))));\n    assert(reverseArrayUptoK((List[Long](4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (2l)).equals((List[Long](5l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))));\n    assert(reverseArrayUptoK((List[Long](9l.toLong, 8l.toLong, 7l.toLong, 6l.toLong, 5l.toLong)), (3l)).equals((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 6l.toLong, 5l.toLong))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val result = new ListBuffer[Long]\n        for (i <- 0 to k.toInt - 1) {\n            result += input(k.toInt - 1 - i)\n        }\n        for (i <- k.toInt to input.length - 1) {\n            result += input(i)\n        }\n        result.toList",
    "        if (k == 0) input\n        else {\n            val (left, right) = input.splitAt(k.toInt)\n            right ::: left\n        }",
    "        if (k == 0) input\n        else {\n            val (first, second) = input.splitAt(k.toInt)\n            second ::: first.reverse\n        }",
    "        if (k == 0) {\n            input\n        } else {\n            val (first, second) = input.splitAt(k.toInt)\n            second ::: first.reverse\n        }",
    "        if (k == 0) {\n            return input\n        }\n        if (k == 1) {\n            return input.reverse\n        }\n        if (k > input.length) {\n            return input.reverse\n        }\n        val (first, second) = input.splitAt(k.toInt)\n        return first.reverse ::: second",
    "        if (k == 0) return input\n        if (k == 1) return input.reverse\n        val (first, second) = input.splitAt(k.toInt)\n        first.reverse ::: second",
    "        var result : List[Long] = List()\n        var count : Long = 0\n        for (i <- input) {\n            if (count < k) {\n                result = i :: result\n            } else {\n                result = result :+ i\n            }\n            count += 1\n        }\n        result",
    "        def reverse(input : List[Long], k : Long, output : List[Long]) : List[Long] = {\n            if (k == 0) output\n            else reverse(input.tail, k - 1, input.head :: output)\n        }\n        reverse(input, k, List())",
    "        val (first, second) = input.splitAt(k.toInt)\n        second ::: first.reverse",
    "        if (input.length < k) {\n            input.reverse\n        } else {\n            val (first, second) = input.splitAt(k.toInt)\n            first.reverse ::: second\n        }",
    "        if (k <= 0) input\n        else {\n            val (front, back) = input.splitAt(k.toInt)\n            front.reverse ::: back\n        }",
    "        var output = new ListBuffer[Long]\n        if (k > input.length) {\n            return input\n        }\n        for (i <- 0 until k) {\n            output += input(k - i - 1)\n        }\n        for (i <- k until input.length) {\n            output += input(i)\n        }\n        return output.toList",
    "        val (first, second) = input.splitAt(k.toInt)\n        second ::: first.reverse",
    "        if (k == 0) {\n            input\n        } else {\n            reverseArrayUptoK(input.tail :+ input.head, k - 1)\n        }",
    "        def reverse(input : List[Long], k : Long, output : List[Long]) : List[Long] = {\n            if (k == 0) output\n            else reverse(input.tail, k - 1, input.head :: output)\n        }\n        reverse(input, k, Nil) ++ input.drop(k.toInt)",
    "        val (first, second) = input.splitAt(k.toInt)\n        second ::: first.reverse",
    "        if (input.length < k) {\n            input.reverse\n        } else {\n            val (first, second) = input.splitAt(k.toInt)\n            first.reverse ::: second\n        }",
    "        if (k == 0) return input\n        var result = List[Long]()\n        for (i <- 0 until k) {\n            result = input(i) :: result\n        }\n        for (i <- k until input.length) {\n            result = result ::: List(input(i))\n        }\n        return result",
    "        def reverseArrayUptoK(input : List[Long], k : Long, result : List[Long]) : List[Long] = {\n            if (k == 0) result\n            else reverseArrayUptoK(input.tail, k - 1, input.head :: result)\n        }\n        reverseArrayUptoK(input, k, Nil)",
    "        if (input.length <= k) input.reverse\n        else input.take(k.toInt).reverse ::: input.drop(k.toInt)"
  ]
}