{
  "name": "mbpp_644_reverse_Array_Upto_K",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to reverse a list upto a given position.\n    def reverseArrayUptoK(input : List[Long], k : Long) : List[Long] = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_644_reverse_Array_Upto_K.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(reverseArrayUptoK((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)), (4l)).equals((List[Long](4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))));\n    assert(reverseArrayUptoK((List[Long](4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (2l)).equals((List[Long](5l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))));\n    assert(reverseArrayUptoK((List[Long](9l.toLong, 8l.toLong, 7l.toLong, 6l.toLong, 5l.toLong)), (3l)).equals((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 6l.toLong, 5l.toLong))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val result = new ListBuffer[Long]\n        for (i <- 0 to k.toInt - 1) {\n            result += input(k.toInt - 1 - i)\n        }\n        for (i <- k.toInt to input.length - 1) {\n            result += input(i)\n        }\n        result.toList",
    "        if (k == 0) input\n        else {\n            val (left, right) = input.splitAt(k.toInt)\n            right ::: left\n        }",
    "        if (k == 0) input\n        else {\n            val (first, second) = input.splitAt(k.toInt)\n            second ::: first.reverse\n        }",
    "        if (k == 0) {\n            input\n        } else {\n            val (first, second) = input.splitAt(k.toInt)\n            second ::: first.reverse\n        }",
    "        if (k == 0) {\n            return input\n        }\n        if (k == 1) {\n            return input.reverse\n        }\n        if (k > input.length) {\n            return input.reverse\n        }\n        val (first, second) = input.splitAt(k.toInt)\n        return first.reverse ::: second",
    "        if (k == 0) return input\n        if (k == 1) return input.reverse\n        val (first, second) = input.splitAt(k.toInt)\n        first.reverse ::: second",
    "        var result : List[Long] = List()\n        var count : Long = 0\n        for (i <- input) {\n            if (count < k) {\n                result = i :: result\n            } else {\n                result = result :+ i\n            }\n            count += 1\n        }\n        result",
    "        def reverse(input : List[Long], k : Long, output : List[Long]) : List[Long] = {\n            if (k == 0) output\n            else reverse(input.tail, k - 1, input.head :: output)\n        }\n        reverse(input, k, List())",
    "        val (first, second) = input.splitAt(k.toInt)\n        second ::: first.reverse",
    "        if (input.length < k) {\n            input.reverse\n        } else {\n            val (first, second) = input.splitAt(k.toInt)\n            first.reverse ::: second\n        }",
    "        if (k <= 0) input\n        else {\n            val (front, back) = input.splitAt(k.toInt)\n            front.reverse ::: back\n        }",
    "        var output = new ListBuffer[Long]\n        if (k > input.length) {\n            return input\n        }\n        for (i <- 0 until k) {\n            output += input(k - i - 1)\n        }\n        for (i <- k until input.length) {\n            output += input(i)\n        }\n        return output.toList",
    "        val (first, second) = input.splitAt(k.toInt)\n        second ::: first.reverse",
    "        if (k == 0) {\n            input\n        } else {\n            reverseArrayUptoK(input.tail :+ input.head, k - 1)\n        }",
    "        def reverse(input : List[Long], k : Long, output : List[Long]) : List[Long] = {\n            if (k == 0) output\n            else reverse(input.tail, k - 1, input.head :: output)\n        }\n        reverse(input, k, Nil) ++ input.drop(k.toInt)",
    "        val (first, second) = input.splitAt(k.toInt)\n        second ::: first.reverse",
    "        if (input.length < k) {\n            input.reverse\n        } else {\n            val (first, second) = input.splitAt(k.toInt)\n            first.reverse ::: second\n        }",
    "        if (k == 0) return input\n        var result = List[Long]()\n        for (i <- 0 until k) {\n            result = input(i) :: result\n        }\n        for (i <- k until input.length) {\n            result = result ::: List(input(i))\n        }\n        return result",
    "        def reverseArrayUptoK(input : List[Long], k : Long, result : List[Long]) : List[Long] = {\n            if (k == 0) result\n            else reverseArrayUptoK(input.tail, k - 1, input.head :: result)\n        }\n        reverseArrayUptoK(input, k, Nil)",
    "        if (input.length <= k) input.reverse\n        else input.take(k.toInt).reverse ::: input.drop(k.toInt)",
    "        val result = new ListBuffer[Long]()\n        val length = input.length\n        for (i <- 0 until length) {\n            if (i < k) result += input(length - i - 1)\n            else result += input(i)\n        }\n        result.toList",
    "        val (first, second) = input.splitAt(k.toInt)\n        second ::: first.reverse",
    "        var result = List[Long]()\n        var i = 0\n        while (i < k) {\n            result = input(i) :: result\n            i += 1\n        }\n        while (i < input.length) {\n            result = result :+ input(i)\n            i += 1\n        }\n        result",
    "        var result = List[Long]()\n        var i = 0\n        while (i < k) {\n            result = input(i) :: result\n            i += 1\n        }\n        while (i < input.length) {\n            result = input(i) :: result\n            i += 1\n        }\n        return result",
    "        if (k == 0) input\n        else {\n            val (first, second) = input.splitAt(k.toInt)\n            second ::: first.reverse\n        }",
    "        var result = List[Long]()\n        var i = 0\n        while (i < k) {\n            result = input(i) :: result\n            i += 1\n        }\n        while (i < input.length) {\n            result = input(i) :: result\n            i += 1\n        }\n        return result",
    "        var result = new ListBuffer[Long]()\n        var i = 0\n        while (i < k) {\n            result += input(i)\n            i += 1\n        }\n        var j = input.length - 1\n        while (j >= k) {\n            result += input(j)\n            j -= 1\n        }\n        result.toList",
    "        def reverseArrayUptoK(input : List[Long], k : Long, output : List[Long]) : List[Long] = {\n            if (k == 0) output\n            else {\n                reverseArrayUptoK(input.tail, k - 1, input.head :: output)\n            }\n        }\n        reverseArrayUptoK(input, k, Nil)",
    "        if (k == 0) {\n            return input\n        }\n        val (first, second) = input.splitAt(k.toInt)\n        return second ::: first.reverse",
    "        var result = List[Long]()\n        var i = 0\n        while (i < k) {\n            result = input(i) :: result\n            i += 1\n        }\n        while (i < input.length) {\n            result = result :+ input(i)\n            i += 1\n        }\n        result",
    "        if (k == 0) {\n            return input\n        }\n        val newList = new ListBuffer[Long]\n        for (i <- 0 until k) {\n            newList += input(k - i - 1)\n        }\n        for (i <- k until input.length) {\n            newList += input(i)\n        }\n        return newList.toList",
    "        var result = List[Long]()\n        for (i <- 0 until k.toInt) {\n            result = input(i) :: result\n        }\n        for (i <- k.toInt until input.length) {\n            result = result :+ input(i)\n        }\n        return result",
    "        if (k == 0) {\n            input\n        } else {\n            val (first, second) = input.splitAt(k.toInt)\n            second ::: first.reverse\n        }",
    "        if (k == 0) input\n        else {\n            val (first, second) = input.splitAt(k.toInt)\n            second ::: first.reverse\n        }",
    "        val result = new ListBuffer[Long]()\n        for (i <- 0 until k.toInt) result += input(i)\n        for (i <- k.toInt until input.length) result += input(input.length - 1 - i + k.toInt)\n        result.toList",
    "        if (k == 0) input\n        else {\n            val (first, second) = input.splitAt(k.toInt)\n            second ::: first.reverse\n        }",
    "        if (k == 0) return input\n        else {\n            val (first, second) = input.splitAt(k.toInt)\n            return second ::: first.reverse\n        }",
    "        if (k == 0) input\n        else {\n            val (first, second) = input.splitAt(k.toInt)\n            reverseArrayUptoK(second ::: first, k - 1)\n        }",
    "        if (k == 0) {\n            return input\n        }\n        if (k == 1) {\n            return input.reverse\n        }\n        if (k == input.length) {\n            return input.reverse\n        }\n        val (first, second) = input.splitAt(k.toInt)\n        return first.reverse ::: second",
    "        def reverse(input : List[Long], k : Long, output : List[Long]) : List[Long] = {\n            if (k == 0) output\n            else reverse(input.tail, k - 1, input.head :: output)\n        }\n        reverse(input, k, Nil) ::: input.drop(k.toInt)",
    "        var result = List[Long]()\n        var i = 0\n        while (i < k) {\n            result = input(i) :: result\n            i += 1\n        }\n        while (i < input.length) {\n            result = result :+ input(i)\n            i += 1\n        }\n        result",
    "        val n = input.length\n        if (k > n) throw new Exception(\"k is greater than length of input\")\n        val result = new ListBuffer[Long]\n        for (i <- 0 until k) {\n            result += input(k - 1 - i)\n        }\n        for (i <- k until n) {\n            result += input(i)\n        }\n        result.toList",
    "        if (k == 0) input\n        else {\n            val (first, second) = input.splitAt(k.toInt)\n            reverseArrayUptoK(second, k - 1) ::: first\n        }",
    "        if (k == 0) input\n        else reverseArrayUptoK(input.tail ::: List(input.head), k - 1)",
    "        var output = List[Long]()\n        for (i <- 0 to k.toInt - 1) {\n            output = input(i) :: output\n        }\n        for (i <- k.toInt to input.length - 1) {\n            output = output :+ input(i)\n        }\n        output",
    "        def reverseArrayUptoK(input : List[Long], k : Long, result : List[Long]) : List[Long] = {\n            if (k == 0) {\n                result ::: input\n            } else {\n                reverseArrayUptoK(input.tail, k - 1, input.head :: result)\n            }\n        }\n        reverseArrayUptoK(input, k, Nil)",
    "        if (k == 0) input\n        else {\n            val (first, second) = input.splitAt(k.toInt)\n            second ::: first.reverse\n        }",
    "        var result = List[Long]()\n        var i = 0\n        while (i < k) {\n            result = input(i) :: result\n            i += 1\n        }\n        while (i < input.length) {\n            result = input(i) :: result\n            i += 1\n        }\n        return result",
    "        val n = input.length\n        val result = new Array[Long](n)\n        for (i <- 0 until n) {\n            val j = if (i < k) n - k + i else i\n            result(j) = input(i)\n        }\n        result.toList",
    "        var result = List[Long]()\n        var i = 0\n        while (i < k) {\n            result = input(i) :: result\n            i += 1\n        }\n        while (i < input.length) {\n            result = result :+ input(i)\n            i += 1\n        }\n        result",
    "        val result = new ListBuffer[Long]\n        var i = 0\n        while (i < k) {\n            result.append(input(i))\n            i += 1\n        }\n        i = input.length - 1\n        while (i >= k) {\n            result.append(input(i))\n            i -= 1\n        }\n        result.toList",
    "        var output = new ListBuffer[Long]\n        for (i <- 0 until k.toInt) {\n            output += input(k.toInt - 1 - i)\n        }\n        for (i <- k.toInt until input.length) {\n            output += input(i)\n        }\n        output.toList",
    "        def reverseArrayUptoK(input : List[Long], k : Long, output : List[Long]) : List[Long] = {\n            if (k == 0) output\n            else reverseArrayUptoK(input.tail, k - 1, input.head :: output)\n        }\n        reverseArrayUptoK(input, k, Nil)",
    "        var output = new ListBuffer[Long]()\n        for (i <- 0 until k.toInt) {\n            output += input(i.toInt)\n        }\n        for (i <- k.toInt until input.length) {\n            output += input(input.length - i.toInt - 1)\n        }\n        output.toList",
    "        if (k == 0) {\n            input\n        } else {\n            reverseArrayUptoK(input.tail :+ input.head, k - 1)\n        }",
    "        if (k == 0) input\n        else {\n            val (first, second) = input.splitAt(k.toInt)\n            second ::: first.reverse\n        }",
    "        var result = List[Long]()\n        var temp = List[Long]()\n        for (i <- 0 until input.length) {\n            if (i < k) {\n                temp = input(i) :: temp\n            } else {\n                result = result ::: temp.reverse\n                result = result ::: input.slice(i, input.length)\n                return result\n            }\n        }\n        result = result ::: temp.reverse\n        return result",
    "        var result = List[Long]()\n        for (i <- 0 to k.toInt - 1) {\n            result = input(i) :: result\n        }\n        for (i <- k.toInt until input.length) {\n            result = result :+ input(i)\n        }\n        return result",
    "        val n = input.length\n        if (k == 0) return input\n        if (k >= n) return input.reverse\n        val (first, second) = input.splitAt(k.toInt)\n        second.reverse ::: first",
    "        if (k == 0) return input\n        var result = List[Long]()\n        for (i <- 0 until k) {\n            result = input(i) :: result\n        }\n        for (i <- k until input.length) {\n            result = result :+ input(i)\n        }\n        return result",
    "        var result = List[Long]()\n        var i = 0\n        while (i < k) {\n            result = input(i) :: result\n            i += 1\n        }\n        while (i < input.length) {\n            result = input(i) :: result\n            i += 1\n        }\n        return result",
    "        var result : List[Long] = List()\n        for (i <- 0 until input.length) {\n            if (i < k) result = input(i) :: result\n            else result = input(i) :: result\n        }\n        return result",
    "        if (k == 0) input\n        else {\n            val (first, second) = input.splitAt(k.toInt)\n            second ::: first.reverse\n        }",
    "        val n = input.length\n        val k1 = min(k, n)\n        val k2 = min(k1, n - k1)\n        val k3 = min(k2, n - k1 - k2)\n        val k4 = min(k3, n - k1 - k2 - k3)\n        val k5 = min(k4, n - k1 - k2 - k3 - k4)\n        val k6 = min(k5, n - k1 - k2 - k3 - k4 - k5)\n        val k7 = min(k6, n - k1 - k2 - k3 - k4 - k5 - k6)\n        val k8 = min(k7, n - k1 - k2 - k3 - k4 - k5 - k6 - k7)\n        val k9 = min(k8, n - k1 - k2 - k3 - k4 - k5 - k6 - k7 - k8)\n        val k10 = min(k9, n - k1 - k2 - k3 - k4 - k5 - k6 - k7 - k8 - k9)\n        val k11 = min(k10, n - k1 - k2 - k3 - k4 - k5 - k6 - k7 - k8 - k9 - k10)\n        val k12 = min(k11, n - k1 - k2 - k3 - k4 - k5 - k6 - k7 - k8 - k9 - k10 - k11)\n        val k13 = min(k12, n - k1 - k2 - k3 - k4 - k5 - k6 - k7 - k8 - k9 - k10 - k11 - k12)\n        val k14 = min(k13, n - k1 - k2 - k3 - k4 - k5 - k6 - k7 - k8 - k9 - k10 - k11 - k12 - k13)\n        val k15 = min(k14, n - k1 - k2 - k3 - k4 - k5 - k6 - k7 - k8 - k9 - k10 - k11 - k12 - k",
    "        val n = input.length\n        val result = new Array[Long](n)\n        for (i <- 0 until n) {\n            if (i < k) result(i) = input(k - i - 1)\n            else result(i) = input(i)\n        }\n        result.toList",
    "        if (k == 0) input\n        else {\n            val (first, second) = input.splitAt(k.toInt)\n            second ::: first.reverse\n        }",
    "        if (k == 0) input\n        else {\n            val (first, second) = input.splitAt(k.toInt)\n            second ::: first.reverse\n        }",
    "        var result = List[Long]()\n        var i = 0\n        while (i < k) {\n            result = input(i) :: result\n            i += 1\n        }\n        while (i < input.length) {\n            result = result :+ input(i)\n            i += 1\n        }\n        result",
    "        if (k == 0) input\n        else {\n            val (first, second) = input.splitAt(k.toInt)\n            second ::: first.reverse\n        }",
    "        def reverseArrayUptoKHelper(input : List[Long], k : Long, result : List[Long]) : List[Long] = {\n            if (k == 0) result\n            else reverseArrayUptoKHelper(input.tail, k - 1, input.head :: result)\n        }\n        reverseArrayUptoKHelper(input, k, Nil)",
    "        if (k == 0) input\n        else {\n            val (first, second) = input.splitAt(k.toInt)\n            second ::: first.reverse\n        }",
    "        input.take(k.toInt).reverse ::: input.drop(k.toInt)",
    "        var result = new ListBuffer[Long]()\n        for (i <- 0 until k.toInt) {\n            result += input(k.toInt - i - 1)\n        }\n        for (i <- k.toInt until input.length) {\n            result += input(i)\n        }\n        result.toList",
    "        def reverse(input : List[Long], k : Long, output : List[Long]) : List[Long] = {\n            if (k == 0) {\n                output ::: input\n            } else {\n                reverse(input.tail, k - 1, input.head :: output)\n            }\n        }\n        reverse(input, k, List())",
    "        var result = List[Long]()\n        var i = 0\n        while (i < k) {\n            result = input(i) :: result\n            i += 1\n        }\n        while (i < input.length) {\n            result = result :+ input(i)\n            i += 1\n        }\n        result",
    "        def reverse(input : List[Long], k : Long, result : List[Long]) : List[Long] = {\n            if (k == 0) result\n            else reverse(input.tail, k - 1, input.head :: result)\n        }\n        reverse(input, k, Nil) ::: input.drop(k.toInt)",
    "        if (input.length <= k) {\n            input.reverse\n        } else {\n            val (first, second) = input.splitAt(k.toInt)\n            first.reverse ::: second\n        }",
    "        val result = new ListBuffer[Long]()\n        for (i <- 0 until k.toInt) {\n            result += input(k.toInt - i - 1)\n        }\n        for (i <- k.toInt until input.length) {\n            result += input(i)\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until k.toInt) {\n            result += input(k.toInt - i - 1)\n        }\n        for (i <- k.toInt until input.length) {\n            result += input(i)\n        }\n        result.toList",
    "        if (k == 0) {\n            input\n        } else {\n            val (first, second) = input.splitAt(k.toInt)\n            second ::: first.reverse\n        }",
    "        if (k == 0) input\n        else {\n            val (first, second) = input.splitAt(k.toInt)\n            second ::: first.reverse\n        }",
    "        if (k == 0) input\n        else {\n            val (first, second) = input.splitAt(k.toInt)\n            second ::: first.reverse\n        }",
    "        val k1 = if (k > input.length) input.length else k\n        val (a, b) = input.splitAt(k1.toInt)\n        b ++ a.reverse",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until input.length) {\n            if (i < k) {\n                result += input(input.length - i - 1)\n            } else {\n                result += input(i)\n            }\n        }\n        result.toList",
    "        var result = List[Long]()\n        var i = 0\n        while (i < k) {\n            result = input(i) :: result\n            i += 1\n        }\n        while (i < input.length) {\n            result = result ::: List(input(i))\n            i += 1\n        }\n        result",
    "        val output = new ListBuffer[Long]\n        for (i <- 0 to k.toInt - 1) {\n            output += input(k.toInt - 1 - i)\n        }\n        for (i <- k.toInt to input.length - 1) {\n            output += input(i)\n        }\n        output.toList",
    "        def reverseArrayUptoK(input : List[Long], k : Long, result : List[Long]) : List[Long] = {\n            if (k == 0) result\n            else reverseArrayUptoK(input.tail, k - 1, input.head :: result)\n        }\n        reverseArrayUptoK(input, k, Nil)",
    "        val result = new ListBuffer[Long]()\n        for (i <- 0 to k.toInt - 1) {\n            result += input(k.toInt - 1 - i)\n        }\n        for (i <- k.toInt to input.length - 1) {\n            result += input(i)\n        }\n        result.toList",
    "        val (left, right) = input.splitAt(k.toInt)\n        right ::: left.reverse",
    "        val n = input.length\n        val output = new Array[Long](n)\n        for (i <- 0 until n) {\n            val j = if (i < k) k - i - 1 else i\n            output(j) = input(i)\n        }\n        output.toList",
    "        if (k == 0) input\n        else {\n            val (first, second) = input.splitAt(k.toInt)\n            second ::: first.reverse\n        }",
    "        if (k == 0) {\n            input\n        } else {\n            reverseArrayUptoK(input.tail :+ input.head, k - 1)\n        }",
    "        var result : List[Long] = Nil\n        var i = 0\n        while (i < k) {\n            result = input(i) :: result\n            i += 1\n        }\n        while (i < input.length) {\n            result = result ::: List(input(i))\n            i += 1\n        }\n        result",
    "        val n = input.length\n        val result = new Array[Long](n)\n        for (i <- 0 until n) {\n            if (i < k) result(i) = input(n - i - 1)\n            else result(i) = input(i)\n        }\n        result.toList",
    "        if (k == 0) {\n            return input\n        }\n        if (k == 1) {\n            return input.reverse\n        }\n        val (first, second) = input.splitAt(k.toInt)\n        first.reverse ::: second",
    "        val n = input.length\n        if (k >= n) {\n            return input.reverse\n        }\n        val result = new ListBuffer[Long]\n        for (i <- 0 until n) {\n            if (i < k) {\n                result += input(k - i - 1)\n            } else {\n                result += input(i)\n            }\n        }\n        return result.toList",
    "        val (first, second) = input.splitAt(k.toInt)\n        second ::: first.reverse",
    "        if (k == 0) {\n            input\n        } else {\n            reverseArrayUptoK(input.tail :+ input.head, k - 1)\n        }",
    "        if (k == 0) input\n        else {\n            val (first, second) = input.splitAt(k.toInt)\n            second ::: first.reverse\n        }",
    "        if (k == 0) input\n        else {\n            val (a, b) = input.splitAt(k.toInt)\n            b ::: a.reverse\n        }",
    "        var result = List[Long]()\n        for (i <- 0 until k.toInt) {\n            result = input(i) :: result\n        }\n        for (i <- k.toInt until input.length) {\n            result = result :+ input(i)\n        }\n        return result",
    "        var result = List[Long]()\n        var i = 0\n        while (i < k) {\n            result = input(i) :: result\n            i += 1\n        }\n        while (i < input.length) {\n            result = result :+ input(i)\n            i += 1\n        }\n        result",
    "        if (k == 0) input\n        else {\n            val (first, second) = input.splitAt(k.toInt)\n            second ::: first.reverse\n        }",
    "        if (k == 0) {\n            return input\n        }\n        if (k == 1) {\n            return input.reverse\n        }\n        val (first, second) = input.splitAt(k.toInt)\n        first.reverse ::: second",
    "        var result = List[Long]()\n        var i = 0\n        while (i < k) {\n            result = input(i) :: result\n            i += 1\n        }\n        while (i < input.length) {\n            result = input(i) :: result\n            i += 1\n        }\n        return result",
    "        if (k > input.length) {\n            return input.reverse\n        }\n        val (first, second) = input.splitAt(k.toInt)\n        first.reverse ::: second",
    "        var output = List[Long]()\n        var counter = 0\n        for (i <- input) {\n            if (counter < k) {\n                output = i :: output\n                counter += 1\n            } else {\n                output = output :+ i\n            }\n        }\n        return output",
    "        var result : List[Long] = List()\n        var i = 0\n        while (i < k) {\n            result = input(i) :: result\n            i += 1\n        }\n        while (i < input.length) {\n            result = result :+ input(i)\n            i += 1\n        }\n        return result",
    "        val (first, second) = input.splitAt(k.toInt)\n        first.reverse ++ second",
    "        if (k == 0) input\n        else input.head :: reverseArrayUptoK(input.tail, k - 1)",
    "        def reverse(input : List[Long], k : Long, acc : List[Long]) : List[Long] = {\n            if (k == 0) acc\n            else reverse(input.tail, k - 1, input.head :: acc)\n        }\n        reverse(input, k, Nil) ::: input.drop(k.toInt)",
    "        if (k == 0) {\n            input\n        } else {\n            reverseArrayUptoK(input.tail :+ input.head, k - 1)\n        }",
    "        var result = List[Long]()\n        for (i <- 0 until input.length) {\n            if (i < k) result = input(i) :: result\n            else result = input(i) :: result\n        }\n        result",
    "        val n = input.length\n        val result = new Array[Long](n)\n        for (i <- 0 until n) {\n            if (i < k) result(i) = input(k - i - 1)\n            else result(i) = input(i)\n        }\n        result.toList",
    "        val n = input.length\n        val output = new Array[Long](n)\n        for (i <- 0 until n) {\n            output(i) = input(i)\n        }\n        for (i <- 0 until k.toInt) {\n            output(i) = input(k.toInt - 1 - i)\n        }\n        output.toList",
    "        if (k == 0) {\n            input\n        } else {\n            reverseArrayUptoK(input.tail :+ input.head, k - 1)\n        }",
    "        if (k == 0) input\n        else {\n            val (first, second) = input.splitAt(k.toInt)\n            second ::: first.reverse\n        }",
    "        if (k == 0) input\n        else {\n            val (first, second) = input.splitAt(k.toInt)\n            second ::: first.reverse\n        }",
    "        val (first, second) = input.splitAt(k.toInt)\n        second ::: first.reverse",
    "        if (k <= 0) input\n        else {\n            val (first, second) = input.splitAt(k.toInt)\n            second ::: first.reverse\n        }",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until k.toInt) {\n            result += input(k.toInt - 1 - i)\n        }\n        for (i <- k.toInt until input.length) {\n            result += input(i)\n        }\n        result.toList",
    "        var result = List[Long]()\n        for (i <- 0 until k.toInt) {\n            result = input(i) :: result\n        }\n        for (i <- k.toInt until input.length) {\n            result = result :+ input(i)\n        }\n        return result",
    "        val n = input.length\n        val output = new Array[Long](n)\n        for (i <- 0 until n) {\n            output(i) = input(n - i - 1)\n        }\n        output.toList",
    "        def reverseArrayUptoK(input : List[Long], k : Long, result : List[Long]) : List[Long] = {\n            if (k == 0) result\n            else reverseArrayUptoK(input.tail, k - 1, input.head :: result)\n        }\n        reverseArrayUptoK(input, k, Nil)",
    "        if (k == 0) {\n            return input\n        }\n        if (k == 1) {\n            return input.reverse\n        }\n        if (k == input.length) {\n            return input.reverse\n        }\n        val (first, second) = input.splitAt(k.toInt)\n        first.reverse ::: second",
    "        if(k == 0) input\n        else {\n            val (first, second) = input.splitAt(k.toInt)\n            second ::: first.reverse\n        }",
    "        input.take(k.toInt).reverse ++ input.drop(k.toInt)",
    "        def reverseArrayUptoK(input : List[Long], k : Long, acc : List[Long]) : List[Long] = {\n            if (k == 0) acc\n            else reverseArrayUptoK(input.tail, k - 1, input.head :: acc)\n        }\n        reverseArrayUptoK(input, k, Nil)",
    "        def reverse(input : List[Long], k : Long, output : List[Long]) : List[Long] = {\n            if (k == 0) output\n            else reverse(input.tail, k - 1, input.head :: output)\n        }\n        reverse(input, k, Nil) ++ input.drop(k.toInt)",
    "        if (k == 0) input\n        else {\n            val (first, second) = input.splitAt(k.toInt)\n            second ::: first.reverse\n        }",
    "        var result = List[Long]()\n        for (i <- 0 until input.length) {\n            if (i < k) result = input(i) :: result\n            else result = input(i) :: result\n        }\n        result",
    "        if (k == 0) {\n            return input\n        }\n        if (k == 1) {\n            return input.reverse\n        }\n        val (first, second) = input.splitAt(k.toInt)\n        first.reverse ::: second",
    "        // Write your code here\n        val n = input.length\n        val result = new Array[Long](n)\n        for (i <- 0 until n) {\n            if (i < k) result(i) = input(k - i - 1)\n            else result(i) = input(i)\n        }\n        result.toList",
    "        if (input.length == 0) return input\n        if (k == 0) return input\n        if (k == 1) return input.tail :+ input.head\n        if (k == input.length) return input.reverse\n        val (first, second) = input.splitAt(k.toInt)\n        second ::: first.reverse",
    "        def reverse(input : List[Long], k : Long, acc : List[Long]) : List[Long] = {\n            if (k == 0) acc\n            else reverse(input.tail, k - 1, input.head :: acc)\n        }\n        reverse(input, k, Nil) ::: input.drop(k.toInt)",
    "        var result = List[Long]()\n        for (i <- 0 until k.toInt) {\n            result = input(i) :: result\n        }\n        for (i <- k.toInt until input.length) {\n            result = result :+ input(i)\n        }\n        return result",
    "        if (k == 0) {\n            return input\n        }\n        val (first, second) = input.splitAt(k.toInt)\n        second ::: first.reverse",
    "        if (k == 0) {\n            return input\n        }\n        if (k == 1) {\n            return input.reverse\n        }\n        var result = List[Long]()\n        var i = 0\n        while (i < k) {\n            result = input(i) :: result\n            i += 1\n        }\n        result = result.reverse\n        while (i < input.length) {\n            result = result :+ input(i)\n            i += 1\n        }\n        return result",
    "        var result = new ListBuffer[Long]()\n        for (i <- 0 until k.toInt) {\n            result += input(i.toInt)\n        }\n        for (i <- k.toInt until input.length) {\n            result += input(input.length - 1 - i + k.toInt)\n        }\n        return result.toList",
    "        if (k == 0) {\n            return input\n        }\n        val (first, second) = input.splitAt(k.toInt)\n        second ::: first.reverse",
    "        if (k == 0) return input\n        if (k == 1) return input.reverse\n        if (k == input.length) return input.reverse\n        val (first, second) = input.splitAt(k.toInt)\n        first.reverse ::: second",
    "        var result = new ListBuffer[Long]\n        for (i <- 0 until k.toInt) {\n            result += input(k.toInt - 1 - i)\n        }\n        for (i <- k.toInt until input.length) {\n            result += input(i)\n        }\n        result.toList",
    "        val n = input.length\n        val result = new Array[Long](n)\n        for (i <- 0 until n) {\n            if (i < k) result(i) = input(k - i - 1)\n            else result(i) = input(i)\n        }\n        result.toList",
    "        var result : List[Long] = Nil\n        var i = 0\n        while (i < k) {\n            result = input(i) :: result\n            i += 1\n        }\n        while (i < input.length) {\n            result = result ::: List(input(i))\n            i += 1\n        }\n        result",
    "        def reverse(input : List[Long], k : Long, result : List[Long]) : List[Long] = {\n            if (k == 0) result ::: input\n            else reverse(input.tail, k - 1, input.head :: result)\n        }\n        reverse(input, k, Nil)",
    "        val result = new ListBuffer[Long]()\n        for (i <- 0 until k.toInt) {\n            result += input(k.toInt - i - 1)\n        }\n        for (i <- k.toInt until input.length) {\n            result += input(i)\n        }\n        result.toList",
    "        val output = new ListBuffer[Long]\n        for (i <- 0 to k.toInt - 1) {\n            output += input(k.toInt - 1 - i)\n        }\n        for (i <- k.toInt to input.length - 1) {\n            output += input(i)\n        }\n        output.toList",
    "        if (k == 0) {\n            return input\n        }\n        if (k == 1) {\n            return input.reverse\n        }\n        if (k >= input.length) {\n            return input.reverse\n        }\n        val (first, second) = input.splitAt(k.toInt)\n        first.reverse ::: second",
    "        val (first, second) = input.splitAt(k.toInt)\n        second ::: first.reverse",
    "        var output = new ListBuffer[Long]\n        for (i <- 0 until k.toInt) output += input(i)\n        for (i <- k.toInt until input.length) output += input(input.length - 1 - i + k.toInt)\n        output.toList",
    "        if (k == 0) input\n        else {\n            val (first, second) = input.splitAt(k.toInt)\n            second ::: first.reverse\n        }",
    "        if (k == 0) input\n        else reverseArrayUptoK(input.tail :+ input.head, k - 1)",
    "        var result = List[Long]()\n        for (i <- 0 until input.length) {\n            if (i < k) result = input(i) :: result\n            else result = input(i) :: result\n        }\n        result",
    "        var result = List[Long]()\n        var i = 0\n        while (i < k) {\n            result = input(i) :: result\n            i += 1\n        }\n        while (i < input.length) {\n            result = input(i) :: result\n            i += 1\n        }\n        return result",
    "        if (k == 0) return input\n        if (input.length == 0) return input\n        val (first, second) = input.splitAt(k.toInt)\n        second ::: first.reverse",
    "        if (k == 0) input\n        else {\n            val (first, second) = input.splitAt(k.toInt)\n            second ::: first.reverse\n        }",
    "        var result = new ListBuffer[Long]\n        var i = 0\n        while (i < k) {\n            result += input(i)\n            i += 1\n        }\n        i = input.length - 1\n        while (i >= k) {\n            result += input(i)\n            i -= 1\n        }\n        result.toList",
    "        if (k == 0) {\n            return input\n        }\n        if (k == 1) {\n            return input.reverse\n        }\n        val (first, last) = input.splitAt(k.toInt)\n        first.reverse ::: last",
    "        if (input.length <= k) input.reverse\n        else input.take(k.toInt).reverse ::: input.drop(k.toInt)",
    "        if (k == 0) input\n        else {\n            val (first, second) = input.splitAt(k.toInt)\n            second ::: first.reverse\n        }",
    "        if (k > input.length) throw new IllegalArgumentException(\"k cannot be greater than length of input\")\n        else {\n            val (first, second) = input.splitAt(k.toInt)\n            second ::: first.reverse\n        }",
    "        if (k == 0) input\n        else {\n            val (first, second) = input.splitAt(k.toInt)\n            second.reverse ++ first\n        }",
    "        if (k == 0) {\n            return input\n        }\n        val (first, second) = input.splitAt(k.toInt)\n        return second ++ first.reverse",
    "        var result = List[Long]()\n        var i = 0\n        while (i < k) {\n            result = input(i) :: result\n            i += 1\n        }\n        while (i < input.length) {\n            result = result :+ input(i)\n            i += 1\n        }\n        result",
    "        input.take(k.toInt).reverse ::: input.drop(k.toInt)",
    "        if (k == 0) {\n            return input\n        }\n        if (k == 1) {\n            return input.reverse\n        }\n        val (first, second) = input.splitAt(k.toInt)\n        first.reverse ::: second",
    "        if (k == 0)\n            input\n        else\n            reverseArrayUptoK(input.tail ::: List(input.head), k - 1)",
    "        def reverseArrayUptoK(input : List[Long], k : Long, output : List[Long]) : List[Long] = {\n            if (input.isEmpty) output\n            else {\n                if (k == 0) output ::: input\n                else reverseArrayUptoK(input.tail, k - 1, input.head :: output)\n            }\n        }\n        reverseArrayUptoK(input, k, Nil)",
    "        var result = List[Long]()\n        for (i <- 0 until k.toInt) {\n            result = input(i) :: result\n        }\n        for (i <- k.toInt until input.length) {\n            result = result :+ input(i)\n        }\n        return result",
    "        var result = List[Long]()\n        for (i <- 0 until k.toInt) {\n            result = input(i) :: result\n        }\n        for (i <- k.toInt until input.length) {\n            result = result :+ input(i)\n        }\n        return result",
    "        if (k == 0) input\n        else {\n            val (first, second) = input.splitAt(k.toInt)\n            second ::: first.reverse\n        }",
    "        input.take(k.toInt).reverse ::: input.drop(k.toInt)",
    "        if (k == 0) {\n            return input\n        }\n        if (k == 1) {\n            return input.reverse\n        }\n        if (k == input.length) {\n            return input.reverse\n        }\n        val (first, second) = input.splitAt(k.toInt)\n        first.reverse ::: second",
    "        if (k == 0) input\n        else {\n            val (first, second) = input.splitAt(k.toInt)\n            second ::: first.reverse\n        }",
    "        if (k == 0) input\n        else {\n            val (first, second) = input.splitAt(k.toInt)\n            second ::: first.reverse\n        }",
    "        var result = List[Long]()\n        var i = 0\n        while (i < k) {\n            result = input(i) :: result\n            i += 1\n        }\n        while (i < input.length) {\n            result = input(i) :: result\n            i += 1\n        }\n        return result",
    "        if (k == 0) {\n            input\n        } else {\n            reverseArrayUptoK(input.tail ::: List(input.head), k - 1)\n        }",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until k.toInt) {\n            result += input(k.toInt - i - 1)\n        }\n        for (i <- k.toInt until input.length) {\n            result += input(i)\n        }\n        result.toList",
    "        if (k == 0) {\n            return input\n        }\n        if (k == 1) {\n            return input.reverse\n        }\n        val (first, second) = input.splitAt(k.toInt)\n        first.reverse ::: second",
    "        if (k == 0) input\n        else {\n            val (first, second) = input.splitAt(k.toInt)\n            second.reverse ::: first\n        }",
    "        if (k == 0) {\n            return input\n        }\n        if (k == 1) {\n            return input.reverse\n        }\n        val (first, second) = input.splitAt(k.toInt)\n        first.reverse ::: second",
    "        var result = List[Long]()\n        var i = 0\n        while (i < k) {\n            result = input(i) :: result\n            i += 1\n        }\n        while (i < input.length) {\n            result = result :+ input(i)\n            i += 1\n        }\n        result",
    "        if (k == 0)\n            return input\n        if (k == 1)\n            return input.reverse\n        return reverseArrayUptoK(input.take(k.toInt).reverse ++ input.drop(k.toInt), k - 1)",
    "        val n = input.size\n        val output = new Array[Long](n)\n        for (i <- 0 until n) {\n            val j = if (i < k) n - i - 1 else i\n            output(j) = input(i)\n        }\n        output.toList",
    "        var result = List[Long]()\n        var i = 0\n        while (i < k) {\n            result = input(i) :: result\n            i += 1\n        }\n        while (i < input.length) {\n            result = result :+ input(i)\n            i += 1\n        }\n        result",
    "        var result : List[Long] = List()\n        var counter : Long = 0\n        for (i <- input) {\n            if (counter < k) {\n                result = i :: result\n            } else {\n                result = result :+ i\n            }\n            counter += 1\n        }\n        result",
    "        if (k == 0) input\n        else {\n            val (first, second) = input.splitAt(k.toInt)\n            second ::: first.reverse\n        }",
    "        val n = input.length\n        val output = new ListBuffer[Long]\n        for (i <- 0 until n) {\n            if (i < k) {\n                output += input(k - i - 1)\n            } else {\n                output += input(i)\n            }\n        }\n        return output.toList",
    "        if (k == 0) input\n        else {\n            val (first, second) = input.splitAt(k.toInt)\n            second ::: first.reverse\n        }",
    "        if (k == 0)\n            input\n        else {\n            val (first, second) = input.splitAt(k.toInt)\n            second ::: first.reverse\n        }",
    "        var result : List[Long] = Nil\n        for (i <- 0 until input.length) {\n            if (i < k) result = input(i) :: result\n            else result = input(i) :: result\n        }\n        result",
    "        if (input.length <= k) {\n            input.reverse\n        } else {\n            val (first, second) = input.splitAt(k.toInt)\n            first.reverse ::: second\n        }",
    "        var result = List[Long]()\n        for (i <- 0 until k.toInt) {\n            result = input(i) :: result\n        }\n        for (i <- k.toInt until input.length) {\n            result = result :+ input(i)\n        }\n        return result",
    "        if (k == 0) {\n            input\n        } else {\n            reverseArrayUptoK(input.tail :+ input.head, k - 1)\n        }",
    "        var result = List[Long]()\n        var i = 0\n        while (i < k) {\n            result = input(i) :: result\n            i += 1\n        }\n        while (i < input.length) {\n            result = result :+ input(i)\n            i += 1\n        }\n        result",
    "        if (k == 0) input\n        else {\n            val (first, second) = input.splitAt(k.toInt)\n            second ::: first.reverse\n        }",
    "        if (k == 0) input\n        else {\n            val (first, second) = input.splitAt(k.toInt)\n            second ::: first.reverse\n        }",
    "        if (k == 0) input\n        else {\n            val (first, second) = input.splitAt(k.toInt)\n            reverseArrayUptoK(second ::: first, k - 1)\n        }",
    "        def reverse(input : List[Long], k : Long, output : List[Long]) : List[Long] = {\n            if (k == 0) output\n            else reverse(input.tail, k - 1, input.head :: output)\n        }\n        reverse(input, k, Nil) ::: input.drop(k.toInt)",
    "        var result = new ListBuffer[Long]\n        var i = 0\n        while (i < k) {\n            result += input(k - i - 1)\n            i += 1\n        }\n        while (i < input.length) {\n            result += input(i)\n            i += 1\n        }\n        result.toList"
  ]
}