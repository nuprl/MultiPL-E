{
  "name": "mbpp_244_next_Perfect_Square",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_244_next_Perfect_Square.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while (i * i <= N) {\n            i += 1\n        }\n        i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1665510016,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var n = N\n        while(!isPerfectSquare(n)) n += 1\n        n\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1665510015,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpse658lh3.scala:7:15 -------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mwhile\u001b[0m(!isPerfectSquare(n)) n += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m               ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m               Not found: isPerfectSquare\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var n = N\n        while(!isPerfectSquare(n)) n += 1\n        n\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1665510015,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpse658lh3.scala:7:15 -------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mwhile\u001b[0m(!isPerfectSquare(n)) n += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m               ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m               Not found: isPerfectSquare\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while (i * i <= N) {\n            i += 1\n        }\n        i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1665510016,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while (i * i <= N) i += 1\n        i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1665510015,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var n = N\n        while (n % sqrt(n) != 0) {\n            n += 1\n        }\n        return n\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1665510016,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp8xg4yvoz.scala:15)\n\tat Problem.main(tmp8xg4yvoz.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while (i * i <= N) i += 1\n        i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1665510015,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while (i * i <= N) i += 1\n        i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1665510015,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while (i * i <= N) i += 1\n        i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1665510015,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var n = N\n        while(!isPerfectSquare(n)) n += 1\n        n\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1665510015,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpse658lh3.scala:7:15 -------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mwhile\u001b[0m(!isPerfectSquare(n)) n += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m               ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m               Not found: isPerfectSquare\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while (i * i <= N) {\n            i += 1\n        }\n        i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1665510016,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while (i * i <= N) {\n            i += 1\n        }\n        i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1665510016,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        val sqrtN = sqrt(N)\n        if (sqrtN == floor(sqrtN)) sqrtN + 1 else ceil(sqrtN)\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1665510016,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj4trc0v8.scala:7:35 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mif\u001b[0m (sqrtN == floor(sqrtN)) sqrtN + \u001b[31m1\u001b[0m \u001b[33melse\u001b[0m ceil(sqrtN)\n\u001b[31m\u001b[31m  |\u001b[0m                                   ^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                   Found:    Double\n\u001b[31m  |\u001b[0m                                   Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj4trc0v8.scala:7:54 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mif\u001b[0m (sqrtN == floor(sqrtN)) sqrtN + \u001b[31m1\u001b[0m \u001b[33melse\u001b[0m ceil(sqrtN)\n\u001b[31m\u001b[31m  |\u001b[0m                                                  ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                  Found:    Double\n\u001b[31m  |\u001b[0m                                                  Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 0L\n        while (i * i < N) i += 1\n        i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1665510016,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpbn6pk91a.scala:13)\n\tat Problem.main(tmpbn6pk91a.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while (i * i <= N) i += 1\n        i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1665510015,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var n = N\n        while (true) {\n            n += 1\n            if (isPerfectSquare(n)) return n\n        }\n        return -1\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1665510015,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpf152vhyo.scala:9:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mif\u001b[0m (isPerfectSquare(n)) \u001b[33mreturn\u001b[0m n\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPerfectSquare\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while (i * i < N) {\n            i += 1\n        }\n        i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1665510016,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpvp8imtje.scala:15)\n\tat Problem.main(tmpvp8imtje.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var n = N\n        while (n % sqrt(n) != 0) {\n            n += 1\n        }\n        return n\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1665510016,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp8xg4yvoz.scala:15)\n\tat Problem.main(tmp8xg4yvoz.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while (i * i <= N) i += 1\n        i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1665510015,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var n = N\n        while (true) {\n            n += 1\n            if (isPerfectSquare(n)) return n\n        }\n        return -1\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1665510015,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpf152vhyo.scala:9:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mif\u001b[0m (isPerfectSquare(n)) \u001b[33mreturn\u001b[0m n\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPerfectSquare\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while (i * i <= N) i += 1\n        i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1665510015,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var n = N\n        while(true) {\n            n += 1\n            if(sqrt(n) % 1 == 0) return n\n        }\n        return -1\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1666122808,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while (i * i <= N) i += 1\n        i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1665510015,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var n = N\n        while(!isPerfectSquare(n)) {\n            n += 1\n        }\n        return n\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1666122806,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8aexb08t.scala:7:15 -------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mwhile\u001b[0m(!isPerfectSquare(n)) {\n\u001b[31m\u001b[31m  |\u001b[0m               ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m               Not found: isPerfectSquare\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while (i * i <= N) i += 1\n        i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1665510015,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while (i * i <= N) i += 1\n        i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1665510015,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while (i * i <= N) {\n            i += 1\n        }\n        i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1665510016,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while (i * i <= N) i += 1\n        i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1665510015,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 0\n        var j = 0\n        while (i < N) {\n            i += 1\n            j += 2 * i - 1\n        }\n        j\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1666122809,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpac252r9n.scala:15)\n\tat Problem.main(tmpac252r9n.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while (i * i <= N) i += 1\n        i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1665510015,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while (i * i <= N) i += 1\n        i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1665510015,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while (i * i <= N) {\n            i += 1\n        }\n        i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1665510016,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while (i * i <= N) i += 1\n        i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1665510015,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while (i * i <= N) {\n            i += 1\n        }\n        i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1665510016,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while (i * i <= N) i += 1\n        i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1665510015,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while (i * i <= N) {\n            i += 1\n        }\n        i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1665510016,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while (i * i <= N) i += 1\n        i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1665510015,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while (i * i <= N) {\n            i += 1\n        }\n        i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1665510016,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while(i * i < N) {\n            i += 1\n        }\n        return i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1666122809,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpuygibhu6.scala:15)\n\tat Problem.main(tmpuygibhu6.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while (i * i <= N) {\n            i += 1\n        }\n        i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1665510016,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while (i * i <= N) {\n            i += 1\n        }\n        return i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1666122808,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while (i * i <= N) i += 1\n        i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1665510015,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while (i * i <= N) {\n            i += 1\n        }\n        i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1665510016,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while(i * i <= N) {\n            i += 1\n        }\n        i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1666122808,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while (i * i <= N) i += 1\n        i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1665510015,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while (i * i <= N) i += 1\n        i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1665510015,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while (i * i <= N) {\n            i += 1\n        }\n        i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1665510016,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var n = N\n        while (true) {\n            n += 1\n            if (isPerfectSquare(n)) return n\n        }\n        return -1\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1665510015,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpf152vhyo.scala:9:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mif\u001b[0m (isPerfectSquare(n)) \u001b[33mreturn\u001b[0m n\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPerfectSquare\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while (i * i <= N) {\n            i += 1\n        }\n        i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1665510016,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var n = N\n        while(true) {\n            n += 1\n            if(isPerfectSquare(n)) return n\n        }\n        return -1\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1666122806,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpk8f88pac.scala:9:15 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mif\u001b[0m(isPerfectSquare(n)) \u001b[33mreturn\u001b[0m n\n\u001b[31m\u001b[31m  |\u001b[0m               ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m               Not found: isPerfectSquare\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while (i * i <= N) i += 1\n        i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1665510015,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while (i * i <= N) i += 1\n        i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1665510015,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while (i * i <= N) {\n            i += 1\n        }\n        i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1665510016,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        val sqrtN = sqrt(N)\n        if (sqrtN == sqrtN.toInt) sqrtN.toInt + 1 else sqrtN.toInt + 2\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1666122808,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpjigh71ld.scala:10)\n\tat Problem.main(tmpjigh71ld.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var n = N\n        while(!isPerfectSquare(n)) n += 1\n        n\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1665510015,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpse658lh3.scala:7:15 -------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mwhile\u001b[0m(!isPerfectSquare(n)) n += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m               ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m               Not found: isPerfectSquare\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while (i * i <= N) i += 1\n        i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1665510015,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while (i * i <= N) i += 1\n        i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1665510015,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        val sqrtN = sqrt(N).toLong\n        val nextN = sqrtN + 1\n        return nextN * nextN\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1666122809,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while (i * i <= N) {\n            i += 1\n        }\n        i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1665510016,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var n = N\n        while(n % sqrt(n) != 0) {\n            n += 1\n        }\n        n\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1666122809,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpzsar0xn_.scala:15)\n\tat Problem.main(tmpzsar0xn_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while (i * i < N) {\n            i += 1\n        }\n        i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1665510016,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpvp8imtje.scala:15)\n\tat Problem.main(tmpvp8imtje.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while (i * i <= N) {\n            i += 1\n        }\n        return i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1666122808,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while (i * i <= N) {\n            i += 1\n        }\n        return i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1666122808,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while (i * i <= N) i += 1\n        i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1665510015,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var n = N\n        while (n % sqrt(n) != 0) {\n            n += 1\n        }\n        n\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1666122808,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmps0sumni8.scala:15)\n\tat Problem.main(tmps0sumni8.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while (i * i <= N) i += 1\n        i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1665510015,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while (i * i <= N) i += 1\n        i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1665510015,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while (i * i <= N) {\n            i += 1\n        }\n        i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1665510016,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while (i * i <= N) i += 1\n        i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1665510015,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        val sqrtN = sqrt(N)\n        if (sqrtN == sqrtN.toInt) sqrtN.toInt + 1 else sqrtN.toInt + 2\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1666122808,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpjigh71ld.scala:10)\n\tat Problem.main(tmpjigh71ld.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while (i * i <= N) i += 1\n        i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1665510015,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while (i * i < N) i += 1\n        i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1666122808,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmppntiqqdn.scala:13)\n\tat Problem.main(tmppntiqqdn.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while (i * i <= N) i += 1\n        i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1665510015,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while (i * i <= N) i += 1\n        i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1665510015,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while (i * i <= N) i += 1\n        i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1665510015,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while (i * i <= N) {\n            i += 1\n        }\n        i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1665510016,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var n = 1\n        while (n * n <= N) n += 1\n        n * n\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1666122809,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        val sqrtN = sqrt(N)\n        if (sqrtN == floor(sqrtN)) {\n            return (sqrtN + 1) * (sqrtN + 1)\n        }\n        else {\n            return (floor(sqrtN) + 1) * (floor(sqrtN) + 1)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1666122809,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4ygzjbsk.scala:8:19 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mreturn\u001b[0m (sqrtN + \u001b[31m1\u001b[0m) * (sqrtN + \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m  |\u001b[0m                   ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                   Found:    Double\n\u001b[31m  |\u001b[0m                   Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4ygzjbsk.scala:11:19 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m            \u001b[33mreturn\u001b[0m (floor(sqrtN) + \u001b[31m1\u001b[0m) * (floor(sqrtN) + \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Found:    Double\n\u001b[31m   |\u001b[0m                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var n = N\n        while(n * n <= N) n += 1\n        n * n\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1666122809,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp6o6hrkwg.scala:11)\n\tat Problem.main(tmp6o6hrkwg.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var n = N\n        while(true) {\n            if(isPerfectSquare(n)) return n\n            n += 1\n        }\n        return -1\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1666122806,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmptrgan_2c.scala:8:15 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m(isPerfectSquare(n)) \u001b[33mreturn\u001b[0m n\n\u001b[31m\u001b[31m  |\u001b[0m               ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m               Not found: isPerfectSquare\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while (i * i <= N) {\n            i += 1\n        }\n        i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1665510016,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while (i * i <= N) i += 1\n        i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1665510015,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while (i * i <= N) i += 1\n        i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1665510015,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        val sqrtN = sqrt(N)\n        if (sqrtN == floor(sqrtN)) return (sqrtN + 1) * (sqrtN + 1)\n        else return (floor(sqrtN) + 1) * (floor(sqrtN) + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1666122809,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsg5wiul1.scala:7:42 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mif\u001b[0m (sqrtN == floor(sqrtN)) \u001b[33mreturn\u001b[0m (sqrtN + \u001b[31m1\u001b[0m) * (sqrtN + \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m  |\u001b[0m                                          ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                          Found:    Double\n\u001b[31m  |\u001b[0m                                          Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsg5wiul1.scala:8:20 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33melse\u001b[0m \u001b[33mreturn\u001b[0m (floor(sqrtN) + \u001b[31m1\u001b[0m) * (floor(sqrtN) + \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m  |\u001b[0m                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                    Found:    Double\n\u001b[31m  |\u001b[0m                    Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while (i * i <= N) i += 1\n        i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1665510015,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n\t\tvar i = 1\n\t\twhile(i * i <= N) i += 1\n\t\ti * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1666122807,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpurxxcit1.scala:9:4 -------------------------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    }\n\u001b[31m\u001b[31m  |\u001b[0m    ^\u001b[0m\n\u001b[31m  |\u001b[0m    Incompatible combinations of tabs and spaces in indentation prefixes.\n\u001b[31m  |\u001b[0m    Previous indent : 2 tabs\n\u001b[31m  |\u001b[0m    Latest indent   : 4 spaces\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while (i * i <= N) i += 1\n        return i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1666122808,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var n = N\n        while(true) {\n            n += 1\n            if(isPerfectSquare(n)) return n\n        }\n        return -1\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1666122806,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpk8f88pac.scala:9:15 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mif\u001b[0m(isPerfectSquare(n)) \u001b[33mreturn\u001b[0m n\n\u001b[31m\u001b[31m  |\u001b[0m               ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m               Not found: isPerfectSquare\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while (i * i <= N) {\n            i += 1\n        }\n        i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1665510016,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while (i * i <= N) i += 1\n        i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1665510015,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while (i * i <= N) {\n            i += 1\n        }\n        i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1665510016,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var n = N\n        while(true) {\n            n += 1\n            val sqrt = sqrt(n)\n            if(sqrt == sqrt.toInt) return n\n        }\n        return -1\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1666122806,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp_mv_ryom.scala:9:23 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n)\n\u001b[31m\u001b[31m  |\u001b[0m                       ^\u001b[0m\n\u001b[31m  |\u001b[0m                       Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while (i * i <= N) i += 1\n        i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1665510015,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while (i * i <= N) {\n            i += 1\n        }\n        return i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1666122808,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while (i * i <= N) i += 1\n        i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1665510015,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var n = N\n        while(!isPerfectSquare(n)) n += 1\n        n\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1665510015,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpse658lh3.scala:7:15 -------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mwhile\u001b[0m(!isPerfectSquare(n)) n += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m               ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m               Not found: isPerfectSquare\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        val sqrtN = sqrt(N)\n        if (sqrtN == sqrtN.toInt) {\n            return (sqrtN + 1) * (sqrtN + 1)\n        }\n        return (sqrtN.toInt + 1) * (sqrtN.toInt + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1666122808,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpl4brfh6c.scala:8:19 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mreturn\u001b[0m (sqrtN + \u001b[31m1\u001b[0m) * (sqrtN + \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m  |\u001b[0m                   ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                   Found:    Double\n\u001b[31m  |\u001b[0m                   Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while (i * i <= N) {\n            i += 1\n        }\n        i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1665510016,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while(i * i <= N) {\n            i += 1\n        }\n        return i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1666122809,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while (i * i <= N) i += 1\n        i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1665510015,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var n = N\n        while(true) {\n            n += 1\n            if(sqrt(n) % 1 == 0) return n\n        }\n        return -1\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1666122808,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while (i * i <= N) i += 1\n        i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1665510015,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var n = N\n        while(!isPerfectSquare(n)) n += 1\n        n\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1665510015,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpse658lh3.scala:7:15 -------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mwhile\u001b[0m(!isPerfectSquare(n)) n += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m               ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m               Not found: isPerfectSquare\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while (i * i <= N) {\n            i += 1\n        }\n        i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1665510016,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while (i * i <= N) {\n            i += 1\n        }\n        i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1665510016,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var n = N\n        while(true) {\n            if(isPerfectSquare(n)) return n\n            n += 1\n        }\n        return n\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1666122806,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpwzf1ht44.scala:8:15 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m(isPerfectSquare(n)) \u001b[33mreturn\u001b[0m n\n\u001b[31m\u001b[31m  |\u001b[0m               ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m               Not found: isPerfectSquare\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while (i * i <= N) {\n            i += 1\n        }\n        return i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1666122808,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while (i * i <= N) {\n            i += 1\n        }\n        i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1665510016,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while (i * i <= N) i += 1\n        i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1665510015,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while (i * i <= N) i += 1\n        i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1665510015,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while (i * i <= N) i += 1\n        return i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1666122808,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while (i * i <= N) {\n            i += 1\n        }\n        i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1665510016,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var n = N\n        while (n % sqrt(n) != 0) n += 1\n        n\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1666122815,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpx7r64ele.scala:13)\n\tat Problem.main(tmpx7r64ele.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while (i * i <= N) i += 1\n        i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1665510015,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while (i * i <= N) {\n            i += 1\n        }\n        i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1665510016,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while (i * i <= N) i += 1\n        i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1665510015,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while (i * i <= N) {\n            i += 1\n        }\n        i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1665510016,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while (i * i <= N) i += 1\n        i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1665510015,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while (i * i <= N) i += 1\n        i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1665510015,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var n = N\n        while (n * n < N) n += 1\n        n * n\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1666122815,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpm89d5men.scala:11)\n\tat Problem.main(tmpm89d5men.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1L\n        while (i * i <= N) {\n            i += 1\n        }\n        i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1666122814,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while (i * i <= N) {\n            i += 1\n        }\n        i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1665510016,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while (i * i <= N) i += 1\n        i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1665510015,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var n = N\n        while(true) {\n            n += 1\n            if(isPerfectSquare(n)) return n\n        }\n        return -1\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1666122806,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpk8f88pac.scala:9:15 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mif\u001b[0m(isPerfectSquare(n)) \u001b[33mreturn\u001b[0m n\n\u001b[31m\u001b[31m  |\u001b[0m               ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m               Not found: isPerfectSquare\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 0\n        while (i * i <= N) {\n            i += 1\n        }\n        i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1666122815,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while(i * i <= N) i += 1\n        i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1666122815,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while (i * i <= N) i += 1\n        i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1665510015,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while (i * i <= N) i += 1\n        return i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1666122808,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while (i * i <= N) i += 1\n        i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1665510015,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        var square = 1L\n        while (square <= N) {\n            i += 1\n            square = i * i\n        }\n        square\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1666122815,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        val sqrtN = sqrt(N)\n        if (sqrtN % 1 == 0) (sqrtN + 1) * (sqrtN + 1)\n        else {\n            val nextSqrt = ceil(sqrtN)\n            nextSqrt * nextSqrt\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1666122816,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv2te5ofg.scala:7:28 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mif\u001b[0m (sqrtN % \u001b[31m1\u001b[0m == \u001b[31m0\u001b[0m) (sqrtN + \u001b[31m1\u001b[0m) * (sqrtN + \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m  |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                            Found:    Double\n\u001b[31m  |\u001b[0m                            Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv2te5ofg.scala:10:12 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m            nextSqrt * nextSqrt\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Found:    Double\n\u001b[31m   |\u001b[0m            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while (i * i <= N) i += 1\n        i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1665510015,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while (i * i <= N) i += 1\n        i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1665510015,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while (i * i < N) i += 1\n        i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1666122808,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmppntiqqdn.scala:13)\n\tat Problem.main(tmppntiqqdn.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while (i * i <= N) i += 1\n        i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1665510015,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while (i * i <= N) i += 1\n        i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1665510015,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var n = N\n        while (n % sqrt(n) != 0) {\n            n += 1\n        }\n        n\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1666122808,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmps0sumni8.scala:15)\n\tat Problem.main(tmps0sumni8.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while (i * i <= N) i += 1\n        i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1665510015,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var n = N\n        while (true) {\n            n += 1\n            if (isPerfectSquare(n)) return n\n        }\n        return 0\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1666122814,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2daweut8.scala:9:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mif\u001b[0m (isPerfectSquare(n)) \u001b[33mreturn\u001b[0m n\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: isPerfectSquare\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var n = N\n        while(!isPerfectSquare(n)) n += 1\n        n\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1665510015,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpse658lh3.scala:7:15 -------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mwhile\u001b[0m(!isPerfectSquare(n)) n += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m               ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m               Not found: isPerfectSquare\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var n = N\n        while (n % sqrt(n) != 0) {\n            n += 1\n        }\n        return n\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1665510016,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp8xg4yvoz.scala:15)\n\tat Problem.main(tmp8xg4yvoz.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while (i * i <= N) i += 1\n        i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1665510015,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while (i * i <= N) i += 1\n        i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1665510015,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while (i * i <= N) i += 1\n        i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1665510015,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while (i * i < N) i += 1\n        i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1666122808,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmppntiqqdn.scala:13)\n\tat Problem.main(tmppntiqqdn.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while (i * i <= N) i += 1\n        i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1665510015,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while (i * i <= N) {\n            i += 1\n        }\n        i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1665510016,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var n = N\n        while(!isPerfectSquare(n)) n += 1\n        n\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1665510015,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpse658lh3.scala:7:15 -------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mwhile\u001b[0m(!isPerfectSquare(n)) n += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m               ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m               Not found: isPerfectSquare\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while (i * i <= N) i += 1\n        return i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1666122808,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var n = N\n        while (n % sqrt(n) != 0) {\n            n += 1\n        }\n        n\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1666122808,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmps0sumni8.scala:15)\n\tat Problem.main(tmps0sumni8.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var n = N\n        while (n % sqrt(n) != 0) {\n            n += 1\n        }\n        n\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1666122808,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmps0sumni8.scala:15)\n\tat Problem.main(tmps0sumni8.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while (i * i < N) {\n            i += 1\n        }\n        i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1665510016,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpvp8imtje.scala:15)\n\tat Problem.main(tmpvp8imtje.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while (i * i <= N) i += 1\n        return i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1666122808,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var n = N\n        while(true) {\n            n += 1\n            if(sqrt(n) % 1 == 0) return n\n        }\n        return -1\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1666122808,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var x = N\n        while(x % sqrt(x) != 0) x += 1\n        x\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1666122816,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmprum_h9wf.scala:13)\n\tat Problem.main(tmprum_h9wf.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        val sqrt = math.sqrt(N)\n        if (sqrt == sqrt.toInt) {\n            return (sqrt + 1) * (sqrt + 1)\n        }\n        return (sqrt.toInt + 1) * (sqrt.toInt + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1666122816,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnjfhi87a.scala:8:19 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mreturn\u001b[0m (sqrt + \u001b[31m1\u001b[0m) * (sqrt + \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m  |\u001b[0m                   ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                   Found:    Double\n\u001b[31m  |\u001b[0m                   Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        val sqrtN = sqrt(N)\n        if (sqrtN == sqrtN.toInt) return N + 1\n        val next = sqrtN.toInt + 1\n        next * next\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1666122816,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp0tcrp99j.scala:14)\n\tat Problem.main(tmp0tcrp99j.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while (i * i <= N) i += 1\n        i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1665510015,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while (i * i < N) i += 1\n        i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1666122808,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmppntiqqdn.scala:13)\n\tat Problem.main(tmppntiqqdn.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while (i * i <= N) i += 1\n        i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1665510015,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        var x = 1\n        while (x < N) {\n            i += 1\n            x = i * i\n        }\n        x\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1666122816,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpk5sa40qj.scala:17)\n\tat Problem.main(tmpk5sa40qj.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        var j = 1\n        while (i < N) {\n            i += 2 * j + 1\n            j += 1\n        }\n        i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1666122816,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpht1wmtpm.scala:17)\n\tat Problem.main(tmpht1wmtpm.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while (i * i <= N) i += 1\n        i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1665510015,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while (i * i < N) i += 1\n        i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1666122808,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmppntiqqdn.scala:13)\n\tat Problem.main(tmppntiqqdn.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while (i * i < N) i += 1\n        i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1666122808,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmppntiqqdn.scala:13)\n\tat Problem.main(tmppntiqqdn.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var n = N\n        while(!isPerfectSquare(n)) n += 1\n        n\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1665510015,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpse658lh3.scala:7:15 -------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mwhile\u001b[0m(!isPerfectSquare(n)) n += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m               ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m               Not found: isPerfectSquare\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while (i * i <= N) {\n            i += 1\n        }\n        return i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1666122808,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while (i * i <= N) i += 1\n        i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1665510015,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while (i * i <= N) i += 1\n        i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1665510015,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        val sqrtN = sqrt(N)\n        val ceilN = ceil(sqrtN)\n        return ceilN * ceilN\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1666122816,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpih8s8pto.scala:8:15 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mreturn\u001b[0m ceilN * ceilN\n\u001b[31m\u001b[31m  |\u001b[0m               ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m               Found:    Double\n\u001b[31m  |\u001b[0m               Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while (i * i <= N) i += 1\n        i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1665510015,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while (i * i < N) i += 1\n        i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1666122808,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmppntiqqdn.scala:13)\n\tat Problem.main(tmppntiqqdn.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var n = N\n        while(!isPerfectSquare(n)) {\n            n += 1\n        }\n        return n\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1666122806,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8aexb08t.scala:7:15 -------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mwhile\u001b[0m(!isPerfectSquare(n)) {\n\u001b[31m\u001b[31m  |\u001b[0m               ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m               Not found: isPerfectSquare\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while (i * i <= N) i += 1\n        i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1665510015,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var n = N\n        while (n % sqrt(n) != 0) n += 1\n        n\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1666122815,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpx7r64ele.scala:13)\n\tat Problem.main(tmpx7r64ele.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while (i * i < N) i += 1\n        i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1666122808,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmppntiqqdn.scala:13)\n\tat Problem.main(tmppntiqqdn.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while (i * i <= N) {\n            i += 1\n        }\n        i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1665510016,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while (i * i <= N) i += 1\n        i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1665510015,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while (i * i <= N) i += 1\n        i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1665510015,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var n = N\n        while(true) {\n            if(isPerfectSquare(n)) return n\n            n += 1\n        }\n        return 0\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1666122814,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp69k8vjjn.scala:8:15 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m(isPerfectSquare(n)) \u001b[33mreturn\u001b[0m n\n\u001b[31m\u001b[31m  |\u001b[0m               ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m               Not found: isPerfectSquare\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while (i * i <= N) i += 1\n        i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1665510015,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        val sqrtN = sqrt(N)\n        if (sqrtN == sqrtN.toInt) sqrtN.toInt + 1 else sqrtN.toInt + 2\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1666122808,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpjigh71ld.scala:10)\n\tat Problem.main(tmpjigh71ld.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while(i * i <= N) {\n            i += 1\n        }\n        return i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1666122809,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while (i * i <= N) i += 1\n        i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1665510015,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while (i * i <= N) i += 1\n        i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1665510015,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var n = N\n        while(true) {\n            n += 1\n            if(isPerfectSquare(n)) return n\n        }\n        return -1\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1666122806,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpk8f88pac.scala:9:15 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mif\u001b[0m(isPerfectSquare(n)) \u001b[33mreturn\u001b[0m n\n\u001b[31m\u001b[31m  |\u001b[0m               ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m               Not found: isPerfectSquare\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1;\n        while(i * i <= N) {\n            i += 1;\n        }\n        return i * i;\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1666122816,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while (i * i <= N) i += 1\n        i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1665510015,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var n = N\n        while (sqrt(n) % 1 != 0) {\n            n += 1\n        }\n        n\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1666122816,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpahil62cs.scala:15)\n\tat Problem.main(tmpahil62cs.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        var result = 0L\n        while (result < N) {\n            result = i * i\n            i += 1\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1666122816,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp4klddtv2.scala:17)\n\tat Problem.main(tmp4klddtv2.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while (i * i <= N) i += 1\n        i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1665510015,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while (i * i <= N) {\n            i += 1\n        }\n        i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1665510016,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var n = N\n        while (true) {\n            n += 1\n            if (sqrt(n) % 1 == 0) return n\n        }\n        return -1\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1666122816,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while (i * i <= N) i += 1\n        i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1665510015,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while (i * i <= N) {\n            i += 1\n        }\n        return i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1666122808,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var n = N\n        while(true) {\n            var sqrt = sqrt(n).toLong\n            if(sqrt * sqrt == n) return n\n            n += 1\n        }\n        return -1\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1666122815,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpuno9w_yz.scala:8:23 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mvar\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                       ^\u001b[0m\n\u001b[31m  |\u001b[0m                       Recursive \u001b[33mvariable\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while (i * i <= N) {\n            i += 1\n        }\n        i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1665510016,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var n = N\n        while (true) {\n            n += 1\n            if (sqrt(n) % 1 == 0) return n\n        }\n        return -1\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1666122816,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while (i * i < N) i += 1\n        i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1666122808,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmppntiqqdn.scala:13)\n\tat Problem.main(tmppntiqqdn.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n        var i = 1\n        while (i * i <= N) {\n            i += 1\n        }\n        i * i\n    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
      "timestamp": 1665510016,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}