{
  "name": "mbpp_722_filter_data",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_722_filter_data.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        students.filter(x => x._2.right.get >= h && x._2.left.get >= w)",
    "        students.filter(x => x._2.isLeft && x._2.left.get > w || x._2.isRight && x._2.right.get > h)",
    "        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)",
    "        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)",
    "        students.filter(x => x._2.isLeft && x._2.left.get > h || x._2.isRight && x._2.right.get > w)",
    "        students.filter(s => s._2.right.get > h && s._2.left.get > w)",
    "        students.filter(x => (x._2.right.get > h) && (x._2.left.get > w))",
    "        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)",
    "        students.filter(x => x._2.left.getOrElse(0) > h && x._2.right.getOrElse(0) > w)",
    "        students.filter(x => x._2.right.get > h && x._2.left.get > w)",
    "        students.filter(x => x._2.isRight && x._2.right.get._1 >= h && x._2.right.get._2 >= w)",
    "        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)",
    "        students.filter(x => x._2.fold(y => y > w, y => y > h))",
    "        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)",
    "        var filteredStudents = Map[String,Either[Long, Float]]()\n        for ((name, (height, weight)) <- students) {\n            if (height > h && weight > w) {\n                filteredStudents += (name -> (height, weight))\n            }\n        }\n        filteredStudents",
    "        students.filter(x => x._2.right.get > h && x._2.left.get > w)",
    "        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)",
    "        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)",
    "        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)",
    "        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)",
    "        students.filter(x => x._2.right.get > h && x._2.left.get > w)",
    "        students.filter(x => x._2.right.get > h && x._2.left.get > w)",
    "        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)",
    "        students.filter(x => x._2.right.get > h && x._2.left.get > w)",
    "        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)",
    "        students.filter(x => x._2.right.get > h && x._2.left.get > w)",
    "        students.filter(x => x._2.right.get > h && x._2.left.get > w)",
    "        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)",
    "        students.filter(x => x._2.right.get > h && x._2.left.get > w)",
    "        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)",
    "        students.filter(x => x._2.left.getOrElse(0) > h && x._2.right.getOrElse(0) > w)",
    "        students.filter(x => x._2.fold(x => x > w, x => x > h))",
    "        students.filter(x => x._2.isLeft && x._2.left.get > h || x._2.isRight && x._2.right.get > w)",
    "        students.filter(x => x._2.right.get > h && x._2.left.get > w)",
    "        students.filter(x => x._2.fold(x => x > w, x => x > h))",
    "        // students.filter(x => x._2._1 > h && x._2._2 > w)\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)",
    "        students.filter(x => x._2.right.get > h && x._2.left.get > w)",
    "        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)",
    "        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)",
    "        students.filter(x => x._2.left.getOrElse(0) > h && x._2.right.getOrElse(0) > w)",
    "        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)",
    "        students.filter(x => x._2.right.get > h && x._2.left.get > w)",
    "        students.filter(x => x._2.left.getOrElse(0) > h && x._2.right.getOrElse(0) > w)",
    "        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)",
    "        students.filter(x => x._2.right.get > h && x._2.left.get > w)",
    "        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)",
    "        students.filter(x => x._2.right.get > h && x._2.left.get > w)",
    "        students.filter(x => x._2.right.get > h && x._2.left.get > w)",
    "        students.filter(x => x._2.right.get > h && x._2.left.get > w)",
    "        students.filter(x => x._2.right.get >= h && x._2.left.get >= w)",
    "        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)",
    "        students.filter(student => student._2.isRight && student._2.right.get._1 > h && student._2.right.get._2 > w)",
    "        students.filter(x => x._2.right.get > h && x._2.left.get > w)",
    "        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)",
    "        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)",
    "        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)",
    "        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)",
    "        students.filter(x => x._2.left.getOrElse(0) > h && x._2.right.getOrElse(0) > w)",
    "        students.filter(x => x._2.right.get > h && x._2.left.get > w)",
    "        students.filter(x => x._2.right.get > h && x._2.left.get > w)",
    "        students.filter(x => x._2.right.get > h && x._2.left.get > w)",
    "        students.filter(x => x._2.right.get > h && x._2.left.get > w)",
    "        students.filter(x => x._2.right.get > h && x._2.left.get > w)",
    "        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)",
    "        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)",
    "        students.filter(x => x._2.right.get > h && x._2.left.get > w)",
    "        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)",
    "        students.filter(x => x._2.right.get > h && x._2.left.get > w)",
    "        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)",
    "        students.filter(x => x._2.right.get > h && x._2.left.get > w)",
    "        students.filter(x => x._2.right.get > h && x._2.left.get > w)",
    "        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)",
    "        students.filter(x => x._2.right.get > h && x._2.left.get > w)",
    "        students.filter(x => x._2.right.get > h && x._2.left.get > w)",
    "        students.filter(x => x._2.right.get > h && x._2.left.get > w)",
    "        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)",
    "        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)",
    "        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)",
    "        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)",
    "        students.filter(x => x._2.fold(x => x > w, y => y > h))",
    "        students.filter(x => x._2.right.get > h && x._2.left.get > w)",
    "        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)",
    "        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)",
    "        students.filter(x => x._2.isRight && x._2.right.get._1 >= h && x._2.right.get._2 >= w)",
    "        students.filter(x => x._2.isRight && x._2.right.get._1 >= h && x._2.right.get._2 >= w)",
    "        students.filter(x => x._2.right.get > h && x._2.left.get > w)",
    "        students.filter(x => x._2.right.get > h && x._2.left.get > w)",
    "        students.filter(x => x._2.right.get > h && x._2.left.get > w)",
    "        students.filter(x => x._2.right.get >= h && x._2.left.get >= w)",
    "        students.filter(x => x._2.right.get > h && x._2.left.get > w)",
    "        students.filter(x => x._2.right.get > h && x._2.left.get > w)",
    "        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)",
    "        students.filter(x => x._2.right.get > h && x._2.left.get > w)",
    "        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)",
    "        students.filter(x => x._2.isLeft && x._2.left.get > w || x._2.isRight && x._2.right.get > h)",
    "        students.filter(x => x._2.right.get > h && x._2.left.get > w)",
    "        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)",
    "        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)",
    "        students.filter(x => x._2.right.get > h && x._2.left.get > w)",
    "        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)",
    "        students.filter(x => x._2.right.get > h && x._2.left.get > w)",
    "        students.filter(x => x._2.right.get > h && x._2.left.get > w)",
    "        students.filter(x => x._2.right.get > h && x._2.left.get > w)",
    "        students.filter(x => x._2.right.get > h && x._2.left.get > w)",
    "        students.filter(x => x._2.right.get > h && x._2.left.get > w)",
    "        students.filter(x => x._2.right.get > h && x._2.left.get > w)",
    "        students.filter(x => x._2.right.get > h && x._2.left.get > w)",
    "        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)",
    "        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)",
    "        students.filter(x => x._2.right.get > h && x._2.left.get > w)",
    "        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)",
    "        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)",
    "        students.filter(x => x._2.right.get > h && x._2.left.get > w)",
    "        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)",
    "        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)",
    "        students.filter(x => x._2.fold(x => x > w, x => x > h))",
    "        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)",
    "        students.filter(x => x._2.right.get > h && x._2.left.get > w)",
    "        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)",
    "        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)",
    "        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)",
    "        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)",
    "        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)",
    "        students.filter(x => x._2.isRight && x._2.right.get._1 >= h && x._2.right.get._2 >= w)",
    "        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)",
    "        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)",
    "        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)",
    "        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)",
    "        students.filter(x => x._2.right.get > h && x._2.left.get > w)",
    "        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)",
    "        students.filter(x => x._2.right.get > h && x._2.left.get > w)",
    "        students.filter(x => x._2.right.get > h && x._2.left.get > w)",
    "        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)",
    "        students.filter(x => x._2.right.get > h && x._2.left.get > w)",
    "        students.filter(x => x._2.right.get > h && x._2.left.get > w)",
    "        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)",
    "        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)",
    "        students.filter(x => x._2.right.get > h && x._2.left.get > w)",
    "        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)",
    "        students.filter(x => x._2.right.get > h && x._2.left.get > w)",
    "        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)",
    "        students.filter(x => x._2.right.get > h && x._2.left.get > w)",
    "        students.filter(x => x._2.right.get > h && x._2.left.get > w)",
    "        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)",
    "        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)",
    "        students.filter(x => x._2.right.get > h && x._2.left.get > w)",
    "        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)",
    "        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)",
    "        students.filter(x => x._2.right.get > h && x._2.left.get > w)",
    "        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)",
    "        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)",
    "        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)",
    "        students.filter(x => x._2.right.get > h && x._2.left.get > w)",
    "        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)",
    "        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)",
    "        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)",
    "        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)",
    "        students.filter(x => x._2.right.get > h && x._2.left.get > w)",
    "        students.filter(x => x._2.right.get > h && x._2.left.get > w)",
    "        students.filter(x => x._2.left.getOrElse(0) > h && x._2.right.getOrElse(0) > w)",
    "        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)",
    "        students.filter(x => x._2.left.getOrElse(0) > h && x._2.right.getOrElse(0) > w)",
    "        students.filter(x => x._2.right.get > h && x._2.left.get > w)",
    "        students.filter(x => x._2.right.get > h && x._2.left.get > w)",
    "        students.filter(x => x._2.left.getOrElse(0.0f) > h && x._2.right.getOrElse(0) > w)",
    "        students.filter(x => x._2.right.get > h && x._2.left.get > w)",
    "        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)",
    "        students.filter(x => x._2.right.get > h && x._2.left.get > w)",
    "        students.filter(x => x._2.left.getOrElse(0) > h && x._2.right.getOrElse(0) > w)",
    "        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)",
    "        students.filter(x => x._2.right.get > h && x._2.left.get > w)",
    "        students.filter(x => x._2.right.get > h && x._2.left.get > w)",
    "        students.filter(x => x._2.fold(x => x > w, x => x > h))",
    "        students.filter(x => x._2.right.get > h && x._2.left.get > w)",
    "        students.filter(x => {\n            val h = x._2.left.getOrElse(0)\n            val w = x._2.right.getOrElse(0)\n            h > 0 && w > 0\n        })",
    "        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)",
    "        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)",
    "        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)",
    "        students.filter(x => (x._2.isLeft && x._2.left.get > w) || (x._2.isRight && x._2.right.get > h))",
    "        students.filter(x => {\n            val height = x._2.left.getOrElse(0L)\n            val weight = x._2.right.getOrElse(0.0f)\n            height > h && weight > w\n        })",
    "        students.filter(x => x._2.right.get > h && x._2.left.get > w)",
    "        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)",
    "        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)",
    "        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)",
    "        students.filter(x => x._2.right.get > h && x._2.left.get > w)",
    "        students.filter(x => x._2.right.get > h && x._2.left.get > w)",
    "        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)",
    "        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)",
    "        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)",
    "        students.filter(x => x._2.right.get > h && x._2.left.get > w)",
    "        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)",
    "        students.filter(x => x._2.right.get > h && x._2.left.get > w)",
    "        students.filter(x => x._2.fold(x => x > w, x => x > h))",
    "        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)",
    "        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)",
    "        students.filter(x => x._2.right.get > h && x._2.left.get > w)",
    "        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)",
    "        students.filter(x => x._2.right.get > h && x._2.left.get > w)",
    "        students.filter(x => x._2.right.get > h && x._2.left.get > w)",
    "        students.filter(x => (x._2.right.get > h) && (x._2.left.get > w))"
  ]
}