{
  "name": "mbpp_632_move_zero",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_632_move_zero.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var zero_list = List[Long]()\n        var nonzero_list = List[Long]()\n        for (num <- num_list) {\n            if (num == 0) zero_list = zero_list :+ num\n            else nonzero_list = nonzero_list :+ num\n        }\n        return nonzero_list ++ zero_list",
    "        num_list.filter(_ != 0) ::: num_list.filter(_ == 0)",
    "        // Write your code here\n        val nonZero = num_list.filter(_ != 0)\n        val zero = num_list.filter(_ == 0)\n        nonZero ::: zero",
    "        var zero_list = List[Long]()\n        var non_zero_list = List[Long]()\n        for (num <- num_list) {\n            if (num == 0) zero_list = zero_list :+ num\n            else non_zero_list = non_zero_list :+ num\n        }\n        non_zero_list ::: zero_list",
    "        // Write your code here\n        var zero_list = List[Long]()\n        var non_zero_list = List[Long]()\n        for (num <- num_list) {\n            if (num == 0) {\n                zero_list = zero_list :+ num\n            } else {\n                non_zero_list = non_zero_list :+ num\n            }\n        }\n        non_zero_list ++ zero_list",
    "        // Write your code here\n        val (zeros, nonzeros) = num_list.partition(_ == 0)\n        nonzeros ++ zeros",
    "        var zero_list = List[Long]()\n        var non_zero_list = List[Long]()\n        for (i <- num_list) {\n            if (i == 0) zero_list = zero_list :+ i\n            else non_zero_list = non_zero_list :+ i\n        }\n        return non_zero_list ::: zero_list",
    "        var zero_list = List[Long]()\n        var non_zero_list = List[Long]()\n        for (num <- num_list) {\n            if (num == 0) zero_list = zero_list :+ num\n            else non_zero_list = non_zero_list :+ num\n        }\n        non_zero_list ++ zero_list",
    "        num_list.filter(_ != 0) ::: num_list.filter(_ == 0)",
    "        var zero_list = List[Long]()\n        var nonzero_list = List[Long]()\n        for (num <- num_list) {\n            if (num == 0) zero_list = zero_list :+ num\n            else nonzero_list = nonzero_list :+ num\n        }\n        nonzero_list ++ zero_list",
    "        var zero_list = List[Long]()\n        var non_zero_list = List[Long]()\n        for (num <- num_list) {\n            if (num == 0) zero_list = zero_list :+ num\n            else non_zero_list = non_zero_list :+ num\n        }\n        non_zero_list ++ zero_list",
    "        val zero_list = num_list.filter(x => x == 0)\n        val non_zero_list = num_list.filter(x => x != 0)\n        non_zero_list ::: zero_list",
    "        var zero_list = List[Long]()\n        var non_zero_list = List[Long]()\n        for (num <- num_list) {\n            if (num == 0) zero_list = zero_list :+ num\n            else non_zero_list = non_zero_list :+ num\n        }\n        non_zero_list ++ zero_list",
    "        var zero_list = List[Long]()\n        var non_zero_list = List[Long]()\n        for (i <- num_list) {\n            if (i == 0) {\n                zero_list = zero_list :+ i\n            } else {\n                non_zero_list = non_zero_list :+ i\n            }\n        }\n        non_zero_list ++ zero_list",
    "        val zero_list = num_list.filter(x => x == 0)\n        val non_zero_list = num_list.filter(x => x != 0)\n        non_zero_list ::: zero_list",
    "        var zero_list = List[Long]()\n        var non_zero_list = List[Long]()\n        for (num <- num_list) {\n            if (num == 0) zero_list = zero_list :+ num\n            else non_zero_list = non_zero_list :+ num\n        }\n        non_zero_list ++ zero_list",
    "        val (zeros, nonzeros) = num_list.partition(_ == 0)\n        nonzeros ::: zeros",
    "        val nonZeroList = num_list.filter(_ != 0)\n        val zeroList = num_list.filter(_ == 0)\n        nonZeroList ::: zeroList",
    "        val (zeros, nonzeros) = num_list.partition(_ == 0)\n        nonzeros ::: zeros",
    "        var zero_list = List[Long]()\n        var non_zero_list = List[Long]()\n        for (num <- num_list) {\n            if (num == 0) zero_list = zero_list :+ num\n            else non_zero_list = non_zero_list :+ num\n        }\n        return non_zero_list ++ zero_list"
  ]
}