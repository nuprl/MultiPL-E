{
  "name": "mbpp_764_number_ctr",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count number of digits in a given string.\n    def numberCtr(str : String) : Long = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_764_number_ctr.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(numberCtr((\"program2bedone\")) == (1l));\n    assert(numberCtr((\"3wonders\")) == (1l));\n    assert(numberCtr((\"123\")) == (3l));\n    assert(numberCtr((\"3wond-1ers2\")) == (3l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        str.filter(_.isDigit).length",
    "        val nums = str.split(\" \").map(x => x.toLong)\n        nums.map(x => x.toString.length).sum",
    "        str.filter(_.isDigit).length",
    "        str.filter(_.isDigit).length",
    "        str.filter(_.isDigit).length",
    "        str.filter(_.isDigit).size",
    "        str.filter(_.isDigit).length",
    "        str.filter(_.isDigit).length",
    "        str.filter(x => x.isDigit).length",
    "        str.filter(_.isDigit).length",
    "        val num = str.filter(c => c.isDigit).map(_.asDigit).sum\n        num",
    "        str.filter(_.isDigit).length",
    "        str.filter(x => x.isDigit).length",
    "        val nums = str.split(\" \").map(_.toLong)\n        nums.map(_.toString.length).sum",
    "        str.filter(_.isDigit).length",
    "        str.filter(_.isDigit).length",
    "        str.filter(c => c.isDigit).length",
    "        var ctr = 0L\n        for (c <- str) {\n            if (c.isDigit) ctr += 1\n        }\n        ctr",
    "        str.filter(_.isDigit).length",
    "        str.filter(_.isDigit).length"
  ]
}