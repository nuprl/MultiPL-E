{
  "name": "mbpp_143_find_lists",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find number of lists present in the given tuple.\n    def findLists(Input : Any) : Long = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_143_find_lists.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(findLists((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)))) == (2l));\n    assert(findLists((Any(1l.toLong, 2l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (3l));\n    assert(findLists((Any(9l.toLong, 8l.toLong, 7l.toLong, 6l.toLong, 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var count : Long = 0\n        Input match {\n            case x : List[Any] => count += 1\n            case x : Tuple2[Any, Any] => count += findLists(x._1) + findLists(x._2)\n            case x : Tuple3[Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3)\n            case x : Tuple4[Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4)\n            case x : Tuple5[Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5)\n            case x : Tuple6[Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6)\n            case x : Tuple7[Any, Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7)\n            case x : Tuple8[Any, Any, Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7) + findLists(x._8)\n            case x : Tuple9[Any, Any, Any, Any, Any, Any, Any, Any",
    "        var count = 0\n        Input match {\n            case x : List[Any] => {\n                for (i <- x) {\n                    count += findLists(i)\n                }\n                count += 1\n            }\n            case x : Tuple2[Any, Any] => {\n                count += findLists(x._1)\n                count += findLists(x._2)\n            }\n            case _ => count += 0\n        }\n        count",
    "        var count = 0\n        Input match {\n            case x: List[Any] => count += 1\n            case x: Tuple2[Any, Any] => count += findLists(x._1) + findLists(x._2)\n            case _ => count\n        }\n        return count",
    "        var count = 0\n        Input match {\n            case l : List[Any] => {\n                for (i <- l) {\n                    count += findLists(i)\n                }\n                count + 1\n            }\n            case _ => 0\n        }",
    "        val list = Input.asInstanceOf[List[Any]]\n        var count = 0\n        for(i <- 0 until list.length) {\n            if(list(i).isInstanceOf[List[Any]]) {\n                count += 1\n                count += findLists(list(i))\n            }\n        }\n        count",
    "        Input match {\n            case x : List[Any] => 1 + x.map(findLists(_)).sum\n            case x : Tuple2[Any, Any] => findLists(x._1) + findLists(x._2)\n            case _ => 0\n        }",
    "        var count = 0\n        Input match {\n            case x:List[Any] => count = count + 1\n            case x:Tuple2[Any, Any] => count = count + findLists(x._1) + findLists(x._2)\n            case x:Tuple3[Any, Any, Any] => count = count + findLists(x._1) + findLists(x._2) + findLists(x._3)\n            case x:Tuple4[Any, Any, Any, Any] => count = count + findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4)\n            case x:Tuple5[Any, Any, Any, Any, Any] => count = count + findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5)\n            case x:Tuple6[Any, Any, Any, Any, Any, Any] => count = count + findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6)\n            case x:Tuple7[Any, Any, Any, Any, Any, Any, Any] => count = count + findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7)\n            case x:Tuple8[Any, Any, Any, Any, Any, Any, Any, Any] => count = count + findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7) + findLists(x._8)\n            case x:Tuple9[Any",
    "        Input match {\n            case (a, b) => findLists(a) + findLists(b)\n            case (a, b, c) => findLists(a) + findLists(b) + findLists(c)\n            case (a, b, c, d) => findLists(a) + findLists(b) + findLists(c) + findLists(d)\n            case (a, b, c, d, e) => findLists(a) + findLists(b) + findLists(c) + findLists(d) + findLists(e)\n            case (a, b, c, d, e, f) => findLists(a) + findLists(b) + findLists(c) + findLists(d) + findLists(e) + findLists(f)\n            case (a, b, c, d, e, f, g) => findLists(a) + findLists(b) + findLists(c) + findLists(d) + findLists(e) + findLists(f) + findLists(g)\n            case (a, b, c, d, e, f, g, h) => findLists(a) + findLists(b) + findLists(c) + findLists(d) + findLists(e) + findLists(f) + findLists(g) + findLists(h)\n            case (a, b, c, d, e, f, g, h, i) => findLists(a) + findLists(b) + findLists(c) + findLists(d) + findLists(e) + findLists(f) + findLists(g) + findLists(h) + findLists(i)\n            case (a, b, c, d, e, f, g, h, i, j) => findLists(a) + findLists(b) + findLists(c) + findLists(d) + findLists(e) + findLists(f) + findLists(g) + findLists(h",
    "        var count : Long = 0\n        Input match {\n            case x : List[Any] => {\n                count += 1\n                for (i <- x) {\n                    count += findLists(i)\n                }\n            }\n            case x : Tuple2[Any, Any] => {\n                count += findLists(x._1)\n                count += findLists(x._2)\n            }\n            case x : Tuple3[Any, Any, Any] => {\n                count += findLists(x._1)\n                count += findLists(x._2)\n                count += findLists(x._3)\n            }\n            case x : Tuple4[Any, Any, Any, Any] => {\n                count += findLists(x._1)\n                count += findLists(x._2)\n                count += findLists(x._3)\n                count += findLists(x._4)\n            }\n            case x : Tuple5[Any, Any, Any, Any, Any] => {\n                count += findLists(x._1)\n                count += findLists(x._2)\n                count += findLists(x._3)\n                count += findLists(x._4)\n                count += findLists(x._5)\n            }\n            case x : Tuple6[Any, Any, Any, Any, Any, Any] => {\n                count += findLists(x._1)\n                count += findLists(x._2)\n                count += findLists(x._3)\n                count += findLists(x._4)\n                count += findLists(x._5)\n                count += findLists(x._6)\n            }\n            case x : Tuple7[Any, Any, Any, Any, Any, Any, Any] => {\n                count += findLists(x._1)\n                count += findLists(x._2)\n                count += findLists(x._3)\n                count += findLists(x._4)\n                count += findLists(x._5)\n                count += findLists(x._6)\n                count += findLists(x._7",
    "        var count = 0\n        Input match {\n            case _ : List[Any] => count = count + 1\n            case _ : Tuple2[Any, Any] => count = count + findLists(Input._1) + findLists(Input._2)\n            case _ => count = count + 0\n        }\n        count",
    "        var count = 0\n        Input match {\n            case x : List[Any] => {\n                count = count + 1\n                for (i <- x) {\n                    count = count + findLists(i)\n                }\n            }\n            case x : Tuple2[Any, Any] => {\n                count = count + findLists(x._1) + findLists(x._2)\n            }\n            case _ =>\n        }\n        return count",
    "        Input match {\n            case (x : List[Any]) => 1 + x.map(findLists(_)).sum\n            case (x : Any) => 0\n        }",
    "        var count : Long = 0\n        Input match {\n            case x : List[Any] => count += 1\n            case x : Tuple2[Any, Any] => count += findLists(x._1) + findLists(x._2)\n            case x : Tuple3[Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3)\n            case x : Tuple4[Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4)\n            case x : Tuple5[Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5)\n            case x : Tuple6[Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6)\n            case x : Tuple7[Any, Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7)\n            case x : Tuple8[Any, Any, Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7) + findLists(x._8)\n            case x : Tuple9[Any, Any, Any, Any, Any, Any, Any, Any",
    "        Input match {\n            case Nil => 0\n            case x :: xs => findLists(xs) + 1\n            case x :: xs => findLists(xs) + findLists(x)\n            case _ => 0\n        }",
    "        var count : Long = 0\n        Input match {\n            case x : List[Any] => count += 1\n            case x : Tuple2[Any, Any] => count += findLists(x._1) + findLists(x._2)\n            case _ => count += 0\n        }\n        return count",
    "        Input match {\n            case x : List[Any] => x.foldLeft(1L)((acc, x) => acc + findLists(x))\n            case x : Tuple2[Any, Any] => findLists(x._1) + findLists(x._2)\n            case x : Tuple3[Any, Any, Any] => findLists(x._1) + findLists(x._2) + findLists(x._3)\n            case x : Tuple4[Any, Any, Any, Any] => findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4)\n            case x : Tuple5[Any, Any, Any, Any, Any] => findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5)\n            case x : Tuple6[Any, Any, Any, Any, Any, Any] => findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6)\n            case x : Tuple7[Any, Any, Any, Any, Any, Any, Any] => findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7)\n            case x : Tuple8[Any, Any, Any, Any, Any, Any, Any, Any] => findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7) + findLists(x._8)\n            case x : Tuple9[Any, Any, Any, Any, Any, Any, Any, Any, Any]",
    "        var count = 0\n        Input match {\n            case (a : List[Any], b : List[Any]) => count += 2\n            case (a : List[Any], b : Any) => count += 1\n            case (a : Any, b : List[Any]) => count += 1\n            case (a : Any, b : Any) => count += 0\n        }\n        count",
    "        var count = 0\n        Input match {\n            case x : List[Any] => count += 1\n            case x : Tuple2[Any, Any] => count += findLists(x._1) + findLists(x._2)\n            case x : Tuple3[Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3)\n            case x : Tuple4[Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4)\n            case x : Tuple5[Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5)\n            case x : Tuple6[Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6)\n            case x : Tuple7[Any, Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7)\n            case x : Tuple8[Any, Any, Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7) + findLists(x._8)\n            case x : Tuple9[Any, Any, Any, Any, Any, Any, Any, Any, Any",
    "        Input match {\n            case (x : List[Any], y : List[Any]) => findLists(x) + findLists(y)\n            case (x : List[Any], y : Any) => findLists(x) + findLists(y)\n            case (x : Any, y : List[Any]) => findLists(x) + findLists(y)\n            case (x : Any, y : Any) => findLists(x) + findLists(y)\n            case x : List[Any] => 1\n            case x : Any => 0\n        }",
    "        var count : Long = 0\n        Input match {\n            case x : List[Any] => count += 1\n            case x : Tuple2[Any, Any] => count += findLists(x._1) + findLists(x._2)\n            case x : Tuple3[Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3)\n            case x : Tuple4[Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4)\n            case x : Tuple5[Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5)\n            case x : Tuple6[Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6)\n            case x : Tuple7[Any, Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7)\n            case x : Tuple8[Any, Any, Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7) + findLists(x._8)\n            case x : Tuple9[Any, Any, Any, Any, Any, Any, Any, Any",
    "        var count : Long = 0\n        Input match {\n            case x : List[Any] => count += 1\n            case x : Tuple2[Any, Any] => count += findLists(x._1) + findLists(x._2)\n            case _ => count\n        }\n        count",
    "        Input match {\n            case (x : List[Any], y : List[Any]) => findLists(x) + findLists(y)\n            case (x : List[Any]) => 1\n            case (x : Any, y : Any) => findLists(x) + findLists(y)\n            case _ => 0\n        }",
    "        var count = 0\n        Input match {\n            case x : List[Any] => count += 1\n            case x : Tuple2[Any, Any] => count += findLists(x._1) + findLists(x._2)\n            case _ => count\n        }\n        count",
    "        var count = 0\n        Input match {\n            case x : List[Any] => count = count + 1\n            case x : Tuple2[Any, Any] => count = count + findLists(x._1) + findLists(x._2)\n            case x : Tuple3[Any, Any, Any] => count = count + findLists(x._1) + findLists(x._2) + findLists(x._3)\n            case x : Tuple4[Any, Any, Any, Any] => count = count + findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4)\n            case x : Tuple5[Any, Any, Any, Any, Any] => count = count + findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5)\n            case x : Tuple6[Any, Any, Any, Any, Any, Any] => count = count + findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6)\n            case x : Tuple7[Any, Any, Any, Any, Any, Any, Any] => count = count + findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7)\n            case x : Tuple8[Any, Any, Any, Any, Any, Any, Any, Any] => count = count + findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7) + findLists(x._8)\n            case x : Tuple9[Any",
    "        Input match {\n            case (x : List[Any]) => 1 + findLists(x)\n            case (x : Any, y : Any) => findLists(x) + findLists(y)\n            case _ => 0\n        }",
    "        var count : Long = 0\n        Input match {\n            case x : List[Any] => count += 1\n            case x : Tuple2[Any, Any] => count += findLists(x._1) + findLists(x._2)\n            case _ => count\n        }\n        count",
    "        var count = 0\n        Input match {\n            case x : List[Any] => count += 1\n            case x : Tuple2[Any, Any] => count += findLists(x._1) + findLists(x._2)\n            case _ =>\n        }\n        return count",
    "        Input match {\n            case x : List[Any] => 1 + x.map(findLists).sum\n            case _ => 0\n        }",
    "        var count : Long = 0\n        Input match {\n            case l : List[Any] => {\n                for (i <- l) {\n                    count += findLists(i)\n                }\n                count + 1\n            }\n            case t : Tuple2[Any, Any] => {\n                count += findLists(t._1)\n                count += findLists(t._2)\n                count\n            }\n            case _ => 0\n        }",
    "        var count : Long = 0\n        Input match {\n            case x : List[Any] => {\n                for (i <- x) {\n                    count += findLists(i)\n                }\n                count + 1\n            }\n            case x : Tuple2[Any, Any] => {\n                count += findLists(x._1)\n                count += findLists(x._2)\n                count\n            }\n            case _ => 0\n        }",
    "        var count = 0\n        Input match {\n            case x : List[Any] => count = count + 1\n            case x : Tuple2[Any, Any] => count = count + findLists(x._1) + findLists(x._2)\n            case x : Tuple3[Any, Any, Any] => count = count + findLists(x._1) + findLists(x._2) + findLists(x._3)\n            case x : Tuple4[Any, Any, Any, Any] => count = count + findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4)\n            case x : Tuple5[Any, Any, Any, Any, Any] => count = count + findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5)\n            case x : Tuple6[Any, Any, Any, Any, Any, Any] => count = count + findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6)\n            case x : Tuple7[Any, Any, Any, Any, Any, Any, Any] => count = count + findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7)\n            case x : Tuple8[Any, Any, Any, Any, Any, Any, Any, Any] => count = count + findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7) + findLists(x._8)\n            case x : Tuple9[Any",
    "        Input match {\n            case x : List[Any] => 1 + x.map(findLists(_)).sum\n            case x : Tuple2[Any, Any] => findLists(x._1) + findLists(x._2)\n            case _ => 0\n        }",
    "        Input match {\n            case x : List[Any] => x.map(findLists).sum + 1\n            case x : Tuple2[Any, Any] => findLists(x._1) + findLists(x._2)\n            case _ => 0\n        }",
    "        Input match {\n            case Nil => 0\n            case x :: xs => findLists(xs) + 1\n            case x :: xs => findLists(xs)\n            case x :: xs => findLists(xs)\n            case x :: xs => findLists(xs)\n            case x :: xs => findLists(xs)\n            case x :: xs => findLists(xs)\n            case x :: xs => findLists(xs)\n            case x :: xs => findLists(xs)\n            case x :: xs => findLists(xs)\n            case x :: xs => findLists(xs)\n            case x :: xs => findLists(xs)\n            case x :: xs => findLists(xs)\n            case x :: xs => findLists(xs)\n            case x :: xs => findLists(xs)\n            case x :: xs => findLists(xs)\n            case x :: xs => findLists(xs)\n            case x :: xs => findLists(xs)\n            case x :: xs => findLists(xs)\n            case x :: xs => findLists(xs)\n            case x :: xs => findLists(xs)\n            case x :: xs => findLists(xs)\n            case x :: xs => findLists(xs)\n            case x :: xs => findLists(xs)\n            case x :: xs => findLists(xs)\n            case x :: xs => findLists(xs)\n            case x :: xs => findLists(xs)\n            case x :: xs => findLists(xs)\n            case x :: xs => findLists(xs)\n            case x :: xs => findLists(xs)\n            case x :: xs => findLists(xs)\n            case x :: xs => findLists(xs)\n            case x :: xs => findLists(xs)\n            case x :: xs => findLists(xs)\n            case x :: xs => findLists(xs)\n            case x :: xs => findLists(xs)\n            case x :: xs => find",
    "        var count = 0\n        Input match {\n            case l : List[Any] => {\n                count += 1\n                for (i <- l) {\n                    count += findLists(i)\n                }\n            }\n            case t : Tuple2[Any, Any] => {\n                count += findLists(t._1)\n                count += findLists(t._2)\n            }\n            case _ => {\n                count += 0\n            }\n        }\n        return count",
    "        var count = 0\n        Input match {\n            case x : List[Any] => count += 1\n            case x : Tuple2[Any, Any] => count += findLists(x._1) + findLists(x._2)\n            case _ => count\n        }\n        count",
    "        Input match {\n            case (x : List[Any]) => 1\n            case (x : Any, y : Any) => findLists(x) + findLists(y)\n            case _ => 0\n        }",
    "        Input match {\n            case (a, b) => findLists(a) + findLists(b)\n            case a : List[Any] => 1\n            case _ => 0\n        }",
    "        Input match {\n            case l : List[Any] => l.map(findLists).sum + 1\n            case t : Tuple2[Any, Any] => findLists(t._1) + findLists(t._2)\n            case _ => 0\n        }",
    "        var count : Long = 0\n        Input match {\n            case x : List[Any] => count += 1\n            case x : Tuple2[Any, Any] => count += findLists(x._1) + findLists(x._2)\n            case x : Tuple3[Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3)\n            case x : Tuple4[Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4)\n            case x : Tuple5[Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5)\n            case x : Tuple6[Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6)\n            case x : Tuple7[Any, Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7)\n            case x : Tuple8[Any, Any, Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7) + findLists(x._8)\n            case x : Tuple9[Any, Any, Any, Any, Any, Any, Any, Any",
    "        var count : Long = 0\n        Input match {\n            case l : List[Any] => count += 1\n            case (a, b) => count += findLists(a) + findLists(b)\n            case _ =>\n        }\n        count",
    "        Input match {\n            case (a, b) => findLists(a) + findLists(b)\n            case (a, b, c) => findLists(a) + findLists(b) + findLists(c)\n            case (a, b, c, d) => findLists(a) + findLists(b) + findLists(c) + findLists(d)\n            case (a, b, c, d, e) => findLists(a) + findLists(b) + findLists(c) + findLists(d) + findLists(e)\n            case (a, b, c, d, e, f) => findLists(a) + findLists(b) + findLists(c) + findLists(d) + findLists(e) + findLists(f)\n            case (a, b, c, d, e, f, g) => findLists(a) + findLists(b) + findLists(c) + findLists(d) + findLists(e) + findLists(f) + findLists(g)\n            case (a, b, c, d, e, f, g, h) => findLists(a) + findLists(b) + findLists(c) + findLists(d) + findLists(e) + findLists(f) + findLists(g) + findLists(h)\n            case (a, b, c, d, e, f, g, h, i) => findLists(a) + findLists(b) + findLists(c) + findLists(d) + findLists(e) + findLists(f) + findLists(g) + findLists(h) + findLists(i)\n            case (a, b, c, d, e, f, g, h, i, j) => findLists(a) + findLists(b) + findLists(c) + findLists(d) + findLists(e) + findLists(f) + findLists(g) + findLists(h",
    "        Input match {\n            case _ : List[_] => 1\n            case _ : Tuple2[_, _] => findLists(Input._1) + findLists(Input._2)\n            case _ : Tuple3[_, _, _] => findLists(Input._1) + findLists(Input._2) + findLists(Input._3)\n            case _ : Tuple4[_, _, _, _] => findLists(Input._1) + findLists(Input._2) + findLists(Input._3) + findLists(Input._4)\n            case _ : Tuple5[_, _, _, _, _] => findLists(Input._1) + findLists(Input._2) + findLists(Input._3) + findLists(Input._4) + findLists(Input._5)\n            case _ : Tuple6[_, _, _, _, _, _] => findLists(Input._1) + findLists(Input._2) + findLists(Input._3) + findLists(Input._4) + findLists(Input._5) + findLists(Input._6)\n            case _ : Tuple7[_, _, _, _, _, _, _] => findLists(Input._1) + findLists(Input._2) + findLists(Input._3) + findLists(Input._4) + findLists(Input._5) + findLists(Input._6) + findLists(Input._7)\n            case _ : Tuple8[_, _, _, _, _, _, _, _] => findLists(Input._1) + findLists(Input._2) + findLists(Input._3) + findLists(Input._4) + findLists(Input._5) + findLists(Input._6) + findLists(Input._7) + findLists(Input._8)\n            case _ : Tuple9[_, _, _, _, _, _, _, _, _] => findLists(Input._1) + findLists(Input._2) + findLists(Input._3) + findL",
    "        var count = 0\n        Input match {\n            case x : List[Any] => count += 1\n            case x : Tuple2[Any, Any] => count += findLists(x._1) + findLists(x._2)\n            case _ => count\n        }\n        count",
    "        Input match {\n            case x : List[Any] => 1 + x.map(findLists).sum\n            case x : Tuple2[Any, Any] => findLists(x._1) + findLists(x._2)\n            case _ => 0\n        }",
    "        var count : Long = 0\n        Input match {\n            case x : List[Any] => count += 1\n            case x : Tuple2[Any, Any] => count += findLists(x._1) + findLists(x._2)\n            case x : Tuple3[Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3)\n            case x : Tuple4[Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4)\n            case x : Tuple5[Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5)\n            case x : Tuple6[Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6)\n            case x : Tuple7[Any, Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7)\n            case x : Tuple8[Any, Any, Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7) + findLists(x._8)\n            case x : Tuple9[Any, Any, Any, Any, Any, Any, Any, Any",
    "        Input match {\n            case (x : List[_], y : List[_]) => findLists(x) + findLists(y)\n            case (x : List[_], y) => findLists(x) + findLists(y)\n            case (x, y : List[_]) => findLists(x) + findLists(y)\n            case (x : List[_]) => findLists(x)\n            case (x) => 0\n        }",
    "        var count : Long = 0\n        Input match {\n            case x : List[Any] => count += 1\n            case x : Tuple2[Any, Any] => count += findLists(x._1) + findLists(x._2)\n            case x : Tuple3[Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3)\n            case x : Tuple4[Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4)\n            case x : Tuple5[Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5)\n            case x : Tuple6[Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6)\n            case x : Tuple7[Any, Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7)\n            case x : Tuple8[Any, Any, Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7) + findLists(x._8)\n            case x : Tuple9[Any, Any, Any, Any, Any, Any, Any, Any",
    "        var count = 0\n        Input match {\n            case x : List[Any] => count += 1\n            case x : Tuple2[Any, Any] => count += findLists(x._1) + findLists(x._2)\n            case _ =>\n        }\n        return count",
    "        var count = 0\n        Input match {\n            case x : List[Any] => count += 1\n            case x : Tuple2[Any, Any] => count += findLists(x._1) + findLists(x._2)\n            case x : Tuple3[Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3)\n            case x : Tuple4[Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4)\n            case x : Tuple5[Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5)\n            case x : Tuple6[Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6)\n            case x : Tuple7[Any, Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7)\n            case x : Tuple8[Any, Any, Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7) + findLists(x._8)\n            case x : Tuple9[Any, Any, Any, Any, Any, Any, Any, Any, Any",
    "        var count = 0\n        Input match {\n            case x : List[Any] => count += 1\n            case x : Tuple2[Any, Any] => count += findLists(x._1) + findLists(x._2)\n            case x : Tuple3[Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3)\n            case x : Tuple4[Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4)\n            case x : Tuple5[Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5)\n            case x : Tuple6[Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6)\n            case x : Tuple7[Any, Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7)\n            case x : Tuple8[Any, Any, Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7) + findLists(x._8)\n            case x : Tuple9[Any, Any, Any, Any, Any, Any, Any, Any, Any",
    "        var count : Long = 0\n        Input match {\n            case x : List[Any] => count += 1\n            case x : Tuple2[Any, Any] => count += findLists(x._1) + findLists(x._2)\n            case x : Tuple3[Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3)\n            case x : Tuple4[Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4)\n            case x : Tuple5[Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5)\n            case x : Tuple6[Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6)\n            case x : Tuple7[Any, Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7)\n            case x : Tuple8[Any, Any, Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7) + findLists(x._8)\n            case x : Tuple9[Any, Any, Any, Any, Any, Any, Any, Any",
    "        var count = 0\n        Input match {\n            case (x:List[Any],y:List[Any]) => count += 2\n            case (x:List[Any],y) => count += 1\n            case (x,y:List[Any]) => count += 1\n            case (x,y) => count += 0\n        }\n        return count",
    "        Input match {\n            case (x : List[Any]) => 1 + x.map(findLists).sum\n            case (x : Any) => 0\n        }",
    "        Input match {\n            case x : List[Any] => 1 + x.map(findLists).sum\n            case x : Tuple2[Any, Any] => findLists(x._1) + findLists(x._2)\n            case _ => 0\n        }",
    "        Input match {\n            case (a, b) => findLists(a) + findLists(b)\n            case a : List[Any] => 1\n            case _ => 0\n        }",
    "        var count : Long = 0\n        Input match {\n            case _ : Int => count = 0\n            case _ : Double => count = 0\n            case _ : String => count = 0\n            case _ : Boolean => count = 0\n            case _ : List[Any] => count = 1\n            case _ : Tuple2[Any, Any] => count = findLists(Input._1) + findLists(Input._2)\n            case _ : Tuple3[Any, Any, Any] => count = findLists(Input._1) + findLists(Input._2) + findLists(Input._3)\n            case _ : Tuple4[Any, Any, Any, Any] => count = findLists(Input._1) + findLists(Input._2) + findLists(Input._3) + findLists(Input._4)\n            case _ : Tuple5[Any, Any, Any, Any, Any] => count = findLists(Input._1) + findLists(Input._2) + findLists(Input._3) + findLists(Input._4) + findLists(Input._5)\n            case _ : Tuple6[Any, Any, Any, Any, Any, Any] => count = findLists(Input._1) + findLists(Input._2) + findLists(Input._3) + findLists(Input._4) + findLists(Input._5) + findLists(Input._6)\n            case _ : Tuple7[Any, Any, Any, Any, Any, Any, Any] => count = findLists(Input._1) + findLists(Input._2) + findLists(Input._3) + findLists(Input._4) + findLists(Input._5) + findLists(Input._6) + findLists(Input._7)\n            case _ : Tuple8[Any, Any, Any, Any, Any, Any, Any, Any] => count = findLists(Input._1) + findLists(Input._2) + findLists(Input._3) + findLists(Input._4) + findLists(Input._5) + findLists(Input._6) + find",
    "        Input match {\n            case (x : List[Any]) => 1 + findLists(x)\n            case (x : Any) => 0\n            case (x : Any, y : Any) => findLists(x) + findLists(y)\n            case (x : Any, y : Any, z : Any) => findLists(x) + findLists(y) + findLists(z)\n            case (x : Any, y : Any, z : Any, a : Any) => findLists(x) + findLists(y) + findLists(z) + findLists(a)\n            case (x : Any, y : Any, z : Any, a : Any, b : Any) => findLists(x) + findLists(y) + findLists(z) + findLists(a) + findLists(b)\n            case (x : Any, y : Any, z : Any, a : Any, b : Any, c : Any) => findLists(x) + findLists(y) + findLists(z) + findLists(a) + findLists(b) + findLists(c)\n            case (x : Any, y : Any, z : Any, a : Any, b : Any, c : Any, d : Any) => findLists(x) + findLists(y) + findLists(z) + findLists(a) + findLists(b) + findLists(c) + findLists(d)\n            case (x : Any, y : Any, z : Any, a : Any, b : Any, c : Any, d : Any, e : Any) => findLists(x) + findLists(y) + findLists(z) + findLists(a) + findLists(b) + findLists(c) + findLists(d) + findLists(e)\n            case (x : Any, y : Any, z : Any, a : Any, b : Any, c : Any, d : Any, e : Any, f : Any) => findLists(x) + findLists(y) + findLists(z) + findLists",
    "        var count = 0\n        Input match {\n            case x : List[Any] => {\n                count += 1\n                for (i <- x) {\n                    count += findLists(i)\n                }\n            }\n            case x : Tuple2[Any, Any] => {\n                count += findLists(x._1)\n                count += findLists(x._2)\n            }\n            case _ =>\n        }\n        return count",
    "        var count = 0\n        Input match {\n            case x : List[Any] => count = count + 1\n            case x : Tuple2[Any, Any] => count = count + findLists(x._1) + findLists(x._2)\n            case _ => count = count + 0\n        }\n        return count",
    "        var count : Long = 0\n        Input match {\n            case x : List[Any] => count += 1\n            case x : Tuple2[Any, Any] => count += findLists(x._1) + findLists(x._2)\n            case _ => count\n        }\n        return count",
    "        var count : Long = 0\n        Input match {\n            case x : List[Any] => count += 1\n            case x : Tuple2[Any, Any] => count += findLists(x._1) + findLists(x._2)\n            case x : Tuple3[Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3)\n            case x : Tuple4[Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4)\n            case x : Tuple5[Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5)\n            case x : Tuple6[Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6)\n            case x : Tuple7[Any, Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7)\n            case x : Tuple8[Any, Any, Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7) + findLists(x._8)\n            case x : Tuple9[Any, Any, Any, Any, Any, Any, Any, Any",
    "        var count : Long = 0\n        Input match {\n            case Input : List[Any] => {\n                for (i <- Input) {\n                    count += findLists(i)\n                }\n                count + 1\n            }\n            case Input : Tuple2[Any, Any] => {\n                count += findLists(Input._1)\n                count += findLists(Input._2)\n                count\n            }\n            case _ => 0\n        }",
    "        Input match {\n            case (x : List[Any]) => 1 + findLists(x)\n            case (x : Any, y : Any) => findLists(x) + findLists(y)\n            case (x : Any) => findLists(x)\n            case _ => 0\n        }",
    "        Input match {\n            case (x : List[Any], y : List[Any]) => findLists(x) + findLists(y)\n            case (x : List[Any], y : Any) => findLists(x) + findLists(y)\n            case (x : Any, y : List[Any]) => findLists(x) + findLists(y)\n            case (x : Any, y : Any) => findLists(x) + findLists(y)\n            case x : List[Any] => 1 + x.map(findLists(_)).sum\n            case x : Any => 0\n        }",
    "        var count = 0\n        Input match {\n            case x : List[Any] => count += 1\n            case x : Tuple2[Any, Any] => count += findLists(x._1) + findLists(x._2)\n            case x : Tuple3[Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3)\n            case x : Tuple4[Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4)\n            case x : Tuple5[Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5)\n            case x : Tuple6[Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6)\n            case x : Tuple7[Any, Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7)\n            case x : Tuple8[Any, Any, Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7) + findLists(x._8)\n            case x : Tuple9[Any, Any, Any, Any, Any, Any, Any, Any, Any",
    "        Input match {\n            case (a, b) => findLists(a) + findLists(b)\n            case a : List[Any] => 1\n            case _ => 0\n        }",
    "        var count : Long = 0\n        Input match {\n            case x : List[Any] => count += 1\n            case x : Tuple2[Any, Any] => count += findLists(x._1) + findLists(x._2)\n            case _ => count\n        }\n        count",
    "        Input match {\n            case (x : List[_], y : List[_]) => findLists(x) + findLists(y)\n            case (x : List[_], y : Any) => findLists(x) + findLists(y)\n            case (x : Any, y : List[_]) => findLists(x) + findLists(y)\n            case (x : List[_]) => findLists(x)\n            case (x : Any) => 0\n        }",
    "        var count : Long = 0\n        Input match {\n            case l : List[Any] => count += 1\n            case t : Tuple2[Any, Any] => count += findLists(t._1) + findLists(t._2)\n            case t : Tuple3[Any, Any, Any] => count += findLists(t._1) + findLists(t._2) + findLists(t._3)\n            case t : Tuple4[Any, Any, Any, Any] => count += findLists(t._1) + findLists(t._2) + findLists(t._3) + findLists(t._4)\n            case t : Tuple5[Any, Any, Any, Any, Any] => count += findLists(t._1) + findLists(t._2) + findLists(t._3) + findLists(t._4) + findLists(t._5)\n            case t : Tuple6[Any, Any, Any, Any, Any, Any] => count += findLists(t._1) + findLists(t._2) + findLists(t._3) + findLists(t._4) + findLists(t._5) + findLists(t._6)\n            case t : Tuple7[Any, Any, Any, Any, Any, Any, Any] => count += findLists(t._1) + findLists(t._2) + findLists(t._3) + findLists(t._4) + findLists(t._5) + findLists(t._6) + findLists(t._7)\n            case t : Tuple8[Any, Any, Any, Any, Any, Any, Any, Any] => count += findLists(t._1) + findLists(t._2) + findLists(t._3) + findLists(t._4) + findLists(t._5) + findLists(t._6) + findLists(t._7) + findLists(t._8)\n            case t : Tuple9[Any, Any, Any, Any, Any, Any, Any, Any",
    "        Input match {\n            case x : List[Any] => 1 + x.map(findLists).sum\n            case x : Tuple2[Any, Any] => findLists(x._1) + findLists(x._2)\n            case _ => 0\n        }",
    "        var count = 0\n        Input match {\n            case x : List[Any] => count = count + 1\n            case x : Tuple2[Any, Any] => count = count + findLists(x._1) + findLists(x._2)\n            case _ => count = count + 0\n        }\n        return count",
    "        var count : Long = 0\n        Input match {\n            case x : List[Any] => count += 1\n            case x : Tuple2[Any, Any] => count += findLists(x._1) + findLists(x._2)\n            case _ => count += 0\n        }\n        return count",
    "        var count = 0\n        Input match {\n            case x : List[Any] => count = count + 1\n            case x : Tuple2[Any, Any] => count = count + findLists(x._1) + findLists(x._2)\n            case _ => count = count + 0\n        }\n        return count",
    "        Input match {\n            case x : List[Any] => 1 + x.map(findLists).sum\n            case x : Tuple2[Any, Any] => findLists(x._1) + findLists(x._2)\n            case _ => 0\n        }",
    "        var count : Long = 0\n        Input match {\n            case x : List[Any] => {\n                count += 1\n                for (i <- x) {\n                    count += findLists(i)\n                }\n            }\n            case x : Tuple2[Any, Any] => {\n                count += findLists(x._1)\n                count += findLists(x._2)\n            }\n            case _ => {}\n        }\n        count",
    "        Input match {\n            case (a, b) => findLists(a) + findLists(b)\n            case (a, b, c) => findLists(a) + findLists(b) + findLists(c)\n            case (a, b, c, d) => findLists(a) + findLists(b) + findLists(c) + findLists(d)\n            case (a, b, c, d, e) => findLists(a) + findLists(b) + findLists(c) + findLists(d) + findLists(e)\n            case (a, b, c, d, e, f) => findLists(a) + findLists(b) + findLists(c) + findLists(d) + findLists(e) + findLists(f)\n            case (a, b, c, d, e, f, g) => findLists(a) + findLists(b) + findLists(c) + findLists(d) + findLists(e) + findLists(f) + findLists(g)\n            case (a, b, c, d, e, f, g, h) => findLists(a) + findLists(b) + findLists(c) + findLists(d) + findLists(e) + findLists(f) + findLists(g) + findLists(h)\n            case (a, b, c, d, e, f, g, h, i) => findLists(a) + findLists(b) + findLists(c) + findLists(d) + findLists(e) + findLists(f) + findLists(g) + findLists(h) + findLists(i)\n            case (a, b, c, d, e, f, g, h, i, j) => findLists(a) + findLists(b) + findLists(c) + findLists(d) + findLists(e) + findLists(f) + findLists(g) + findLists(h",
    "        Input match {\n            case (x : List[Any]) => 1 + findLists(x)\n            case (x : Any, y : Any) => findLists(x) + findLists(y)\n            case _ => 0\n        }",
    "        Input match {\n            case x : List[Any] => x.map(findLists(_)).sum + 1\n            case x : Tuple2[Any, Any] => findLists(x._1) + findLists(x._2)\n            case x : Tuple3[Any, Any, Any] => findLists(x._1) + findLists(x._2) + findLists(x._3)\n            case x : Tuple4[Any, Any, Any, Any] => findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4)\n            case x : Tuple5[Any, Any, Any, Any, Any] => findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5)\n            case x : Tuple6[Any, Any, Any, Any, Any, Any] => findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6)\n            case x : Tuple7[Any, Any, Any, Any, Any, Any, Any] => findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7)\n            case x : Tuple8[Any, Any, Any, Any, Any, Any, Any, Any] => findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7) + findLists(x._8)\n            case x : Tuple9[Any, Any, Any, Any, Any, Any, Any, Any, Any] => findLists(x._1) +",
    "        var count : Long = 0\n        Input match {\n            case x : List[Any] => count += 1\n            case x : Tuple2[Any, Any] => count += findLists(x._1) + findLists(x._2)\n            case x : Tuple3[Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3)\n            case x : Tuple4[Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4)\n            case x : Tuple5[Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5)\n            case x : Tuple6[Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6)\n            case x : Tuple7[Any, Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7)\n            case x : Tuple8[Any, Any, Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7) + findLists(x._8)\n            case x : Tuple9[Any, Any, Any, Any, Any, Any, Any, Any",
    "        var count = 0\n        Input match {\n            case x : List[Any] => count += 1\n            case x : Tuple2[Any, Any] => count += findLists(x._1) + findLists(x._2)\n            case _ =>\n        }\n        return count",
    "        var count = 0\n        Input match {\n            case x : List[Any] => count += 1\n            case x : Tuple2[Any, Any] => count += findLists(x._1) + findLists(x._2)\n            case x : Tuple3[Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3)\n            case x : Tuple4[Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4)\n            case x : Tuple5[Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5)\n            case x : Tuple6[Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6)\n            case x : Tuple7[Any, Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7)\n            case x : Tuple8[Any, Any, Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7) + findLists(x._8)\n            case x : Tuple9[Any, Any, Any, Any, Any, Any, Any, Any, Any",
    "        var count : Long = 0\n        Input match {\n            case x : List[Any] => count += 1\n            case x : Tuple2[Any, Any] => count += findLists(x._1) + findLists(x._2)\n            case _ => count\n        }\n        count",
    "        var count : Long = 0\n        Input match {\n            case x : List[Any] => {\n                count += 1\n                for (i <- x) {\n                    count += findLists(i)\n                }\n            }\n            case x : Tuple2[Any, Any] => {\n                count += findLists(x._1)\n                count += findLists(x._2)\n            }\n            case _ =>\n        }\n        return count",
    "        Input match {\n            case x : List[Any] => 1 + x.map(findLists).sum\n            case x : Tuple2[Any, Any] => findLists(x._1) + findLists(x._2)\n            case _ => 0\n        }",
    "        Input match {\n            case (a : List[Any], b : List[Any]) => findLists(a) + findLists(b)\n            case (a : List[Any], b : Any) => findLists(a) + findLists(b)\n            case (a : Any, b : List[Any]) => findLists(a) + findLists(b)\n            case (a : Any, b : Any) => findLists(a) + findLists(b)\n            case a : List[Any] => 1\n            case a : Any => 0\n        }",
    "        Input match {\n            case (a : List[Any], b : List[Any]) => 2\n            case (a : List[Any], b : Any) => 1\n            case (a : Any, b : List[Any]) => 1\n            case (a : Any, b : Any) => 0\n        }",
    "        var count : Long = 0\n        Input match {\n            case x : List[Any] => count = count + 1\n            case x : Tuple2[Any, Any] => count = count + findLists(x._1) + findLists(x._2)\n            case _ => count = count + 0\n        }\n        return count",
    "        var count = 0\n        Input match {\n            case x : List[Any] => {\n                count += 1\n                for (i <- x) {\n                    count += findLists(i)\n                }\n            }\n            case x : Tuple2[Any, Any] => {\n                count += findLists(x._1)\n                count += findLists(x._2)\n            }\n            case _ =>\n        }\n        count",
    "        var count : Long = 0\n        Input match {\n            case x : List[Any] => count += 1\n            case x : Tuple2[Any, Any] => count += findLists(x._1) + findLists(x._2)\n            case _ => count\n        }\n        count",
    "        var count : Long = 0\n        Input match {\n            case l : List[Any] => count += 1\n            case (a, b) => count += findLists(a) + findLists(b)\n            case _ =>\n        }\n        return count",
    "        var count = 0\n        Input match {\n            case x:List[Any] => {\n                count += 1\n                for (i <- x) {\n                    count += findLists(i)\n                }\n            }\n            case x:Tuple2[Any, Any] => {\n                count += findLists(x._1)\n                count += findLists(x._2)\n            }\n            case x:Tuple3[Any, Any, Any] => {\n                count += findLists(x._1)\n                count += findLists(x._2)\n                count += findLists(x._3)\n            }\n            case x:Tuple4[Any, Any, Any, Any] => {\n                count += findLists(x._1)\n                count += findLists(x._2)\n                count += findLists(x._3)\n                count += findLists(x._4)\n            }\n            case x:Tuple5[Any, Any, Any, Any, Any] => {\n                count += findLists(x._1)\n                count += findLists(x._2)\n                count += findLists(x._3)\n                count += findLists(x._4)\n                count += findLists(x._5)\n            }\n            case x:Tuple6[Any, Any, Any, Any, Any, Any] => {\n                count += findLists(x._1)\n                count += findLists(x._2)\n                count += findLists(x._3)\n                count += findLists(x._4)\n                count += findLists(x._5)\n                count += findLists(x._6)\n            }\n            case x:Tuple7[Any, Any, Any, Any, Any, Any, Any] => {\n                count += findLists(x._1)\n                count += findLists(x._2)\n                count += findLists(x._3)\n                count += findLists(x._4)\n                count += findLists(x._5)\n                count += findLists(x._6)\n                count += findLists(x._7)\n",
    "        Input match {\n            case (a, b) => findLists(a) + findLists(b)\n            case a : List[Any] => 1\n            case _ => 0\n        }",
    "        Input match {\n            case x : List[Any] => 1 + x.map(findLists).sum\n            case x : Tuple2[Any, Any] => findLists(x._1) + findLists(x._2)\n            case x : Tuple3[Any, Any, Any] => findLists(x._1) + findLists(x._2) + findLists(x._3)\n            case x : Tuple4[Any, Any, Any, Any] => findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4)\n            case x : Tuple5[Any, Any, Any, Any, Any] => findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5)\n            case x : Tuple6[Any, Any, Any, Any, Any, Any] => findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6)\n            case x : Tuple7[Any, Any, Any, Any, Any, Any, Any] => findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7)\n            case x : Tuple8[Any, Any, Any, Any, Any, Any, Any, Any] => findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7) + findLists(x._8)\n            case x : Tuple9[Any, Any, Any, Any, Any, Any, Any, Any, Any] => findLists(x._1) + find",
    "        Input match {\n            case (a : List[Any], b : List[Any]) => 2\n            case (a : List[Any], b : Any) => 1\n            case (a : Any, b : List[Any]) => 1\n            case (a : Any, b : Any) => 0\n        }",
    "        var count : Long = 0\n        Input match {\n            case x : List[Any] => count += 1\n            case x : Tuple2[Any, Any] => count += findLists(x._1) + findLists(x._2)\n            case _ => count\n        }\n        return count",
    "        var count : Long = 0\n        Input match {\n            case Input : List[Any] => count += 1\n            case Input : Tuple2[Any, Any] => count += findLists(Input._1) + findLists(Input._2)\n            case _ =>\n        }\n        count",
    "        var count : Long = 0\n        Input match {\n            case x : List[Any] => count += 1\n            case x : Tuple2[Any, Any] => count += findLists(x._1) + findLists(x._2)\n            case x : Tuple3[Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3)\n            case x : Tuple4[Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4)\n            case x : Tuple5[Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5)\n            case x : Tuple6[Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6)\n            case x : Tuple7[Any, Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7)\n            case x : Tuple8[Any, Any, Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7) + findLists(x._8)\n            case x : Tuple9[Any, Any, Any, Any, Any, Any, Any, Any",
    "        var count = 0\n        Input match {\n            case x : List[Any] => count += 1\n            case x : Tuple2[Any, Any] => count += findLists(x._1) + findLists(x._2)\n            case x : Tuple3[Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3)\n            case x : Tuple4[Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4)\n            case x : Tuple5[Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5)\n            case x : Tuple6[Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6)\n            case x : Tuple7[Any, Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7)\n            case x : Tuple8[Any, Any, Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7) + findLists(x._8)\n            case x : Tuple9[Any, Any, Any, Any, Any, Any, Any, Any, Any",
    "        var count : Long = 0\n        Input match {\n            case l : List[Any] => {\n                count += 1\n                for (i <- l) {\n                    count += findLists(i)\n                }\n            }\n            case t : Tuple2[Any, Any] => {\n                count += findLists(t._1)\n                count += findLists(t._2)\n            }\n            case t : Tuple3[Any, Any, Any] => {\n                count += findLists(t._1)\n                count += findLists(t._2)\n                count += findLists(t._3)\n            }\n            case t : Tuple4[Any, Any, Any, Any] => {\n                count += findLists(t._1)\n                count += findLists(t._2)\n                count += findLists(t._3)\n                count += findLists(t._4)\n            }\n            case t : Tuple5[Any, Any, Any, Any, Any] => {\n                count += findLists(t._1)\n                count += findLists(t._2)\n                count += findLists(t._3)\n                count += findLists(t._4)\n                count += findLists(t._5)\n            }\n            case t : Tuple6[Any, Any, Any, Any, Any, Any] => {\n                count += findLists(t._1)\n                count += findLists(t._2)\n                count += findLists(t._3)\n                count += findLists(t._4)\n                count += findLists(t._5)\n                count += findLists(t._6)\n            }\n            case t : Tuple7[Any, Any, Any, Any, Any, Any, Any] => {\n                count += findLists(t._1)\n                count += findLists(t._2)\n                count += findLists(t._3)\n                count += findLists(t._4)\n                count += findLists(t._5)\n                count += findLists(t._6)\n                count += findLists(t._7",
    "        var count = 0\n        Input match {\n            case (x : List[Any]) => {\n                count += 1\n                count += findLists(x)\n            }\n            case (x : Any) => {\n                count += findLists(x)\n            }\n            case _ => {\n                return count\n            }\n        }\n        return count",
    "        var count : Long = 0\n        Input match {\n            case x : List[Any] => count += 1\n            case x : Tuple2[Any, Any] => count += findLists(x._1) + findLists(x._2)\n            case x : Tuple3[Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3)\n            case x : Tuple4[Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4)\n            case x : Tuple5[Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5)\n            case x : Tuple6[Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6)\n            case x : Tuple7[Any, Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7)\n            case x : Tuple8[Any, Any, Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7) + findLists(x._8)\n            case x : Tuple9[Any, Any, Any, Any, Any, Any, Any, Any",
    "        Input match {\n            case (x: List[Any], y: List[Any]) => findLists(x) + findLists(y)\n            case (x: List[Any], y: Any) => findLists(x) + findLists(y)\n            case (x: Any, y: List[Any]) => findLists(x) + findLists(y)\n            case (x: Any, y: Any) => findLists(x) + findLists(y)\n            case x: List[Any] => 1\n            case x: Any => 0\n        }",
    "        Input match {\n            case (x : List[Any]) => 1 + findLists(x)\n            case (x : Any, y : Any) => findLists(x) + findLists(y)\n            case _ => 0\n        }",
    "        var count = 0\n        Input match {\n            case x : List[Any] => {\n                count += 1\n                for (i <- x) {\n                    count += findLists(i)\n                }\n            }\n            case x : Tuple2[Any, Any] => {\n                count += findLists(x._1)\n                count += findLists(x._2)\n            }\n            case _ => {}\n        }\n        count",
    "        var count = 0\n        Input match {\n            case x : List[Any] => count += 1\n            case x : Tuple2[Any, Any] => count += findLists(x._1) + findLists(x._2)\n            case _ =>\n        }\n        return count",
    "        var count = 0\n        Input match {\n            case x : List[Any] => {\n                count += 1\n                for (i <- x) {\n                    count += findLists(i)\n                }\n            }\n            case x : Tuple2[Any, Any] => {\n                count += findLists(x._1)\n                count += findLists(x._2)\n            }\n            case x : Tuple3[Any, Any, Any] => {\n                count += findLists(x._1)\n                count += findLists(x._2)\n                count += findLists(x._3)\n            }\n            case x : Tuple4[Any, Any, Any, Any] => {\n                count += findLists(x._1)\n                count += findLists(x._2)\n                count += findLists(x._3)\n                count += findLists(x._4)\n            }\n            case x : Tuple5[Any, Any, Any, Any, Any] => {\n                count += findLists(x._1)\n                count += findLists(x._2)\n                count += findLists(x._3)\n                count += findLists(x._4)\n                count += findLists(x._5)\n            }\n            case x : Tuple6[Any, Any, Any, Any, Any, Any] => {\n                count += findLists(x._1)\n                count += findLists(x._2)\n                count += findLists(x._3)\n                count += findLists(x._4)\n                count += findLists(x._5)\n                count += findLists(x._6)\n            }\n            case x : Tuple7[Any, Any, Any, Any, Any, Any, Any] => {\n                count += findLists(x._1)\n                count += findLists(x._2)\n                count += findLists(x._3)\n                count += findLists(x._4)\n                count += findLists(x._5)\n                count += findLists(x._6)\n                count += findLists(x._7)\n",
    "        var count : Long = 0\n        Input match {\n            case l : List[Any] => count = count + 1\n            case (a, b) => count = count + findLists(a) + findLists(b)\n            case _ => count = count + 0\n        }\n        return count",
    "        var count : Long = 0\n        Input match {\n            case x : List[Any] => count = 1\n            case x : Tuple2[Any, Any] => count = findLists(x._1) + findLists(x._2)\n            case _ => count = 0\n        }\n        return count",
    "        Input match {\n            case (x : List[Any], y : List[Any]) => 2\n            case (x : List[Any], y : Any) => 1\n            case (x : Any, y : List[Any]) => 1\n            case (x : Any, y : Any) => 0\n        }",
    "        var count = 0\n        Input match {\n            case x : List[Any] => count += 1\n            case x : Tuple2[Any, Any] => count += findLists(x._1) + findLists(x._2)\n            case _ => count += 0\n        }\n        return count",
    "        var count = 0\n        Input match {\n            case (x : List[Any]) => count += 1\n            case (x : Any, y : Any) => count += findLists(x) + findLists(y)\n            case _ => count\n        }\n        count",
    "        Input match {\n            case Nil => 0\n            case (x : List[Any]) :: xs => 1 + findLists(xs)\n            case (x : Any) :: xs => findLists(xs)\n        }",
    "        var count = 0\n        Input match {\n            case x : List[Any] => count += 1\n            case x : Tuple2[Any, Any] => count += findLists(x._1) + findLists(x._2)\n            case _ =>\n        }\n        return count",
    "        Input match {\n            case Input : List[Any] => Input.foldLeft(0L)((acc, x) => acc + findLists(x))\n            case Input : Tuple2[Any, Any] => findLists(Input._1) + findLists(Input._2)\n            case _ => 0\n        }",
    "        Input match {\n            case (x : List[Any]) => 1 + findLists(x.tail)\n            case (x : Any, y : Any) => findLists(x) + findLists(y)\n            case _ => 0\n        }",
    "        Input match {\n            case x : List[Any] => 1 + x.map(findLists(_)).sum\n            case x : Tuple2[Any, Any] => findLists(x._1) + findLists(x._2)\n            case _ => 0\n        }",
    "        var count = 0\n        Input match {\n            case x : List[Any] => {\n                count += 1\n                for (i <- x) {\n                    count += findLists(i)\n                }\n            }\n            case x : Tuple2[Any, Any] => {\n                count += findLists(x._1)\n                count += findLists(x._2)\n            }\n            case _ => {}\n        }\n        count",
    "        Input match {\n            case (a, b) => findLists(a) + findLists(b)\n            case a : List[Any] => 1\n            case _ => 0\n        }",
    "        Input match {\n            case (a : List[Any], b : List[Any], c : List[Any]) => 3\n            case (a : List[Any], b : List[Any]) => 2\n            case (a : List[Any]) => 1\n            case _ => 0\n        }",
    "        Input match {\n            case x : List[Any] => 1 + x.map(findLists(_)).sum\n            case x : Tuple2[Any, Any] => findLists(x._1) + findLists(x._2)\n            case _ => 0\n        }",
    "        Input match {\n            case Nil => 0\n            case (x : List[Any]) :: xs => 1 + findLists(xs)\n            case (x : Any) :: xs => findLists(xs)\n        }",
    "        var count : Long = 0\n        Input match {\n            case x : List[Any] => count += 1\n            case x : Tuple2[Any, Any] => count += findLists(x._1) + findLists(x._2)\n            case _ =>\n        }\n        return count",
    "        var count = 0\n        Input match {\n            case x : List[Any] => {\n                count += 1\n                for (i <- x) {\n                    count += findLists(i)\n                }\n            }\n            case x : Any => {\n                count += 0\n            }\n        }\n        return count",
    "        var count : Long = 0\n        Input match {\n            case l : List[Any] => {\n                for (i <- l) {\n                    count += findLists(i)\n                }\n                count += 1\n            }\n            case _ => {\n                count = 0\n            }\n        }\n        count",
    "        var count = 0\n        Input match {\n            case Nil => count\n            case x :: xs => {\n                if (x.isInstanceOf[List[Any]]) count += 1\n                count + findLists(xs)\n            }\n        }",
    "        Input match {\n            case (a, b) => findLists(a) + findLists(b)\n            case a : List[_] => 1\n            case _ => 0\n        }",
    "        var count : Long = 0\n        Input match {\n            case x : List[Any] => {\n                count += 1\n                for (i <- x) {\n                    count += findLists(i)\n                }\n            }\n            case x : Tuple2[Any, Any] => {\n                count += findLists(x._1)\n                count += findLists(x._2)\n            }\n            case _ => {}\n        }\n        return count",
    "        var count = 0\n        Input match {\n            case x : List[Any] => count = count + 1\n            case x : Tuple2[Any, Any] => count = count + findLists(x._1) + findLists(x._2)\n            case _ => count = count + 0\n        }\n        return count",
    "        Input match {\n            case x : List[Any] => 1 + x.map(findLists).sum\n            case _ => 0\n        }",
    "        var count = 0\n        Input match {\n            case (x : List[Any]) => count += 1\n            case (x : Any, y : Any) => count += findLists(x) + findLists(y)\n            case _ => count\n        }\n        count",
    "        var count : Long = 0\n        Input match {\n            case Nil => count\n            case (x : List[Any]) :: xs => count = count + 1 + findLists(xs)\n            case (x : Any) :: xs => count = count + findLists(xs)\n            case _ => count\n        }\n        return count",
    "        Input match {\n            case (x : List[Any]) => 1 + x.map(findLists(_)).sum\n            case (x : List[Any], y : List[Any]) => 2 + x.map(findLists(_)).sum + y.map(findLists(_)).sum\n            case (x : List[Any], y : List[Any], z : List[Any]) => 3 + x.map(findLists(_)).sum + y.map(findLists(_)).sum + z.map(findLists(_)).sum\n            case (x : List[Any], y : List[Any], z : List[Any], w : List[Any]) => 4 + x.map(findLists(_)).sum + y.map(findLists(_)).sum + z.map(findLists(_)).sum + w.map(findLists(_)).sum\n            case (x : List[Any], y : List[Any], z : List[Any], w : List[Any], v : List[Any]) => 5 + x.map(findLists(_)).sum + y.map(findLists(_)).sum + z.map(findLists(_)).sum + w.map(findLists(_)).sum + v.map(findLists(_)).sum\n            case (x : List[Any], y : List[Any], z : List[Any], w : List[Any], v : List[Any], u : List[Any]) => 6 + x.map(findLists(_)).sum + y.map(findLists(_)).sum + z.map(findLists(_)).sum + w.map(findLists(_)).sum + v.map(findLists(_)).sum + u.map(findLists(_)).sum\n            case (x : List[Any], y : List[Any], z : List[Any], w : List[Any], v : List[Any], u : List[Any], t : List[Any]) => 7 + x.map(findLists(_)).sum + y.map(findLists(_)).sum + z.map(findLists(_)).sum + w.map(findLists(_)).sum + v.map(findLists(_)).sum + u.map(findLists(_)).sum",
    "        Input match {\n            case (a, b) => findLists(a) + findLists(b)\n            case (a, b, c) => findLists(a) + findLists(b) + findLists(c)\n            case (a, b, c, d) => findLists(a) + findLists(b) + findLists(c) + findLists(d)\n            case (a, b, c, d, e) => findLists(a) + findLists(b) + findLists(c) + findLists(d) + findLists(e)\n            case (a, b, c, d, e, f) => findLists(a) + findLists(b) + findLists(c) + findLists(d) + findLists(e) + findLists(f)\n            case (a, b, c, d, e, f, g) => findLists(a) + findLists(b) + findLists(c) + findLists(d) + findLists(e) + findLists(f) + findLists(g)\n            case (a, b, c, d, e, f, g, h) => findLists(a) + findLists(b) + findLists(c) + findLists(d) + findLists(e) + findLists(f) + findLists(g) + findLists(h)\n            case (a, b, c, d, e, f, g, h, i) => findLists(a) + findLists(b) + findLists(c) + findLists(d) + findLists(e) + findLists(f) + findLists(g) + findLists(h) + findLists(i)\n            case (a, b, c, d, e, f, g, h, i, j) => findLists(a) + findLists(b) + findLists(c) + findLists(d) + findLists(e) + findLists(f) + findLists(g) + findLists(h",
    "        var count = 0\n        Input match {\n            case x : List[Any] => count += 1\n            case x : Tuple2[Any, Any] => count += findLists(x._1) + findLists(x._2)\n            case x : Tuple3[Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3)\n            case x : Tuple4[Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4)\n            case x : Tuple5[Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5)\n            case x : Tuple6[Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6)\n            case x : Tuple7[Any, Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7)\n            case x : Tuple8[Any, Any, Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7) + findLists(x._8)\n            case x : Tuple9[Any, Any, Any, Any, Any, Any, Any, Any, Any",
    "        var count : Long = 0\n        Input match {\n            case (a, b) => {\n                count += findLists(a)\n                count += findLists(b)\n            }\n            case a : List[Any] => {\n                count += 1\n                for (i <- a) {\n                    count += findLists(i)\n                }\n            }\n            case _ => {\n            }\n        }\n        return count",
    "        var count = 0\n        Input match {\n            case a : List[Any] => {\n                count += 1\n                for (i <- a) {\n                    count += findLists(i)\n                }\n            }\n            case _ =>\n        }\n        return count",
    "        var count = 0\n        Input match {\n            case x : List[Any] => {\n                count += 1\n                for (i <- 0 until x.length) {\n                    count += findLists(x(i))\n                }\n            }\n            case x : Tuple2[Any, Any] => {\n                count += findLists(x._1)\n                count += findLists(x._2)\n            }\n            case _ =>\n        }\n        count",
    "        var count : Long = 0\n        Input match {\n            case x : List[Any] => count += 1\n            case x : Tuple2[Any, Any] => count += findLists(x._1) + findLists(x._2)\n            case _ =>\n        }\n        count",
    "        var count : Long = 0\n        Input match {\n            case x : List[Any] => count += 1\n            case x : Tuple2[Any, Any] => count += findLists(x._1) + findLists(x._2)\n            case x : Tuple3[Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3)\n            case x : Tuple4[Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4)\n            case x : Tuple5[Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5)\n            case x : Tuple6[Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6)\n            case x : Tuple7[Any, Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7)\n            case x : Tuple8[Any, Any, Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7) + findLists(x._8)\n            case x : Tuple9[Any, Any, Any, Any, Any, Any, Any, Any",
    "        var count : Long = 0\n        Input match {\n            case x : List[Any] => count += 1\n            case x : Tuple2[Any, Any] => count += findLists(x._1) + findLists(x._2)\n            case x : Tuple3[Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3)\n            case x : Tuple4[Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4)\n            case x : Tuple5[Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5)\n            case x : Tuple6[Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6)\n            case x : Tuple7[Any, Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7)\n            case x : Tuple8[Any, Any, Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7) + findLists(x._8)\n            case x : Tuple9[Any, Any, Any, Any, Any, Any, Any, Any",
    "        var count : Long = 0\n        Input match {\n            case Input : List[Any] => count = 1\n            case Input : Tuple2[Any, Any] => count = findLists(Input._1) + findLists(Input._2)\n            case Input : Tuple3[Any, Any, Any] => count = findLists(Input._1) + findLists(Input._2) + findLists(Input._3)\n            case Input : Tuple4[Any, Any, Any, Any] => count = findLists(Input._1) + findLists(Input._2) + findLists(Input._3) + findLists(Input._4)\n            case Input : Tuple5[Any, Any, Any, Any, Any] => count = findLists(Input._1) + findLists(Input._2) + findLists(Input._3) + findLists(Input._4) + findLists(Input._5)\n            case Input : Tuple6[Any, Any, Any, Any, Any, Any] => count = findLists(Input._1) + findLists(Input._2) + findLists(Input._3) + findLists(Input._4) + findLists(Input._5) + findLists(Input._6)\n            case Input : Tuple7[Any, Any, Any, Any, Any, Any, Any] => count = findLists(Input._1) + findLists(Input._2) + findLists(Input._3) + findLists(Input._4) + findLists(Input._5) + findLists(Input._6) + findLists(Input._7)\n            case Input : Tuple8[Any, Any, Any, Any, Any, Any, Any, Any] => count = findLists(Input._1) + findLists(Input._2) + findLists(Input._3) + findLists(Input._4) + findLists(Input._5) + findLists(Input._6) + findLists(Input._7) + findLists(Input._8)\n            case Input : Tuple9[Any, Any, Any, Any, Any, Any, Any, Any",
    "        var count = 0\n        Input match {\n            case x : List[Any] => {\n                count += 1\n                for(i <- x) {\n                    count += findLists(i)\n                }\n            }\n            case x : Tuple2[Any, Any] => {\n                count += findLists(x._1)\n                count += findLists(x._2)\n            }\n            case x : Tuple3[Any, Any, Any] => {\n                count += findLists(x._1)\n                count += findLists(x._2)\n                count += findLists(x._3)\n            }\n            case x : Tuple4[Any, Any, Any, Any] => {\n                count += findLists(x._1)\n                count += findLists(x._2)\n                count += findLists(x._3)\n                count += findLists(x._4)\n            }\n            case x : Tuple5[Any, Any, Any, Any, Any] => {\n                count += findLists(x._1)\n                count += findLists(x._2)\n                count += findLists(x._3)\n                count += findLists(x._4)\n                count += findLists(x._5)\n            }\n            case x : Tuple6[Any, Any, Any, Any, Any, Any] => {\n                count += findLists(x._1)\n                count += findLists(x._2)\n                count += findLists(x._3)\n                count += findLists(x._4)\n                count += findLists(x._5)\n                count += findLists(x._6)\n            }\n            case x : Tuple7[Any, Any, Any, Any, Any, Any, Any] => {\n                count += findLists(x._1)\n                count += findLists(x._2)\n                count += findLists(x._3)\n                count += findLists(x._4)\n                count += findLists(x._5)\n                count += findLists(x._6)\n                count += findLists(x._7)\n",
    "        var count : Long = 0\n        Input match {\n            case x : List[Any] => count += 1\n            case x : Tuple2[Any, Any] => count += findLists(x._1) + findLists(x._2)\n            case _ => count\n        }\n        count",
    "        Input match {\n            case (x : List[Any]) => 1 + x.map(findLists(_)).sum\n            case (x : Any) => 0\n        }",
    "        var count : Long = 0\n        Input match {\n            case Input : List[Any] => {\n                for (i <- Input) {\n                    count += findLists(i)\n                }\n            }\n            case Input : Tuple2[Any, Any] => {\n                count += findLists(Input._1)\n                count += findLists(Input._2)\n            }\n            case Input : Tuple3[Any, Any, Any] => {\n                count += findLists(Input._1)\n                count += findLists(Input._2)\n                count += findLists(Input._3)\n            }\n            case Input : Tuple4[Any, Any, Any, Any] => {\n                count += findLists(Input._1)\n                count += findLists(Input._2)\n                count += findLists(Input._3)\n                count += findLists(Input._4)\n            }\n            case Input : Tuple5[Any, Any, Any, Any, Any] => {\n                count += findLists(Input._1)\n                count += findLists(Input._2)\n                count += findLists(Input._3)\n                count += findLists(Input._4)\n                count += findLists(Input._5)\n            }\n            case Input : Tuple6[Any, Any, Any, Any, Any, Any] => {\n                count += findLists(Input._1)\n                count += findLists(Input._2)\n                count += findLists(Input._3)\n                count += findLists(Input._4)\n                count += findLists(Input._5)\n                count += findLists(Input._6)\n            }\n            case Input : Tuple7[Any, Any, Any, Any, Any, Any, Any] => {\n                count += findLists(Input._1)\n                count += findLists(Input._2)\n                count += findLists(Input._3)\n                count += findLists(Input._4)\n                count += findLists(Input._5)\n                count += findLists(Input._6)\n                count += findLists(Input._7)\n            }\n",
    "        var count : Long = 0\n        Input match {\n            case x : List[Any] => count += 1\n            case x : Tuple2[Any, Any] => count += findLists(x._1) + findLists(x._2)\n            case x : Tuple3[Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3)\n            case x : Tuple4[Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4)\n            case x : Tuple5[Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5)\n            case x : Tuple6[Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6)\n            case x : Tuple7[Any, Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7)\n            case x : Tuple8[Any, Any, Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7) + findLists(x._8)\n            case x : Tuple9[Any, Any, Any, Any, Any, Any, Any, Any",
    "        Input match {\n            case Input : List[Any] => 1 + Input.map(findLists).sum\n            case _ => 0\n        }",
    "        var count = 0\n        Input match {\n            case l : List[Any] => {\n                count += 1\n                for (i <- l) {\n                    count += findLists(i)\n                }\n            }\n            case _ =>\n        }\n        count",
    "        Input match {\n            case x : List[Any] => 1 + x.map(findLists).sum\n            case _ => 0\n        }",
    "        var count : Long = 0\n        Input match {\n            case (x : List[Any]) => count += 1\n            case (x : Any, y : Any) => count += findLists(x) + findLists(y)\n            case _ => count\n        }\n        count",
    "        var count : Long = 0\n        Input match {\n            case x : List[Any] => count += 1\n            case x : Tuple2[Any, Any] => count += findLists(x._1) + findLists(x._2)\n            case x : Tuple3[Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3)\n            case x : Tuple4[Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4)\n            case x : Tuple5[Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5)\n            case x : Tuple6[Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6)\n            case x : Tuple7[Any, Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7)\n            case x : Tuple8[Any, Any, Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7) + findLists(x._8)\n            case x : Tuple9[Any, Any, Any, Any, Any, Any, Any, Any",
    "        def findLists(Input : Any, count : Long) : Long = {\n            Input match {\n                case x : List[_] => findLists(x.tail, count + 1)\n                case x : Tuple2[_, _] => findLists(x._1, count) + findLists(x._2, count)\n                case _ => count\n            }\n        }\n        findLists(Input, 0)",
    "        Input match {\n            case (x : List[Any]) => 1 + x.map(findLists).sum\n            case (x : Any) => 0\n        }",
    "        var count = 0\n        Input match {\n            case l : List[Any] => {\n                count += 1\n                for (i <- l) {\n                    count += findLists(i)\n                }\n            }\n            case t : Tuple2[Any, Any] => {\n                count += findLists(t._1)\n                count += findLists(t._2)\n            }\n            case _ =>\n        }\n        count",
    "        var count : Long = 0\n        Input match {\n            case x : List[Any] => {\n                count += 1\n                for (i <- x) {\n                    count += findLists(i)\n                }\n            }\n            case x : Tuple2[Any, Any] => {\n                count += findLists(x._1)\n                count += findLists(x._2)\n            }\n            case _ => {}\n        }\n        return count",
    "        Input match {\n            case Input : List[Any] => 1 + Input.map(findLists(_)).sum\n            case Input : Tuple2[Any, Any] => findLists(Input._1) + findLists(Input._2)\n            case _ => 0\n        }",
    "        Input match {\n            case x : List[Any] => 1 + x.map(findLists(_)).sum\n            case x : Tuple2[Any, Any] => findLists(x._1) + findLists(x._2)\n            case x : Tuple3[Any, Any, Any] => findLists(x._1) + findLists(x._2) + findLists(x._3)\n            case x : Tuple4[Any, Any, Any, Any] => findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4)\n            case x : Tuple5[Any, Any, Any, Any, Any] => findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5)\n            case x : Tuple6[Any, Any, Any, Any, Any, Any] => findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6)\n            case x : Tuple7[Any, Any, Any, Any, Any, Any, Any] => findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7)\n            case x : Tuple8[Any, Any, Any, Any, Any, Any, Any, Any] => findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7) + findLists(x._8)\n            case x : Tuple9[Any, Any, Any, Any, Any, Any, Any, Any, Any] => findLists(x._1) +",
    "        Input match {\n            case _ : List[Any] => 1\n            case _ : Tuple2[Any, Any] => findLists(Input._1) + findLists(Input._2)\n            case _ => 0\n        }",
    "        var count : Long = 0\n        Input match {\n            case x : List[Any] => count += 1\n            case x : Tuple2[Any, Any] => count += findLists(x._1) + findLists(x._2)\n            case _ =>\n        }\n        return count",
    "        var count = 0\n        Input match {\n            case x: List[_] => count += 1\n            case x: Tuple2[_, _] => count += findLists(x._1) + findLists(x._2)\n            case x: Tuple3[_, _, _] => count += findLists(x._1) + findLists(x._2) + findLists(x._3)\n            case x: Tuple4[_, _, _, _] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4)\n            case x: Tuple5[_, _, _, _, _] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5)\n            case x: Tuple6[_, _, _, _, _, _] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6)\n            case x: Tuple7[_, _, _, _, _, _, _] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7)\n            case x: Tuple8[_, _, _, _, _, _, _, _] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7) + findLists(x._8)\n            case x: Tuple9[_, _, _, _, _, _, _, _, _] => count += findLists(x",
    "        var count = 0\n        Input match {\n            case x : List[Any] => count = count + 1\n            case x : List[Any] => count = count + findLists(x)\n            case x : Tuple2[Any, Any] => count = count + findLists(x._1) + findLists(x._2)\n            case _ => count = count\n        }\n        return count",
    "        var count = 0\n        Input match {\n            case x : List[Any] => count += 1\n            case x : Tuple2[Any, Any] => count += findLists(x._1) + findLists(x._2)\n            case x : Tuple3[Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3)\n            case x : Tuple4[Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4)\n            case x : Tuple5[Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5)\n            case x : Tuple6[Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6)\n            case x : Tuple7[Any, Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7)\n            case x : Tuple8[Any, Any, Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7) + findLists(x._8)\n            case x : Tuple9[Any, Any, Any, Any, Any, Any, Any, Any, Any",
    "        var count = 0\n        Input match {\n            case x: List[Any] => count += 1\n            case x: Tuple2[Any, Any] => count += findLists(x._1) + findLists(x._2)\n            case x: Tuple3[Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3)\n            case x: Tuple4[Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4)\n            case x: Tuple5[Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5)\n            case x: Tuple6[Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6)\n            case x: Tuple7[Any, Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7)\n            case x: Tuple8[Any, Any, Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7) + findLists(x._8)\n            case x: Tuple9[Any, Any, Any, Any, Any, Any, Any, Any, Any",
    "        var count = 0\n        Input match {\n            case x : List[Any] => {\n                count = 1\n                for (i <- x) {\n                    count += findLists(i)\n                }\n            }\n            case x : Int => count = 0\n            case x : String => count = 0\n            case _ => count = 0\n        }\n        return count",
    "        Input match {\n            case (a, b) => findLists(a) + findLists(b)\n            case (a, b, c) => findLists(a) + findLists(b) + findLists(c)\n            case (a, b, c, d) => findLists(a) + findLists(b) + findLists(c) + findLists(d)\n            case (a, b, c, d, e) => findLists(a) + findLists(b) + findLists(c) + findLists(d) + findLists(e)\n            case (a, b, c, d, e, f) => findLists(a) + findLists(b) + findLists(c) + findLists(d) + findLists(e) + findLists(f)\n            case (a, b, c, d, e, f, g) => findLists(a) + findLists(b) + findLists(c) + findLists(d) + findLists(e) + findLists(f) + findLists(g)\n            case (a, b, c, d, e, f, g, h) => findLists(a) + findLists(b) + findLists(c) + findLists(d) + findLists(e) + findLists(f) + findLists(g) + findLists(h)\n            case (a, b, c, d, e, f, g, h, i) => findLists(a) + findLists(b) + findLists(c) + findLists(d) + findLists(e) + findLists(f) + findLists(g) + findLists(h) + findLists(i)\n            case (a, b, c, d, e, f, g, h, i, j) => findLists(a) + findLists(b) + findLists(c) + findLists(d) + findLists(e) + findLists(f) + findLists(g) + findLists(h",
    "        Input match {\n            case x: List[Any] => x.map(findLists).sum + 1\n            case x: Tuple2[Any, Any] => findLists(x._1) + findLists(x._2)\n            case _ => 0\n        }",
    "        var count : Long = 0\n        Input match {\n            case x : List[Any] => {\n                count += 1\n                for (i <- x) {\n                    count += findLists(i)\n                }\n            }\n            case x : Any => count += 0\n        }\n        count",
    "        var count = 0\n        Input match {\n            case (x : List[Any]) => count = count + 1\n            case (x : Any, y : Any) => count = count + findLists(x) + findLists(y)\n            case _ => count = count\n        }\n        count",
    "        Input match {\n            case x : List[Any] => 1 + x.map(findLists).sum\n            case _ => 0\n        }",
    "        var count = 0\n        Input match {\n            case x : List[_] => count += 1\n            case x : Tuple2[_, _] => count += findLists(x._1) + findLists(x._2)\n            case x : Tuple3[_, _, _] => count += findLists(x._1) + findLists(x._2) + findLists(x._3)\n            case x : Tuple4[_, _, _, _] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4)\n            case x : Tuple5[_, _, _, _, _] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5)\n            case x : Tuple6[_, _, _, _, _, _] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6)\n            case x : Tuple7[_, _, _, _, _, _, _] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7)\n            case x : Tuple8[_, _, _, _, _, _, _, _] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7) + findLists(x._8)\n            case x : Tuple9[_, _, _, _, _, _, _, _, _] => count += findLists(x",
    "        var count = 0\n        Input match {\n            case x : List[Any] => {\n                count += 1\n                for (i <- x) {\n                    count += findLists(i)\n                }\n            }\n            case x : Tuple2[Any, Any] => {\n                count += findLists(x._1)\n                count += findLists(x._2)\n            }\n            case x : Tuple3[Any, Any, Any] => {\n                count += findLists(x._1)\n                count += findLists(x._2)\n                count += findLists(x._3)\n            }\n            case x : Tuple4[Any, Any, Any, Any] => {\n                count += findLists(x._1)\n                count += findLists(x._2)\n                count += findLists(x._3)\n                count += findLists(x._4)\n            }\n            case x : Tuple5[Any, Any, Any, Any, Any] => {\n                count += findLists(x._1)\n                count += findLists(x._2)\n                count += findLists(x._3)\n                count += findLists(x._4)\n                count += findLists(x._5)\n            }\n            case x : Tuple6[Any, Any, Any, Any, Any, Any] => {\n                count += findLists(x._1)\n                count += findLists(x._2)\n                count += findLists(x._3)\n                count += findLists(x._4)\n                count += findLists(x._5)\n                count += findLists(x._6)\n            }\n            case x : Tuple7[Any, Any, Any, Any, Any, Any, Any] => {\n                count += findLists(x._1)\n                count += findLists(x._2)\n                count += findLists(x._3)\n                count += findLists(x._4)\n                count += findLists(x._5)\n                count += findLists(x._6)\n                count += findLists(x._7)\n",
    "        var count = 0\n        Input match {\n            case x : List[Any] => count += 1\n            case x : Tuple2[Any, Any] => count += findLists(x._1) + findLists(x._2)\n            case x : Tuple3[Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3)\n            case x : Tuple4[Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4)\n            case x : Tuple5[Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5)\n            case x : Tuple6[Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6)\n            case x : Tuple7[Any, Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7)\n            case x : Tuple8[Any, Any, Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7) + findLists(x._8)\n            case x : Tuple9[Any, Any, Any, Any, Any, Any, Any, Any, Any",
    "        var count : Long = 0\n        Input match {\n            case l : List[Any] => {\n                count += 1\n                for (i <- l) {\n                    count += findLists(i)\n                }\n            }\n            case t : Tuple2[Any, Any] => {\n                count += findLists(t._1)\n                count += findLists(t._2)\n            }\n            case _ => {\n            }\n        }\n        count",
    "        Input match {\n            case (x : List[Any], y : List[Any]) => findLists(x) + findLists(y)\n            case (x : List[Any], y : Any) => findLists(x) + findLists(y)\n            case (x : Any, y : List[Any]) => findLists(x) + findLists(y)\n            case (x : Any, y : Any) => findLists(x) + findLists(y)\n            case x : List[Any] => 1\n            case x : Any => 0\n        }",
    "        var count = 0\n        Input match {\n            case x : List[Any] => {\n                count += 1\n                for (i <- x) {\n                    count += findLists(i)\n                }\n            }\n            case x : Tuple2[Any, Any] => {\n                count += findLists(x._1)\n                count += findLists(x._2)\n            }\n            case x : Tuple3[Any, Any, Any] => {\n                count += findLists(x._1)\n                count += findLists(x._2)\n                count += findLists(x._3)\n            }\n            case x : Tuple4[Any, Any, Any, Any] => {\n                count += findLists(x._1)\n                count += findLists(x._2)\n                count += findLists(x._3)\n                count += findLists(x._4)\n            }\n            case x : Tuple5[Any, Any, Any, Any, Any] => {\n                count += findLists(x._1)\n                count += findLists(x._2)\n                count += findLists(x._3)\n                count += findLists(x._4)\n                count += findLists(x._5)\n            }\n            case x : Tuple6[Any, Any, Any, Any, Any, Any] => {\n                count += findLists(x._1)\n                count += findLists(x._2)\n                count += findLists(x._3)\n                count += findLists(x._4)\n                count += findLists(x._5)\n                count += findLists(x._6)\n            }\n            case x : Tuple7[Any, Any, Any, Any, Any, Any, Any] => {\n                count += findLists(x._1)\n                count += findLists(x._2)\n                count += findLists(x._3)\n                count += findLists(x._4)\n                count += findLists(x._5)\n                count += findLists(x._6)\n                count += findLists(x._7)\n",
    "        var count = 0\n        Input match {\n            case (x: List[Any]) => count += 1\n            case (x: List[Any], y: List[Any]) => count += 2\n            case (x: List[Any], y: List[Any], z: List[Any]) => count += 3\n            case (x: List[Any], y: List[Any], z: List[Any], a: List[Any]) => count += 4\n            case (x: List[Any], y: List[Any], z: List[Any], a: List[Any], b: List[Any]) => count += 5\n            case (x: List[Any], y: List[Any], z: List[Any], a: List[Any], b: List[Any], c: List[Any]) => count += 6\n            case (x: List[Any], y: List[Any], z: List[Any], a: List[Any], b: List[Any], c: List[Any], d: List[Any]) => count += 7\n            case (x: List[Any], y: List[Any], z: List[Any], a: List[Any], b: List[Any], c: List[Any], d: List[Any], e: List[Any]) => count += 8\n            case (x: List[Any], y: List[Any], z: List[Any], a: List[Any], b: List[Any], c: List[Any], d: List[Any], e: List[Any], f: List[Any]) => count += 9\n            case (x: List[Any], y: List[Any], z: List[Any], a: List[Any], b: List[Any], c: List[Any], d: List[Any], e: List[Any], f: List[Any], g: List[Any]) => count += 10\n            case (x: List[Any], y: List[Any], z: List[Any], a: List[Any], b: List[Any], c: List[Any], d: List[Any], e: List[Any], f: List[Any], g: List[Any], h: List[Any]) => count += 11\n            case (x: List[Any], y: List[Any], z",
    "        Input match {\n            case Input : List[Any] => 1 + Input.map(findLists).sum\n            case Input : Tuple2[Any, Any] => findLists(Input._1) + findLists(Input._2)\n            case _ => 0\n        }",
    "        var count : Long = 0\n        Input match {\n            case x : List[Any] => count = count + 1\n            case x : Tuple2[Any, Any] => count = count + findLists(x._1) + findLists(x._2)\n            case x : Tuple3[Any, Any, Any] => count = count + findLists(x._1) + findLists(x._2) + findLists(x._3)\n            case x : Tuple4[Any, Any, Any, Any] => count = count + findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4)\n            case x : Tuple5[Any, Any, Any, Any, Any] => count = count + findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5)\n            case x : Tuple6[Any, Any, Any, Any, Any, Any] => count = count + findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6)\n            case x : Tuple7[Any, Any, Any, Any, Any, Any, Any] => count = count + findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7)\n            case x : Tuple8[Any, Any, Any, Any, Any, Any, Any, Any] => count = count + findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7) + findLists(x._8)\n            case x : Tuple9",
    "        var count = 0\n        Input match {\n            case x : List[_] => count = count + 1\n            case x : Tuple2[_, _] => {\n                count = count + findLists(x._1)\n                count = count + findLists(x._2)\n            }\n            case x : Tuple3[_, _, _] => {\n                count = count + findLists(x._1)\n                count = count + findLists(x._2)\n                count = count + findLists(x._3)\n            }\n            case x : Tuple4[_, _, _, _] => {\n                count = count + findLists(x._1)\n                count = count + findLists(x._2)\n                count = count + findLists(x._3)\n                count = count + findLists(x._4)\n            }\n            case x : Tuple5[_, _, _, _, _] => {\n                count = count + findLists(x._1)\n                count = count + findLists(x._2)\n                count = count + findLists(x._3)\n                count = count + findLists(x._4)\n                count = count + findLists(x._5)\n            }\n            case x : Tuple6[_, _, _, _, _, _] => {\n                count = count + findLists(x._1)\n                count = count + findLists(x._2)\n                count = count + findLists(x._3)\n                count = count + findLists(x._4)\n                count = count + findLists(x._5)\n                count = count + findLists(x._6)\n            }\n            case x : Tuple7[_, _, _, _, _, _, _] => {\n                count = count + findLists(x._1)\n                count = count + findLists(x._2)\n                count = count + findLists(x._3)\n                count = count + findLists(x._4)\n                count = count + findLists(x._5)\n                count = count + findL",
    "        var count : Long = 0\n        Input match {\n            case x : List[Any] => count += 1\n            case x : Tuple2[Any, Any] => count += findLists(x._1) + findLists(x._2)\n            case x : Tuple3[Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3)\n            case x : Tuple4[Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4)\n            case x : Tuple5[Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5)\n            case x : Tuple6[Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6)\n            case x : Tuple7[Any, Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7)\n            case x : Tuple8[Any, Any, Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7) + findLists(x._8)\n            case x : Tuple9[Any, Any, Any, Any, Any, Any, Any, Any",
    "        var count : Long = 0\n        Input match {\n            case x : List[Any] => count += 1\n            case x : Tuple2[Any, Any] => count += findLists(x._1) + findLists(x._2)\n            case _ =>\n        }\n        return count",
    "        var count : Long = 0\n        Input match {\n            case x : List[Any] => {\n                count += 1\n                for (i <- x) {\n                    count += findLists(i)\n                }\n            }\n            case x : Tuple2[Any, Any] => {\n                count += findLists(x._1)\n                count += findLists(x._2)\n            }\n            case x : Tuple3[Any, Any, Any] => {\n                count += findLists(x._1)\n                count += findLists(x._2)\n                count += findLists(x._3)\n            }\n            case x : Tuple4[Any, Any, Any, Any] => {\n                count += findLists(x._1)\n                count += findLists(x._2)\n                count += findLists(x._3)\n                count += findLists(x._4)\n            }\n            case x : Tuple5[Any, Any, Any, Any, Any] => {\n                count += findLists(x._1)\n                count += findLists(x._2)\n                count += findLists(x._3)\n                count += findLists(x._4)\n                count += findLists(x._5)\n            }\n            case x : Tuple6[Any, Any, Any, Any, Any, Any] => {\n                count += findLists(x._1)\n                count += findLists(x._2)\n                count += findLists(x._3)\n                count += findLists(x._4)\n                count += findLists(x._5)\n                count += findLists(x._6)\n            }\n            case x : Tuple7[Any, Any, Any, Any, Any, Any, Any] => {\n                count += findLists(x._1)\n                count += findLists(x._2)\n                count += findLists(x._3)\n                count += findLists(x._4)\n                count += findLists(x._5)\n                count += findLists(x._6)\n                count += findLists(x._7",
    "        Input match {\n            case Input : List[Any] => Input.map(findLists(_)).sum + 1\n            case Input : Tuple2[Any, Any] => findLists(Input._1) + findLists(Input._2)\n            case _ => 0\n        }",
    "        Input match {\n            case x : List[Any] => 1 + x.map(findLists).sum\n            case _ => 0\n        }",
    "        var count = 0\n        Input match {\n            case x : List[Any] => count += 1\n            case x : Tuple2[Any, Any] => count += findLists(x._1) + findLists(x._2)\n            case x : Tuple3[Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3)\n            case x : Tuple4[Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4)\n            case x : Tuple5[Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5)\n            case x : Tuple6[Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6)\n            case x : Tuple7[Any, Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7)\n            case x : Tuple8[Any, Any, Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7) + findLists(x._8)\n            case x : Tuple9[Any, Any, Any, Any, Any, Any, Any, Any, Any",
    "        var count : Long = 0\n        Input match {\n            case x : List[Any] => count += 1\n            case x : Tuple2[Any, Any] => count += findLists(x._1) + findLists(x._2)\n            case x : Tuple3[Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3)\n            case x : Tuple4[Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4)\n            case x : Tuple5[Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5)\n            case x : Tuple6[Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6)\n            case x : Tuple7[Any, Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7)\n            case x : Tuple8[Any, Any, Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7) + findLists(x._8)\n            case x : Tuple9[Any, Any, Any, Any, Any, Any, Any, Any",
    "        var count : Long = 0\n        Input match {\n            case x : List[Any] => count += 1\n            case x : Tuple2[Any, Any] => count += findLists(x._1) + findLists(x._2)\n            case _ => count\n        }\n        count",
    "        var count : Long = 0\n        Input match {\n            case x : List[Any] => count += 1\n            case x : Tuple2[Any, Any] => count += findLists(x._1) + findLists(x._2)\n            case x : Tuple3[Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3)\n            case x : Tuple4[Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4)\n            case x : Tuple5[Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5)\n            case x : Tuple6[Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6)\n            case x : Tuple7[Any, Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7)\n            case x : Tuple8[Any, Any, Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7) + findLists(x._8)\n            case x : Tuple9[Any, Any, Any, Any, Any, Any, Any, Any",
    "        var count : Long = 0\n        Input match {\n            case x : List[Any] => count += 1\n            case x : Tuple2[Any, Any] => count += findLists(x._1) + findLists(x._2)\n            case x : Tuple3[Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3)\n            case x : Tuple4[Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4)\n            case x : Tuple5[Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5)\n            case x : Tuple6[Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6)\n            case x : Tuple7[Any, Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7)\n            case x : Tuple8[Any, Any, Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7) + findLists(x._8)\n            case x : Tuple9[Any, Any, Any, Any, Any, Any, Any, Any",
    "        Input match {\n            case (a, b) => findLists(a) + findLists(b)\n            case a : List[_] => 1\n            case _ => 0\n        }",
    "        Input match {\n            case x : List[Any] => 1 + x.map(findLists).sum\n            case _ => 0\n        }",
    "        Input match {\n            case x : List[Any] => 1 + x.map(findLists).sum\n            case x : Tuple2[Any, Any] => findLists(x._1) + findLists(x._2)\n            case _ => 0\n        }",
    "        var count = 0\n        Input match {\n            case (x : List[Any]) => count += 1\n            case (x : Any, y : Any) => count += findLists(x) + findLists(y)\n            case _ =>\n        }\n        return count",
    "        var count = 0\n        Input match {\n            case (x : List[Any]) => count += 1\n            case (x : Any, y : Any) => count += findLists(x) + findLists(y)\n            case _ =>\n        }\n        count",
    "        Input match {\n            case x : List[Any] => 1 + x.map(findLists).sum\n            case _ => 0\n        }",
    "        Input match {\n            case (x : List[Any]) => 1 + x.map(findLists).sum\n            case (x : Any) => 0\n        }",
    "        var count = 0\n        Input match {\n            case x : List[Any] => count = count + 1\n            case x : Tuple2[Any, Any] => count = count + findLists(x._1) + findLists(x._2)\n            case x : Tuple3[Any, Any, Any] => count = count + findLists(x._1) + findLists(x._2) + findLists(x._3)\n            case x : Tuple4[Any, Any, Any, Any] => count = count + findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4)\n            case x : Tuple5[Any, Any, Any, Any, Any] => count = count + findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5)\n            case x : Tuple6[Any, Any, Any, Any, Any, Any] => count = count + findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6)\n            case x : Tuple7[Any, Any, Any, Any, Any, Any, Any] => count = count + findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7)\n            case x : Tuple8[Any, Any, Any, Any, Any, Any, Any, Any] => count = count + findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7) + findLists(x._8)\n            case x : Tuple9[Any",
    "        var count = 0\n        Input match {\n            case x : List[Any] => count = count + 1 + x.map(findLists(_)).sum\n            case _ => count\n        }\n        return count",
    "        var count : Long = 0\n        Input match {\n            case x : List[Any] => count += 1\n            case x : Tuple2[Any, Any] => count += findLists(x._1) + findLists(x._2)\n            case x : Tuple3[Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3)\n            case x : Tuple4[Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4)\n            case x : Tuple5[Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5)\n            case x : Tuple6[Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6)\n            case x : Tuple7[Any, Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7)\n            case x : Tuple8[Any, Any, Any, Any, Any, Any, Any, Any] => count += findLists(x._1) + findLists(x._2) + findLists(x._3) + findLists(x._4) + findLists(x._5) + findLists(x._6) + findLists(x._7) + findLists(x._8)\n            case x : Tuple9[Any, Any, Any, Any, Any, Any, Any, Any"
  ]
}