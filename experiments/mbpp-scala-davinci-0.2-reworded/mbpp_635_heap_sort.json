{
  "name": "mbpp_635_heap_sort",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given list.\n    def heapSort(iterable : List[Long]) : List[Long] = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_635_heap_sort.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(heapSort((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 0l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    assert(heapSort((List[Long](25l.toLong, 35l.toLong, 22l.toLong, 85l.toLong, 14l.toLong, 65l.toLong, 75l.toLong, 25l.toLong, 58l.toLong))).equals((List[Long](14l.toLong, 22l.toLong, 25l.toLong, 25l.toLong, 35l.toLong, 58l.toLong, 65l.toLong, 75l.toLong, 85l.toLong))));\n    assert(heapSort((List[Long](7l.toLong, 1l.toLong, 9l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val heap = new Heap[Long]()\n        for (i <- iterable) heap.insert(i)\n        var result = List[Long]()\n        while (!heap.isEmpty) result = heap.extractMin :: result\n        result.reverse",
    "        val heap = new Heap(iterable)\n        heap.sort()",
    "        val heap = new Heap[Long]()\n        for (x <- iterable) heap.insert(x)\n        val result = new ListBuffer[Long]()\n        while (!heap.isEmpty) result += heap.extractMin\n        result.toList",
    "        val heap = new Heap(iterable)\n        heap.sort",
    "        val heap = new Heap[Long]()\n        for (i <- iterable) heap.insert(i)\n        val result = new ListBuffer[Long]()\n        while (!heap.isEmpty) result += heap.extractMin()\n        result.toList",
    "        val heap = new Heap(iterable)\n        var result = List[Long]()\n        while (!heap.isEmpty) {\n            result = heap.pop() :: result\n        }\n        result",
    "        val heap = new Heap(iterable)\n        var result = List[Long]()\n        while (!heap.isEmpty) {\n            result = heap.pop() :: result\n        }\n        result",
    "        val heap = new Heap(iterable)\n        val result = new ListBuffer[Long]\n        while (heap.size > 0) {\n            result += heap.pop\n        }\n        result.toList",
    "        val heap = new Heap[Long]\n        heap.heapify(iterable)\n        heap.sort()",
    "        val heap = new Heap(iterable)\n        heap.sort()",
    "        val heap = new Heap[Long]\n        heap.addAll(iterable)\n        heap.toList",
    "        var heap = new Heap[Long]()\n        for (i <- iterable) heap.insert(i)\n        var result = List[Long]()\n        while (!heap.isEmpty) result = heap.extractMin :: result\n        result",
    "        val heap = new Heap[Long]\n        for (i <- iterable) heap.insert(i)\n        val result = new ListBuffer[Long]\n        while (!heap.isEmpty) result += heap.extractMin\n        result.toList",
    "        val heap = new Heap(iterable)\n        heap.sort()",
    "        val heap = new Heap[Long]\n        heap.addAll(iterable)\n        var result = List[Long]()\n        while (!heap.isEmpty) {\n            result = heap.remove() :: result\n        }\n        result",
    "        val heap = new Heap[Long]\n        heap.build(iterable)\n        heap.sort",
    "        val heap = new Heap(iterable)\n        var result = List[Long]()\n        while (heap.size > 0) {\n            result = heap.pop() :: result\n        }\n        result",
    "        val heap = new Heap[Long]\n        heap.addAll(iterable)\n        val result = new ListBuffer[Long]\n        while (!heap.isEmpty) result += heap.remove\n        result.toList",
    "        val heap = new Heap(iterable)\n        heap.sort()",
    "        val heap = new Heap[Long]\n        heap.addAll(iterable)\n        val result = new ListBuffer[Long]\n        while (!heap.isEmpty) {\n            result += heap.remove()\n        }\n        result.toList",
    "        var heap = new Heap(iterable)\n        var result = new ListBuffer[Long]()\n        while (heap.size > 0) {\n            result += heap.pop()\n        }\n        result.toList",
    "        val heap = new Heap(iterable)\n        var result = List[Long]()\n        while (heap.size > 0) {\n            result = heap.pop() :: result\n        }\n        result",
    "        val heap = new Heap(iterable)\n        heap.sort()",
    "        val heap = new Heap(iterable)\n        var result = List[Long]()\n        while (heap.size > 0) {\n            result = heap.pop() :: result\n        }\n        result",
    "        val heap = new Heap(iterable)\n        heap.sort",
    "        val heap = new Heap[Long]\n        iterable.foreach(heap.insert)\n        val result = new ListBuffer[Long]\n        while(heap.size > 0) {\n            result += heap.extractMin\n        }\n        result.toList",
    "        val heap = new Heap(iterable)\n        heap.sort",
    "        val heap = new Heap(iterable)\n        heap.sort()",
    "        val heap = new Heap[Long](iterable)\n        var result = List[Long]()\n        while (heap.size > 0) {\n            result = heap.pop() :: result\n        }\n        result",
    "        val heap = new Heap[Long]()\n        for (i <- iterable) heap.insert(i)\n        val result = new ListBuffer[Long]()\n        while (!heap.isEmpty) result += heap.deleteMin()\n        result.toList",
    "        val heap = new Heap(iterable)\n        heap.sort",
    "        val heap = new Heap(iterable)\n        heap.sort()",
    "        val heap = new Heap[Long]\n        heap.insertAll(iterable)\n        val result = new ListBuffer[Long]\n        while (!heap.isEmpty) result += heap.extract\n        result.toList",
    "        val heap = new Heap(iterable)\n        val sorted = new ListBuffer[Long]\n        while (heap.size > 0) {\n            sorted += heap.pop\n        }\n        sorted.toList",
    "        val heap = new Heap(iterable)\n        val sorted = new ListBuffer[Long]\n        while (heap.size > 0) {\n            sorted += heap.pop\n        }\n        sorted.toList",
    "        val heap = new Heap(iterable)\n        heap.sort",
    "        val heap = new Heap(iterable)\n        heap.sort()",
    "        var heap = new Heap[Long]\n        for (x <- iterable) {\n            heap.insert(x)\n        }\n        var result = List[Long]()\n        while (!heap.isEmpty) {\n            result = heap.extractMin :: result\n        }\n        result.reverse",
    "        var heap = new Heap(iterable)\n        var result = List[Long]()\n        while (heap.size > 0) {\n            result = heap.pop :: result\n        }\n        result",
    "        val heap = new Heap[Long]()\n        for (i <- iterable) heap.insert(i)\n        val result = new ListBuffer[Long]()\n        while (!heap.isEmpty) result += heap.extractMax\n        result.toList",
    "        val heap = new Heap[Long]\n        heap.insertAll(iterable)\n        heap.sort",
    "        val heap = new Heap(iterable)\n        heap.sort",
    "        val heap = new Heap(iterable)\n        val sorted = new ListBuffer[Long]\n        while (heap.size > 0) {\n            sorted += heap.pop\n        }\n        sorted.toList",
    "        val heap = new Heap(iterable)\n        heap.sort",
    "        val heap = new Heap[Long]\n        heap.insertAll(iterable)\n        heap.sort",
    "        val heap = new Heap[Long]\n        for (x <- iterable) heap.add(x)\n        val result = new ListBuffer[Long]\n        while (!heap.isEmpty) result += heap.remove\n        result.toList",
    "        val heap = new Heap[Long](iterable)\n        heap.sort()",
    "        val heap = new Heap(iterable)\n        val result = new ListBuffer[Long]\n        while (!heap.isEmpty) {\n            result += heap.pop\n        }\n        result.toList",
    "        val heap = new BinaryHeap[Long]\n        heap.addAll(iterable)\n        heap.toList",
    "        val heap = new Heap[Long]()\n        for (i <- iterable) heap.insert(i)\n        val result = new ListBuffer[Long]()\n        while (!heap.isEmpty) result += heap.extractMin()\n        result.toList",
    "        val heap = new Heap(iterable)\n        val result = new ListBuffer[Long]\n        while (heap.size > 0) {\n            result += heap.pop\n        }\n        result.toList",
    "        val heap = new Heap(iterable)\n        val result = new ListBuffer[Long]\n        while (heap.size > 0) {\n            result += heap.remove\n        }\n        result.toList",
    "        val heap = new Heap(iterable)\n        heap.sort()",
    "        val heap = new Heap(iterable)\n        val result = new ListBuffer[Long]\n        while (heap.size > 0) {\n            result += heap.pop\n        }\n        result.toList",
    "        var heap = new Heap(iterable)\n        var result = List[Long]()\n        while (heap.size > 0) {\n            result = heap.pop() :: result\n        }\n        result",
    "        val heap = new Heap(iterable)\n        heap.sort()",
    "        val heap = new Heap(iterable)\n        heap.sort",
    "        val heap = new Heap(iterable)\n        heap.sort()",
    "        val heap = new Heap(iterable)\n        val result = new ListBuffer[Long]\n        while (heap.size > 0) {\n            result += heap.pop\n        }\n        result.toList",
    "        val heap = new Heap(iterable)\n        val result = new ListBuffer[Long]\n        while (heap.size > 0) {\n            result += heap.pop\n        }\n        result.toList",
    "        val heap = new Heap(iterable)\n        val result = new ListBuffer[Long]\n        for (i <- 0 until iterable.length) result += heap.extractMin\n        result.toList",
    "        val heap = new Heap(iterable)\n        var result = List[Long]()\n        for (i <- 0 until iterable.length) {\n            result = heap.pop() :: result\n        }\n        result",
    "        val heap = new Heap(iterable)\n        heap.sort",
    "        val heap = new Heap[Long]()\n        for (x <- iterable) heap.insert(x)\n        val result = new ListBuffer[Long]()\n        while (!heap.isEmpty) result += heap.extractMin\n        result.toList",
    "        val heap = new Heap[Long]\n        for (i <- iterable) heap.insert(i)\n        val result = new ListBuffer[Long]\n        while (!heap.isEmpty) result += heap.extractMin\n        result.toList",
    "        val heap = new Heap(iterable)\n        val result = new ListBuffer[Long]\n        while (heap.size > 0) {\n            result += heap.pop\n        }\n        result.toList",
    "        var heap = new Heap[Long]\n        for (i <- iterable) heap.insert(i)\n        var result = List[Long]()\n        while (!heap.isEmpty) result = heap.extractMin :: result\n        result.reverse",
    "        val heap = new Heap[Long]()\n        for (i <- iterable) heap.add(i)\n        var result = List[Long]()\n        while (!heap.isEmpty) result = heap.pop() :: result\n        result",
    "        val heap = new Heap(iterable)\n        val result = new ListBuffer[Long]\n        while (!heap.isEmpty) {\n            result += heap.extractMin\n        }\n        result.toList",
    "        val heap = new Heap(iterable)\n        heap.sort()",
    "        val heap = new Heap(iterable)\n        val sorted = new ListBuffer[Long]\n        while (heap.size > 0) {\n            sorted += heap.pop\n        }\n        sorted.toList",
    "        val heap = new Heap(iterable)\n        heap.sort",
    "        val heap = new Heap(iterable)\n        val result = new ListBuffer[Long]\n        while (!heap.isEmpty) result += heap.remove\n        result.toList",
    "        val heap = new Heap(iterable)\n        heap.sort",
    "        val heap = new Heap(iterable)\n        val sorted = new ListBuffer[Long]\n        while (!heap.isEmpty) {\n            sorted += heap.pop\n        }\n        sorted.toList",
    "        val heap = new Heap(iterable)\n        heap.sort",
    "        val heap = new Heap[Long]()\n        for (item <- iterable) heap.insert(item)\n        val result = new ListBuffer[Long]()\n        while (!heap.isEmpty) result += heap.extractMin\n        result.toList",
    "        val heap = new Heap[Long]\n        for (x <- iterable) heap.insert(x)\n        val result = new ListBuffer[Long]\n        while (!heap.isEmpty) result += heap.extractMin\n        result.toList",
    "        val heap = new Heap(iterable)\n        heap.sort()",
    "        val heap = new Heap(iterable)\n        val result = new ListBuffer[Long]\n        while (!heap.isEmpty) {\n            result += heap.pop\n        }\n        result.toList",
    "        val heap = new Heap[Long]()\n        for (i <- iterable) heap.add(i)\n        val result = new ListBuffer[Long]()\n        while (!heap.isEmpty) result += heap.remove()\n        result.toList",
    "        val heap = new Heap[Long]\n        for (i <- iterable) heap.insert(i)\n        val result = new ListBuffer[Long]\n        while (!heap.isEmpty) result += heap.extractMin\n        result.toList",
    "        val heap = new Heap(iterable)\n        heap.sort",
    "        val heap = new Heap(iterable)\n        val sorted = new ListBuffer[Long]\n        while (heap.size > 0) {\n            sorted += heap.remove\n        }\n        sorted.toList",
    "        val heap = new Heap(iterable)\n        heap.sort",
    "        val heap = new Heap[Long]\n        heap.addAll(iterable)\n        heap.toList",
    "        val heap = new Heap(iterable)\n        heap.sort()",
    "        val heap = new Heap[Long]()\n        iterable.foreach(heap.insert)\n        var result = List[Long]()\n        while(!heap.isEmpty) {\n            result = heap.extractMin :: result\n        }\n        result.reverse",
    "        val heap = new Heap(iterable)\n        heap.sort()",
    "        val heap = new Heap[Long]()\n        iterable.foreach(heap.insert)\n        val result = new ListBuffer[Long]()\n        while(heap.size > 0) result += heap.extractMin\n        result.toList",
    "        val heap = new Heap(iterable)\n        heap.sort",
    "        val heap = new Heap[Long]\n        for (i <- iterable) heap.insert(i)\n        val sorted = new ListBuffer[Long]\n        while (!heap.isEmpty) sorted += heap.extractMin\n        sorted.toList",
    "        val heap = new Heap[Long]()\n        for (i <- iterable) heap.insert(i)\n        val result = new ListBuffer[Long]()\n        while (!heap.isEmpty) result += heap.extractMin\n        result.toList",
    "        var heap = new Heap[Long](iterable)\n        var result = List[Long]()\n        while (heap.size > 0) {\n            result = heap.pop() :: result\n        }\n        result",
    "        val heap = new Heap(iterable)\n        heap.sort()",
    "        val heap = new Heap[Long]\n        heap.addAll(iterable)\n        val result = new ListBuffer[Long]\n        while (!heap.isEmpty) {\n            result += heap.remove()\n        }\n        result.toList",
    "        val heap = new Heap(iterable)\n        heap.sort()",
    "        val heap = new Heap(iterable)\n        val sorted = new ListBuffer[Long]\n        while (!heap.isEmpty) {\n            sorted += heap.extractMin\n        }\n        sorted.toList",
    "        var heap = new Heap[Long]()\n        for (i <- iterable) heap.insert(i)\n        var result = List[Long]()\n        while (!heap.isEmpty) result = heap.deleteMin :: result\n        result",
    "        val heap = new Heap[Long]\n        heap.addAll(iterable)\n        heap.toList",
    "        val heap = new Heap(iterable)\n        val result = new ListBuffer[Long]()\n        while (!heap.isEmpty) {\n            result += heap.pop\n        }\n        result.toList",
    "        val heap = new Heap[Long]\n        for (i <- iterable) heap.insert(i)\n        val result = new ListBuffer[Long]\n        while (!heap.isEmpty) result += heap.extractMin\n        result.toList",
    "        var heap = new Heap(iterable)\n        var result = List[Long]()\n        for (i <- 1 to iterable.length) {\n            result = heap.pop() :: result\n        }\n        result",
    "        val heap = new Heap(iterable)\n        heap.sort",
    "        val heap = new Heap[Long]\n        heap.insertAll(iterable)\n        heap.sort",
    "        val heap = new Heap[Long](iterable)\n        heap.sort",
    "        val heap = new Heap(iterable)\n        heap.sort()",
    "        var heap = new Heap[Long]\n        for (i <- iterable) heap.insert(i)\n        var result = List[Long]()\n        while (!heap.isEmpty) result = heap.extractMax :: result\n        result",
    "        var heap = new Heap[Long]()\n        for (item <- iterable) heap.insert(item)\n        var result = List[Long]()\n        while (heap.size > 0) result = heap.extractMin() :: result\n        result",
    "        val heap = new Heap(iterable)\n        val result = new ListBuffer[Long]\n        while (heap.size > 0) {\n            result += heap.pop\n        }\n        result.toList",
    "        val heap = new Heap[Long](iterable)\n        var result = List[Long]()\n        while (!heap.isEmpty) {\n            result = heap.pop() :: result\n        }\n        result",
    "        val heap = new Heap(iterable)\n        heap.sort()",
    "        val heap = new Heap[Long](iterable)\n        val result = new ListBuffer[Long]\n        while (heap.size > 0) {\n            result += heap.pop\n        }\n        result.toList",
    "        val heap = new Heap(iterable)\n        val result = new ListBuffer[Long]\n        while (heap.size > 0) {\n            result += heap.pop\n        }\n        result.toList",
    "        val heap = new Heap[Long]\n        for (i <- iterable) heap.insert(i)\n        val result = new ListBuffer[Long]\n        while (!heap.isEmpty) result += heap.extractMin\n        result.toList",
    "        val heap = new Heap(iterable)\n        heap.sort()",
    "        val heap = new Heap(iterable)\n        val result = new ListBuffer[Long]\n        while (!heap.isEmpty) {\n            result += heap.pop\n        }\n        result.toList",
    "        var heap = new Heap()\n        for (i <- iterable) heap.insert(i)\n        var result = new ListBuffer[Long]()\n        while (!heap.isEmpty) result += heap.extractMin\n        result.toList",
    "        val heap = new Heap(iterable)\n        heap.sort()",
    "        val heap = new Heap[Long](iterable)\n        val result = new ListBuffer[Long]\n        while (heap.size > 0) {\n            result += heap.pop\n        }\n        result.toList",
    "        val heap = new Heap(iterable)\n        heap.sort",
    "        val heap = new Heap(iterable)\n        heap.sort()",
    "        val heap = new Heap(iterable)\n        heap.sort",
    "        val heap = new Heap[Long]()\n        iterable.foreach(heap.insert)\n        var result = List[Long]()\n        while (!heap.isEmpty) {\n            result = heap.extractMin :: result\n        }\n        result",
    "        val heap = new Heap(iterable)\n        heap.sort()",
    "        val heap = new Heap(iterable)\n        heap.sort",
    "        val heap = new Heap(iterable)\n        heap.sort()",
    "        val heap = new Heap[Long]()\n        iterable.foreach(heap.insert)\n        var result = List[Long]()\n        while (heap.size > 0) {\n            result = heap.extractMin :: result\n        }\n        result.reverse",
    "        val heap = new Heap(iterable)\n        heap.sort()",
    "        val heap = new Heap(iterable)\n        val result = new ListBuffer[Long]\n        while(heap.size > 0) {\n            result += heap.pop\n        }\n        result.toList",
    "        val heap = new Heap[Long]\n        heap.addAll(iterable)\n        heap.toList",
    "        val heap = new Heap(iterable)\n        heap.sort",
    "        val heap = new Heap(iterable)\n        var result = List[Long]()\n        while (heap.size > 0) {\n            result = heap.pop() :: result\n        }\n        result",
    "        val heap = new Heap(iterable)\n        heap.sort",
    "        val heap = new Heap(iterable)\n        heap.sort()",
    "        var heap = new Heap(iterable)\n        var result = List[Long]()\n        for (i <- 1 to iterable.length) {\n            result = heap.extractMax :: result\n        }\n        result.reverse",
    "        var heap = new Heap(iterable)\n        var result = List[Long]()\n        while (!heap.isEmpty) {\n            result = heap.pop() :: result\n        }\n        result",
    "        val heap = new Heap[Long]()\n        for (x <- iterable) heap.insert(x)\n        var result = List[Long]()\n        while (!heap.isEmpty) result = heap.removeMin() :: result\n        result",
    "        val heap = new Heap(iterable)\n        heap.sort()",
    "        val heap = new Heap(iterable)\n        val sorted = new ListBuffer[Long]\n        while (heap.size > 0) {\n            sorted += heap.pop\n        }\n        sorted.toList",
    "        val heap = new Heap(iterable)\n        heap.sort()",
    "        val heap = new Heap(iterable)\n        val result = new ListBuffer[Long]\n        while (heap.size > 0) result += heap.pop\n        result.toList",
    "        val heap = new Heap(iterable)\n        var sorted = List[Long]()\n        while (!heap.isEmpty) {\n            sorted = heap.pop() :: sorted\n        }\n        sorted",
    "        val heap = new Heap(iterable)\n        heap.sort",
    "        val heap = new Heap[Long]\n        heap.addAll(iterable)\n        heap.toList",
    "        val heap = new Heap(iterable)\n        heap.sort()",
    "        val heap = new Heap[Long](iterable)\n        heap.sort",
    "        val heap = new Heap(iterable)\n        val sorted = new ListBuffer[Long]\n        while (!heap.isEmpty) {\n            sorted += heap.pop\n        }\n        sorted.toList",
    "        val heap = new Heap(iterable)\n        val result = new ListBuffer[Long]\n        while (heap.size > 0) {\n            result += heap.pop\n        }\n        result.toList",
    "        val heap = new Heap(iterable)\n        val result = new ListBuffer[Long]\n        while (heap.size > 0) result += heap.pop\n        result.toList",
    "        val heap = new Heap(iterable)\n        heap.sort()",
    "        val heap = new Heap[Long]\n        for (x <- iterable) heap.insert(x)\n        val result = new ListBuffer[Long]\n        while (!heap.isEmpty) result += heap.extractMin\n        result.toList",
    "        val heap = new Heap(iterable)\n        heap.sort",
    "        val heap = new Heap(iterable)\n        val sorted = new ListBuffer[Long]\n        while (!heap.isEmpty) {\n            sorted += heap.pop\n        }\n        sorted.toList",
    "        var heap = new Heap(iterable)\n        var result = List[Long]()\n        while (heap.size > 0) {\n            result = heap.extractMin :: result\n        }\n        result",
    "        val heap = new Heap[Long]\n        heap.addAll(iterable)\n        heap.toList",
    "        val heap = new Heap(iterable)\n        heap.sort",
    "        val heap = new Heap(iterable)\n        heap.sort",
    "        val heap = new Heap[Long]()\n        for (i <- iterable) heap.insert(i)\n        val result = new ListBuffer[Long]()\n        while (!heap.isEmpty) result += heap.extractMin\n        result.toList",
    "        val heap = new Heap(iterable)\n        heap.sort",
    "        val heap = new Heap(iterable)\n        heap.sort",
    "        val heap = new Heap[Long](iterable)\n        val result = new ListBuffer[Long]\n        while (!heap.isEmpty) {\n            result += heap.pop\n        }\n        result.toList",
    "        val heap = new Heap[Long]\n        heap.insertAll(iterable)\n        heap.toList",
    "        val heap = new Heap[Long](iterable)\n        heap.sort",
    "        val heap = new Heap(iterable)\n        heap.sort()",
    "        val heap = new Heap(iterable)\n        val result = new ListBuffer[Long]\n        while (heap.size > 0) {\n            result += heap.pop\n        }\n        result.toList",
    "        val heap = new Heap[Long]\n        for (i <- iterable) heap.insert(i)\n        val result = new ListBuffer[Long]\n        while (!heap.isEmpty) result += heap.extract\n        result.toList",
    "        val heap = new Heap(iterable)\n        val result = new ListBuffer[Long]\n        while (!heap.isEmpty) {\n            result += heap.pop\n        }\n        result.toList",
    "        val heap = new Heap(iterable)\n        val result = new ListBuffer[Long]\n        while (heap.size > 0) {\n            result += heap.pop\n        }\n        result.toList",
    "        val heap = new Heap(iterable)\n        val result = new ListBuffer[Long]\n        while (heap.size > 0) {\n            result += heap.pop\n        }\n        result.toList",
    "        val heap = new Heap[Long]\n        heap.addAll(iterable)\n        heap.toList",
    "        val heap = new Heap[Long]()\n        iterable.foreach(heap.insert)\n        var result = List[Long]()\n        while (heap.size > 0) {\n            result = heap.removeMin :: result\n        }\n        result",
    "        val heap = new Heap(iterable)\n        val result = new ListBuffer[Long]\n        while (heap.size > 0) {\n            result += heap.pop\n        }\n        result.toList",
    "        val heap = new Heap[Long]()\n        for (i <- iterable) heap.insert(i)\n        val result = new ListBuffer[Long]()\n        while (!heap.isEmpty) result += heap.extractMin()\n        result.toList",
    "        val heap = new Heap[Long]\n        heap.insertAll(iterable)\n        heap.sort()",
    "        val heap = new Heap(iterable)\n        heap.sort",
    "        val heap = new Heap(iterable)\n        val result = new ListBuffer[Long]\n        for (i <- 0 until iterable.length) result += heap.extractMin\n        result.toList",
    "        val heap = new Heap(iterable)\n        heap.sort",
    "        val heap = new Heap[Long](iterable)\n        heap.sort",
    "        val heap = new Heap[Long]()\n        for (i <- iterable) heap.insert(i)\n        val result = new ListBuffer[Long]()\n        while (!heap.isEmpty) result += heap.extractMin\n        result.toList",
    "        val heap = new Heap[Long]\n        for (x <- iterable) heap.insert(x)\n        val result = new ListBuffer[Long]\n        while (!heap.isEmpty) result += heap.extractMin\n        result.toList",
    "        val heap = new Heap(iterable)\n        heap.sort",
    "        val heap = new Heap(iterable)\n        val result = new ListBuffer[Long]\n        while (!heap.isEmpty) {\n            result += heap.pop\n        }\n        result.toList",
    "        val heap = new Heap(iterable)\n        var result = List[Long]()\n        while (!heap.isEmpty) {\n            result = heap.removeMin :: result\n        }\n        result",
    "        val heap = new Heap(iterable)\n        var result = List[Long]()\n        while (!heap.isEmpty) {\n            result = heap.pop() :: result\n        }\n        result",
    "        val heap = new Heap(iterable)\n        heap.sort",
    "        val heap = new Heap[Long]\n        for (i <- iterable) heap.insert(i)\n        val result = new ListBuffer[Long]\n        while (!heap.isEmpty) result += heap.extractMax\n        result.toList",
    "        val heap = new Heap(iterable)\n        heap.sort()",
    "        val heap = new Heap(iterable)\n        heap.sort",
    "        val heap = new Heap[Long]\n        heap.addAll(iterable)\n        heap.toList",
    "        val heap = new Heap[Long]\n        heap.addAll(iterable)\n        heap.toList",
    "        val heap = new Heap(iterable)\n        var result = List[Long]()\n        while (!heap.isEmpty) {\n            result = heap.remove() :: result\n        }\n        result",
    "        val heap = new Heap(iterable)\n        val sorted = new ListBuffer[Long]\n        while (!heap.isEmpty) {\n            sorted += heap.pop\n        }\n        sorted.toList",
    "        val heap = new Heap(iterable)\n        heap.sort()",
    "        val heap = new Heap(iterable)\n        val result = new ListBuffer[Long]\n        while (heap.size > 0) {\n            result += heap.pop\n        }\n        result.toList",
    "        val heap = new Heap(iterable)\n        heap.sort()",
    "        val heap = new Heap(iterable)\n        heap.sort()",
    "        val heap = new Heap(iterable)\n        val result = new ListBuffer[Long]\n        while (!heap.isEmpty) {\n            result += heap.remove\n        }\n        result.toList",
    "        val heap = new Heap(iterable)\n        heap.sort()",
    "        val heap = new Heap[Long]()\n        for (element <- iterable) heap.insert(element)\n        val result = new ListBuffer[Long]()\n        while (!heap.isEmpty) result += heap.extractMin\n        result.toList"
  ]
}