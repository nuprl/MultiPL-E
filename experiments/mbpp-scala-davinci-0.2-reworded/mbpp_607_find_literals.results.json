{
  "name": "mbpp_607_find_literals",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_607_find_literals.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return Left(\"pattern is longer than text\")\n        for (i <- 0 to textLength - patternLength) {\n            var matchCount = 0\n            for (j <- 0 to patternLength - 1) {\n                if (text(i + j) == pattern(j)) matchCount += 1\n            }\n            if (matchCount == patternLength) return Right(i)\n        }\n        Left(\"no match\")\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1665510639,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpa_5brtyc.scala:19)\n\tat Problem.main(tmpa_5brtyc.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) Left(\"Pattern is longer than text\")\n        else {\n            var i = 0\n            var j = 0\n            while (i < textLength && j < patternLength) {\n                if (text(i) == pattern(j)) {\n                    i += 1\n                    j += 1\n                }\n                else {\n                    i = i - j + 1\n                    j = 0\n                }\n            }\n            if (j == patternLength) Right(i - j)\n            else Left(\"Pattern not found\")\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1665510638,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp2t4ud5u_.scala:27)\n\tat Problem.main(tmp2t4ud5u_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return Left(\"Text is shorter than pattern\")\n        for (i <- 0 to textLength - patternLength) {\n            var matchCount = 0\n            for (j <- 0 to patternLength - 1) {\n                if (text(i + j) == pattern(j)) matchCount += 1\n            }\n            if (matchCount == patternLength) return Right(i)\n        }\n        Left(\"No match found\")\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1665510639,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpv0ddlx01.scala:19)\n\tat Problem.main(tmpv0ddlx01.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val regex = pattern.r\n        val result = regex.findFirstMatchIn(text)\n        if (result.isEmpty) Left(\"No match found\")\n        else Right(result.get.start)\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1665510638,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpqcxfbg__.scala:12)\n\tat Problem.main(tmpqcxfbg__.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return Left(\"Pattern is longer than text\")\n        var i = 0\n        var j = 0\n        while (i < textLength && j < patternLength) {\n            if (text(i) == pattern(j)) {\n                i += 1\n                j += 1\n            }\n            else {\n                i = i - j + 1\n                j = 0\n            }\n        }\n        if (j == patternLength) return Right(i - j)\n        else return Left(\"Pattern not found\")\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1665510639,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpf_c7qyb_.scala:25)\n\tat Problem.main(tmpf_c7qyb_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val n = text.length\n        val m = pattern.length\n        var i = 0\n        var j = 0\n        while (i < n && j < m) {\n            if (text(i) == pattern(j)) {\n                i += 1\n                j += 1\n            } else {\n                i = i - j + 1\n                j = 0\n            }\n        }\n        if (j == m) Right(i - m)\n        else Left(\"No match found\")\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1665510638,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpwfszoztf.scala:23)\n\tat Problem.main(tmpwfszoztf.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        var i = 0\n        var j = 0\n        while (i < textLength) {\n            if (text(i) == pattern(j)) {\n                i += 1\n                j += 1\n                if (j == patternLength) return Right(i - j)\n            } else {\n                i = i - j + 1\n                j = 0\n            }\n        }\n        Left(\"Not found\")\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1665510638,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpe0hqqwis.scala:23)\n\tat Problem.main(tmpe0hqqwis.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        var i = 0\n        while (i < textLength - patternLength) {\n            var j = 0\n            while (j < patternLength && text(i + j) == pattern(j)) {\n                j += 1\n            }\n            if (j == patternLength) return Right(i)\n            i += 1\n        }\n        Left(\"No match found\")\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1665510638,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp1to66gm_.scala:20)\n\tat Problem.main(tmp1to66gm_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val regex = pattern.r\n        val result = regex.findFirstIn(text)\n        result match {\n            case Some(x) => Right(x.length)\n            case None => Left(\"No match found\")\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1665510638,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpn6u9oyb8.scala:14)\n\tat Problem.main(tmpn6u9oyb8.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return Left(\"Pattern is longer than text\")\n        var i = 0\n        while (i + patternLength <= textLength) {\n            var j = 0\n            while (j < patternLength && text(i + j) == pattern(j)) j += 1\n            if (j == patternLength) return Right(i)\n            i += 1\n        }\n        Left(\"Pattern not found\")\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1665510638,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmptqwf1x2b.scala:19)\n\tat Problem.main(tmptqwf1x2b.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) {\n            Left(\"Pattern is longer than text\")\n        } else {\n            var i = 0\n            while (i + patternLength <= textLength) {\n                var j = 0\n                while (j < patternLength && text(i + j) == pattern(j)) {\n                    j += 1\n                }\n                if (j == patternLength) {\n                    return Right(i)\n                }\n                i += 1\n            }\n            Left(\"Pattern not found\")\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1665510638,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpys228a8s.scala:26)\n\tat Problem.main(tmpys228a8s.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return Left(\"Pattern is longer than text\")\n        for (i <- 0 to textLength - patternLength) {\n            if (text.substring(i, i + patternLength) == pattern) return Right(i)\n        }\n        Left(\"Pattern not found\")\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1665510638,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpojroctac.scala:15)\n\tat Problem.main(tmpojroctac.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) {\n            Left(\"Pattern is longer than text\")\n        } else {\n            var i = 0\n            while (i <= textLength - patternLength) {\n                if (text.substring(i, i + patternLength) == pattern) {\n                    return Right(i)\n                }\n                i += 1\n            }\n            Left(\"Pattern not found\")\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1665510638,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpu31dbhak.scala:22)\n\tat Problem.main(tmpu31dbhak.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) {\n            Left(\"Pattern is longer than text\")\n        } else {\n            var i = 0\n            while (i < textLength - patternLength) {\n                var j = 0\n                while (j < patternLength && text(i + j) == pattern(j)) {\n                    j += 1\n                }\n                if (j == patternLength) {\n                    return Right(i)\n                }\n                i += 1\n            }\n            Left(\"Pattern not found\")\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1665510638,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp45mvhz7r.scala:26)\n\tat Problem.main(tmp45mvhz7r.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return Left(\"Pattern is longer than text\")\n        for (i <- 0 to textLength - patternLength) {\n            if (text.substring(i, i + patternLength) == pattern) return Right(i)\n        }\n        return Left(\"No match\")\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1665510639,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpdby6fni0.scala:15)\n\tat Problem.main(tmpdby6fni0.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        for (i <- 0 to textLength - patternLength) {\n            if (text.substring(i, i + patternLength) == pattern) {\n                return Right(i)\n            }\n        }\n        Left(\"Not found\")\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1665510638,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp3b8rvn6x.scala:16)\n\tat Problem.main(tmp3b8rvn6x.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        val textCharArray = text.toCharArray\n        val patternCharArray = pattern.toCharArray\n        var i = 0\n        var j = 0\n        while (i < textLength && j < patternLength) {\n            if (textCharArray(i) == patternCharArray(j)) {\n                i += 1\n                j += 1\n            }\n            else {\n                i = i - j + 1\n                j = 0\n            }\n        }\n        if (j == patternLength) Right(i - j) else Left(\"No Match\")\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1665510638,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpjxljepa0.scala:25)\n\tat Problem.main(tmpjxljepa0.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return Left(\"Pattern is longer than text\")\n        for (i <- 0 to textLength - patternLength) {\n            var matchFound = true\n            for (j <- 0 to patternLength - 1) {\n                if (text(i + j) != pattern(j)) {\n                    matchFound = false\n                    break\n                }\n            }\n            if (matchFound) return Right(i)\n        }\n        Left(\"No match found\")\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1665510636,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpcc5fz3kv.scala:14:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m                    break\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return Left(\"Pattern is longer than text\")\n        var i = 0\n        while (i <= textLength - patternLength) {\n            var j = 0\n            while (j < patternLength && text(i + j) == pattern(j)) j += 1\n            if (j == patternLength) return Right(i)\n            i += 1\n        }\n        Left(\"Pattern not found\")\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1665510638,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpmtulxahe.scala:19)\n\tat Problem.main(tmpmtulxahe.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return Left(\"Pattern is longer than text\")\n        for (i <- 0 to textLength - patternLength) {\n            val subtext = text.substring(i, i + patternLength)\n            if (subtext == pattern) return Right(i)\n        }\n        return Left(\"Pattern not found\")\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1665510638,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpbumub_as.scala:16)\n\tat Problem.main(tmpbumub_as.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) Left(\"Pattern is longer than text\")\n        else {\n            var i = 0\n            var j = 0\n            var found = false\n            while (i < textLength && !found) {\n                if (text(i) == pattern(j)) {\n                    j += 1\n                    if (j == patternLength) found = true\n                }\n                else {\n                    j = 0\n                }\n                i += 1\n            }\n            if (found) Right(i - patternLength)\n            else Left(\"Pattern not found\")\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123932,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpfavmdidx.scala:28)\n\tat Problem.main(tmpfavmdidx.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (patternLength > textLength) {\n            Left(\"Pattern is longer than text\")\n        } else {\n            var i = 0\n            var j = 0\n            while (i < textLength && j < patternLength) {\n                if (text(i) == pattern(j)) {\n                    i += 1\n                    j += 1\n                } else {\n                    i = i - j + 1\n                    j = 0\n                }\n            }\n            if (j == patternLength) {\n                Right(i - j)\n            } else {\n                Left(\"Pattern not found\")\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123932,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpdjsx30gl.scala:30)\n\tat Problem.main(tmpdjsx30gl.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val n = text.length\n        val m = pattern.length\n        if (m > n) return Left(\"Pattern is longer than text\")\n        for (i <- 0 to n - m) {\n            var j = 0\n            while (j < m && text(i + j) == pattern(j)) j += 1\n            if (j == m) return Right(i)\n        }\n        Left(\"Pattern not found\")\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123932,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpitccz9ut.scala:17)\n\tat Problem.main(tmpitccz9ut.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) Left(\"Pattern is longer than text\")\n        else {\n            val lastIndex = textLength - patternLength\n            for (i <- 0 to lastIndex) {\n                var matchFound = true\n                for (j <- 0 to patternLength - 1) {\n                    if (text(i + j) != pattern(j)) {\n                        matchFound = false\n                        j = patternLength\n                    }\n                }\n                if (matchFound) return Right(i)\n            }\n            Left(\"No match found\")\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123929,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpiq6otio1.scala:16:26 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                        j = patternLength\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Reassignment to val j\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return Left(\"Pattern is longer than text\")\n        for (i <- 0 until textLength - patternLength + 1) {\n            var matchFound = true\n            for (j <- 0 until patternLength) {\n                if (text(i + j) != pattern(j)) {\n                    matchFound = false\n                    break\n                }\n            }\n            if (matchFound) return Right(i)\n        }\n        Left(\"No match found\")\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123929,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgbnlhxwd.scala:14:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m                    break\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        var i = 0\n        while (i <= textLength - patternLength) {\n            var j = 0\n            while (j < patternLength && text(i + j) == pattern(j)) {\n                j += 1\n            }\n            if (j == patternLength) {\n                return Right(i)\n            }\n            i += 1\n        }\n        Left(\"Not found\")\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123932,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp49j5fs9p.scala:22)\n\tat Problem.main(tmp49j5fs9p.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        var i = 0\n        while (i < textLength - patternLength + 1) {\n            var j = 0\n            while (j < patternLength && text(i + j) == pattern(j)) {\n                j += 1\n            }\n            if (j == patternLength) return Right(i)\n            i += 1\n        }\n        Left(\"No match found\")\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123932,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp3q9oz6si.scala:20)\n\tat Problem.main(tmp3q9oz6si.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return Left(\"Pattern is longer than text\")\n        for (i <- 0 to textLength - patternLength) {\n            var matchFound = true\n            for (j <- 0 to patternLength - 1) {\n                if (text(i + j) != pattern(j)) {\n                    matchFound = false\n                    break\n                }\n            }\n            if (matchFound) return Right(i)\n        }\n        Left(\"No match found\")\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1665510636,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpcc5fz3kv.scala:14:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m                    break\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val n = text.length\n        val m = pattern.length\n        var i = 0\n        var j = 0\n        while(i < n && j < m) {\n            if(text(i) == pattern(j)) {\n                i += 1\n                j += 1\n            } else {\n                i = i - j + 1\n                j = 0\n            }\n        }\n        if(j == m) Right(i - m) else Left(\"Not found\")\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123932,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp77bkr9o8.scala:22)\n\tat Problem.main(tmp77bkr9o8.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return Left(\"Pattern is longer than text\")\n        for (i <- 0 to textLength - patternLength) {\n            var matchCount = 0\n            for (j <- 0 to patternLength - 1) {\n                if (text(i + j) == pattern(j)) matchCount += 1\n                else break\n            }\n            if (matchCount == patternLength) return Right(i)\n        }\n        Left(\"No match found\")\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123930,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpzu49gzix.scala:13:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                \u001b[33melse\u001b[0m break\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) Left(\"Pattern is longer than text\")\n        else {\n            var i = 0\n            while (i <= textLength - patternLength) {\n                var j = 0\n                while (j < patternLength && text(i + j) == pattern(j)) j += 1\n                if (j == patternLength) return Right(i)\n                i += 1\n            }\n            Left(\"Pattern not found\")\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123932,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpd6x6uih_.scala:21)\n\tat Problem.main(tmpd6x6uih_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (patternLength > textLength) return Left(\"Pattern is longer than text\")\n        for (i <- 0 to textLength - patternLength) {\n            var matchFound = true\n            for (j <- 0 to patternLength - 1) {\n                if (text(i + j) != pattern(j)) {\n                    matchFound = false\n                    break\n                }\n            }\n            if (matchFound) return Right(i)\n        }\n        Left(\"No match found\")\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123930,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpncfa905d.scala:14:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m                    break\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return Left(\"Text is shorter than pattern\")\n        for (i <- 0 to textLength - patternLength) {\n            var matchCount = 0\n            for (j <- 0 to patternLength - 1) {\n                if (text(i + j) == pattern(j)) matchCount += 1\n            }\n            if (matchCount == patternLength) return Right(i)\n        }\n        Left(\"Pattern not found\")\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123932,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpr2ueiu4c.scala:19)\n\tat Problem.main(tmpr2ueiu4c.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) Left(\"Pattern is longer than text\")\n        else {\n            var i = 0\n            var j = 0\n            var startIndex = -1\n            var endIndex = -1\n            while (i < textLength && j < patternLength) {\n                if (text(i) == pattern(j)) {\n                    if (startIndex == -1) startIndex = i\n                    i += 1\n                    j += 1\n                }\n                else {\n                    i += 1\n                    j = 0\n                    startIndex = -1\n                }\n            }\n            if (j == patternLength) Right(startIndex)\n            else Left(\"Pattern not found\")\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123932,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpc4b1j25u.scala:31)\n\tat Problem.main(tmpc4b1j25u.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            Left(\"Pattern is longer than text\")\n        } else {\n            var i = 0\n            while (i < textLength - patternLength + 1) {\n                var j = 0\n                while (j < patternLength && text(i + j) == pattern(j)) {\n                    j += 1\n                }\n                if (j == patternLength) {\n                    return Right(i)\n                }\n                i += 1\n            }\n            Left(\"Pattern not found\")\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123932,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmprsgz763t.scala:26)\n\tat Problem.main(tmprsgz763t.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return Left(\"Pattern is longer than text\")\n        for (i <- 0 to textLength - patternLength) {\n            var matchFound = true\n            for (j <- 0 to patternLength - 1) {\n                if (text(i + j) != pattern(j)) {\n                    matchFound = false\n                    break\n                }\n            }\n            if (matchFound) return Right(i)\n        }\n        Left(\"No match found\")\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123929,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvt_kaily.scala:14:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m                    break\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) {\n            Left(\"Pattern is longer than text\")\n        } else {\n            var i = 0\n            var j = 0\n            var found = false\n            while (i < textLength && j < patternLength) {\n                if (text(i) == pattern(j)) {\n                    i += 1\n                    j += 1\n                } else {\n                    i = i - j + 1\n                    j = 0\n                }\n            }\n            if (j == patternLength) {\n                Right(i - j)\n            } else {\n                Left(\"Pattern not found\")\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123932,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpxpaws8p6.scala:31)\n\tat Problem.main(tmpxpaws8p6.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return Left(\"Pattern is longer than text\")\n        for (i <- 0 to textLength - patternLength) {\n            if (text.substring(i, i + patternLength) == pattern) return Right(i)\n        }\n        Left(\"Pattern not found\")\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1665510638,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpojroctac.scala:15)\n\tat Problem.main(tmpojroctac.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return Left(\"Pattern is longer than text\")\n        for (i <- 0 to textLength - patternLength) {\n            var matchCount = 0\n            for (j <- 0 to patternLength - 1) {\n                if (text(i + j) == pattern(j)) matchCount += 1\n            }\n            if (matchCount == patternLength) return Right(i)\n        }\n        Left(\"Pattern not found\")\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123932,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmptegg1bnw.scala:19)\n\tat Problem.main(tmptegg1bnw.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) Left(\"Text is too short\")\n        else {\n            var found = false\n            var i = 0\n            while (i <= textLength - patternLength && !found) {\n                var j = 0\n                while (j < patternLength && text(i + j) == pattern(j)) j += 1\n                if (j == patternLength) found = true\n                else i += 1\n            }\n            if (found) Right(i)\n            else Left(\"Pattern not found\")\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123932,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp0dqynrhd.scala:23)\n\tat Problem.main(tmp0dqynrhd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return Left(\"Pattern is longer than text\")\n        var i = 0\n        while (i < textLength - patternLength) {\n            var j = 0\n            while (j < patternLength && text(i + j) == pattern(j)) j += 1\n            if (j == patternLength) return Right(i)\n            i += 1\n        }\n        Left(\"Pattern not found\")\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123932,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp0vcedgpz.scala:19)\n\tat Problem.main(tmp0vcedgpz.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (patternLength > textLength) return Left(\"Pattern is longer than text\")\n        for (i <- 0 to textLength - patternLength) {\n            var j = 0\n            while (j < patternLength && text(i + j) == pattern(j)) j += 1\n            if (j == patternLength) return Right(i)\n        }\n        Left(\"Pattern not found\")\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123932,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmplusvi1se.scala:17)\n\tat Problem.main(tmplusvi1se.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) Left(\"Pattern is longer than text\")\n        else {\n            var index = 0\n            while (index <= textLength - patternLength) {\n                var i = 0\n                while (i < patternLength && text(index + i) == pattern(i)) i += 1\n                if (i == patternLength) return Right(index)\n                index += 1\n            }\n            Left(\"Pattern not found\")\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123932,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpbe0xw1y8.scala:21)\n\tat Problem.main(tmpbe0xw1y8.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        var i = 0\n        var j = 0\n        while (i < text.length && j < pattern.length) {\n            if (text(i) == pattern(j)) {\n                i += 1\n                j += 1\n            }\n            else {\n                i = i - j + 1\n                j = 0\n            }\n        }\n        if (j == pattern.length) Right(i - j)\n        else Left(\"Not found\")\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123932,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpvc9ny_ih.scala:22)\n\tat Problem.main(tmpvc9ny_ih.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return Left(\"Text is too short\")\n        for (i <- 0 to textLength - patternLength) {\n            var matchFound = true\n            for (j <- 0 to patternLength - 1) {\n                if (text(i + j) != pattern(j)) {\n                    matchFound = false\n                    break\n                }\n            }\n            if (matchFound) return Right(i)\n        }\n        Left(\"No match found\")\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123929,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpszt7biyo.scala:14:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m                    break\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val n = text.length\n        val m = pattern.length\n        if (m > n) return Left(\"Pattern is longer than text\")\n        for (i <- 0 to n - m) {\n            var j = 0\n            while (j < m && text(i + j) == pattern(j)) j += 1\n            if (j == m) return Right(i)\n        }\n        Left(\"Pattern not found\")\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123932,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpitccz9ut.scala:17)\n\tat Problem.main(tmpitccz9ut.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        var i = 0\n        while (i <= textLength - patternLength) {\n            var j = 0\n            while (j < patternLength && text(i + j) == pattern(j)) {\n                j += 1\n            }\n            if (j == patternLength) {\n                return Right(i)\n            }\n            i += 1\n        }\n        Left(\"Not found\")\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123932,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp49j5fs9p.scala:22)\n\tat Problem.main(tmp49j5fs9p.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) Left(\"Pattern is longer than text\")\n        else {\n            var i = 0\n            var j = 0\n            while (i < textLength && j < patternLength) {\n                if (text(i) == pattern(j)) {\n                    i += 1\n                    j += 1\n                }\n                else {\n                    i = i - j + 1\n                    j = 0\n                }\n            }\n            if (j == patternLength) Right(i - j)\n            else Left(\"Pattern not found\")\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123939,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmplg5gwnyf.scala:27)\n\tat Problem.main(tmplg5gwnyf.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return Left(\"Pattern is longer than text\")\n        for (i <- 0 to textLength - patternLength) {\n            var found = true\n            for (j <- 0 to patternLength - 1) {\n                if (text(i + j) != pattern(j)) {\n                    found = false\n                    break\n                }\n            }\n            if (found) return Right(i)\n        }\n        Left(\"Pattern not found\")\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123936,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp85naul88.scala:14:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m                    break\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (patternLength > textLength) return Left(\"Pattern is longer than text\")\n        for (i <- 0 to textLength - patternLength) {\n            var j = 0\n            while (j < patternLength && text(i + j) == pattern(j)) j += 1\n            if (j == patternLength) return Right(i)\n        }\n        Left(\"Pattern not found\")\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123932,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmplusvi1se.scala:17)\n\tat Problem.main(tmplusvi1se.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) Left(\"Text is shorter than pattern\")\n        else {\n            var i = 0\n            while (i <= textLength - patternLength) {\n                var j = 0\n                while (j < patternLength && text(i + j) == pattern(j)) j += 1\n                if (j == patternLength) return Right(i)\n                i += 1\n            }\n            Left(\"Pattern not found\")\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123940,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpumtzaqnu.scala:21)\n\tat Problem.main(tmpumtzaqnu.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return Left(\"Pattern is longer than text\")\n        for (i <- 0 to textLength - patternLength) {\n            var matchFound = true\n            for (j <- 0 to patternLength - 1) {\n                if (text(i + j) != pattern(j)) {\n                    matchFound = false\n                    break\n                }\n            }\n            if (matchFound) return Right(i)\n        }\n        Left(\"No match found\")\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1665510636,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpcc5fz3kv.scala:14:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m                    break\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        var i = 0\n        while (i < textLength - patternLength) {\n            var j = 0\n            while (j < patternLength && text(i + j) == pattern(j)) {\n                j += 1\n            }\n            if (j == patternLength) {\n                return Right(i)\n            }\n            i += 1\n        }\n        Left(\"Not found\")\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123939,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp9g044l7h.scala:22)\n\tat Problem.main(tmp9g044l7h.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        var i = 0\n        while (i <= textLength - patternLength) {\n            var j = 0\n            while (j < patternLength && text(i + j) == pattern(j)) {\n                j += 1\n            }\n            if (j == patternLength) return Right(i)\n            i += 1\n        }\n        Left(\"No match found\")\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123939,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp_s8n3h1e.scala:20)\n\tat Problem.main(tmp_s8n3h1e.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        val textChars = text.toCharArray\n        val patternChars = pattern.toCharArray\n        var i = 0\n        var j = 0\n        var found = false\n        while (i < textLength && j < patternLength) {\n            if (textChars(i) == patternChars(j)) {\n                i += 1\n                j += 1\n            } else {\n                i = i - j + 1\n                j = 0\n            }\n        }\n        if (j == patternLength) {\n            Right(i - j)\n        } else {\n            Left(\"Not found\")\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123939,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpl2gysnzx.scala:29)\n\tat Problem.main(tmpl2gysnzx.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        var i = 0\n        while (i < textLength - patternLength) {\n            var j = 0\n            while (j < patternLength && text(i + j) == pattern(j)) {\n                j += 1\n            }\n            if (j == patternLength) {\n                return Right(i)\n            }\n            i += 1\n        }\n        Left(\"No match found\")\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123941,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpras4_l90.scala:22)\n\tat Problem.main(tmpras4_l90.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) Left(\"Pattern is longer than text\")\n        else {\n            var i = 0\n            var j = 0\n            var found = false\n            while (i < textLength && j < patternLength) {\n                if (text(i) == pattern(j)) {\n                    i += 1\n                    j += 1\n                }\n                else {\n                    i = i - j + 1\n                    j = 0\n                }\n            }\n            if (j == patternLength) Right(i - j)\n            else Left(\"Pattern not found\")\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123942,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp_bvgqd_o.scala:28)\n\tat Problem.main(tmp_bvgqd_o.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return Left(\"Pattern is longer than text\")\n        for (i <- 0 to textLength - patternLength) {\n            if (text.substring(i, i + patternLength) == pattern) return Right(i)\n        }\n        Left(\"Pattern not found\")\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1665510638,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpojroctac.scala:15)\n\tat Problem.main(tmpojroctac.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            Left(\"Text is shorter than pattern\")\n        } else {\n            var i = 0\n            var j = 0\n            while (i < textLength && j < patternLength) {\n                if (text(i) == pattern(j)) {\n                    i += 1\n                    j += 1\n                } else {\n                    i = i - j + 1\n                    j = 0\n                }\n            }\n            if (j == patternLength) {\n                Right(i - j)\n            } else {\n                Left(\"Pattern not found\")\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123941,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp_qjf9_qw.scala:30)\n\tat Problem.main(tmp_qjf9_qw.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) {\n            Left(\"Pattern is longer than text\")\n        } else {\n            var i = 0\n            var j = 0\n            var found = false\n            while (i < textLength && !found) {\n                if (text(i) == pattern(j)) {\n                    j += 1\n                    if (j == patternLength) {\n                        found = true\n                    }\n                } else {\n                    j = 0\n                }\n                i += 1\n            }\n            if (found) {\n                Right(i - patternLength)\n            } else {\n                Left(\"Pattern not found\")\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123942,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp32o22698.scala:33)\n\tat Problem.main(tmp32o22698.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return Left(\"Pattern is longer than text\")\n        for (i <- 0 to textLength - patternLength) {\n            var matchFound = true\n            for (j <- 0 to patternLength - 1) {\n                if (text(i + j) != pattern(j)) matchFound = false\n            }\n            if (matchFound) return Right(i)\n        }\n        Left(\"Pattern not found\")\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123943,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpv4fe2j5i.scala:19)\n\tat Problem.main(tmpv4fe2j5i.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) {\n            Left(\"Pattern is longer than text\")\n        } else {\n            var i = 0\n            while (i <= textLength - patternLength) {\n                var j = 0\n                while (j < patternLength && text(i + j) == pattern(j)) {\n                    j += 1\n                }\n                if (j == patternLength) {\n                    return Right(i)\n                }\n                i += 1\n            }\n            Left(\"Pattern not found\")\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123942,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp5tatjnlg.scala:26)\n\tat Problem.main(tmp5tatjnlg.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return Left(\"Pattern is longer than text\")\n        for (i <- 0 to textLength - patternLength) {\n            var matchCount = 0\n            for (j <- 0 to patternLength - 1) {\n                if (text(i + j) == pattern(j)) matchCount += 1\n            }\n            if (matchCount == patternLength) return Right(i)\n        }\n        Left(\"Pattern not found\")\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123942,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp6jad130r.scala:19)\n\tat Problem.main(tmp6jad130r.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val n = text.length\n        val m = pattern.length\n        val d = 256\n        val q = 101\n        var h = 1\n        for (i <- 1 to m - 1) h = (h * d) % q\n        var p = 0\n        var t = 0\n        for (i <- 0 to m - 1) {\n            p = (d * p + pattern(i)) % q\n            t = (d * t + text(i)) % q\n        }\n        for (s <- 0 to n - m) {\n            if (p == t) {\n                var i = 0\n                while (i < m) {\n                    if (text(s + i) != pattern(i)) {\n                        i = m\n                    }\n                    i += 1\n                }\n                if (i == m) return Right(s)\n            }\n            if (s < n - m) {\n                t = (d * (t - text(s) * h) + text(s + m)) % q\n                if (t < 0) t = (t + q)\n            }\n        }\n        Left(\"Not Found\")\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123943,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpas6yaxwj.scala:37)\n\tat Problem.main(tmpas6yaxwj.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        val textChars = text.toCharArray\n        val patternChars = pattern.toCharArray\n        for (i <- 0 to textLength - patternLength) {\n            var j = 0\n            while (j < patternLength && textChars(i + j) == patternChars(j)) j += 1\n            if (j == patternLength) return Right(i)\n        }\n        Left(\"No match found\")\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123943,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp5sgzu55y.scala:18)\n\tat Problem.main(tmp5sgzu55y.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return Left(\"Text is shorter than pattern\")\n        for (i <- 0 to textLength - patternLength) {\n            if (text.substring(i, i + patternLength) == pattern) return Right(i)\n        }\n        Left(\"Pattern not found\")\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123942,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmppv_48j8b.scala:15)\n\tat Problem.main(tmppv_48j8b.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return Left(\"Text is shorter than pattern\")\n        for (i <- 0 to textLength - patternLength) {\n            var found = true\n            for (j <- 0 to patternLength - 1) {\n                if (text(i + j) != pattern(j)) {\n                    found = false\n                    break\n                }\n            }\n            if (found) return Right(i)\n        }\n        Left(\"Pattern not found\")\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123939,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqvbujycu.scala:14:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m                    break\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return Left(\"Pattern is longer than text\")\n        var i = 0\n        while (i < textLength - patternLength + 1) {\n            var j = 0\n            while (j < patternLength && text(i + j) == pattern(j)) j += 1\n            if (j == patternLength) return Right(i)\n            i += 1\n        }\n        Left(\"Pattern not found\")\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123942,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp3omgx668.scala:19)\n\tat Problem.main(tmp3omgx668.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val n = text.length\n        val m = pattern.length\n        if (m > n) return Left(\"Pattern is longer than text\")\n        for (i <- 0 to n - m) {\n            var j = 0\n            while (j < m && text(i + j) == pattern(j)) j += 1\n            if (j == m) return Right(i)\n        }\n        Left(\"Pattern not found\")\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123932,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpitccz9ut.scala:17)\n\tat Problem.main(tmpitccz9ut.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) Left(\"Pattern is longer than text\")\n        else {\n            var i = 0\n            var j = 0\n            while (i < textLength && j < patternLength) {\n                if (text(i) == pattern(j)) {\n                    i += 1\n                    j += 1\n                } else {\n                    i = i - j + 1\n                    j = 0\n                }\n            }\n            if (j == patternLength) Right(i - j)\n            else Left(\"Pattern not found\")\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123942,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp70pwkacb.scala:26)\n\tat Problem.main(tmp70pwkacb.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        for (i <- 0 to textLength - patternLength) {\n            val sub = text.substring(i, i + patternLength)\n            if (sub == pattern) return Right(i)\n        }\n        Left(\"Not found\")\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123942,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpy6bmykr7.scala:15)\n\tat Problem.main(tmpy6bmykr7.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return Left(\"Pattern is longer than text\")\n        for (i <- 0 to textLength - patternLength) {\n            var matchCount = 0\n            for (j <- 0 to patternLength - 1) {\n                if (text(i + j) == pattern(j)) matchCount += 1\n            }\n            if (matchCount == patternLength) return Right(i)\n        }\n        Left(\"Pattern not found\")\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123942,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp6jad130r.scala:19)\n\tat Problem.main(tmp6jad130r.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return Left(\"Text is shorter than pattern\")\n        for (i <- 0 to textLength - patternLength) {\n            var matchCount = 0\n            for (j <- 0 to patternLength - 1) {\n                if (text(i + j) == pattern(j)) matchCount += 1\n            }\n            if (matchCount == patternLength) return Right(i)\n        }\n        Left(\"Pattern not found\")\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123932,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpr2ueiu4c.scala:19)\n\tat Problem.main(tmpr2ueiu4c.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        for (i <- 0 to textLength - patternLength) {\n            if (text.substring(i, i + patternLength) == pattern) return Right(i)\n        }\n        Left(\"Not found\")\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123942,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpk58avc1i.scala:14)\n\tat Problem.main(tmpk58avc1i.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) {\n            Left(\"Pattern length is greater than text length\")\n        } else {\n            var i = 0\n            var j = 0\n            var found = false\n            while (i < textLength && j < patternLength) {\n                if (text(i) == pattern(j)) {\n                    i += 1\n                    j += 1\n                } else {\n                    i = i - j + 1\n                    j = 0\n                }\n            }\n            if (j == patternLength) {\n                Right(i - j)\n            } else {\n                Left(\"Pattern not found\")\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123943,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp0b8_ez0x.scala:31)\n\tat Problem.main(tmp0b8_ez0x.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val n = text.length\n        val m = pattern.length\n        if (m > n) Left(\"Pattern is longer than text\")\n        else {\n            var i = 0\n            var j = 0\n            while (i < n && j < m) {\n                if (text(i) == pattern(j)) {\n                    i += 1\n                    j += 1\n                }\n                else {\n                    i = i - j + 1\n                    j = 0\n                }\n            }\n            if (j == m) Right(i - m)\n            else Left(\"Pattern not found\")\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123942,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmptrhwe5hh.scala:27)\n\tat Problem.main(tmptrhwe5hh.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return Left(\"Pattern is longer than text\")\n        val patternHash = pattern.hashCode\n        var currentHash = text.substring(0, patternLength).hashCode\n        var startIndex = 0\n        var endIndex = patternLength - 1\n        while (endIndex < textLength) {\n            if (currentHash == patternHash) {\n                if (text.substring(startIndex, endIndex + 1) == pattern) return Right(startIndex)\n            }\n            startIndex += 1\n            endIndex += 1\n            if (endIndex < textLength) currentHash = currentHash - text(startIndex - 1).toInt + text(endIndex).toInt\n        }\n        Left(\"Pattern not found\")\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123947,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmppq64dnrx.scala:24)\n\tat Problem.main(tmppq64dnrx.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val n = text.length\n        val m = pattern.length\n        if (n < m) return Left(\"Text is shorter than pattern\")\n        var i = 0\n        while (i <= n - m) {\n            var j = 0\n            while (j < m && text(i + j) == pattern(j)) j += 1\n            if (j == m) return Right(i)\n            i += 1\n        }\n        Left(\"No match found\")\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123948,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmprnwo03uj.scala:19)\n\tat Problem.main(tmprnwo03uj.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        var i = 0\n        while (i < textLength - patternLength + 1) {\n            var j = 0\n            while (j < patternLength && text(i + j) == pattern(j)) {\n                j += 1\n            }\n            if (j == patternLength) {\n                return Right(i)\n            }\n            i += 1\n        }\n        Left(\"Not found\")\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123949,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmplb26fgbg.scala:22)\n\tat Problem.main(tmplb26fgbg.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) Left(\"Text is shorter than pattern\")\n        else {\n            var i = 0\n            while (i <= textLength - patternLength) {\n                var j = 0\n                while (j < patternLength && text(i + j) == pattern(j)) j += 1\n                if (j == patternLength) return Right(i)\n                i += 1\n            }\n            Left(\"Pattern not found\")\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123940,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpumtzaqnu.scala:21)\n\tat Problem.main(tmpumtzaqnu.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return Left(\"Pattern is longer than text\")\n        var i = 0\n        while (i <= textLength - patternLength) {\n            var j = 0\n            while (j < patternLength && text(i + j) == pattern(j)) {\n                j += 1\n            }\n            if (j == patternLength) return Right(i)\n            i += 1\n        }\n        Left(\"Pattern not found\")\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123949,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpu_e43ly8.scala:21)\n\tat Problem.main(tmpu_e43ly8.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return Left(\"Pattern is longer than text\")\n        for (i <- 0 to textLength - patternLength) {\n            if (text.substring(i, i + patternLength) == pattern) return Right(i)\n        }\n        Left(\"Pattern not found\")\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1665510638,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpojroctac.scala:15)\n\tat Problem.main(tmpojroctac.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) Left(\"Pattern is longer than text\")\n        else {\n            var i = 0\n            while (i < textLength - patternLength + 1) {\n                var j = 0\n                while (j < patternLength && pattern(j) == text(i + j)) j += 1\n                if (j == patternLength) return Right(i)\n                i += 1\n            }\n            Left(\"Pattern not found\")\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123949,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpeszbpp4d.scala:21)\n\tat Problem.main(tmpeszbpp4d.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        var i = 0\n        while (i < textLength - patternLength + 1) {\n            var j = 0\n            while (j < patternLength && text(i + j) == pattern(j)) {\n                j += 1\n            }\n            if (j == patternLength) {\n                return Right(i)\n            }\n            i += 1\n        }\n        Left(\"No match found\")\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123950,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpaq65_f_b.scala:22)\n\tat Problem.main(tmpaq65_f_b.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return Left(\"Text is shorter than pattern\")\n        var i = 0\n        while (i < textLength - patternLength + 1) {\n            var j = 0\n            while (j < patternLength && text(i + j) == pattern(j)) j += 1\n            if (j == patternLength) return Right(i)\n            i += 1\n        }\n        Left(\"Pattern not found\")\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123949,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmppvtacq1m.scala:19)\n\tat Problem.main(tmppvtacq1m.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        if (textLength < patternLength) return Left(\"Text is shorter than pattern\")\n        for (i <- 0 to textLength - patternLength) {\n            val sub = text.substring(i, i + patternLength)\n            if (sub == pattern) return Right(i)\n        }\n        Left(\"Pattern not found\")\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123951,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmppy3y2e67.scala:16)\n\tat Problem.main(tmppy3y2e67.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        var i = 0\n        while (i < textLength - patternLength) {\n            var j = 0\n            while (j < patternLength && text(i + j) == pattern(j)) {\n                j += 1\n            }\n            if (j == patternLength) {\n                return Right(i)\n            }\n            i += 1\n        }\n        Left(\"No match found\")\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123941,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpras4_l90.scala:22)\n\tat Problem.main(tmpras4_l90.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return Left(\"Text is shorter than pattern\")\n        for (i <- 0 to textLength - patternLength) {\n            var matchFound = true\n            for (j <- 0 to patternLength - 1) {\n                if (text(i + j) != pattern(j)) {\n                    matchFound = false\n                    break\n                }\n            }\n            if (matchFound) return Right(i)\n        }\n        return Left(\"No match found\")\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123948,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpykwg30u9.scala:14:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m                    break\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (patternLength > textLength) {\n            Left(\"Pattern is longer than text\")\n        } else {\n            var i = 0\n            var j = 0\n            var found = false\n            while (i < textLength && j < patternLength && !found) {\n                if (text(i) == pattern(j)) {\n                    j += 1\n                } else {\n                    j = 0\n                }\n                i += 1\n                if (j == patternLength) {\n                    found = true\n                }\n            }\n            if (found) {\n                Right(i - patternLength)\n            } else {\n                Left(\"Pattern not found\")\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123952,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpnvj6uoh7.scala:33)\n\tat Problem.main(tmpnvj6uoh7.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return Left(\"Text is shorter than pattern\")\n        for (i <- 0 to textLength - patternLength) {\n            var j = 0\n            while (j < patternLength && text(i + j) == pattern(j)) j += 1\n            if (j == patternLength) return Right(i)\n        }\n        Left(\"No match found\")\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123952,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpwni4rnc1.scala:17)\n\tat Problem.main(tmpwni4rnc1.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        var start = 0\n        var end = 0\n        var found = false\n        for (i <- 0 to text.length - pattern.length) {\n            if (text.substring(i, i + pattern.length) == pattern) {\n                start = i\n                end = i + pattern.length - 1\n                found = true\n            }\n        }\n        if (found) Right(start) else Left(pattern)\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123951,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpibpfbh9a.scala:19)\n\tat Problem.main(tmpibpfbh9a.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return Left(\"Text is shorter than pattern\")\n        for (i <- 0 to textLength - patternLength) {\n            var matchFound = true\n            for (j <- 0 to patternLength - 1) {\n                if (text(i + j) != pattern(j)) {\n                    matchFound = false\n                    break\n                }\n            }\n            if (matchFound) return Right(i)\n        }\n        Left(\"No match found\")\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123949,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpob_0vtlj.scala:14:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m                    break\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return Left(\"Pattern is longer than text\")\n        for (i <- 0 to textLength - patternLength) {\n            val substring = text.substring(i, i + patternLength)\n            if (substring == pattern) return Right(i)\n        }\n        Left(\"Pattern not found\")\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123952,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp03iwrf_h.scala:16)\n\tat Problem.main(tmp03iwrf_h.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return Left(\"Pattern is longer than text\")\n        for (i <- 0 to textLength - patternLength) {\n            var matchFound = true\n            for (j <- 0 to patternLength - 1) {\n                if (text(i + j) != pattern(j)) {\n                    matchFound = false\n                    break\n                }\n            }\n            if (matchFound) return Right(i)\n        }\n        Left(\"No match found\")\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1665510636,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpcc5fz3kv.scala:14:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m                    break\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val n = text.length\n        val m = pattern.length\n        if (m > n) return Left(\"Pattern is longer than text\")\n        for (i <- 0 to n - m) {\n            var j = 0\n            while (j < m && text(i + j) == pattern(j)) j += 1\n            if (j == m) return Right(i)\n        }\n        Left(\"Pattern not found\")\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123932,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpitccz9ut.scala:17)\n\tat Problem.main(tmpitccz9ut.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return Left(\"Pattern is longer than text\")\n        for (i <- 0 to textLength - patternLength) {\n            if (text.substring(i, i + patternLength) == pattern) return Right(i)\n        }\n        Left(\"Pattern not found\")\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1665510638,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpojroctac.scala:15)\n\tat Problem.main(tmpojroctac.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (patternLength > textLength) return Left(\"Pattern is longer than text\")\n        var i = 0\n        while (i <= textLength - patternLength) {\n            var j = 0\n            while (j < patternLength && text(i + j) == pattern(j)) j += 1\n            if (j == patternLength) return Right(i)\n            i += 1\n        }\n        Left(\"Pattern not found\")\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123952,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpc7z80hhe.scala:19)\n\tat Problem.main(tmpc7z80hhe.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        if (text.length < pattern.length) return Left(\"Pattern is longer than text\")\n        var i = 0\n        while (i < text.length - pattern.length) {\n            var j = 0\n            while (j < pattern.length && text(i + j) == pattern(j)) j += 1\n            if (j == pattern.length) return Right(i)\n            i += 1\n        }\n        Left(\"Pattern not found\")\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123952,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp8r8b_pd5.scala:17)\n\tat Problem.main(tmp8r8b_pd5.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) Left(\"Pattern is longer than text\")\n        else {\n            var i = 0\n            while (i <= textLength - patternLength) {\n                var j = 0\n                while (j < patternLength && text(i + j) == pattern(j)) j += 1\n                if (j == patternLength) return Right(i)\n                i += 1\n            }\n            Left(\"Pattern not found\")\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123932,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpd6x6uih_.scala:21)\n\tat Problem.main(tmpd6x6uih_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        var i = 0\n        var j = 0\n        while (i < text.length && j < pattern.length) {\n            if (text(i) == pattern(j)) {\n                i += 1\n                j += 1\n            } else {\n                i = i - j + 1\n                j = 0\n            }\n        }\n        if (j == pattern.length) {\n            Right(i - j)\n        } else {\n            Left(\"Not found\")\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123952,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp207n6ior.scala:24)\n\tat Problem.main(tmp207n6ior.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val start = text.indexOf(pattern)\n        if (start == -1) Left(\"Pattern not found\")\n        else Right(start)\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123951,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpjjnia4zp.scala:11)\n\tat Problem.main(tmpjjnia4zp.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return Left(\"Text is shorter than pattern\")\n        for (i <- 0 to textLength - patternLength) {\n            var matchCount = 0\n            for (j <- 0 to patternLength - 1) {\n                if (text(i + j) == pattern(j)) matchCount += 1\n            }\n            if (matchCount == patternLength) return Right(i)\n        }\n        return Left(\"Pattern not found\")\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123953,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpbcuxgqtp.scala:19)\n\tat Problem.main(tmpbcuxgqtp.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return Left(\"Pattern is longer than text\")\n        var i = 0\n        while (i <= textLength - patternLength) {\n            var j = 0\n            while (j < patternLength && text(i + j) == pattern(j)) j += 1\n            if (j == patternLength) return Right(i)\n            i += 1\n        }\n        Left(\"Pattern not found\")\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123952,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpsfu2t1q_.scala:19)\n\tat Problem.main(tmpsfu2t1q_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength)\n            Left(\"Pattern is longer than text\")\n        else {\n            var i = 0\n            var j = 0\n            var startIndex = -1\n            var endIndex = -1\n            while (i < textLength && j < patternLength) {\n                if (text(i) == pattern(j)) {\n                    if (startIndex == -1)\n                        startIndex = i\n                    endIndex = i\n                    i += 1\n                    j += 1\n                }\n                else {\n                    startIndex = -1\n                    endIndex = -1\n                    i += 1\n                    j = 0\n                }\n            }\n            if (j == patternLength)\n                Right(startIndex)\n            else\n                Left(\"Pattern not found\")\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123952,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpnvotk61_.scala:37)\n\tat Problem.main(tmpnvotk61_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return Left(\"Pattern is longer than text\")\n        var i = 0\n        while (i < textLength - patternLength + 1) {\n            var j = 0\n            while (j < patternLength && text(i + j) == pattern(j)) j += 1\n            if (j == patternLength) return Right(i)\n            i += 1\n        }\n        Left(\"Pattern not found\")\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123942,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp3omgx668.scala:19)\n\tat Problem.main(tmp3omgx668.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) Left(\"Pattern is longer than text\")\n        else {\n            var i = 0\n            var j = 0\n            var found = false\n            while (i < textLength && !found) {\n                j = 0\n                while (j < patternLength && text(i + j) == pattern(j)) j += 1\n                if (j == patternLength) found = true\n                else i += 1\n            }\n            if (found) Right(i)\n            else Left(\"Pattern not found\")\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123953,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp1p_nq9f0.scala:24)\n\tat Problem.main(tmp1p_nq9f0.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            Left(\"Text is shorter than pattern\")\n        } else {\n            var i = 0\n            var j = 0\n            var found = false\n            while (i < textLength && !found) {\n                if (text(i) == pattern(j)) {\n                    j += 1\n                    if (j == patternLength) {\n                        found = true\n                    }\n                } else {\n                    j = 0\n                }\n                i += 1\n            }\n            if (found) {\n                Right(i - patternLength)\n            } else {\n                Left(\"Pattern not found\")\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123953,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpzmmu00sy.scala:33)\n\tat Problem.main(tmpzmmu00sy.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (patternLength > textLength) return Left(\"Pattern is longer than text\")\n        var i = 0\n        while (i < textLength - patternLength + 1) {\n            var j = 0\n            while (j < patternLength && text(i + j) == pattern(j)) j += 1\n            if (j == patternLength) return Right(i)\n            i += 1\n        }\n        Left(\"Pattern not found\")\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123956,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp7jxcqp66.scala:19)\n\tat Problem.main(tmp7jxcqp66.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return Left(\"Text is shorter than pattern\")\n        for (i <- 0 to textLength - patternLength) {\n            val sub = text.substring(i, i + patternLength)\n            if (sub == pattern) return Right(i)\n        }\n        Left(\"Pattern not found\")\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123957,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpzcbt2ms0.scala:16)\n\tat Problem.main(tmpzcbt2ms0.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) Left(\"Pattern length is greater than text length\")\n        else {\n            var i = 0\n            var j = 0\n            var found = false\n            while (i < textLength && j < patternLength) {\n                if (text(i) == pattern(j)) {\n                    i += 1\n                    j += 1\n                } else {\n                    i = i - j + 1\n                    j = 0\n                }\n            }\n            if (j == patternLength) Right(i - patternLength)\n            else Left(\"Pattern not found\")\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123957,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpwhsrwbr7.scala:27)\n\tat Problem.main(tmpwhsrwbr7.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        var i = 0\n        while (i <= textLength - patternLength) {\n            if (text.substring(i, i + patternLength) == pattern) return Right(i)\n            i += 1\n        }\n        Left(\"Not found\")\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123958,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpx3qyg0br.scala:16)\n\tat Problem.main(tmpx3qyg0br.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) Left(\"Text is shorter than pattern\")\n        else {\n            var i = 0\n            var j = 0\n            while (i < textLength && j < patternLength) {\n                if (text(i) == pattern(j)) {\n                    i += 1\n                    j += 1\n                }\n                else {\n                    i = i - j + 1\n                    j = 0\n                }\n            }\n            if (j == patternLength) Right(i - j)\n            else Left(\"Pattern not found\")\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123958,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpybym66si.scala:27)\n\tat Problem.main(tmpybym66si.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (patternLength > textLength) {\n            Left(\"Pattern is longer than text\")\n        } else {\n            var i = 0\n            var j = 0\n            while (i < textLength && j < patternLength) {\n                if (text(i) == pattern(j)) {\n                    i += 1\n                    j += 1\n                } else {\n                    i = i - j + 1\n                    j = 0\n                }\n            }\n            if (j == patternLength) {\n                Right(i - j)\n            } else {\n                Left(\"Pattern not found\")\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123932,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpdjsx30gl.scala:30)\n\tat Problem.main(tmpdjsx30gl.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return Left(\"Pattern is longer than text\")\n        for (i <- 0 to textLength - patternLength) {\n            var found = true\n            for (j <- 0 to patternLength - 1) {\n                if (text(i + j) != pattern(j)) {\n                    found = false\n                    break\n                }\n            }\n            if (found) return Right(i)\n        }\n        Left(\"Pattern not found\")\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123936,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp85naul88.scala:14:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m                    break\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return Left(\"Pattern is longer than text\")\n        for (i <- 0 to textLength - patternLength) {\n            var matchCount = 0\n            for (j <- 0 to patternLength - 1) {\n                if (pattern(j) == text(i + j)) matchCount += 1\n            }\n            if (matchCount == patternLength) return Right(i)\n        }\n        return Left(\"Pattern not found\")\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123959,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpzrrpwnp0.scala:19)\n\tat Problem.main(tmpzrrpwnp0.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return Left(\"Pattern is longer than text\")\n        var i = 0\n        while (i <= textLength - patternLength) {\n            var j = 0\n            while (j < patternLength && pattern(j) == text(i + j)) j += 1\n            if (j == patternLength) return Right(i)\n            i += 1\n        }\n        Left(\"Pattern not found\")\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123959,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp_b3g5d1q.scala:19)\n\tat Problem.main(tmp_b3g5d1q.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            Left(\"Pattern is longer than text\")\n        } else {\n            var i = 0\n            var j = 0\n            var found = false\n            while (i < textLength && j < patternLength && !found) {\n                if (text(i) == pattern(j)) {\n                    i += 1\n                    j += 1\n                } else {\n                    i = i - j + 1\n                    j = 0\n                }\n                if (j == patternLength) {\n                    found = true\n                }\n            }\n            if (found) {\n                Right(i - j)\n            } else {\n                Left(\"Pattern not found\")\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123959,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpx8d63_j1.scala:34)\n\tat Problem.main(tmpx8d63_j1.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        var index = 0\n        while (index < textLength - patternLength) {\n            var i = 0\n            while (i < patternLength && text(index + i) == pattern(i)) {\n                i += 1\n            }\n            if (i == patternLength) return Right(index)\n            index += 1\n        }\n        Left(\"Not found\")\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123958,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp7g9yz42r.scala:20)\n\tat Problem.main(tmp7g9yz42r.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return Left(\"Pattern is longer than text\")\n        var i = 0\n        while (i <= textLength - patternLength) {\n            var j = 0\n            while (j < patternLength && text(i + j) == pattern(j)) j += 1\n            if (j == patternLength) return Right(i)\n            i += 1\n        }\n        Left(\"Pattern not found\")\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1665510638,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpmtulxahe.scala:19)\n\tat Problem.main(tmpmtulxahe.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        for (i <- 0 to textLength - patternLength) {\n            val subtext = text.substring(i, i + patternLength)\n            if (subtext == pattern) return Right(i)\n        }\n        Left(\"Pattern not found\")\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123961,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmps8h5cscw.scala:15)\n\tat Problem.main(tmps8h5cscw.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (patternLength > textLength) Left(\"Pattern is longer than text\")\n        else {\n            var i = 0\n            var j = 0\n            while (i < textLength && j < patternLength) {\n                if (text(i) == pattern(j)) {\n                    i += 1\n                    j += 1\n                }\n                else {\n                    i = i - j + 1\n                    j = 0\n                }\n            }\n            if (j == patternLength) Right(i - j)\n            else Left(\"Pattern not found\")\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123961,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp4yzp5uo7.scala:27)\n\tat Problem.main(tmp4yzp5uo7.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        val textArray = text.toCharArray\n        val patternArray = pattern.toCharArray\n        var i = 0\n        var j = 0\n        while (i < textLength && j < patternLength) {\n            if (textArray(i) == patternArray(j)) {\n                i += 1\n                j += 1\n            } else {\n                i = i - j + 1\n                j = 0\n            }\n        }\n        if (j == patternLength) {\n            Right(i - j)\n        } else {\n            Left(\"No Match\")\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123961,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpi_f155th.scala:28)\n\tat Problem.main(tmpi_f155th.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val n = text.length\n        val m = pattern.length\n        for (i <- 0 to n - m) {\n            var j = 0\n            while (j < m && text(i + j) == pattern(j)) {\n                j += 1\n            }\n            if (j == m) return Right(i)\n        }\n        Left(\"No match\")\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123962,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpn3jvl91n.scala:18)\n\tat Problem.main(tmpn3jvl91n.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        var i = 0\n        while (i <= textLength - patternLength) {\n            var j = 0\n            while (j < patternLength && text(i + j) == pattern(j)) {\n                j += 1\n            }\n            if (j == patternLength) return Right(i)\n            i += 1\n        }\n        Left(\"No match\")\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123961,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp1oxsi11m.scala:20)\n\tat Problem.main(tmp1oxsi11m.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) Left(\"Pattern is longer than text\")\n        else {\n            var i = 0\n            var j = 0\n            var found = false\n            while (i < textLength && j < patternLength) {\n                if (text(i) == pattern(j)) {\n                    i += 1\n                    j += 1\n                }\n                else {\n                    i = i - j + 1\n                    j = 0\n                }\n            }\n            if (j == patternLength) Right(i - j)\n            else Left(\"Pattern not found\")\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123942,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp_bvgqd_o.scala:28)\n\tat Problem.main(tmp_bvgqd_o.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            Left(\"Text is shorter than pattern\")\n        } else {\n            var i = 0\n            var j = 0\n            var found = false\n            while (i < textLength && !found) {\n                if (text(i) == pattern(j)) {\n                    j += 1\n                    if (j == patternLength) {\n                        found = true\n                    }\n                } else {\n                    j = 0\n                }\n                i += 1\n            }\n            if (found) {\n                Right(i - patternLength)\n            } else {\n                Left(\"Pattern not found\")\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123953,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpzmmu00sy.scala:33)\n\tat Problem.main(tmpzmmu00sy.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return Left(\"Pattern is longer than text\")\n        for (i <- 0 to textLength - patternLength) {\n            var matchFound = true\n            for (j <- 0 to patternLength - 1) {\n                if (text(i + j) != pattern(j)) {\n                    matchFound = false\n                    break\n                }\n            }\n            if (matchFound) return Right(i)\n        }\n        Left(\"No match found\")\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1665510636,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpcc5fz3kv.scala:14:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m                    break\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val p = pattern.toCharArray\n        val t = text.toCharArray\n        var i = 0\n        var j = 0\n        var found = false\n        while (i < t.length && j < p.length) {\n            if (t(i) == p(j)) {\n                i += 1\n                j += 1\n            } else {\n                i = i - j + 1\n                j = 0\n            }\n        }\n        if (j == p.length) {\n            Right(i - j)\n        } else {\n            Left(\"Not found\")\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123961,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmppnytw_bq.scala:27)\n\tat Problem.main(tmppnytw_bq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return Left(\"Text is shorter than pattern\")\n        for (i <- 0 to textLength - patternLength) {\n            var matchCount = 0\n            for (j <- 0 to patternLength - 1) {\n                if (text(i + j) == pattern(j)) matchCount += 1\n            }\n            if (matchCount == patternLength) return Right(i)\n        }\n        Left(\"Pattern not found\")\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123932,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpr2ueiu4c.scala:19)\n\tat Problem.main(tmpr2ueiu4c.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return Left(\"Pattern is longer than text\")\n        for (i <- 0 to textLength - patternLength) {\n            var j = 0\n            while (j < patternLength && text(i + j) == pattern(j)) {\n                j += 1\n            }\n            if (j == patternLength) return Right(i)\n        }\n        Left(\"Pattern not found\")\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123963,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp_ek1ubnc.scala:19)\n\tat Problem.main(tmp_ek1ubnc.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) Left(\"Pattern is longer than the text\")\n        else {\n            var i = 0\n            var j = 0\n            var found = false\n            while (i < textLength && !found) {\n                if (text(i) == pattern(j)) {\n                    j += 1\n                    if (j == patternLength) found = true\n                }\n                else {\n                    i -= j\n                    j = 0\n                }\n                i += 1\n            }\n            if (found) Right(i - patternLength)\n            else Left(\"Pattern not found\")\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123962,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpqf8ojnsa.scala:29)\n\tat Problem.main(tmpqf8ojnsa.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return Left(\"Text is shorter than pattern\")\n        for (i <- 0 to textLength - patternLength) {\n            var found = true\n            for (j <- 0 to patternLength - 1) {\n                if (text(i + j) != pattern(j)) {\n                    found = false\n                    break\n                }\n            }\n            if (found) return Right(i)\n        }\n        Left(\"Pattern not found\")\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123939,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqvbujycu.scala:14:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m                    break\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return Left(\"Pattern is longer than text\")\n        for (i <- 0 to textLength - patternLength) {\n            var matchFound = true\n            for (j <- 0 to patternLength - 1) {\n                if (text(i + j) != pattern(j)) {\n                    matchFound = false\n                    break\n                }\n            }\n            if (matchFound) return Right(i)\n        }\n        Left(\"No match found\")\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1665510636,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpcc5fz3kv.scala:14:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m                    break\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        var i = 0\n        while (i < textLength - patternLength) {\n            var j = 0\n            while (j < patternLength && text(i + j) == pattern(j)) {\n                j += 1\n            }\n            if (j == patternLength) {\n                return Right(i)\n            }\n            i += 1\n        }\n        Left(\"Pattern not found\")\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123962,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpidp1mz5z.scala:22)\n\tat Problem.main(tmpidp1mz5z.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            Left(\"Text is shorter than pattern\")\n        } else {\n            var i = 0\n            while (i <= textLength - patternLength) {\n                var j = 0\n                while (j < patternLength && text(i + j) == pattern(j)) {\n                    j += 1\n                }\n                if (j == patternLength) {\n                    return Right(i)\n                }\n                i += 1\n            }\n            Left(\"Pattern not found\")\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123963,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmplmlv530t.scala:26)\n\tat Problem.main(tmplmlv530t.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val n = text.length\n        val m = pattern.length\n        val d = 256\n        val q = 101\n        var h = 1\n        for (i <- 0 until m - 1) h = (h * d) % q\n        var p = 0\n        var t = 0\n        for (i <- 0 until m) {\n            p = (d * p + pattern(i)) % q\n            t = (d * t + text(i)) % q\n        }\n        for (i <- 0 until n - m) {\n            if (p == t) {\n                var j = 0\n                while (j < m && text(i + j) == pattern(j)) j += 1\n                if (j == m) return Right(i)\n            }\n            if (i < n - m) {\n                t = (d * (t - text(i) * h) + text(i + m)) % q\n                if (t < 0) t = (t + q)\n            }\n        }\n        Left(\"Not found\")\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123963,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpdq8opk81.scala:32)\n\tat Problem.main(tmpdq8opk81.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            Left(\"Text is shorter than pattern\")\n        } else {\n            var i = 0\n            var j = 0\n            while (i < textLength && j < patternLength) {\n                if (text(i) == pattern(j)) {\n                    i += 1\n                    j += 1\n                } else {\n                    i = i - j + 1\n                    j = 0\n                }\n            }\n            if (j == patternLength) {\n                Right(i - patternLength)\n            } else {\n                Left(\"Pattern not found\")\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123962,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpmsjy0s_s.scala:30)\n\tat Problem.main(tmpmsjy0s_s.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return Left(\"Pattern is longer than text\")\n        for (i <- 0 to textLength - patternLength) {\n            var matchFound = true\n            for (j <- 0 to patternLength - 1) {\n                if (text(i + j) != pattern(j)) {\n                    matchFound = false\n                    break\n                }\n            }\n            if (matchFound) return Right(i)\n        }\n        Left(\"No match found\")\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1665510636,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpcc5fz3kv.scala:14:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m                    break\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return Left(\"Text is shorter than pattern\")\n        var i = 0\n        while (i < textLength - patternLength + 1) {\n            var j = 0\n            while (j < patternLength && text(i + j) == pattern(j)) j += 1\n            if (j == patternLength) return Right(i)\n            i += 1\n        }\n        Left(\"Pattern not found\")\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123949,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmppvtacq1m.scala:19)\n\tat Problem.main(tmppvtacq1m.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return Left(\"Pattern is longer than text\")\n        for (i <- 0 to (textLength - patternLength)) {\n            val subText = text.substring(i, i + patternLength)\n            if (subText == pattern) return Right(i)\n        }\n        Left(\"Pattern not found\")\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123962,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp0rtkx9fc.scala:16)\n\tat Problem.main(tmp0rtkx9fc.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            Left(\"Pattern is longer than text\")\n        }\n        else {\n            var i = 0\n            while (i <= textLength - patternLength) {\n                var j = 0\n                while (j < patternLength && text(i + j) == pattern(j)) {\n                    j += 1\n                }\n                if (j == patternLength) {\n                    return Right(i)\n                }\n                i += 1\n            }\n            Left(\"Pattern not found\")\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123963,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpe9ko4r86.scala:27)\n\tat Problem.main(tmpe9ko4r86.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) Left(\"Pattern is longer than text\")\n        else {\n            var i = 0\n            var j = 0\n            while (i < textLength && j < patternLength) {\n                if (text(i) == pattern(j)) {\n                    i += 1\n                    j += 1\n                }\n                else {\n                    i = i - j + 1\n                    j = 0\n                }\n            }\n            if (j == patternLength) Right(i - j)\n            else Left(\"Pattern not found\")\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1665510638,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp2t4ud5u_.scala:27)\n\tat Problem.main(tmp2t4ud5u_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        var i = 0\n        while (i + patternLength <= textLength) {\n            var j = 0\n            while (j < patternLength && text(i + j) == pattern(j)) j += 1\n            if (j == patternLength) return Right(i)\n            i += 1\n        }\n        Left(\"Not found\")\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123966,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpwlhem3wd.scala:18)\n\tat Problem.main(tmpwlhem3wd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return Left(\"Pattern is longer than text\")\n        var i = 0\n        while (i <= textLength - patternLength) {\n            var j = 0\n            while (j < patternLength && text(i + j) == pattern(j)) j += 1\n            if (j == patternLength) return Right(i)\n            i += 1\n        }\n        Left(\"Pattern not found\")\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1665510638,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpmtulxahe.scala:19)\n\tat Problem.main(tmpmtulxahe.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) {\n            Left(\"Pattern is longer than text\")\n        } else {\n            var i = 0\n            var j = 0\n            while (i < textLength && j < patternLength) {\n                if (text(i) == pattern(j)) {\n                    i += 1\n                    j += 1\n                } else {\n                    i = i - j + 1\n                    j = 0\n                }\n            }\n            if (j == patternLength) {\n                Right(i - j)\n            } else {\n                Left(\"Pattern not found\")\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123967,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp0npbpyfu.scala:30)\n\tat Problem.main(tmp0npbpyfu.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (patternLength > textLength) return Left(\"Pattern is longer than text\")\n        for (i <- 0 to textLength - patternLength) {\n            var matchFound = true\n            for (j <- 0 to patternLength - 1) {\n                if (text(i + j) != pattern(j)) {\n                    matchFound = false\n                    break\n                }\n            }\n            if (matchFound) return Right(i)\n        }\n        Left(\"No match found\")\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123930,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpncfa905d.scala:14:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m                    break\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return Left(\"Pattern is longer than text\")\n        for (i <- 0 to textLength - patternLength) {\n            var matchFound = true\n            for (j <- 0 to patternLength - 1) {\n                if (text(i + j) != pattern(j)) {\n                    matchFound = false\n                    break\n                }\n            }\n            if (matchFound) return Right(i)\n        }\n        Left(\"No match found\")\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123929,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvt_kaily.scala:14:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m                    break\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) Left(\"Pattern is longer than text\")\n        else {\n            var i = 0\n            var j = 0\n            while (i < textLength && j < patternLength) {\n                if (text(i) == pattern(j)) {\n                    i += 1\n                    j += 1\n                } else {\n                    i = i - j + 1\n                    j = 0\n                }\n            }\n            if (j == patternLength) Right(i - patternLength)\n            else Left(\"Pattern not found\")\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123966,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpo0li3f3r.scala:26)\n\tat Problem.main(tmpo0li3f3r.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return Left(\"Pattern is longer than text\")\n        for (i <- 0 to textLength - patternLength) {\n            var matchFound = true\n            for (j <- 0 to patternLength - 1) {\n                if (text(i + j) != pattern(j)) {\n                    matchFound = false\n                    break\n                }\n            }\n            if (matchFound) return Right(i)\n        }\n        Left(\"No match found\")\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1665510636,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpcc5fz3kv.scala:14:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m                    break\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            Left(\"Pattern is longer than text\")\n        } else {\n            var i = 0\n            while (i <= textLength - patternLength) {\n                var j = 0\n                while (j < patternLength && text(i + j) == pattern(j)) {\n                    j += 1\n                }\n                if (j == patternLength) {\n                    return Right(i)\n                }\n                i += 1\n            }\n            Left(\"Pattern not found\")\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123968,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpzp4x0abx.scala:26)\n\tat Problem.main(tmpzp4x0abx.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        var startIndex = -1\n        var endIndex = -1\n        var i = 0\n        var j = 0\n        while (i < text.length && j < pattern.length) {\n            if (text(i) == pattern(j)) {\n                if (startIndex == -1) startIndex = i\n                i += 1\n                j += 1\n            } else {\n                i += 1\n                j = 0\n                startIndex = -1\n            }\n        }\n        if (j == pattern.length) {\n            endIndex = i\n            Right(startIndex)\n        } else {\n            Left(\"No match found\")\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123969,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpzz_lsl10.scala:29)\n\tat Problem.main(tmpzz_lsl10.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) {\n            Left(\"Pattern is longer than text\")\n        } else {\n            var i = 0\n            while (i < textLength - patternLength + 1) {\n                var j = 0\n                while (j < patternLength && text(i + j) == pattern(j)) {\n                    j += 1\n                }\n                if (j == patternLength) {\n                    return Right(i)\n                }\n                i += 1\n            }\n            Left(\"Pattern not found\")\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123968,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmprncsuamd.scala:26)\n\tat Problem.main(tmprncsuamd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (patternLength > textLength) {\n            Left(\"Pattern is longer than text\")\n        } else {\n            var i = 0\n            var j = 0\n            while (i < textLength && j < patternLength) {\n                if (text(i) == pattern(j)) {\n                    i += 1\n                    j += 1\n                } else {\n                    i = i - j + 1\n                    j = 0\n                }\n            }\n            if (j == patternLength) {\n                Right(i - j)\n            } else {\n                Left(\"Pattern not found\")\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123932,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpdjsx30gl.scala:30)\n\tat Problem.main(tmpdjsx30gl.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        var i = 0\n        while (i < textLength - patternLength) {\n            var j = 0\n            while (j < patternLength && text(i + j) == pattern(j)) {\n                j += 1\n            }\n            if (j == patternLength) {\n                return Right(i)\n            }\n            i += 1\n        }\n        Left(\"Not found\")\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123939,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp9g044l7h.scala:22)\n\tat Problem.main(tmp9g044l7h.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        var i = 0\n        while (i <= textLength - patternLength) {\n            var j = 0\n            while (j < patternLength && text(i + j) == pattern(j)) {\n                j += 1\n            }\n            if (j == patternLength) {\n                return Right(i)\n            }\n            i += 1\n        }\n        Left(\"No match\")\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123969,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpbkmw9apb.scala:22)\n\tat Problem.main(tmpbkmw9apb.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        var i = 0\n        while (i <= textLength - patternLength) {\n            var j = 0\n            while (j < patternLength && text(i + j) == pattern(j)) {\n                j += 1\n            }\n            if (j == patternLength) {\n                return Right(i)\n            }\n            i += 1\n        }\n        Left(\"No match found\")\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123969,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpxosoif_a.scala:22)\n\tat Problem.main(tmpxosoif_a.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val n = text.length\n        val m = pattern.length\n        if (m > n) return Left(\"Pattern is longer than text\")\n        for (i <- 0 to n - m) {\n            var j = 0\n            while (j < m && text(i + j) == pattern(j)) j += 1\n            if (j == m) return Right(i)\n        }\n        Left(\"No match\")\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123970,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpye7hmah0.scala:17)\n\tat Problem.main(tmpye7hmah0.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (patternLength > textLength) return Left(\"Pattern is longer than text\")\n        for (i <- 0 to textLength - patternLength) {\n            var found = true\n            for (j <- 0 to patternLength - 1) {\n                if (text(i + j) != pattern(j)) {\n                    found = false\n                    break\n                }\n            }\n            if (found) return Right(i)\n        }\n        Left(\"Pattern not found\")\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123967,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6e37gxkf.scala:14:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m                    break\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val n = text.length\n        val m = pattern.length\n        for (i <- 0 to n - m) {\n            var j = 0\n            while (j < m && text(i + j) == pattern(j)) j += 1\n            if (j == m) return Right(i)\n        }\n        Left(\"Not found\")\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123970,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpyknqoora.scala:16)\n\tat Problem.main(tmpyknqoora.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) Left(\"Pattern length is greater than text length\")\n        else {\n            var i = 0\n            var j = 0\n            while (i < textLength && j < patternLength) {\n                if (text(i) == pattern(j)) {\n                    i += 1\n                    j += 1\n                }\n                else {\n                    i = i - j + 1\n                    j = 0\n                }\n            }\n            if (j == patternLength) Right(i - j)\n            else Left(\"Pattern not found\")\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123970,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpbze3mk0q.scala:27)\n\tat Problem.main(tmpbze3mk0q.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        var i = 0\n        var j = 0\n        while (i < textLength && j < patternLength) {\n            if (text(i) == pattern(j)) {\n                i += 1\n                j += 1\n            } else {\n                i = i - j + 1\n                j = 0\n            }\n        }\n        if (j == patternLength) {\n            Right(i - j)\n        } else {\n            Left(\"Not found\")\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123971,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpwxpq0g5x.scala:26)\n\tat Problem.main(tmpwxpq0g5x.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            Left(\"Pattern is longer than text\")\n        } else {\n            var i = 0\n            while (i <= textLength - patternLength) {\n                var j = 0\n                while (j < patternLength && text(i + j) == pattern(j)) {\n                    j += 1\n                }\n                if (j == patternLength) {\n                    return Right(i)\n                }\n                i += 1\n            }\n            Left(\"Pattern not found\")\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123968,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpzp4x0abx.scala:26)\n\tat Problem.main(tmpzp4x0abx.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) Left(\"Text is shorter than pattern\")\n        else {\n            var i = 0\n            var j = 0\n            while (i < textLength && j < patternLength) {\n                if (text(i) == pattern(j)) {\n                    i += 1\n                    j += 1\n                }\n                else {\n                    i = i - j + 1\n                    j = 0\n                }\n            }\n            if (j == patternLength) Right(i - j)\n            else Left(\"Pattern not found\")\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123958,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpybym66si.scala:27)\n\tat Problem.main(tmpybym66si.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) Left(\"Text is shorter than pattern\")\n        else {\n            var i = 0\n            var j = 0\n            var found = false\n            while (i < textLength && !found) {\n                if (text(i) == pattern(j)) {\n                    j += 1\n                    if (j == patternLength) {\n                        found = true\n                    }\n                }\n                else {\n                    j = 0\n                }\n                i += 1\n            }\n            if (found) Right(i - patternLength)\n            else Left(\"Pattern not found\")\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123970,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpj7eh52rg.scala:30)\n\tat Problem.main(tmpj7eh52rg.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (patternLength > textLength) return Left(\"Pattern is longer than text\")\n        for (i <- 0 to textLength - patternLength) {\n            var matchFound = true\n            for (j <- 0 to patternLength - 1) {\n                if (text(i + j) != pattern(j)) {\n                    matchFound = false\n                    break\n                }\n            }\n            if (matchFound) return Right(i)\n        }\n        Left(\"No match found\")\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123930,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpncfa905d.scala:14:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m                    break\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return Left(\"Pattern is longer than text\")\n        var i = 0\n        var j = 0\n        while (i < textLength) {\n            if (text(i) == pattern(j)) {\n                j += 1\n                if (j == patternLength) return Right(i - patternLength + 1)\n            }\n            else j = 0\n            i += 1\n        }\n        Left(\"Pattern not found\")\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123971,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpjmhqv9_h.scala:22)\n\tat Problem.main(tmpjmhqv9_h.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return Left(\"Pattern is longer than text\")\n        for (i <- 0 to textLength - patternLength) {\n            var matchFound = true\n            for (j <- 0 to patternLength - 1) {\n                if (text(i + j) != pattern(j)) {\n                    matchFound = false\n                    break\n                }\n            }\n            if (matchFound) return Right(i)\n        }\n        Left(\"No match found\")\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123929,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvt_kaily.scala:14:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m                    break\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) {\n            Left(\"Pattern is longer than text\")\n        } else {\n            var i = 0\n            var j = 0\n            while (i < textLength && j < patternLength) {\n                if (text(i) == pattern(j)) {\n                    i += 1\n                    j += 1\n                } else {\n                    i = i - j + 1\n                    j = 0\n                }\n            }\n            if (j == patternLength) {\n                Right(i - j)\n            } else {\n                Left(\"Pattern not found\")\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123967,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp0npbpyfu.scala:30)\n\tat Problem.main(tmp0npbpyfu.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return Left(\"Pattern is longer than text\")\n        for (i <- 0 to textLength - patternLength) {\n            var matchFound = true\n            for (j <- 0 to patternLength - 1) {\n                if (text(i + j) != pattern(j)) {\n                    matchFound = false\n                    break\n                }\n            }\n            if (matchFound) return Right(i)\n        }\n        Left(\"No match found\")\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123929,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvt_kaily.scala:14:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m                    break\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return Left(\"Text is shorter than pattern\")\n        var i = 0\n        while (i <= textLength - patternLength) {\n            var j = 0\n            while (j < patternLength && text(i + j) == pattern(j)) j += 1\n            if (j == patternLength) return Right(i)\n            i += 1\n        }\n        Left(\"Pattern not found\")\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123971,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp1rjtixfa.scala:19)\n\tat Problem.main(tmp1rjtixfa.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) Left(\"Text is shorter than pattern\")\n        else {\n            var i = 0\n            while (i <= textLength - patternLength) {\n                var j = 0\n                while (j < patternLength && text(i + j) == pattern(j)) {\n                    j += 1\n                }\n                if (j == patternLength) return Right(i)\n                i += 1\n            }\n            Left(\"Pattern not found\")\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123971,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp7vc5xfgv.scala:23)\n\tat Problem.main(tmp7vc5xfgv.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return Left(\"Pattern is longer than text\")\n        for (i <- 0 to textLength - patternLength) {\n            var matchCount = 0\n            for (j <- 0 to patternLength - 1) {\n                if (text(i + j) == pattern(j)) matchCount += 1\n            }\n            if (matchCount == patternLength) return Right(i)\n        }\n        Left(\"Pattern not found\")\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123932,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmptegg1bnw.scala:19)\n\tat Problem.main(tmptegg1bnw.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            Left(\"Text is shorter than pattern\")\n        } else {\n            var index = 0\n            while (index <= textLength - patternLength) {\n                var i = 0\n                while (i < patternLength && text(index + i) == pattern(i)) {\n                    i += 1\n                }\n                if (i == patternLength) {\n                    return Right(index)\n                }\n                index += 1\n            }\n            Left(\"Pattern not found\")\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123971,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpi9w5r871.scala:26)\n\tat Problem.main(tmpi9w5r871.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        if (textLength < patternLength) return Left(\"Pattern is longer than text\")\n        for (i <- 0 to textLength - patternLength) {\n            var matchFound = true\n            for (j <- 0 to patternLength - 1) {\n                if (text(i + j) != pattern(j)) {\n                    matchFound = false\n                    break\n                }\n            }\n            if (matchFound) return Right(i)\n        }\n        Left(\"No match found\")\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123969,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpb7yfs52g.scala:14:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m                    break\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return Left(\"Pattern is longer than text\")\n        for (i <- 0 to textLength - patternLength) {\n            var matchFound = true\n            for (j <- 0 to patternLength - 1) {\n                if (text(i + j) != pattern(j)) {\n                    matchFound = false\n                    break\n                }\n            }\n            if (matchFound) return Right(i)\n        }\n        Left(\"No match found\")\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1665510636,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpcc5fz3kv.scala:14:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m                    break\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return Left(\"Pattern is longer than text\")\n        var i = 0\n        while (i <= textLength - patternLength) {\n            var j = 0\n            while (j < patternLength && text(i + j) == pattern(j)) j += 1\n            if (j == patternLength) return Right(i)\n            i += 1\n        }\n        Left(\"Pattern not found\")\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1665510638,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpmtulxahe.scala:19)\n\tat Problem.main(tmpmtulxahe.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return Left(\"Pattern is longer than text\")\n        for (i <- 0 to textLength - patternLength) {\n            var matchCount = 0\n            for (j <- 0 to patternLength - 1) {\n                if (text(i + j) == pattern(j)) matchCount += 1\n            }\n            if (matchCount == patternLength) return Right(i)\n        }\n        Left(\"Pattern not found\")\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123932,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmptegg1bnw.scala:19)\n\tat Problem.main(tmptegg1bnw.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) {\n            Left(\"Pattern is longer than text\")\n        } else {\n            var i = 0\n            var j = 0\n            while (i < textLength && j < patternLength) {\n                if (text(i) == pattern(j)) {\n                    i += 1\n                    j += 1\n                } else {\n                    i = i - j + 1\n                    j = 0\n                }\n            }\n            if (j == patternLength) {\n                Right(i - j)\n            } else {\n                Left(\"Pattern not found\")\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123967,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp0npbpyfu.scala:30)\n\tat Problem.main(tmp0npbpyfu.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return Left(\"Pattern is longer than text\")\n        for (i <- 0 to textLength - patternLength) {\n            if (text.substring(i, i + patternLength) == pattern) return Right(i)\n        }\n        Left(\"No match found\")\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123972,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp7xfzorun.scala:15)\n\tat Problem.main(tmp7xfzorun.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        var i = 0\n        while (i < textLength - patternLength + 1) {\n            var j = 0\n            while (j < patternLength && text(i + j) == pattern(j)) j += 1\n            if (j == patternLength) return Right(i)\n            i += 1\n        }\n        Left(\"Not found\")\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123971,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpt0xgt02_.scala:18)\n\tat Problem.main(tmpt0xgt02_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return Left(\"Text is shorter than pattern\")\n        var i = 0\n        while (i < textLength - patternLength + 1) {\n            var j = 0\n            while (j < patternLength && text(i + j) == pattern(j)) j += 1\n            if (j == patternLength) return Right(i)\n            i += 1\n        }\n        Left(\"Pattern not found\")\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123949,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmppvtacq1m.scala:19)\n\tat Problem.main(tmppvtacq1m.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) Left(\"Text is shorter than pattern\")\n        else {\n            var i = 0\n            while (i <= textLength - patternLength) {\n                var j = 0\n                while (j < patternLength && text(i + j) == pattern(j)) {\n                    j += 1\n                }\n                if (j == patternLength) return Right(i)\n                i += 1\n            }\n            Left(\"Pattern not found\")\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123971,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp7vc5xfgv.scala:23)\n\tat Problem.main(tmp7vc5xfgv.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return Left(\"Pattern is longer than text\")\n        for (i <- 0 to textLength - patternLength) {\n            if (text.substring(i, i + patternLength) == pattern) return Right(i)\n        }\n        Left(\"Pattern not found\")\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123972,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpeask5q64.scala:15)\n\tat Problem.main(tmpeask5q64.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        var i = 0\n        while (i <= textLength - patternLength) {\n            var j = 0\n            while (j < patternLength && text(i + j) == pattern(j)) {\n                j += 1\n            }\n            if (j == patternLength) return Right(i)\n            i += 1\n        }\n        Left(\"No match found\")\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123939,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp_s8n3h1e.scala:20)\n\tat Problem.main(tmp_s8n3h1e.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (patternLength > textLength) return Left(\"Pattern is longer than text\")\n        var i = 0\n        var j = 0\n        while (i < textLength && j < patternLength) {\n            if (text(i) == pattern(j)) {\n                i += 1\n                j += 1\n            } else {\n                i = i - j + 1\n                j = 0\n            }\n        }\n        if (j == patternLength) return Right(i - patternLength)\n        else return Left(\"Pattern not found\")\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123972,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpm4i_q0b1.scala:24)\n\tat Problem.main(tmpm4i_q0b1.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (patternLength > textLength) return Left(\"Pattern length is greater than text length\")\n        var i = 0\n        while (i <= textLength - patternLength) {\n            var j = 0\n            while (j < patternLength && text(i + j) == pattern(j)) j += 1\n            if (j == patternLength) return Right(i)\n            i += 1\n        }\n        Left(\"Pattern not found\")\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123973,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpkrdsm7e6.scala:19)\n\tat Problem.main(tmpkrdsm7e6.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return Left(\"Pattern is longer than text\")\n        for (i <- 0 to textLength - patternLength) {\n            var matchFound = true\n            for (j <- 0 to patternLength - 1) {\n                if (text(i + j) != pattern(j)) {\n                    matchFound = false\n                    break\n                }\n            }\n            if (matchFound) return Right(i)\n        }\n        Left(\"No match found\")\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1665510636,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpcc5fz3kv.scala:14:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m                    break\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (patternLength > textLength) Left(\"Pattern is longer than text\")\n        else {\n            var i = 0\n            var j = 0\n            var found = false\n            while (i < textLength && j < patternLength) {\n                if (text(i) == pattern(j)) {\n                    i += 1\n                    j += 1\n                }\n                else {\n                    i = i - j + 1\n                    j = 0\n                }\n            }\n            if (j == patternLength) Right(i - j)\n            else Left(\"Pattern not found\")\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123973,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp6kd6a6he.scala:28)\n\tat Problem.main(tmp6kd6a6he.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (patternLength > textLength) return Left(\"Pattern is longer than text\")\n        for (i <- 0 to textLength - patternLength) {\n            var found = true\n            for (j <- 0 to patternLength - 1) {\n                if (text(i + j) != pattern(j)) {\n                    found = false\n                    break\n                }\n            }\n            if (found) return Right(i)\n        }\n        Left(\"Pattern not found\")\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123967,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6e37gxkf.scala:14:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m                    break\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return Left(\"Text is shorter than pattern\")\n        for (i <- 0 to textLength - patternLength) {\n            var matchCount = 0\n            for (j <- 0 to patternLength - 1) {\n                if (text(i + j) == pattern(j)) matchCount += 1\n            }\n            if (matchCount == patternLength) return Right(i)\n        }\n        Left(\"No match found\")\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1665510639,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpv0ddlx01.scala:19)\n\tat Problem.main(tmpv0ddlx01.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) Left(\"Pattern is longer than text\")\n        else {\n            var i = 0\n            var j = 0\n            while (i < textLength && j < patternLength) {\n                if (text(i) == pattern(j)) {\n                    i += 1\n                    j += 1\n                }\n                else {\n                    i = i - j + 1\n                    j = 0\n                }\n            }\n            if (j == patternLength) Right(i - j)\n            else Left(\"Pattern not found\")\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123939,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmplg5gwnyf.scala:27)\n\tat Problem.main(tmplg5gwnyf.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return Left(\"Pattern is longer than text\")\n        var i = 0\n        while (i < textLength - patternLength) {\n            var j = 0\n            while (j < patternLength && text(i + j) == pattern(j)) {\n                j += 1\n            }\n            if (j == patternLength) return Right(i)\n            i += 1\n        }\n        Left(\"No match found\")\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123973,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpduh6i0gt.scala:21)\n\tat Problem.main(tmpduh6i0gt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return Left(\"Text is shorter than pattern\")\n        var i = 0\n        while (i < textLength - patternLength + 1) {\n            var j = 0\n            while (j < patternLength && text(i + j) == pattern(j)) j += 1\n            if (j == patternLength) return Right(i)\n            i += 1\n        }\n        Left(\"Pattern not found\")\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123949,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmppvtacq1m.scala:19)\n\tat Problem.main(tmppvtacq1m.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val n = text.length\n        val m = pattern.length\n        if (m > n) return Left(\"Pattern is longer than text\")\n        for (i <- 0 to n - m) {\n            var j = 0\n            while (j < m && text(i + j) == pattern(j)) {\n                j += 1\n            }\n            if (j == m) return Right(i)\n        }\n        Left(\"Pattern not found\")\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123973,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpmwon11us.scala:19)\n\tat Problem.main(tmpmwon11us.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            Left(\"Pattern is longer than text\")\n        } else {\n            var i = 0\n            while (i <= textLength - patternLength) {\n                var j = 0\n                while (j < patternLength && pattern(j) == text(i + j)) {\n                    j += 1\n                }\n                if (j == patternLength) {\n                    return Right(i)\n                }\n                i += 1\n            }\n            Left(\"Pattern not found\")\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123973,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpqtpp5k0r.scala:26)\n\tat Problem.main(tmpqtpp5k0r.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) Left(\"Pattern is longer than text\")\n        else {\n            var i = 0\n            var j = 0\n            while (i < textLength && j < patternLength) {\n                if (text(i) == pattern(j)) {\n                    i += 1\n                    j += 1\n                }\n                else {\n                    i = i - j + 1\n                    j = 0\n                }\n            }\n            if (j == patternLength) Right(i - j)\n            else Left(\"Pattern not found\")\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1665510638,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp2t4ud5u_.scala:27)\n\tat Problem.main(tmp2t4ud5u_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return Left(\"Pattern is longer than text\")\n        for (i <- 0 to textLength - patternLength) {\n            val subText = text.substring(i, i + patternLength)\n            if (subText == pattern) return Right(i)\n        }\n        Left(\"Pattern not found\")\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123974,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpkj9q1w27.scala:16)\n\tat Problem.main(tmpkj9q1w27.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (patternLength > textLength) Left(\"Pattern is longer than text\")\n        else {\n            var i = 0\n            var j = 0\n            while (i < textLength && j < patternLength) {\n                if (text(i) == pattern(j)) {\n                    i += 1\n                    j += 1\n                }\n                else {\n                    i = i - j + 1\n                    j = 0\n                }\n            }\n            if (j == patternLength) Right(i - j)\n            else Left(\"Pattern not found\")\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123961,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp4yzp5uo7.scala:27)\n\tat Problem.main(tmp4yzp5uo7.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) {\n            Left(\"Pattern is longer than text\")\n        } else {\n            var i = 0\n            var j = 0\n            while (i < textLength && j < patternLength) {\n                if (text(i) == pattern(j)) {\n                    i += 1\n                    j += 1\n                } else {\n                    i = i - j + 1\n                    j = 0\n                }\n            }\n            if (j == patternLength) {\n                Right(i - j)\n            } else {\n                Left(\"Pattern not found\")\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123967,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp0npbpyfu.scala:30)\n\tat Problem.main(tmp0npbpyfu.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n        val n = text.length\n        val m = pattern.length\n        var i = 0\n        var j = 0\n        while (i < n && j < m) {\n            if (text(i) == pattern(j)) {\n                i += 1\n                j += 1\n            }\n            else {\n                i = i - j + 1\n                j = 0\n            }\n        }\n        if (j == m) Right(i - m)\n        else Left(\"No match\")\n    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
      "timestamp": 1666123974,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpjia55a25.scala:24)\n\tat Problem.main(tmpjia55a25.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    }
  ]
}