{
  "name": "mbpp_735_toggle_middle_bits",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    def toggleMiddleBits(n : Long) : Long = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_735_toggle_middle_bits.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(toggleMiddleBits((9l)) == (15l));\n    assert(toggleMiddleBits((10l)) == (12l));\n    assert(toggleMiddleBits((11l)) == (13l));\n    assert(toggleMiddleBits((65l)) == (127l));\n    assert(toggleMiddleBits((77l)) == (115l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val firstBit = n & 1\n        val lastBit = n & (1 << 63)\n        val middleBits = n & ((1 << 63) - 1) ^ ((1 << 62) - 1)\n        (firstBit | middleBits | lastBit)",
    "        val firstBit = n & 1\n        val lastBit = n & (1 << 63)\n        val mask = (1 << 63) - 1\n        val middleBits = n & mask\n        val toggledMiddleBits = middleBits ^ mask\n        firstBit | toggledMiddleBits | lastBit",
    "        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        n ^ mask",
    "        val firstBit = n & 1\n        val lastBit = n & (1 << 63)\n        val mask = (1 << 63) - 1\n        val middleBits = n & mask\n        val toggledMiddleBits = middleBits ^ mask\n        firstBit | toggledMiddleBits | lastBit",
    "        val mask = (1L << (n.bitLength - 2)) - 1\n        n ^ mask",
    "        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        n ^ mask",
    "        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        n ^ mask",
    "        val firstBit = n & 1\n        val lastBit = n & (1 << 63)\n        val mask = (1 << 63) - 1\n        val middleBits = n & mask\n        val toggledMiddleBits = middleBits ^ mask\n        firstBit | toggledMiddleBits | lastBit",
    "        val firstBit = n & 1\n        val lastBit = (n >> 1) & 1\n        val mask = (1L << 63) | (1L << 62)\n        val middleBits = n & ~mask\n        val toggledMiddleBits = middleBits ^ mask\n        (firstBit | (toggledMiddleBits << 1) | lastBit)",
    "        val firstBit = n & 1\n        val lastBit = n & (1 << 63)\n        val mask = (1 << 63) - 1\n        val middleBits = n & mask\n        val toggledMiddleBits = middleBits ^ mask\n        toggledMiddleBits | firstBit | lastBit",
    "        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        n ^ mask",
    "        val firstBit = n & 1\n        val lastBit = (n >> 1) & 1\n        val mask = (1L << (log(n) / log(2)).toInt) - 1\n        val middleBits = n & mask\n        val toggledMiddleBits = middleBits ^ mask\n        (firstBit << 1) | toggledMiddleBits | (lastBit << (log(n) / log(2)).toInt)",
    "        val firstBit = n & 1\n        val lastBit = (n >> 1) & 1\n        val mask = (1L << 63) - 1\n        val middleBits = mask ^ (1L << 63) ^ (1L << 62)\n        val middleBitsToggled = middleBits ^ n\n        (middleBitsToggled & mask) | (firstBit << 63) | (lastBit << 62)",
    "        var m = n\n        var i = 1\n        while (i < 63) {\n            m ^= (1L << i)\n            i += 2\n        }\n        m",
    "        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        n ^ mask",
    "        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        n ^ mask",
    "        val binary = n.toBinaryString\n        val firstBit = binary.charAt(0)\n        val lastBit = binary.charAt(binary.length - 1)\n        val middleBits = binary.substring(1, binary.length - 1)\n        val newMiddleBits = middleBits.map(x => if (x == '0') '1' else '0')\n        val newBinary = firstBit + newMiddleBits + lastBit\n        Long.parseLong(newBinary, 2)",
    "        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        n ^ mask",
    "        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        n ^ mask",
    "        val s = n.toBinaryString\n        val l = s.length\n        val first = s.substring(0, 1)\n        val last = s.substring(l - 1, l)\n        val middle = s.substring(1, l - 1).map(c => if (c == '0') '1' else '0')\n        (first + middle + last).toLong(2)",
    "        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        n ^ mask",
    "        val mask = (1L << n.toBinaryString.length - 2) - 1\n        n ^ mask",
    "        var x = n\n        var y = 1L\n        while (x > 0) {\n            x = x >> 1\n            y = y << 1\n        }\n        y = y - 1\n        y = y - 2\n        n = n ^ y\n        n",
    "        val s = n.toBinaryString\n        val sb = new StringBuilder\n        sb.append(s.charAt(0))\n        for (i <- 1 until s.length - 1) {\n            if (s.charAt(i) == '1') sb.append('0')\n            else sb.append('1')\n        }\n        sb.append(s.charAt(s.length - 1))\n        return Integer.parseInt(sb.toString, 2).toLong",
    "        val mask = (1L << n.toBinaryString.length - 2) - 1\n        n ^ mask",
    "        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        n ^ mask",
    "        val firstBit = n & 1\n        val lastBit = (n >> 1) & 1\n        val middleBits = n >> 2\n        val newMiddleBits = middleBits ^ ((1 << (middleBits.toBinaryString.length - 1)) - 1)\n        (newMiddleBits << 2) | (firstBit << 1) | lastBit",
    "        val binaryString = n.toBinaryString\n        val length = binaryString.length\n        val firstBit = binaryString.charAt(0)\n        val lastBit = binaryString.charAt(length - 1)\n        val middleBits = binaryString.substring(1, length - 1)\n        val newMiddleBits = middleBits.map(bit => if (bit == '0') '1' else '0')\n        val newBinaryString = firstBit + newMiddleBits + lastBit\n        BigInt(newBinaryString, 2).toLong",
    "        var x = n\n        var i = 1\n        while (i < 63) {\n            x ^= (1L << i)\n            i += 2\n        }\n        x",
    "        val mask = (1L << 63) | 1\n        var x = n\n        while ((x & mask) == 0) x <<= 1\n        x ^= (x - 1)\n        while ((x & mask) == 0) x <<= 1\n        x",
    "        val firstBit = n & 1\n        val lastBit = n & (1 << (63 - n.toBinaryString.length))\n        val middleBits = n & ~(firstBit | lastBit)\n        (firstBit | middleBits.toBinaryString.map(c => if (c == '1') '0' else '1').mkString.toLong(2) | lastBit)",
    "        val firstBit = n & 1\n        val lastBit = (n >> 1) & 1\n        val mask = (1L << (n.toBinaryString.length - 1)) - 1\n        val middleBits = n & mask\n        val toggledMiddleBits = middleBits ^ mask\n        (firstBit << 1) | toggledMiddleBits | (lastBit << (n.toBinaryString.length - 1))",
    "        val firstBit = n & 1\n        val lastBit = (n >> 1) & 1\n        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        (n ^ mask) | (firstBit << (n.toBinaryString.length - 2)) | (lastBit << 1)",
    "        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        n ^ mask",
    "        val firstBit = n & 1\n        val lastBit = n & (1 << (63))\n        val mask = (1L << 63) - 1\n        val middleBits = n & mask\n        val toggledMiddleBits = middleBits ^ mask\n        firstBit | toggledMiddleBits | lastBit",
    "        val firstBit = n & 1\n        val lastBit = (n >> 1) & 1\n        val mask = (1L << 63) | (1L << 62)\n        val result = (n ^ mask) | (firstBit << 62) | (lastBit << 63)\n        result",
    "        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        n ^ mask",
    "        var m = n\n        var i = 1\n        while (i < 63) {\n            m ^= (1L << i)\n            i += 2\n        }\n        m",
    "        val firstBit = n & 1\n        val lastBit = (n >> 1) & 1\n        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        val middleBits = n & mask\n        val toggledMiddleBits = middleBits ^ mask\n        (firstBit << 1) | toggledMiddleBits | (lastBit << (n.toBinaryString.length - 2))",
    "        val firstBit = n & 1\n        val lastBit = (n >> 1) & 1\n        val middleBits = n >> 2\n        val toggledMiddleBits = middleBits ^ ((1L << (middleBits.toBinaryString.length - 1)) - 1)\n        (toggledMiddleBits << 2) | (firstBit << 1) | lastBit",
    "        val firstBit = n & 1\n        val lastBit = (n >> 1) & 1\n        val mask = (1L << 63) - 1\n        val middleBits = n & mask\n        val middleBitsToggled = middleBits ^ mask\n        (middleBitsToggled << 1) | (lastBit << 1) | firstBit",
    "        val s = n.toBinaryString\n        val l = s.length\n        val first = s.substring(0, 1)\n        val last = s.substring(l - 1, l)\n        val middle = s.substring(1, l - 1).map(x => if (x == '1') '0' else '1')\n        (first + middle + last).toLong(2)",
    "        val firstBit = n & 1\n        val lastBit = (n >> 1) & 1\n        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        (n ^ mask) | (firstBit << (n.toBinaryString.length - 2)) | (lastBit << 1)",
    "        val firstBit = n & 1\n        val lastBit = (n >> 1) & 1\n        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        (n ^ mask) | (firstBit << (n.toBinaryString.length - 2)) | (lastBit << 1)",
    "        val firstBit = n & 1\n        val lastBit = (n >> (63)) & 1\n        val mask = (1L << 63) - 1\n        val middleBits = (n & mask) >> 1\n        val toggledMiddleBits = middleBits ^ ((1L << 62) - 1)\n        (firstBit << 62) | (toggledMiddleBits << 1) | lastBit",
    "        val firstBit = n & 1\n        val lastBit = (n >> 1) & 1\n        val mask = (1 << (n.toBinaryString.length - 2)) - 1\n        (n ^ mask) | (firstBit << (n.toBinaryString.length - 2)) | (lastBit << 1)",
    "        var m = n\n        var i = 1\n        while (i < 63) {\n            m = m ^ (1L << i)\n            i += 2\n        }\n        m",
    "        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        n ^ mask",
    "        val firstBit = (n & 1)\n        val lastBit = (n & (1 << 63))\n        val mask = (1 << 63) - 1\n        val middleBits = (n & mask) >> 1\n        val toggledMiddleBits = middleBits ^ mask\n        firstBit | (toggledMiddleBits << 1) | lastBit",
    "        val firstBit = n & 1\n        val lastBit = (n >> 1) & 1\n        val mask = (1L << (n.toBinaryString.length - 1)) - 1\n        val middleBits = n & mask\n        val toggledMiddleBits = middleBits ^ mask\n        (firstBit << 1) | toggledMiddleBits | (lastBit << (n.toBinaryString.length - 1))",
    "        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        n ^ mask",
    "        val firstBit = n & 1\n        val lastBit = (n >> 1) & 1\n        val middleBits = (n >> 2) & ((1 << 62) - 1)\n        val toggledMiddleBits = middleBits ^ ((1 << 62) - 1)\n        (toggledMiddleBits << 2) | (lastBit << 1) | firstBit",
    "        val mask = (1L << n.toBinaryString.length - 2) - 1\n        n ^ mask",
    "        val firstBit = n & 1\n        val lastBit = n & (1 << (n.toBinaryString.length - 1))\n        val middleBits = n & ((1 << (n.toBinaryString.length - 2)) - 1)\n        val middleBitsToggled = middleBits ^ ((1 << (n.toBinaryString.length - 2)) - 1)\n        firstBit | middleBitsToggled | lastBit",
    "        val firstBit = n & 1\n        val lastBit = (n >> 1) & 1\n        val mask = (1L << (63 - 1)) - 1\n        val middleBits = n & mask\n        val toggledMiddleBits = middleBits ^ mask\n        (firstBit << 63) | (toggledMiddleBits << 1) | lastBit",
    "        val firstBit = n & 1\n        val lastBit = (n >> 1) & 1\n        val mask = (1L << (63 - 1)) - 1\n        val middleBits = n & mask\n        val toggledMiddleBits = middleBits ^ mask\n        (firstBit | (toggledMiddleBits << 1) | lastBit)",
    "        val firstBit = n & 1\n        val lastBit = (n >> 1) & 1\n        val mask = ((1L << 63) - 1) - 1\n        val toggled = n ^ mask\n        (toggled | (firstBit << 63) | (lastBit << 1))",
    "        val mask = (1L << n.toBinaryString.length - 2) - 1\n        n ^ mask",
    "        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        n ^ mask",
    "        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        n ^ mask",
    "        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        n ^ mask",
    "        val firstBit = n & 1\n        val lastBit = (n >> 1) & 1\n        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        (n ^ mask) | (firstBit << (n.toBinaryString.length - 2)) | (lastBit << 1)",
    "        val firstBit = n & 1\n        val lastBit = n & (1 << 31)\n        val mask = (1 << 31) - 1\n        val middleBits = n & mask\n        val middleBitsToggled = middleBits ^ mask\n        firstBit | middleBitsToggled | lastBit",
    "        val firstBit = n & 1\n        val lastBit = n & (1 << (63))\n        val mask = (1 << 63) - 1\n        val middleBits = n & mask\n        val toggledMiddleBits = middleBits ^ mask\n        firstBit | toggledMiddleBits | lastBit",
    "        val firstBit = n & 1\n        val lastBit = (n >> 1) & 1\n        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        val middleBits = n & mask\n        val toggledMiddleBits = middleBits ^ mask\n        (firstBit << 1) + toggledMiddleBits + (lastBit << (n.toBinaryString.length - 2))",
    "        val firstBit = n & 1\n        val lastBit = n & (1 << (n.toBinaryString.length - 1))\n        val middleBits = n & ((1 << (n.toBinaryString.length - 2)) - 1)\n        firstBit | (middleBits ^ ((1 << (n.toBinaryString.length - 2)) - 1)) | lastBit",
    "        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        n ^ mask",
    "        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        n ^ mask",
    "        val s = n.toBinaryString\n        val l = s.length\n        val m = (l - 2) / 2\n        val s1 = s.substring(0, m)\n        val s2 = s.substring(m, l - m).map(c => if (c == '0') '1' else '0')\n        val s3 = s.substring(l - m, l)\n        (s1 + s2 + s3).toLong(2)",
    "        val firstBit = n & 1\n        val lastBit = (n >> 1) & 1\n        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        val middleBits = n & mask\n        val toggledMiddleBits = middleBits ^ mask\n        (firstBit << 1) | toggledMiddleBits | (lastBit << (n.toBinaryString.length - 2))",
    "        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        n ^ mask",
    "        val firstBit = n & 1\n        val lastBit = (n >> 1) & 1\n        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        val middleBits = n & mask\n        val toggledMiddleBits = middleBits ^ mask\n        (firstBit << (n.toBinaryString.length - 1)) | toggledMiddleBits | lastBit",
    "        val firstBit = n & 1\n        val lastBit = (n >> 1) & 1\n        val mask = (1L << (63 - 1)) - 1\n        val result = n ^ mask\n        (result | (firstBit << 63) | (lastBit << 1))",
    "        val b = n.toBinaryString\n        val s = b.substring(1, b.length - 1)\n        val t = s.map(c => if (c == '0') '1' else '0')\n        val u = \"1\" + t + \"1\"\n        u.toLong(2)",
    "        val firstBit = n & 1\n        val lastBit = (n >> 1) & 1\n        val middleBits = n >> 2\n        val toggledMiddleBits = middleBits ^ ((1 << (middleBits.toString(2).length - 1)) - 1)\n        (toggledMiddleBits << 2) | (firstBit << 1) | lastBit",
    "        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        n ^ mask",
    "        var m = n\n        var i = 1\n        while (i < 63) {\n            m = m ^ (1L << i)\n            i += 2\n        }\n        return m",
    "        if (n == 0) return 0\n        var x = n\n        var i = 0\n        var j = 0\n        while ((x & 1) == 0) {\n            x = x >> 1\n            i += 1\n        }\n        while ((x & 1) == 1) {\n            x = x >> 1\n            j += 1\n        }\n        var p = i + j\n        var mask = (1 << p) - 1\n        return n ^ mask",
    "        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        n ^ mask",
    "        val firstBit = n & 1\n        val lastBit = (n >> 1) & 1\n        val mask = (1L << 63) - 1\n        val result = n ^ mask\n        result | (firstBit << 63) | (lastBit << 1)",
    "        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        n ^ mask",
    "        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        return n ^ mask",
    "        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        n ^ mask",
    "        val firstBit = n & 1\n        val lastBit = n & (1 << (n.toBinaryString.length - 1))\n        val middleBits = n & ((1 << (n.toBinaryString.length - 1)) - 1)\n        val middleBitsToggled = middleBits ^ ((1 << (n.toBinaryString.length - 2)) - 1)\n        firstBit | middleBitsToggled | lastBit",
    "        val firstBit = n & 1\n        val lastBit = (n >> 1) & 1\n        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        val middleBits = n & mask\n        val toggledMiddleBits = middleBits ^ mask\n        (firstBit << 1) | (toggledMiddleBits << 1) | lastBit",
    "        val firstBit = n & 1\n        val lastBit = (n >> 1) & 1\n        val mask = (1L << 63) - 1\n        val middleBits = n & mask\n        val toggledMiddleBits = middleBits ^ mask\n        (firstBit << 63) | (toggledMiddleBits << 1) | lastBit",
    "        val firstBit = n & 1\n        val lastBit = n & (1 << (63 - 1))\n        val mask = (1 << 63) - 1\n        val middleBits = n & (mask ^ (1 | lastBit))\n        val toggledMiddleBits = middleBits ^ mask\n        firstBit | toggledMiddleBits | lastBit",
    "        val firstBit = n & 1\n        val lastBit = (n >> 1) & 1\n        val mask = (1L << 63) - 1\n        val maskWithoutFirstAndLast = mask ^ (1L << 63) ^ 1\n        val toggled = n ^ maskWithoutFirstAndLast\n        toggled | (firstBit << 63) | lastBit",
    "        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        n ^ mask",
    "        val firstBit = n & 1\n        val lastBit = n & (1 << (63))\n        val mask = (1 << 63) - 1\n        val middleBits = n & mask\n        val toggledMiddleBits = middleBits ^ mask\n        firstBit | toggledMiddleBits | lastBit",
    "        val firstBit = n & 1\n        val lastBit = n & (1 << 63)\n        val mask = (1 << 63) - 1\n        val middleBits = n & mask\n        val toggledMiddleBits = middleBits ^ mask\n        firstBit | toggledMiddleBits | lastBit",
    "        val firstBit = n & 1\n        val lastBit = (n >> 1) & 1\n        val mask = (1L << 63) - 1\n        val middleBits = (n >> 2) & mask\n        val toggledMiddleBits = middleBits ^ mask\n        (firstBit << 63) | (toggledMiddleBits << 2) | (lastBit << 1) | firstBit",
    "        val mask = (1L << n.toBinaryString.length - 2) - 1\n        n ^ mask",
    "        val s = n.toBinaryString\n        val l = s.length\n        val first = s.substring(0, 1)\n        val last = s.substring(l - 1, l)\n        val middle = s.substring(1, l - 1).map(c => if (c == '0') '1' else '0')\n        (first + middle + last).toLong(2)",
    "        val firstBit = n & 1\n        val lastBit = n & (1 << (n.toBinaryString.length - 1))\n        val mask = (1 << (n.toBinaryString.length - 2)) - 1\n        (n ^ mask) | (firstBit << (n.toBinaryString.length - 2)) | lastBit",
    "        val firstBit = n & 1\n        val lastBit = (n >> 1) & 1\n        val mask = (1L << 63) - 1\n        val middleBits = (n >> 2) & mask\n        (firstBit | (middleBits ^ mask) | (lastBit << 1))",
    "        val firstBit = n & 1\n        val lastBit = (n >> 1) & 1\n        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        (n ^ mask) | (firstBit << (n.toBinaryString.length - 2)) | (lastBit << 1)",
    "        val firstBit = (n & 1)\n        val lastBit = (n >> 63) & 1\n        val mask = (1L << 63) - 1\n        val middleBits = (n & mask) ^ mask\n        (firstBit | middleBits | (lastBit << 63))",
    "        val mask = (1L << n.toBinaryString.length - 2) - 1\n        n ^ mask",
    "        val firstBit = n & 1\n        val lastBit = (n >> 1) & 1\n        val mask = (1L << 63) - 1\n        val middleBits = n & mask\n        val toggledMiddleBits = middleBits ^ mask\n        (toggledMiddleBits << 1) | (lastBit << 1) | firstBit",
    "        val firstBit = n & 1\n        val lastBit = (n >> 1) & 1\n        val mask = (1L << (63 - 1)) | 1\n        val middleBits = n & ~mask\n        val toggledMiddleBits = middleBits ^ (mask >> 1)\n        (toggledMiddleBits << 1) | (lastBit << 1) | firstBit",
    "        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        n ^ mask",
    "        var m = n\n        var i = 1\n        while (i < 63) {\n            m = m ^ (1 << i)\n            i += 2\n        }\n        return m",
    "        var m = n\n        var i = 1\n        while (i < 63) {\n            m = m ^ (1 << i)\n            i += 2\n        }\n        return m",
    "        var x = n\n        var i = 1\n        while (i < 63) {\n            x = x ^ (1 << i)\n            i += 2\n        }\n        x",
    "        val mask = (1L << n.toBinaryString.length - 2) - 1\n        n ^ mask",
    "        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        n ^ mask",
    "        val mask = (1L << 63) - 1\n        val firstBit = n & 1\n        val lastBit = n & (1L << 62)\n        val middleBits = n & mask\n        val toggledMiddleBits = middleBits ^ mask\n        firstBit | toggledMiddleBits | lastBit",
    "        val firstBit = n & 1\n        val lastBit = (n >> 1) & 1\n        val mask = (1L << 63) - 1\n        val middleBits = n & mask\n        val toggledMiddleBits = middleBits ^ mask\n        (toggledMiddleBits << 1) | (firstBit << 1) | lastBit",
    "        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        n ^ mask",
    "        val firstBit = n & 1\n        val lastBit = (n >> 1) & 1\n        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        (n ^ mask) | (firstBit << (n.toBinaryString.length - 2)) | (lastBit << 1)",
    "        val firstBit = n & 1\n        val lastBit = (n >> 1) & 1\n        val mask = (1L << (63 - 1)) - 1\n        val middleBits = n & mask\n        val toggledMiddleBits = middleBits ^ mask\n        (firstBit << 63) + (toggledMiddleBits << 1) + lastBit",
    "        val firstBit = (n & 1)\n        val lastBit = (n & (1 << 63)) >> 63\n        val middleBits = (n >> 1) << 1\n        firstBit | middleBits | lastBit",
    "        val binary = n.toBinaryString\n        val firstBit = binary.head\n        val lastBit = binary.last\n        val middleBits = binary.tail.init\n        val toggledMiddleBits = middleBits.map(x => if (x == '1') '0' else '1')\n        val toggledBinary = firstBit + toggledMiddleBits + lastBit\n        Long.parseLong(toggledBinary, 2)",
    "        val firstBit = n & 1\n        val lastBit = (n >> 1) & 1\n        val mask = (1L << 63) - 1\n        val middleBits = n & mask\n        val toggledMiddleBits = middleBits ^ mask\n        (firstBit | (toggledMiddleBits << 1) | lastBit)",
    "        val firstBit = (n & 1) << 63\n        val lastBit = (n & (1 << 63)) >> 63\n        val middleBits = n & ((1 << 63) - 3)\n        firstBit | middleBits | lastBit",
    "        val mask = (1L << (n.toBinaryString.length - 1)) - 1\n        n ^ mask",
    "        val firstBit = n & 1\n        val lastBit = n & (1 << 63)\n        val mask = (1 << 63) - 1\n        val middleBits = n & mask\n        val toggledMiddleBits = middleBits ^ mask\n        firstBit | toggledMiddleBits | lastBit",
    "        val firstBit = n & 1\n        val lastBit = (n >> 1) & 1\n        val middleBits = n >> 2\n        val toggledMiddleBits = middleBits ^ ((1 << (middleBits.toString(2).length - 1)) - 1)\n        (toggledMiddleBits << 2) | (firstBit << 1) | lastBit",
    "        val firstBit = n & 1\n        val lastBit = (n >> 1) & 1\n        val mask = (1L << 63) | (1L << 62) | (1L << 61) | (1L << 60) | (1L << 59) | (1L << 58) | (1L << 57) | (1L << 56) | (1L << 55) | (1L << 54) | (1L << 53) | (1L << 52) | (1L << 51) | (1L << 50) | (1L << 49) | (1L << 48) | (1L << 47) | (1L << 46) | (1L << 45) | (1L << 44) | (1L << 43) | (1L << 42) | (1L << 41) | (1L << 40) | (1L << 39) | (1L << 38) | (1L << 37) | (1L << 36) | (1L << 35) | (1L << 34) | (1L << 33) | (1L << 32) | (1L << 31) | (1L << 30) | (1L << 29) | (1L << 28) | (1L << 27) | (1L << 26) | (1L << 25) | (1L << 24) | (1L << 23) | (1L << 22) | (1L << 21) | (1L << 20) | (1L << 19) | (1L << 18) | (1L << 17) | (1L << 16) | (1L << 15) | (1L << 14) | (1L << 13) | (1L << 12) | (1L << 11) | (1L << 10) | (1L << 9) | (1L << 8) | (1L << 7) | (1L << 6) | (1L << 5) | (1L << 4) | (1L << 3) | (1L << 2) | (1L << 1)\n        val toggled = n ^ mask\n        (firstBit << 63) | (toggled << 1) | lastBit",
    "        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        n ^ mask",
    "        val firstBit = n & 1\n        val lastBit = (n >> 1) & 1\n        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        (n ^ mask) | (firstBit << (n.toBinaryString.length - 2)) | (lastBit << 1)",
    "        val firstBit = n & 1\n        val lastBit = (n >> 1) & 1\n        val middleBits = n >> 2\n        val toggledMiddleBits = middleBits ^ ((1L << (middleBits.toBinaryString.length - 1)) - 1)\n        (toggledMiddleBits << 2) + (lastBit << 1) + firstBit",
    "        val firstBit = n & 1\n        val lastBit = (n >> 1) & 1\n        val mask = (1L << 63) | (1L << 62)\n        val result = n ^ mask\n        (result | (firstBit << 1) | lastBit)",
    "        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        n ^ mask",
    "        val binary = n.toBinaryString\n        val length = binary.length\n        val first = binary.substring(0, 1)\n        val last = binary.substring(length - 1, length)\n        val middle = binary.substring(1, length - 1)\n        val middleToggled = middle.map(x => if (x == '0') '1' else '0')\n        (first + middleToggled + last).toLong(2)",
    "        val firstBit = n & 1\n        val lastBit = n & (1 << (n.toBinaryString.length - 1))\n        val middleBits = n & ((1 << (n.toBinaryString.length - 2)) - 1)\n        val toggledMiddleBits = middleBits ^ ((1 << (n.toBinaryString.length - 2)) - 1)\n        firstBit | toggledMiddleBits | lastBit",
    "        val firstBit = n & 1\n        val lastBit = n & (1 << 63)\n        val mask = (1 << 63) - 1\n        val middleBits = n & mask\n        val toggledMiddleBits = middleBits ^ mask\n        firstBit | toggledMiddleBits | lastBit",
    "        val firstBit = n & 1\n        val lastBit = (n >> 1) & 1\n        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        val middleBits = n & mask\n        val toggledMiddleBits = middleBits ^ mask\n        (firstBit << (n.toBinaryString.length - 1)) | (toggledMiddleBits << 1) | lastBit",
    "        var x = n\n        var i = 1\n        while (i < 63) {\n            x = x ^ (1 << i)\n            i += 2\n        }\n        return x",
    "        val mask = (1L << (n.toBinaryString.length - 1)) - 1\n        n ^ mask",
    "        val firstBit = n & 1\n        val lastBit = n & (1 << (63))\n        val mask = (1 << 63) - 1\n        val middleBits = n & mask\n        val toggledMiddleBits = middleBits ^ mask\n        firstBit | toggledMiddleBits | lastBit",
    "        val firstBit = n & 1\n        val lastBit = (n >> 1) & 1\n        val mask = (1L << 63) - 1\n        val middleBits = (n >> 2) & mask\n        val toggledMiddleBits = middleBits ^ mask\n        (firstBit | (toggledMiddleBits << 2) | (lastBit << 1))",
    "        val firstBit = n & 1\n        val lastBit = n & (1 << 63)\n        val mask = (1 << 63) - 1\n        val middleBits = n & mask\n        val toggledMiddleBits = middleBits ^ mask\n        toggledMiddleBits | (firstBit << 63) | lastBit",
    "        val firstBit = n & 1\n        val lastBit = n & (1 << 63)\n        val mask = (1 << 63) - 1\n        val middleBits = n & mask\n        val toggledMiddleBits = middleBits ^ mask\n        firstBit | toggledMiddleBits | lastBit",
    "        val firstBit = (n & 1)\n        val lastBit = (n & (1 << (63)))\n        val mask = (1L << 63) - 1\n        val middleBits = (n & mask) ^ mask\n        firstBit | middleBits | lastBit",
    "        val firstBit = n & 1\n        val lastBit = n & (1 << 31)\n        val mask = (1 << 31) - 1\n        val middleBits = n & mask\n        val toggledMiddleBits = middleBits ^ mask\n        toggledMiddleBits | firstBit | lastBit",
    "        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        n ^ mask",
    "        var m = n\n        var i = 1\n        while (i < 63) {\n            m ^= (1 << i)\n            i += 2\n        }\n        m",
    "        val firstBit = n & 1\n        val lastBit = (n >> 1) & 1\n        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        val middleBits = n & mask\n        val toggledMiddleBits = middleBits ^ mask\n        (firstBit << 1) | toggledMiddleBits | (lastBit << (n.toBinaryString.length - 2))",
    "        val firstBit = n & 1\n        val lastBit = (n >> 1) & 1\n        val mask = (1L << 63) | (1L << 62)\n        val middleBits = (n & ~mask) >> 2\n        val toggledMiddleBits = middleBits ^ ((1L << 62) - 1)\n        (firstBit << 62) | (toggledMiddleBits << 2) | (lastBit << 1) | firstBit",
    "        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        n ^ mask",
    "        val firstBit = n & 1\n        val lastBit = (n >> 1) & 1\n        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        val middleBits = n & mask\n        val toggledMiddleBits = middleBits ^ mask\n        (firstBit << 1) | toggledMiddleBits | (lastBit << (n.toBinaryString.length - 2))",
    "        var mask = (1L << n.toBinaryString.length - 2) - 1\n        return n ^ mask",
    "        val firstBit = n & 1\n        val lastBit = n & (1 << 63)\n        val mask = (1 << 63) - 1\n        val middleBits = n & mask\n        val toggledMiddleBits = middleBits ^ mask\n        firstBit | toggledMiddleBits | lastBit",
    "        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        n ^ mask",
    "        val firstBit = n & 1\n        val lastBit = (n >> 1) & 1\n        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        (n ^ mask) | (firstBit << (n.toBinaryString.length - 2)) | (lastBit << 1)",
    "        val firstBit = n & 1\n        val lastBit = (n >> 1) & 1\n        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        (n ^ mask) | (firstBit << (n.toBinaryString.length - 2)) | (lastBit << 1)",
    "        val firstBit = n & 1\n        val lastBit = (n >> 1) & 1\n        val mask = (1L << 63) - 1\n        val middleBits = (n >> 2) & mask\n        val toggledMiddleBits = middleBits ^ mask\n        (firstBit << 63) | (toggledMiddleBits << 2) | (lastBit << 1) | firstBit",
    "        val firstBit = n & 1\n        val lastBit = (n >> 1) & 1\n        val mask = (1L << (n.toBinaryString.length - 1)) - 1\n        val result = (n ^ mask) | (firstBit << (n.toBinaryString.length - 1)) | lastBit\n        result",
    "        val firstBit = n & 1\n        val lastBit = (n >> 1) & 1\n        val mask = (1L << 63) - 1\n        val result = (n ^ mask) | (firstBit << 63) | (lastBit << 1)\n        result",
    "        val firstBit = (n & 1) << 63\n        val lastBit = (n & (1L << 63)) >> 63\n        val mask = (1L << 63) - 1\n        val middleBits = (n & mask) >> 1\n        val toggledMiddleBits = middleBits ^ mask\n        firstBit | toggledMiddleBits | lastBit",
    "        val mask = (1L << 63) | 1\n        var result = n\n        for (i <- 1 until 63) {\n            val bit = (n & (1L << i)) >> i\n            if (bit == 1) result &= ~(1L << i)\n            else result |= (1L << i)\n        }\n        result",
    "        val firstBit = n & 1\n        val lastBit = (n >> (n.toString.length - 1)) & 1\n        val mask = (1L << (n.toString.length - 2)) - 1\n        val middleBits = (n >> 1) & mask\n        val toggledMiddleBits = middleBits ^ mask\n        (firstBit << (n.toString.length - 1)) | (toggledMiddleBits << 1) | lastBit",
    "        val firstBit = n & 1\n        val lastBit = n & (1 << (63))\n        val mask = (1 << 63) - 1\n        val middleBits = n & mask\n        val toggledMiddleBits = middleBits ^ mask\n        firstBit | toggledMiddleBits | lastBit",
    "        var x = n\n        var y = n\n        var i = 0\n        while (i < 63) {\n            x = x >> 1\n            y = y << 1\n            if (x % 2 == 1) {\n                n = n ^ (1 << i)\n            }\n            if (y % 2 == 1) {\n                n = n ^ (1 << (63 - i))\n            }\n            i += 1\n        }\n        n",
    "        val bin = n.toBinaryString\n        val first = bin.head\n        val last = bin.last\n        val middle = bin.substring(1, bin.length - 1)\n        val middleToggled = middle.map(x => if (x == '1') '0' else '1')\n        (first + middleToggled + last).toLong(2)",
    "        var mask = (1L << n.toBinaryString.length - 2) - 1\n        n ^ mask",
    "        val mask = (1L << n.toBinaryString.length) - 1\n        val mask2 = (1L << n.toBinaryString.length) - 3\n        val mask3 = mask ^ mask2\n        n ^ mask3",
    "        val mask = (1L << n.toBinaryString.length - 2) - 1\n        n ^ mask",
    "        val firstBit = n & 1\n        val lastBit = n & (1 << (63 - 1))\n        val mask = (1 << (63 - 1)) - 1\n        val middleBits = n & mask\n        val toggledMiddleBits = middleBits ^ mask\n        firstBit | toggledMiddleBits | lastBit",
    "        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        n ^ mask",
    "        var m = n\n        var i = 1\n        while (i < 63) {\n            m = m ^ (1L << i)\n            i += 2\n        }\n        m",
    "        val mask = (1L << 63) | 1\n        var result = n\n        for (i <- 1 to 62) {\n            if ((n & (1L << i)) != 0) result &= ~(1L << i)\n            else result |= (1L << i)\n        }\n        result",
    "        val firstBit = n & 1\n        val lastBit = (n >> 1) & 1\n        val mask = (1L << 63) - 1\n        val middleBits = (n >> 2) & mask\n        val toggledMiddleBits = middleBits ^ mask\n        (firstBit << 63) | (toggledMiddleBits << 2) | (lastBit << 1) | firstBit",
    "        var m = n\n        var i = 1\n        while (i < 63) {\n            m ^= (1 << i)\n            i += 2\n        }\n        m",
    "        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        n ^ mask",
    "        val mask = (1 << n.toBinaryString.length - 2) - 1\n        n ^ mask",
    "        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        n ^ mask",
    "        val firstBit = n & 1\n        val lastBit = (n >> 1) & 1\n        val mask = (1L << (63 - 1)) - 1\n        val middleBits = n & mask\n        val toggledMiddleBits = middleBits ^ mask\n        (firstBit << 63) | (toggledMiddleBits << 1) | lastBit",
    "        val firstBit = n & 1\n        val lastBit = (n >> 1) & 1\n        val mask = (1L << (n.toBinaryString.length - 1)) - 1\n        val middleBits = n & mask\n        val toggledMiddleBits = middleBits ^ mask\n        (firstBit << (n.toBinaryString.length - 1)) | toggledMiddleBits | lastBit",
    "        val firstBit = n & 1\n        val lastBit = n & (1 << (n.toBinaryString.length - 1))\n        val mask = (1 << (n.toBinaryString.length - 2)) - 1\n        (n ^ mask) | (firstBit << (n.toBinaryString.length - 2)) | lastBit",
    "        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        n ^ mask",
    "        var mask = (1L << (n.toBinaryString.length - 2)) - 1\n        var result = n ^ mask\n        result",
    "        val firstBit = n & 1\n        val lastBit = n & (1 << 63)\n        val mask = (1 << 63) - 1\n        val middleBits = n & mask\n        val middleBitsToggled = middleBits ^ mask\n        firstBit | middleBitsToggled | lastBit",
    "        val firstBit = n & 1\n        val lastBit = (n >> 1) & 1\n        val mask = (1L << 62) - 1\n        val middleBits = (n >> 2) & mask\n        val toggledMiddleBits = middleBits ^ mask\n        (firstBit << 63) | (toggledMiddleBits << 2) | (lastBit << 1) | firstBit",
    "        var x = n\n        var i = 1\n        var j = 63\n        while (i < j) {\n            val a = (x >> i) & 1\n            val b = (x >> j) & 1\n            if (a != b) {\n                x = x ^ (1L << i)\n                x = x ^ (1L << j)\n            }\n            i += 1\n            j -= 1\n        }\n        x",
    "        val firstBit = n & 1\n        val lastBit = n & (1 << (63 - firstBit))\n        val mask = (1 << (63 - firstBit)) - 1\n        val middleBits = n & mask\n        val middleBitsToggled = middleBits ^ mask\n        firstBit | middleBitsToggled | lastBit",
    "        var mask = 0L\n        for (i <- 1 to 62) {\n            mask = mask | (1L << i)\n        }\n        n ^ mask",
    "        val mask = (1L << n.toBinaryString.length - 2) - 1\n        n ^ mask",
    "        val firstBit = n & 1\n        val lastBit = (n >> (n.toBinaryString.length - 1)) & 1\n        val mask = (1 << (n.toBinaryString.length - 2)) - 1\n        val middleBits = n & mask\n        val toggledMiddleBits = middleBits ^ mask\n        (firstBit << (n.toBinaryString.length - 1)) | toggledMiddleBits | lastBit",
    "        val firstBit = n & 1\n        val lastBit = (n >> 1) & 1\n        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        (n ^ mask) | (firstBit << (n.toBinaryString.length - 2)) | (lastBit << 1)",
    "        val firstBit = n & 1\n        val lastBit = (n >> 1) & 1\n        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        val middleBits = n & mask\n        val toggledMiddleBits = middleBits ^ mask\n        (firstBit << 1) + toggledMiddleBits + (lastBit << (n.toBinaryString.length - 2))",
    "        var m = n\n        var i = 1\n        while (i < 63) {\n            m = m ^ (1 << i)\n            i += 2\n        }\n        m",
    "        val firstBit = n & 1\n        val lastBit = (n >> 1) & 1\n        val mask = (1L << 63) - 1\n        val middleBits = n & mask\n        val toggledMiddleBits = middleBits ^ mask\n        (firstBit | (toggledMiddleBits << 1) | lastBit)",
    "        val firstBit = n & 1\n        val lastBit = (n >> 1) & 1\n        val mask = (1L << (63 - 1)) - 1\n        val middleBits = n & mask\n        val toggledMiddleBits = middleBits ^ mask\n        (firstBit << 63) | (toggledMiddleBits << 1) | lastBit",
    "        var mask = 1L\n        var i = 0\n        while (i < 63) {\n            mask = mask | (1L << i)\n            i += 2\n        }\n        n ^ mask",
    "        val firstBit = n & 1\n        val lastBit = (n >> 1) & 1\n        val mask = (1L << (63 - 1)) - 1\n        val middleBits = n & mask\n        val toggledBits = middleBits ^ mask\n        (firstBit | (toggledBits << 1) | lastBit)",
    "        val mask = (1L << n.toBinaryString.length - 2) - 1\n        n ^ mask",
    "        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        n ^ mask",
    "        var m = n\n        var i = 1\n        while (i < 63) {\n            m = m ^ (1 << i)\n            i += 2\n        }\n        m",
    "        var result = n\n        var i = 1\n        while (i < 63) {\n            result ^= (1 << i)\n            i += 2\n        }\n        result",
    "        val mask = (1 << (n.toBinaryString.length - 2)) - 1\n        n ^ mask",
    "        val firstBit = n & 1\n        val lastBit = (n >> 1) & 1\n        val mask = (1L << (n.toBinaryString.length - 1)) - 1\n        val middleBits = n & mask\n        val middleBitsToggled = middleBits ^ mask\n        (firstBit << 1) | middleBitsToggled | (lastBit << (n.toBinaryString.length - 2))",
    "        val firstBit = n & 1\n        val lastBit = (n >> 1) & 1\n        val mask = (1L << (n.toBinaryString.length - 2)) - 1\n        val middleBits = n & mask\n        val middleBitsToggled = middleBits ^ mask\n        (firstBit << 1) | middleBitsToggled | (lastBit << (n.toBinaryString.length - 2))",
    "        val firstBit = (n & 1) << 63\n        val lastBit = (n & (1 << 63)) >> 63\n        val middleBits = (n & ((1 << 63) - 3)) ^ ((1 << 63) - 3)\n        firstBit | middleBits | lastBit",
    "        val firstBit = n & 1\n        val lastBit = (n >> 1) & 1\n        val mask = (1L << 63) - 1\n        val middleBits = (n >> 2) & mask\n        val toggledMiddleBits = middleBits ^ mask\n        (firstBit << 63) | (toggledMiddleBits << 2) | (lastBit << 1) | firstBit",
    "        val firstBit = n & 1\n        val lastBit = n & (1 << (n.toBinaryString.length - 1))\n        val middleBits = n & ((1 << (n.toBinaryString.length - 2)) - 1)\n        firstBit | middleBits.toBinaryString.map(x => if (x == '1') '0' else '1').mkString.toLong(2) | lastBit",
    "        val firstBit = n & 1\n        val lastBit = (n >> 1) & 1\n        val mask = ((1L << 63) - 1) - 1\n        val middleBits = n & mask\n        val toggledMiddleBits = middleBits ^ mask\n        (toggledMiddleBits << 1) | (lastBit << 1) | firstBit",
    "        val mask = (1L << (63 - 1)) | 1L\n        n ^ (mask << 1)"
  ]
}