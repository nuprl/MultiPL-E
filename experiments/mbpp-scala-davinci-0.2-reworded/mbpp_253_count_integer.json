{
  "name": "mbpp_253_count_integer",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that returns the number of integer elements in a given list.\n    def countInteger(list1 : Any) : Long = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_253_count_integer.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(countInteger((Any(1l, 2l, \"abc\", 1.2f))) == (2l));\n    assert(countInteger((Any(1l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(countInteger((Any(1l.toLong, 1.2f.toLong, 4l.toLong, 5.1f.toLong))) == (2l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        list1 match {\n            case Nil => 0\n            case (x : Int) :: tail => 1 + countInteger(tail)\n            case _ :: tail => countInteger(tail)\n        }",
    "        list1 match {\n            case Nil => 0\n            case x :: xs => x match {\n                case x : Int => 1 + countInteger(xs)\n                case _ => countInteger(xs)\n            }\n        }",
    "        list1 match {\n            case Nil => 0\n            case x :: xs => x match {\n                case _ : Int => 1 + countInteger(xs)\n                case _ => countInteger(xs)\n            }\n        }",
    "        list1 match {\n            case Nil => 0\n            case head :: tail => head match {\n                case x : Int => 1 + countInteger(tail)\n                case _ => countInteger(tail)\n            }\n        }",
    "        list1 match {\n            case Nil => 0\n            case x :: xs => x match {\n                case _ : Int => 1 + countInteger(xs)\n                case _ => countInteger(xs)\n            }\n        }",
    "        list1 match {\n            case Nil => 0\n            case head :: tail => {\n                head match {\n                    case _ : Int => 1 + countInteger(tail)\n                    case _ => countInteger(tail)\n                }\n            }\n        }",
    "        var count = 0\n        for(i <- list1.asInstanceOf[List[Any]]) {\n            if(i.isInstanceOf[Int]) {\n                count += 1\n            }\n        }\n        count",
    "        list1 match {\n            case Nil => 0\n            case x :: xs => x match {\n                case _ : Int => 1 + countInteger(xs)\n                case _ => countInteger(xs)\n            }\n        }",
    "        list1 match {\n            case Nil => 0\n            case x :: xs => x match {\n                case _ : Int => 1 + countInteger(xs)\n                case _ => countInteger(xs)\n            }\n        }",
    "        list1 match {\n            case Nil => 0\n            case x :: xs => x match {\n                case i : Int => 1 + countInteger(xs)\n                case _ => countInteger(xs)\n            }\n        }",
    "        list1 match {\n            case Nil => 0\n            case x :: xs => x match {\n                case _ : Int => 1 + countInteger(xs)\n                case _ => countInteger(xs)\n            }\n        }",
    "        list1 match {\n            case Nil => 0\n            case x :: xs => x match {\n                case _ : Int => 1 + countInteger(xs)\n                case _ => countInteger(xs)\n            }\n        }",
    "        list1 match {\n            case Nil => 0\n            case (x : Int) :: xs => 1 + countInteger(xs)\n            case (x : List[Any]) :: xs => countInteger(x) + countInteger(xs)\n            case _ => countInteger(list1.asInstanceOf[List[Any]])\n        }",
    "        list1 match {\n            case Nil => 0\n            case head :: tail => head match {\n                case x : Int => 1 + countInteger(tail)\n                case _ => countInteger(tail)\n            }\n        }",
    "        list1 match {\n            case Nil => 0\n            case (x : Int) :: xs => 1 + countInteger(xs)\n            case (x : List[Any]) :: xs => countInteger(x) + countInteger(xs)\n            case _ :: xs => countInteger(xs)\n        }",
    "        list1 match {\n            case Nil => 0\n            case head :: tail => head match {\n                case x: Int => 1 + countInteger(tail)\n                case _ => countInteger(tail)\n            }\n        }",
    "        list1 match {\n            case Nil => 0\n            case x :: xs => x match {\n                case _ : Int => 1 + countInteger(xs)\n                case _ => countInteger(xs)\n            }\n        }",
    "        list1 match {\n            case Nil => 0\n            case head :: tail => {\n                head match {\n                    case _: Int => 1 + countInteger(tail)\n                    case _ => countInteger(tail)\n                }\n            }\n        }",
    "        var count : Long = 0\n        list1 match {\n            case list1 : List[Any] => {\n                for (i <- list1) {\n                    count += countInteger(i)\n                }\n            }\n            case _ : Int => count += 1\n            case _ => count\n        }\n        count",
    "        list1 match {\n            case Nil => 0\n            case x :: xs => x match {\n                case _ : Int => 1 + countInteger(xs)\n                case _ => countInteger(xs)\n            }\n        }"
  ]
}