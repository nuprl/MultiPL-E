{
  "name": "mbpp_754_extract_index_list",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_754_extract_index_list.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgr2ht2tx.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgr2ht2tx.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var result = List[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpczdv_469.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpczdv_469.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var l = List[Long]()\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l = l :+ l1(i)\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfq4k7t7x.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfq4k7t7x.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = new ListBuffer[Long]\n        for (i <- 0 until min(l1.length, l2.length, l3.length)) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpeuev556v.scala:7:26 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until min(l1.length, l2.length, l3.length)) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^\u001b[0m\n\u001b[31m  |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mmin\u001b[0m in \u001b[33mpackage\u001b[0m \u001b[35mscala.math\u001b[0m with types\n\u001b[31m  |\u001b[0m (x: Double, y: Double): Double\n\u001b[31m  |\u001b[0m (x: Float, y: Float): Float\n\u001b[31m  |\u001b[0m (x: Long, y: Long): Long\n\u001b[31m  |\u001b[0m (x: Int, y: Int): Int\n\u001b[31m  |\u001b[0mmatch arguments ((l1.length : => Int), (l2.length : => Int), (l3.length : => Int))\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpeuev556v.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpeuev556v.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[3",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgr2ht2tx.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgr2ht2tx.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgr2ht2tx.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgr2ht2tx.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var result = List[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpczdv_469.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpczdv_469.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = ListBuffer[Long]()\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpidwdzwwq.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpidwdzwwq.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = ListBuffer[Long]()\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyek9tgei.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyek9tgei.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = ListBuffer[Long]()\n        for (i <- 0 until min(l1.length, l2.length, l3.length)) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpm5_xvx_j.scala:7:26 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until min(l1.length, l2.length, l3.length)) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^\u001b[0m\n\u001b[31m  |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mmin\u001b[0m in \u001b[33mpackage\u001b[0m \u001b[35mscala.math\u001b[0m with types\n\u001b[31m  |\u001b[0m (x: Double, y: Double): Double\n\u001b[31m  |\u001b[0m (x: Float, y: Float): Float\n\u001b[31m  |\u001b[0m (x: Long, y: Long): Long\n\u001b[31m  |\u001b[0m (x: Int, y: Int): Int\n\u001b[31m  |\u001b[0mmatch arguments ((l1.length : => Int), (l2.length : => Int), (l3.length : => Int))\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpm5_xvx_j.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpm5_xvx_j.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[3",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l1Set = l1.toSet\n        val l2Set = l2.toSet\n        val l3Set = l3.toSet\n        val l1l2 = l1Set.intersect(l2Set)\n        val l1l2l3 = l1l2.intersect(l3Set)\n        l1l2l3.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpijogwreb.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpijogwreb.scala:15:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = new ListBuffer[Long]\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdra29nvv.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdra29nvv.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var result = List[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpczdv_469.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpczdv_469.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var result = List[Long]()\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpoys2aj_o.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpoys2aj_o.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var l = List[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l = l :+ l1(i)\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyfudr_zc.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyfudr_zc.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        if (l1.isEmpty || l2.isEmpty || l3.isEmpty) return List()\n        if (l1.head == l2.head && l2.head == l3.head) return l1.head :: extractIndexList(l1.tail, l2.tail, l3.tail)\n        else return extractIndexList(l1.tail, l2.tail, l3.tail)\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517331,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpedrhizvp.scala:7:69 -------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mif\u001b[0m (l1.head == l2.head && l2.head == l3.head) \u001b[33mreturn\u001b[0m l1.head :: extractIndexList(l1.tail, l2.tail, l3.tail)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                           value :: is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpedrhizvp.scala:11:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpedrhizvp.scala:12:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var result = List[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpczdv_469.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpczdv_469.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var result = List[Long]()\n        var minSize = min(l1.size, min(l2.size, l3.size))\n        for (i <- 0 until minSize) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpve5nbv1e.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpve5nbv1e.scala:15:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var result = List[Long]()\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpoys2aj_o.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpoys2aj_o.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var result = List[Long]()\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpoys2aj_o.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpoys2aj_o.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var result = List[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpczdv_469.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpczdv_469.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) {\n                l += l1(i)\n            }\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123163,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpnp6_v6rx.scala:15:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpnp6_v6rx.scala:16:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l1Set = l1.toSet\n        val l2Set = l2.toSet\n        val l3Set = l3.toSet\n        val l1l2 = l1Set.intersect(l2Set)\n        val l1l2l3 = l1l2.intersect(l3Set)\n        l1l2l3.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpijogwreb.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpijogwreb.scala:15:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var result = List[Long]()\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpoys2aj_o.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpoys2aj_o.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var result = List[Long]()\n        if (l1.length == l2.length && l2.length == l3.length) {\n            for (i <- 0 until l1.length) {\n                if (l1(i) == l2(i) && l2(i) == l3(i)) {\n                    result = result :+ l1(i)\n                }\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123163,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2nbzt6g9.scala:17:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2nbzt6g9.scala:18:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var result = ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) {\n                result += l1(i)\n            }\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123163,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpwaizc_my.scala:15:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpwaizc_my.scala:16:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var l = List[Long]()\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l = l :+ l1(i)\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfq4k7t7x.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfq4k7t7x.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgr2ht2tx.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgr2ht2tx.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val minLength = min(min(l1.length, l2.length), l3.length)\n        val commonElements = new ListBuffer[Long]()\n        for (i <- 0 until minLength) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) {\n                commonElements += l1(i)\n            }\n        }\n        commonElements.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123163,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpy3vmemmc.scala:16:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpy3vmemmc.scala:17:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = new ListBuffer[Long]\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123163,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgx3w7me3.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgx3w7me3.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgr2ht2tx.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgr2ht2tx.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = ListBuffer[Long]()\n        for (i <- 0 until min(l1.length, l2.length, l3.length)) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpm5_xvx_j.scala:7:26 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until min(l1.length, l2.length, l3.length)) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^\u001b[0m\n\u001b[31m  |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mmin\u001b[0m in \u001b[33mpackage\u001b[0m \u001b[35mscala.math\u001b[0m with types\n\u001b[31m  |\u001b[0m (x: Double, y: Double): Double\n\u001b[31m  |\u001b[0m (x: Float, y: Float): Float\n\u001b[31m  |\u001b[0m (x: Long, y: Long): Long\n\u001b[31m  |\u001b[0m (x: Int, y: Int): Int\n\u001b[31m  |\u001b[0mmatch arguments ((l1.length : => Int), (l2.length : => Int), (l3.length : => Int))\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpm5_xvx_j.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpm5_xvx_j.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[3",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var l = List[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l = l :+ l1(i)\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyfudr_zc.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyfudr_zc.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = new ListBuffer[Long]\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123163,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdcwy8j7m.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdcwy8j7m.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = new ListBuffer[Long]\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123163,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgx3w7me3.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgx3w7me3.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l1_set = l1.toSet\n        val l2_set = l2.toSet\n        val l3_set = l3.toSet\n        val l1_l2 = l1_set.intersect(l2_set)\n        val l1_l2_l3 = l1_l2.intersect(l3_set)\n        val l1_l2_l3_list = l1_l2_l3.toList\n        val l1_l2_l3_list_sorted = l1_l2_l3_list.sorted\n        val l1_l2_l3_list_sorted_distinct = l1_l2_l3_list_sorted.distinct\n        val l1_l2_l3_list_sorted_distinct_index = l1_l2_l3_list_sorted_distinct.map(l1.indexOf(_))\n        l1_l2_l3_list_sorted_distinct_index\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123163,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpcxso1zcr.scala:18:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpcxso1zcr.scala:19:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l1l2 = l1.zip(l2)\n        val l1l2l3 = l1l2.zip(l3)\n        val l1l2l3_filtered = l1l2l3.filter(x => x._1._1 == x._1._2 && x._1._1 == x._2)\n        l1l2l3_filtered.map(x => x._1._1)\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123162,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpter560on.scala:12:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpter560on.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = ListBuffer[Long]()\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l1(i) == l3(i)) l += l1(i)\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123162,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2ax7nqx5.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2ax7nqx5.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = new ListBuffer[Long]\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123163,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdcwy8j7m.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdcwy8j7m.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = new ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123163,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpoqtk161m.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpoqtk161m.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l1Set = l1.toSet\n        val l2Set = l2.toSet\n        val l3Set = l3.toSet\n        val commonSet = l1Set.intersect(l2Set).intersect(l3Set)\n        if (commonSet.size == 0) {\n            return \"No common elements\"\n        }\n        val commonList = commonSet.toList\n        val commonListIndex = commonList.map(x => l1.indexOf(x))\n        return commonListIndex\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123162,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdfht3q4a.scala:18:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdfht3q4a.scala:19:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgr2ht2tx.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgr2ht2tx.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgr2ht2tx.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgr2ht2tx.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgr2ht2tx.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgr2ht2tx.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var l = List[Long]()\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l1(i) == l3(i)) l = l :+ l1(i)\n        }\n        return l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123163,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1uxpl794.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1uxpl794.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var l = ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123163,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxpwn6f1o.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxpwn6f1o.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = new ListBuffer[Long]\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123163,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgx3w7me3.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgx3w7me3.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = new ListBuffer[Long]\n        for (i <- 0 until min(l1.length, l2.length, l3.length)) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpeuev556v.scala:7:26 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until min(l1.length, l2.length, l3.length)) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^\u001b[0m\n\u001b[31m  |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mmin\u001b[0m in \u001b[33mpackage\u001b[0m \u001b[35mscala.math\u001b[0m with types\n\u001b[31m  |\u001b[0m (x: Double, y: Double): Double\n\u001b[31m  |\u001b[0m (x: Float, y: Float): Float\n\u001b[31m  |\u001b[0m (x: Long, y: Long): Long\n\u001b[31m  |\u001b[0m (x: Int, y: Int): Int\n\u001b[31m  |\u001b[0mmatch arguments ((l1.length : => Int), (l2.length : => Int), (l3.length : => Int))\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpeuev556v.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpeuev556v.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[3",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = new ListBuffer[Long]\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123163,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdcwy8j7m.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdcwy8j7m.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var result = List[Long]()\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) {\n                result = result :+ l1(i)\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123163,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpy01ryig9.scala:15:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpy01ryig9.scala:16:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var result = List[Long]()\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpoys2aj_o.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpoys2aj_o.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val result = new ListBuffer[Long]\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result += l1(i)\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123163,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpq8a6vgvm.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpq8a6vgvm.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = l1.zip(l2).zip(l3).map(x => (x._1._1, x._1._2, x._2)).filter(x => x._1 == x._2 && x._2 == x._3).map(x => x._1)\n        if (l.isEmpty) \"No common elements\"\n        else l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123162,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdyar42pp.scala:11:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdyar42pp.scala:12:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgr2ht2tx.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgr2ht2tx.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgr2ht2tx.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgr2ht2tx.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgr2ht2tx.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgr2ht2tx.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var l = List[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l = l :+ l1(i)\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyfudr_zc.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyfudr_zc.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = ListBuffer[Long]()\n        for (i <- 0 until min(l1.length, l2.length, l3.length)) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpm5_xvx_j.scala:7:26 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until min(l1.length, l2.length, l3.length)) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^\u001b[0m\n\u001b[31m  |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mmin\u001b[0m in \u001b[33mpackage\u001b[0m \u001b[35mscala.math\u001b[0m with types\n\u001b[31m  |\u001b[0m (x: Double, y: Double): Double\n\u001b[31m  |\u001b[0m (x: Float, y: Float): Float\n\u001b[31m  |\u001b[0m (x: Long, y: Long): Long\n\u001b[31m  |\u001b[0m (x: Int, y: Int): Int\n\u001b[31m  |\u001b[0mmatch arguments ((l1.length : => Int), (l2.length : => Int), (l3.length : => Int))\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpm5_xvx_j.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpm5_xvx_j.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[3",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var l = List[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l = l :+ l1(i)\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyfudr_zc.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyfudr_zc.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val result = new ListBuffer[Long]\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result += l1(i)\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123163,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpq8a6vgvm.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpq8a6vgvm.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var result = List[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpczdv_469.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpczdv_469.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var l = ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123163,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxpwn6f1o.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxpwn6f1o.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val common = new ListBuffer[Long]()\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) common += l1(i)\n        }\n        common.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123163,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5xap1kmg.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5xap1kmg.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = new ListBuffer[Long]\n        for (i <- 0 until min(l1.length, l2.length, l3.length)) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123164,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpttgsd1w6.scala:7:26 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until min(l1.length, l2.length, l3.length)) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^\u001b[0m\n\u001b[31m  |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mmin\u001b[0m in \u001b[33mpackage\u001b[0m \u001b[35mscala.math\u001b[0m with types\n\u001b[31m  |\u001b[0m (x: Double, y: Double): Double\n\u001b[31m  |\u001b[0m (x: Float, y: Float): Float\n\u001b[31m  |\u001b[0m (x: Long, y: Long): Long\n\u001b[31m  |\u001b[0m (x: Int, y: Int): Int\n\u001b[31m  |\u001b[0mmatch arguments ((l1.length : => Int), (l2.length : => Int), (l3.length : => Int))\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpttgsd1w6.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpttgsd1w6.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[3",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var result = List[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpczdv_469.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpczdv_469.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgr2ht2tx.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgr2ht2tx.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        if (l1.isEmpty || l2.isEmpty || l3.isEmpty) return List()\n        if (l1.head == l2.head && l2.head == l3.head) return l1.head :: extractIndexList(l1.tail, l2.tail, l3.tail)\n        if (l1.head <= l2.head && l1.head <= l3.head) return extractIndexList(l1.tail, l2, l3)\n        if (l2.head <= l1.head && l2.head <= l3.head) return extractIndexList(l1, l2.tail, l3)\n        return extractIndexList(l1, l2, l3.tail)\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123165,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpl7zy4aks.scala:7:69 -------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mif\u001b[0m (l1.head == l2.head && l2.head == l3.head) \u001b[33mreturn\u001b[0m l1.head :: extractIndexList(l1.tail, l2.tail, l3.tail)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                           value :: is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpl7zy4aks.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpl7zy4aks.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = ListBuffer[Long]()\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyek9tgei.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyek9tgei.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = new ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123163,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpq4sxafrk.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpq4sxafrk.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = new ListBuffer[Long]\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123163,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdcwy8j7m.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdcwy8j7m.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var result = List[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpczdv_469.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpczdv_469.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = ListBuffer[Long]()\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyek9tgei.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyek9tgei.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgr2ht2tx.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgr2ht2tx.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var result = List[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpczdv_469.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpczdv_469.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l1Set = l1.toSet\n        val l2Set = l2.toSet\n        val l3Set = l3.toSet\n        val l1l2 = l1Set.intersect(l2Set)\n        val l1l2l3 = l1l2.intersect(l3Set)\n        l1l2l3\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123162,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6efiaeig.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6efiaeig.scala:15:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var result = List[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpczdv_469.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpczdv_469.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l1Set = l1.toSet\n        val l2Set = l2.toSet\n        val l3Set = l3.toSet\n        val l1l2 = l1Set.intersect(l2Set)\n        val l1l2l3 = l1l2.intersect(l3Set)\n        l1l2l3.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpijogwreb.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpijogwreb.scala:15:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var result = List[Long]()\n        for (i <- 0 until min(l1.length, l2.length, l3.length)) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123163,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmped8tq1rx.scala:7:26 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until min(l1.length, l2.length, l3.length)) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^\u001b[0m\n\u001b[31m  |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mmin\u001b[0m in \u001b[33mpackage\u001b[0m \u001b[35mscala.math\u001b[0m with types\n\u001b[31m  |\u001b[0m (x: Double, y: Double): Double\n\u001b[31m  |\u001b[0m (x: Float, y: Float): Float\n\u001b[31m  |\u001b[0m (x: Long, y: Long): Long\n\u001b[31m  |\u001b[0m (x: Int, y: Int): Int\n\u001b[31m  |\u001b[0mmatch arguments ((l1.length : => Int), (l2.length : => Int), (l3.length : => Int))\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmped8tq1rx.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmped8tq1rx.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[3",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgr2ht2tx.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgr2ht2tx.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val common = new ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) {\n                common += l1(i)\n            }\n        }\n        common.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123162,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvtzdi59u.scala:15:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvtzdi59u.scala:16:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var result = List[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpczdv_469.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpczdv_469.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var result = List[Long]()\n        for (i <- 0 until min(l1.length, l2.length, l3.length)) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123163,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmped8tq1rx.scala:7:26 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until min(l1.length, l2.length, l3.length)) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^\u001b[0m\n\u001b[31m  |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mmin\u001b[0m in \u001b[33mpackage\u001b[0m \u001b[35mscala.math\u001b[0m with types\n\u001b[31m  |\u001b[0m (x: Double, y: Double): Double\n\u001b[31m  |\u001b[0m (x: Float, y: Float): Float\n\u001b[31m  |\u001b[0m (x: Long, y: Long): Long\n\u001b[31m  |\u001b[0m (x: Int, y: Int): Int\n\u001b[31m  |\u001b[0mmatch arguments ((l1.length : => Int), (l2.length : => Int), (l3.length : => Int))\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmped8tq1rx.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmped8tq1rx.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[3",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var indexList = new ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) indexList += i\n        }\n        indexList.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123175,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmppmcwyl2i.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmppmcwyl2i.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var result = List[Long]()\n        if (l1.length == 0 || l2.length == 0 || l3.length == 0) return result\n        var i = 0\n        while (i < l1.length && i < l2.length && i < l3.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123175,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpd544jcht.scala:16:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpd544jcht.scala:17:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var result = List[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpczdv_469.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpczdv_469.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = new ListBuffer[Long]\n        for (i <- 0 until min(l1.length, l2.length, l3.length)) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123164,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpttgsd1w6.scala:7:26 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until min(l1.length, l2.length, l3.length)) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^\u001b[0m\n\u001b[31m  |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mmin\u001b[0m in \u001b[33mpackage\u001b[0m \u001b[35mscala.math\u001b[0m with types\n\u001b[31m  |\u001b[0m (x: Double, y: Double): Double\n\u001b[31m  |\u001b[0m (x: Float, y: Float): Float\n\u001b[31m  |\u001b[0m (x: Long, y: Long): Long\n\u001b[31m  |\u001b[0m (x: Int, y: Int): Int\n\u001b[31m  |\u001b[0mmatch arguments ((l1.length : => Int), (l2.length : => Int), (l3.length : => Int))\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpttgsd1w6.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpttgsd1w6.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[3",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var result = List[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpczdv_469.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpczdv_469.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = new ListBuffer[Long]\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) {\n                l += l1(i)\n            }\n        }\n        l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123176,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp728m1j0y.scala:15:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp728m1j0y.scala:16:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = new ListBuffer[Long]\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123163,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdcwy8j7m.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdcwy8j7m.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgr2ht2tx.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgr2ht2tx.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgr2ht2tx.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgr2ht2tx.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = new ListBuffer[Long]\n        for (i <- 0 until min(l1.length, l2.length, l3.length)) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123164,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpttgsd1w6.scala:7:26 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until min(l1.length, l2.length, l3.length)) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^\u001b[0m\n\u001b[31m  |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mmin\u001b[0m in \u001b[33mpackage\u001b[0m \u001b[35mscala.math\u001b[0m with types\n\u001b[31m  |\u001b[0m (x: Double, y: Double): Double\n\u001b[31m  |\u001b[0m (x: Float, y: Float): Float\n\u001b[31m  |\u001b[0m (x: Long, y: Long): Long\n\u001b[31m  |\u001b[0m (x: Int, y: Int): Int\n\u001b[31m  |\u001b[0mmatch arguments ((l1.length : => Int), (l2.length : => Int), (l3.length : => Int))\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpttgsd1w6.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpttgsd1w6.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[3",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val minLength = min(l1.length, min(l2.length, l3.length))\n        val result = new ListBuffer[Long]()\n        for (i <- 0 until minLength) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result += l1(i)\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123176,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpa2whvzkp.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpa2whvzkp.scala:15:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgr2ht2tx.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgr2ht2tx.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val m = scala.collection.mutable.Map[Int, List[Long]]()\n        for (i <- 0 until l1.length) {\n            if (l2.length > i && l3.length > i) {\n                if (l1(i) == l2(i) && l2(i) == l3(i)) {\n                    m(i) = List(l1(i), l2(i), l3(i))\n                }\n            }\n        }\n        m.values.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123176,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpe5fdmvew.scala:17:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpe5fdmvew.scala:18:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var result = List[Long]()\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l1(i) == l3(i)) result = result :+ l1(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123176,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpegxgqktu.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpegxgqktu.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var result = List[Long]()\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l1(i) == l3(i)) result = result :+ l1(i)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123176,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpk1tcwmya.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpk1tcwmya.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val minLength = min(l1.length, min(l2.length, l3.length))\n        val result = new ListBuffer[Long]\n        for (i <- 0 until minLength) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result += l1(i)\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123176,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp95smv4fc.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp95smv4fc.scala:15:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var result = List[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpczdv_469.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpczdv_469.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = new ListBuffer[Long]\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123163,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdcwy8j7m.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdcwy8j7m.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = new ListBuffer[Long]\n        val minLength = min(min(l1.length, l2.length), l3.length)\n        for (i <- 0 until minLength) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123176,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmps01ineoc.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmps01ineoc.scala:15:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = new ListBuffer[Long]()\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123176,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn49phnq.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn49phnq.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgr2ht2tx.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgr2ht2tx.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val result = new ListBuffer[Long]\n        val minLength = min(l1.length, min(l2.length, l3.length))\n        for (i <- 0 until minLength) {\n            if (l1(i) == l2(i) && l1(i) == l3(i)) result += l1(i)\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123176,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpulxi6y89.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpulxi6y89.scala:15:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = new ListBuffer[Long]\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdra29nvv.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdra29nvv.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var l = List[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l = l :+ l1(i)\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyfudr_zc.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyfudr_zc.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var result = List[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpczdv_469.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpczdv_469.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l1Set = l1.toSet\n        val l2Set = l2.toSet\n        val l3Set = l3.toSet\n        val l1l2 = l1Set.intersect(l2Set)\n        val l1l2l3 = l1l2.intersect(l3Set)\n        l1l2l3.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpijogwreb.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpijogwreb.scala:15:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val result = new ListBuffer[Long]\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result += l1(i)\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123163,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpq8a6vgvm.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpq8a6vgvm.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var l = List[Long]()\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l = l :+ l1(i)\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfq4k7t7x.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfq4k7t7x.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var l = List[Long]()\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l = l :+ l1(i)\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfq4k7t7x.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfq4k7t7x.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123176,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4u421qsp.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4u421qsp.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        if (l1.length != l2.length || l2.length != l3.length) {\n            return \"The lists are not of the same length\"\n        }\n        val result = new ListBuffer[Long]\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) {\n                result += l1(i)\n            }\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123176,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2vfq80cj.scala:18:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2vfq80cj.scala:19:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = new ListBuffer[Long]\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123163,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdcwy8j7m.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdcwy8j7m.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = new ListBuffer[Long]\n        val minLength = min(l1.length, min(l2.length, l3.length))\n        for (i <- 0 until minLength) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123176,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmps55bzwjm.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmps55bzwjm.scala:15:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var result = List[Long]()\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpoys2aj_o.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpoys2aj_o.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var result = List[Long]()\n        for (i <- 0 until min(l1.length, l2.length, l3.length)) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = l1(i) :: result\n        }\n        result.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123176,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpvugtmj1q.scala:7:26 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until min(l1.length, l2.length, l3.length)) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^\u001b[0m\n\u001b[31m  |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mmin\u001b[0m in \u001b[33mpackage\u001b[0m \u001b[35mscala.math\u001b[0m with types\n\u001b[31m  |\u001b[0m (x: Double, y: Double): Double\n\u001b[31m  |\u001b[0m (x: Float, y: Float): Float\n\u001b[31m  |\u001b[0m (x: Long, y: Long): Long\n\u001b[31m  |\u001b[0m (x: Int, y: Int): Int\n\u001b[31m  |\u001b[0mmatch arguments ((l1.length : => Int), (l2.length : => Int), (l3.length : => Int))\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvugtmj1q.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvugtmj1q.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[3",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var result = List[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpczdv_469.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpczdv_469.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var result = List[Long]()\n        for (i <- 0 until min(l1.length, l2.length, l3.length)) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = l1(i) :: result\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123176,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpc3_g1u91.scala:7:26 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until min(l1.length, l2.length, l3.length)) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^\u001b[0m\n\u001b[31m  |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mmin\u001b[0m in \u001b[33mpackage\u001b[0m \u001b[35mscala.math\u001b[0m with types\n\u001b[31m  |\u001b[0m (x: Double, y: Double): Double\n\u001b[31m  |\u001b[0m (x: Float, y: Float): Float\n\u001b[31m  |\u001b[0m (x: Long, y: Long): Long\n\u001b[31m  |\u001b[0m (x: Int, y: Int): Int\n\u001b[31m  |\u001b[0mmatch arguments ((l1.length : => Int), (l2.length : => Int), (l3.length : => Int))\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpc3_g1u91.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpc3_g1u91.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[3",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var result = new ListBuffer[Long]()\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l1(i) == l3(i)) result += l1(i)\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123176,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiex3b34.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiex3b34.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = ListBuffer[Long]()\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyek9tgei.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyek9tgei.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = l1.zip(l2).zip(l3).map(x => (x._1._1, x._1._2, x._2)).filter(x => x._1 == x._2 && x._1 == x._3).map(x => x._1)\n        if (l.isEmpty) \"No common elements\"\n        else l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123176,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpo8wsg_8h.scala:11:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpo8wsg_8h.scala:12:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = ListBuffer[Long]()\n        for (i <- 0 until min(l1.length, l2.length, l3.length)) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpm5_xvx_j.scala:7:26 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until min(l1.length, l2.length, l3.length)) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^\u001b[0m\n\u001b[31m  |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mmin\u001b[0m in \u001b[33mpackage\u001b[0m \u001b[35mscala.math\u001b[0m with types\n\u001b[31m  |\u001b[0m (x: Double, y: Double): Double\n\u001b[31m  |\u001b[0m (x: Float, y: Float): Float\n\u001b[31m  |\u001b[0m (x: Long, y: Long): Long\n\u001b[31m  |\u001b[0m (x: Int, y: Int): Int\n\u001b[31m  |\u001b[0mmatch arguments ((l1.length : => Int), (l2.length : => Int), (l3.length : => Int))\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpm5_xvx_j.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpm5_xvx_j.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[3",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var result = List[Long]()\n        for (i <- 0 until min(l1.length, l2.length, l3.length)) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123163,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmped8tq1rx.scala:7:26 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until min(l1.length, l2.length, l3.length)) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^\u001b[0m\n\u001b[31m  |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mmin\u001b[0m in \u001b[33mpackage\u001b[0m \u001b[35mscala.math\u001b[0m with types\n\u001b[31m  |\u001b[0m (x: Double, y: Double): Double\n\u001b[31m  |\u001b[0m (x: Float, y: Float): Float\n\u001b[31m  |\u001b[0m (x: Long, y: Long): Long\n\u001b[31m  |\u001b[0m (x: Int, y: Int): Int\n\u001b[31m  |\u001b[0mmatch arguments ((l1.length : => Int), (l2.length : => Int), (l3.length : => Int))\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmped8tq1rx.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmped8tq1rx.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[3",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var result = List[Long]()\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpoys2aj_o.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpoys2aj_o.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgr2ht2tx.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgr2ht2tx.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = new ListBuffer[Long]\n        for (i <- 0 until min(l1.length, l2.length, l3.length)) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123164,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpttgsd1w6.scala:7:26 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until min(l1.length, l2.length, l3.length)) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^\u001b[0m\n\u001b[31m  |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mmin\u001b[0m in \u001b[33mpackage\u001b[0m \u001b[35mscala.math\u001b[0m with types\n\u001b[31m  |\u001b[0m (x: Double, y: Double): Double\n\u001b[31m  |\u001b[0m (x: Float, y: Float): Float\n\u001b[31m  |\u001b[0m (x: Long, y: Long): Long\n\u001b[31m  |\u001b[0m (x: Int, y: Int): Int\n\u001b[31m  |\u001b[0mmatch arguments ((l1.length : => Int), (l2.length : => Int), (l3.length : => Int))\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpttgsd1w6.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpttgsd1w6.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[3",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var result = List[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpczdv_469.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpczdv_469.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = ListBuffer[Long]()\n        val minLength = min(min(l1.length, l2.length), l3.length)\n        for (i <- 0 until minLength) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123176,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplkdsihit.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplkdsihit.scala:15:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var result = List[Long]()\n        if (l1.length != l2.length || l2.length != l3.length) {\n            return \"Lists are not of equal length\"\n        }\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) {\n                result = result :+ l1(i)\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123176,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpz7rj3k1y.scala:18:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpz7rj3k1y.scala:19:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var result = List[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpczdv_469.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpczdv_469.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgr2ht2tx.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgr2ht2tx.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = new ListBuffer[Long]\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123163,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdcwy8j7m.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdcwy8j7m.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var l = List[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l = l :+ l1(i)\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyfudr_zc.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyfudr_zc.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var result = List[Long]()\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) {\n                result = result :+ l1(i)\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123163,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpy01ryig9.scala:15:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpy01ryig9.scala:16:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var result = List[Long]()\n        for (i <- 0 until min(l1.length, l2.length, l3.length)) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) {\n                result = result :+ l1(i)\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123177,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmplm2acosa.scala:7:26 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until min(l1.length, l2.length, l3.length)) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^\u001b[0m\n\u001b[31m  |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mmin\u001b[0m in \u001b[33mpackage\u001b[0m \u001b[35mscala.math\u001b[0m with types\n\u001b[31m  |\u001b[0m (x: Double, y: Double): Double\n\u001b[31m  |\u001b[0m (x: Float, y: Float): Float\n\u001b[31m  |\u001b[0m (x: Long, y: Long): Long\n\u001b[31m  |\u001b[0m (x: Int, y: Int): Int\n\u001b[31m  |\u001b[0mmatch arguments ((l1.length : => Int), (l2.length : => Int), (l3.length : => Int))\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplm2acosa.scala:15:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplm2acosa.scala:16:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[3",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var l = List[Long]()\n        for (i <- 0 to l1.length - 1) {\n            if (l2(i) == l3(i)) l = l :+ l2(i)\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123177,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuxf4ohb5.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuxf4ohb5.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var result = List[Long]()\n        if (l1.length > l2.length && l1.length > l3.length) {\n            for (i <- 0 until l1.length) {\n                if (l2.length > i && l3.length > i) {\n                    if (l1(i) == l2(i) && l1(i) == l3(i)) result = result :+ l1(i)\n                }\n            }\n        } else if (l2.length > l1.length && l2.length > l3.length) {\n            for (i <- 0 until l2.length) {\n                if (l1.length > i && l3.length > i) {\n                    if (l2(i) == l1(i) && l2(i) == l3(i)) result = result :+ l2(i)\n                }\n            }\n        } else if (l3.length > l1.length && l3.length > l2.length) {\n            for (i <- 0 until l3.length) {\n                if (l1.length > i && l2.length > i) {\n                    if (l3(i) == l1(i) && l3(i) == l2(i)) result = result :+ l3(i)\n                }\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123179,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpldgg5dzr.scala:29:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpldgg5dzr.scala:30:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val result = new ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result += l1(i)\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123187,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2jcfil5a.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2jcfil5a.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = l1.zip(l2).zip(l3).filter(x => x._1._1 == x._1._2 && x._1._2 == x._2).map(x => x._1._1)\n        if (l.length == 0) \"No common elements\" else l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmppaeralwh.scala:10:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmppaeralwh.scala:11:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = new ListBuffer[Long]\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123163,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgx3w7me3.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgx3w7me3.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = new ListBuffer[Long]()\n        for (i <- 0 until min(l1.length, l2.length, l3.length)) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123187,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp7k75550r.scala:7:26 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until min(l1.length, l2.length, l3.length)) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^\u001b[0m\n\u001b[31m  |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mmin\u001b[0m in \u001b[33mpackage\u001b[0m \u001b[35mscala.math\u001b[0m with types\n\u001b[31m  |\u001b[0m (x: Double, y: Double): Double\n\u001b[31m  |\u001b[0m (x: Float, y: Float): Float\n\u001b[31m  |\u001b[0m (x: Long, y: Long): Long\n\u001b[31m  |\u001b[0m (x: Int, y: Int): Int\n\u001b[31m  |\u001b[0mmatch arguments ((l1.length : => Int), (l2.length : => Int), (l3.length : => Int))\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7k75550r.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7k75550r.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[3",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var result = List[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpczdv_469.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpczdv_469.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = new ListBuffer[Long]\n        for (i <- 0 until min(l1.length, min(l2.length, l3.length))) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123187,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpn91rdhl7.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpn91rdhl7.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var result = List[Long]()\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpoys2aj_o.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpoys2aj_o.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = new ListBuffer[Long]\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123163,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgx3w7me3.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgx3w7me3.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = new ListBuffer[Long]\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123163,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgx3w7me3.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgx3w7me3.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var result = List[Long]()\n        for (i <- 0 until min(l1.length, l2.length, l3.length)) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123163,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmped8tq1rx.scala:7:26 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until min(l1.length, l2.length, l3.length)) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^\u001b[0m\n\u001b[31m  |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mmin\u001b[0m in \u001b[33mpackage\u001b[0m \u001b[35mscala.math\u001b[0m with types\n\u001b[31m  |\u001b[0m (x: Double, y: Double): Double\n\u001b[31m  |\u001b[0m (x: Float, y: Float): Float\n\u001b[31m  |\u001b[0m (x: Long, y: Long): Long\n\u001b[31m  |\u001b[0m (x: Int, y: Int): Int\n\u001b[31m  |\u001b[0mmatch arguments ((l1.length : => Int), (l2.length : => Int), (l3.length : => Int))\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmped8tq1rx.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmped8tq1rx.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[3",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = ListBuffer[Long]()\n        for (i <- 0 until min(l1.length, l2.length, l3.length)) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpm5_xvx_j.scala:7:26 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until min(l1.length, l2.length, l3.length)) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^\u001b[0m\n\u001b[31m  |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mmin\u001b[0m in \u001b[33mpackage\u001b[0m \u001b[35mscala.math\u001b[0m with types\n\u001b[31m  |\u001b[0m (x: Double, y: Double): Double\n\u001b[31m  |\u001b[0m (x: Float, y: Float): Float\n\u001b[31m  |\u001b[0m (x: Long, y: Long): Long\n\u001b[31m  |\u001b[0m (x: Int, y: Int): Int\n\u001b[31m  |\u001b[0mmatch arguments ((l1.length : => Int), (l2.length : => Int), (l3.length : => Int))\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpm5_xvx_j.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpm5_xvx_j.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[3",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var result = List[Long]()\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpoys2aj_o.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpoys2aj_o.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var l = List[Long]()\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l = l :+ l1(i)\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfq4k7t7x.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfq4k7t7x.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val minLength = min(l1.length, min(l2.length, l3.length))\n        val result = new ListBuffer[Long]\n        for (i <- 0 until minLength) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result += l1(i)\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123176,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp95smv4fc.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp95smv4fc.scala:15:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = new ListBuffer[Long]\n        for (i <- 0 until min(l1.length, min(l2.length, l3.length))) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpksw0a16w.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpksw0a16w.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123176,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4u421qsp.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4u421qsp.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val list = new ListBuffer[Long]\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) list += l1(i)\n        }\n        list.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123187,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpla38a2a8.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpla38a2a8.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var result = List[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpczdv_469.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpczdv_469.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var result = List[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpczdv_469.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpczdv_469.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var result = List[Long]()\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpoys2aj_o.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpoys2aj_o.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = new ListBuffer[Long]\n        val min = min(min(l1.length, l2.length), l3.length)\n        for (i <- 0 until min) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp4zbrq592.scala:7:18 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmin\u001b[0m = min(min(l1.length, l2.length), l3.length)\n\u001b[31m\u001b[31m  |\u001b[0m                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35mmin\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp4zbrq592.scala:7:22 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmin\u001b[0m = min(min(l1.length, l2.length), l3.length)\n\u001b[31m\u001b[31m  |\u001b[0m                      ^\u001b[0m\n\u001b[31m  |\u001b[0m                      Recursive \u001b[33mvalue\u001b[0m \u001b[35mmin\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4zbrq592.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4zbrq592.sc",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = new ListBuffer[Long]\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123163,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdcwy8j7m.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdcwy8j7m.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = new ListBuffer[Long]\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123163,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdcwy8j7m.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdcwy8j7m.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = new ListBuffer[Long]\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123187,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_00wlbop.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_00wlbop.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val common = new ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) common += l1(i)\n        }\n        common.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpb7x_zoq7.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpb7x_zoq7.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val minLength = min(l1.length, min(l2.length, l3.length))\n        val result = new ArrayBuffer[Long]()\n        for (i <- 0 until minLength) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result += l1(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123187,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpppaiypi1.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpppaiypi1.scala:15:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgr2ht2tx.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgr2ht2tx.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val result = new ListBuffer[Long]\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result += l1(i)\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123163,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpq8a6vgvm.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpq8a6vgvm.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = new ListBuffer[Long]\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123163,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdcwy8j7m.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdcwy8j7m.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val minLength = min(l1.length, min(l2.length, l3.length))\n        val list = new ListBuffer[Long]\n        for (i <- 0 until minLength) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) list += l1(i)\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123187,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpq4r82o47.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpq4r82o47.scala:15:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var result = List[Long]()\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpoys2aj_o.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpoys2aj_o.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgr2ht2tx.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgr2ht2tx.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = new ListBuffer[Long]\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123163,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgx3w7me3.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgx3w7me3.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var result = List[Long]()\n        var index = 0\n        while (index < l1.length && index < l2.length && index < l3.length) {\n            if (l1(index) == l2(index) && l2(index) == l3(index)) {\n                result = result :+ l1(index)\n            }\n            index += 1\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123187,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuzo3k6fb.scala:17:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuzo3k6fb.scala:18:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var result = List[Long]()\n        for (i <- 0 until min(l1.length, l2.length, l3.length)) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123163,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmped8tq1rx.scala:7:26 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until min(l1.length, l2.length, l3.length)) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^\u001b[0m\n\u001b[31m  |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mmin\u001b[0m in \u001b[33mpackage\u001b[0m \u001b[35mscala.math\u001b[0m with types\n\u001b[31m  |\u001b[0m (x: Double, y: Double): Double\n\u001b[31m  |\u001b[0m (x: Float, y: Float): Float\n\u001b[31m  |\u001b[0m (x: Long, y: Long): Long\n\u001b[31m  |\u001b[0m (x: Int, y: Int): Int\n\u001b[31m  |\u001b[0mmatch arguments ((l1.length : => Int), (l2.length : => Int), (l3.length : => Int))\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmped8tq1rx.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmped8tq1rx.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[3",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = new ListBuffer[Long]\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123163,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdcwy8j7m.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdcwy8j7m.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = l1.zip(l2).zip(l3).filter(x => x._1._1 == x._1._2 && x._1._1 == x._2).map(x => x._1._1)\n        if (l.isEmpty) \"No common elements\" else l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123187,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3tdofqvj.scala:10:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3tdofqvj.scala:11:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = ListBuffer[Long]()\n        for (i <- 0 until min(l1.length, l2.length, l3.length)) {\n            if (l1(i) == l2(i) && l1(i) == l3(i)) l += l1(i)\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123187,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpgr_hnj0m.scala:7:26 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until min(l1.length, l2.length, l3.length)) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^\u001b[0m\n\u001b[31m  |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mmin\u001b[0m in \u001b[33mpackage\u001b[0m \u001b[35mscala.math\u001b[0m with types\n\u001b[31m  |\u001b[0m (x: Double, y: Double): Double\n\u001b[31m  |\u001b[0m (x: Float, y: Float): Float\n\u001b[31m  |\u001b[0m (x: Long, y: Long): Long\n\u001b[31m  |\u001b[0m (x: Int, y: Int): Int\n\u001b[31m  |\u001b[0mmatch arguments ((l1.length : => Int), (l2.length : => Int), (l3.length : => Int))\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgr_hnj0m.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgr_hnj0m.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[3",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val minLength = min(min(l1.length, l2.length), l3.length)\n        val result = new ListBuffer[Long]()\n        for (i <- 0 until minLength) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result += l1(i)\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123187,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpweeumg6o.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpweeumg6o.scala:15:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = new ListBuffer[Long]\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123163,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdcwy8j7m.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdcwy8j7m.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = new ListBuffer[Long]\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdra29nvv.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdra29nvv.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var result = List[Long]()\n        var i = 0\n        while (i < l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n            i += 1\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123187,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp77a25am2.scala:15:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp77a25am2.scala:16:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgr2ht2tx.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgr2ht2tx.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = ListBuffer[Long]()\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyek9tgei.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyek9tgei.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = ListBuffer[Long]()\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyek9tgei.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyek9tgei.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = new ListBuffer[Long]\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123163,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdcwy8j7m.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdcwy8j7m.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = ListBuffer[Long]()\n        for (i <- 0 to min(l1.length, l2.length, l3.length) - 1) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123187,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpat78kurr.scala:7:23 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m to min(l1.length, l2.length, l3.length) - \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^\u001b[0m\n\u001b[31m  |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mmin\u001b[0m in \u001b[33mpackage\u001b[0m \u001b[35mscala.math\u001b[0m with types\n\u001b[31m  |\u001b[0m (x: Double, y: Double): Double\n\u001b[31m  |\u001b[0m (x: Float, y: Float): Float\n\u001b[31m  |\u001b[0m (x: Long, y: Long): Long\n\u001b[31m  |\u001b[0m (x: Int, y: Int): Int\n\u001b[31m  |\u001b[0mmatch arguments ((l1.length : => Int), (l2.length : => Int), (l3.length : => Int))\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpat78kurr.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpat78kurr.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgr2ht2tx.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgr2ht2tx.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var l = List[Long]()\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l = l :+ l1(i)\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfq4k7t7x.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfq4k7t7x.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgr2ht2tx.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgr2ht2tx.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var result = List[Long]()\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) {\n                result = result :+ l1(i)\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123163,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpy01ryig9.scala:15:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpy01ryig9.scala:16:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = l1.zip(l2).zip(l3).map(x => (x._1._1, x._1._2, x._2)).filter(x => x._1 == x._2 && x._2 == x._3).map(x => x._1)\n        if (l.isEmpty) \"No common elements\"\n        else l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123162,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdyar42pp.scala:11:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdyar42pp.scala:12:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var result = List[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) {\n                result = result :+ l1(i)\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123187,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp01uuh9e4.scala:15:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp01uuh9e4.scala:16:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var result = List[Long]()\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpoys2aj_o.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpoys2aj_o.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var result = List[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpczdv_469.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpczdv_469.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var result = List[Long]()\n        for (i <- 0 until min(l1.length, l2.length, l3.length)) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123163,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmped8tq1rx.scala:7:26 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until min(l1.length, l2.length, l3.length)) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^\u001b[0m\n\u001b[31m  |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mmin\u001b[0m in \u001b[33mpackage\u001b[0m \u001b[35mscala.math\u001b[0m with types\n\u001b[31m  |\u001b[0m (x: Double, y: Double): Double\n\u001b[31m  |\u001b[0m (x: Float, y: Float): Float\n\u001b[31m  |\u001b[0m (x: Long, y: Long): Long\n\u001b[31m  |\u001b[0m (x: Int, y: Int): Int\n\u001b[31m  |\u001b[0mmatch arguments ((l1.length : => Int), (l2.length : => Int), (l3.length : => Int))\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmped8tq1rx.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmped8tq1rx.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[3",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = new ListBuffer[Long]\n        for (i <- 0 until min(l1.length, l2.length, l3.length)) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123164,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpttgsd1w6.scala:7:26 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until min(l1.length, l2.length, l3.length)) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^\u001b[0m\n\u001b[31m  |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mmin\u001b[0m in \u001b[33mpackage\u001b[0m \u001b[35mscala.math\u001b[0m with types\n\u001b[31m  |\u001b[0m (x: Double, y: Double): Double\n\u001b[31m  |\u001b[0m (x: Float, y: Float): Float\n\u001b[31m  |\u001b[0m (x: Long, y: Long): Long\n\u001b[31m  |\u001b[0m (x: Int, y: Int): Int\n\u001b[31m  |\u001b[0mmatch arguments ((l1.length : => Int), (l2.length : => Int), (l3.length : => Int))\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpttgsd1w6.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpttgsd1w6.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[3",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgr2ht2tx.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgr2ht2tx.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = new ListBuffer[Long]\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123163,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdcwy8j7m.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdcwy8j7m.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = new ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123163,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpoqtk161m.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpoqtk161m.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123176,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4u421qsp.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4u421qsp.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = ListBuffer[Long]()\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l1(i) == l3(i)) l += l1(i)\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123162,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2ax7nqx5.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2ax7nqx5.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}