{
  "name": "mbpp_583_catalan_number",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_583_catalan_number.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val cache = new Array[Long](num.toInt + 1)\n        cache(0) = 1\n        cache(1) = 1\n        for (i <- 2 to num.toInt) {\n            var sum = 0L\n            for (j <- 0 until i) {\n                sum += cache(j) * cache(i - j - 1)\n            }\n            cache(i) = sum\n        }\n        cache(num.toInt)",
    "        var result : Long = 1\n        for (i <- 2 to num) {\n            result = result * (i + num) / i\n        }\n        result",
    "        var result = 1L\n        for (i <- 2 to num) {\n            result = result * (num + i) / i\n        }\n        result",
    "        val cache = new Array[Long](num.toInt + 1)\n        cache(0) = 1\n        cache(1) = 1\n        for (i <- 2 to num.toInt) {\n            var sum = 0L\n            for (j <- 0 until i) {\n                sum += cache(j) * cache(i - j - 1)\n            }\n            cache(i) = sum\n        }\n        cache(num.toInt)",
    "        val factorial = (1 to num.toInt).foldLeft(1)(_ * _)\n        factorial / (factorial / (num + 1) * factorial / (num - 1))",
    "        val cache = new HashMap[Long, Long]\n        def catalanNumberHelper(num : Long) : Long = {\n            if (num == 0) 1\n            else if (cache.contains(num)) cache(num)\n            else {\n                var sum = 0L\n                for (i <- 0 until num) {\n                    sum += catalanNumberHelper(i) * catalanNumberHelper(num - i - 1)\n                }\n                cache += (num -> sum)\n                sum\n            }\n        }\n        catalanNumberHelper(num)",
    "        val cache = new Array[Long](num.toInt + 1)\n        cache(0) = 1\n        for (i <- 1 to num.toInt) {\n            var sum = 0L\n            for (j <- 0 until i) {\n                sum += cache(j) * cache(i - j - 1)\n            }\n            cache(i) = sum\n        }\n        cache(num.toInt)",
    "        val cache = new HashMap[Long, Long]\n        def catalanNumberHelper(num : Long) : Long = {\n            if (num == 0) 1\n            else if (cache.contains(num)) cache(num)\n            else {\n                var result = 0L\n                for (i <- 0L until num) {\n                    result += catalanNumberHelper(i) * catalanNumberHelper(num - i - 1)\n                }\n                cache += (num -> result)\n                result\n            }\n        }\n        catalanNumberHelper(num)",
    "        var result : Long = 1\n        for (i <- 1 to num.toInt) {\n            result = result * (num + i) / i\n        }\n        result",
    "        var result = 1L\n        for (i <- 1L to num) {\n            result = result * (num + i) / i\n        }\n        result / (num + 1)",
    "        var result : Long = 1\n        for (i <- 2 to num) {\n            result = result * (i + num) / i\n        }\n        result",
    "        val catalan = new Array[Long](num.toInt + 1)\n        catalan(0) = 1\n        catalan(1) = 1\n        for (i <- 2 to num.toInt) {\n            catalan(i) = 0\n            for (j <- 0 until i) {\n                catalan(i) += catalan(j) * catalan(i - j - 1)\n            }\n        }\n        catalan(num.toInt)",
    "        val catalan = new Array[Long](num.toInt + 1)\n        catalan(0) = 1\n        catalan(1) = 1\n        for (i <- 2 to num.toInt) {\n            catalan(i) = 0\n            for (j <- 0 until i) {\n                catalan(i) += catalan(j) * catalan(i - j - 1)\n            }\n        }\n        catalan(num.toInt)",
    "        val cache = new Array[Long](num.toInt + 1)\n        cache(0) = 1\n        cache(1) = 1\n        for (i <- 2 to num.toInt) {\n            var sum = 0L\n            for (j <- 0 until i) {\n                sum += cache(j) * cache(i - j - 1)\n            }\n            cache(i) = sum\n        }\n        cache(num.toInt)",
    "        var result = 1L\n        for (i <- 1 to num) {\n            result = result * (num + i) / i\n        }\n        result / (num + 1)",
    "        if (num == 0) 1\n        else {\n            var sum = 0L\n            for (i <- 0 to num - 1) {\n                sum += catalanNumber(i) * catalanNumber(num - i - 1)\n            }\n            sum\n        }",
    "        val dp = new Array[Long](num.toInt + 1)\n        dp(0) = 1\n        for (i <- 1 to num.toInt) {\n            dp(i) = 0\n            for (j <- 0 until i) {\n                dp(i) += dp(j) * dp(i - j - 1)\n            }\n        }\n        dp(num.toInt)",
    "        if (num == 0) 1\n        else {\n            var sum = 0L\n            for (i <- 0 to num - 1) {\n                sum += catalanNumber(i) * catalanNumber(num - i - 1)\n            }\n            sum\n        }",
    "        var result : Long = 1\n        for (i <- 1 to num) {\n            result = result * (num + i) / i\n        }\n        result / (num + 1)",
    "        var res = 1L\n        for (i <- 2 to num) {\n            res = res * (num + i) / i\n        }\n        res"
  ]
}