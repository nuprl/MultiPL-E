{
  "name": "mbpp_123_amicable_numbers_sum",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_123_amicable_numbers_sum.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var sum = 0L\n        for (i <- 1L to limit) {\n            val divisors = divisors(i)\n            val sumOfDivisors = divisors.sum\n            if (sumOfDivisors != i && divisors(sumOfDivisors) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = sumOfDivisors(i)\n            if (a != i && sumOfDivisors(a) == i) sum += i\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = sumOfDivisors(i)\n            if (a != i && sumOfDivisors(a) == i) sum += i\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = sumOfDivisors(i)\n            if (a != i && sumOfDivisors(a) == i) sum += i\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) > i && divisors(i) <= limit.toInt && divisors(divisors(i)) == i) sum += i\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = sumOfDivisors(i)\n            if (a != i && sumOfDivisors(a) == i) sum += i\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val j = divisors(i)\n            if (j <= limit.toInt && divisors(j) == i && i != j) sum += i\n        }\n        sum",
    "        val sumOfDivisors = Array.fill(limit.toInt + 1)(0L)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                sumOfDivisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (sumOfDivisors(i) != i && sumOfDivisors(i) <= limit && sumOfDivisors(sumOfDivisors(i).toInt) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = sumOfDivisors(i)\n            if (a > i && sumOfDivisors(a) == i) sum += i + a\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val j = divisors(i)\n            if (j > i && divisors(j) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val j = divisors(i)\n            if (j <= limit.toInt && divisors(j) == i && i != j) {\n                sum += i\n            }\n        }\n        sum",
    "        val divisorSums = new Array[Long](limit.toInt + 1)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisorSums(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisorSums(i) > i && divisorSums(i) <= limit.toInt && divisorSums(divisorSums(i).toInt) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) > i && divisors(i) <= limit.toInt && divisors(divisors(i)) == i) {\n                sum += i + divisors(i)\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = sumOfDivisors(i)\n            val b = sumOfDivisors(a)\n            if (i == b && a != b) sum += i\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- 2 * i to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val j = divisors(i)\n            if (j <= limit.toInt && divisors(j) == i && i != j) {\n                sum += i\n            }\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) > i && divisors(divisors(i)) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        val factors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                factors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val j = factors(i)\n            if (j != i && factors(j) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1L to limit) {\n            val sumOfDivisors = divisors(i).sum\n            if (i != sumOfDivisors && divisors(sumOfDivisors).sum == i) sum += i\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) > i && divisors(i) <= limit.toInt && divisors(divisors(i)) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        val divisorSums = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisorSums(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisorSums(i) > i && divisorSums(i) <= limit.toInt && divisorSums(divisorSums(i)) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val sumOfDivisors = divisors(i).sum\n            if (sumOfDivisors != i && divisors(sumOfDivisors).sum == i) sum += i\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val sumOfDivisors = divisors(i).sum\n            if (sumOfDivisors != i && divisors(sumOfDivisors).sum == i) sum += i\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = sumOfDivisors(i)\n            if (a != i && sumOfDivisors(a) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val divisors = divisorsOf(i)\n            val sumOfDivisors = divisors.sum\n            if (sumOfDivisors != i && divisorsOf(sumOfDivisors).sum == i) {\n                sum += i\n            }\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val j = divisors(i)\n            if (j <= limit.toInt && divisors(j) == i && i != j) {\n                sum += i\n            }\n        }\n        sum",
    "        val divisors = Array.fill[Long](limit.toInt + 1)(1)\n        for (i <- 2 to limit.toInt) {\n            for (j <- 2 to (limit.toInt / i)) {\n                divisors(i * j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 2 to limit.toInt) {\n            if (divisors(i) != i && divisors(i) <= limit && divisors(divisors(i).toInt) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        val sumOfDivisors = Array.fill(limit.toInt + 1)(1L)\n        for (i <- 2 to limit.toInt) {\n            for (j <- 2 * i to limit.toInt by i) {\n                sumOfDivisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 2 to limit.toInt) {\n            if (sumOfDivisors(i) <= limit && sumOfDivisors(i) != i && sumOfDivisors(sumOfDivisors(i).toInt) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) < limit.toInt && divisors(divisors(i)) == i && divisors(i) != i) {\n                sum += i\n            }\n        }\n        sum",
    "        val sumOfDivisors = Array.fill(limit.toInt + 1)(0L)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                sumOfDivisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (sumOfDivisors(i) > i && sumOfDivisors(i) <= limit && sumOfDivisors(sumOfDivisors(i).toInt) == i) {\n                sum += i + sumOfDivisors(i)\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = sumOfDivisors(i)\n            if (a != i && sumOfDivisors(a) == i) sum += i\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0L)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) <= limit.toInt && divisors(i) != i && divisors(divisors(i).toInt) == i) sum += i\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) > i && divisors(i) <= limit.toInt && divisors(divisors(i)) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val j = divisors(i)\n            if (j > i && divisors(j) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) > i && divisors(i) <= limit.toInt && divisors(divisors(i)) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        val divisorSums = new Array[Long](limit.toInt + 1)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisorSums(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisorSums(i) > i && divisorSums(i) <= limit && divisorSums(divisorSums(i).toInt) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val j = divisors(i)\n            if (j <= limit.toInt && j != i && divisors(j) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        val sumOfDivisors = Array.fill(limit.toInt + 1)(0L)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                sumOfDivisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val j = sumOfDivisors(i)\n            if (i != j && sumOfDivisors(j) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) != i && divisors(divisors(i)) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = sumOfDivisors(i)\n            if (a != i && sumOfDivisors(a) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val j = divisors(i)\n            if (j > i && divisors(j) == i) {\n                sum += i + j\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = sumOfProperDivisors(i)\n            if (a != i) {\n                val b = sumOfProperDivisors(a)\n                if (b == i) {\n                    sum += i\n                }\n            }\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) > i && divisors(i) <= limit.toInt && divisors(divisors(i)) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = sumOfDivisors(i)\n            if (a != i && sumOfDivisors(a) == i) sum += i\n        }\n        sum",
    "        val sumOfDivisors = Array.fill(limit.toInt + 1)(0L)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                sumOfDivisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val j = sumOfDivisors(i)\n            if (j > i && j <= limit.toInt && sumOfDivisors(j) == i) {\n                sum += i + j\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = sumOfProperDivisors(i)\n            if (a != i && sumOfProperDivisors(a) == i) sum += i\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = sumOfProperDivisors(i)\n            if (a != i && sumOfProperDivisors(a) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val sumOfDivisors = sumOfDivisorsOf(i)\n            if (sumOfDivisors != i && sumOfDivisorsOf(sumOfDivisors) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val j = divisors(i)\n            if (j <= limit.toInt && divisors(j) == i && i != j) {\n                sum += i\n            }\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) != i && divisors(divisors(i)) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        val divisorSums = new Array[Long](limit.toInt + 1)\n        for (i <- 1 to limit.toInt) {\n            for (j <- 2 * i to limit.toInt by i) {\n                divisorSums(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisorSums(i) > i && divisorSums(i) <= limit && divisorSums(divisorSums(i).toInt) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        val factors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i to limit.toInt by i) {\n                factors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val j = factors(i)\n            if (j != i && factors(j) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) < limit.toInt && divisors(divisors(i)) == i && i != divisors(i)) {\n                sum += i\n            }\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val j = divisors(i)\n            if (j <= limit.toInt && i != j && divisors(j) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val divisors = divisors(i)\n            val divisorsSum = divisors.sum\n            val divisorsSumDivisors = divisors(divisorsSum)\n            if (divisorsSumDivisors.sum == i && i != divisorsSum) {\n                sum += i\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = sumOfDivisors(i)\n            if (a > i && sumOfDivisors(a) == i) sum += i + a\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = sumOfProperDivisors(i)\n            if (a != i) {\n                val b = sumOfProperDivisors(a)\n                if (b == i) {\n                    sum += i\n                }\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = sumOfProperDivisors(i)\n            if (a != i && sumOfProperDivisors(a) == i) sum += i\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = sumOfDivisors(i)\n            val b = sumOfDivisors(a)\n            if (i == b && i != a) {\n                sum += i\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1L to limit) {\n            val divisors = divisors(i)\n            val divisorsSum = divisors.sum\n            if (divisorsSum != i && divisors(divisorsSum) == i) sum += i\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) > i && divisors(i) <= limit.toInt && divisors(divisors(i)) == i) {\n                sum += i + divisors(i)\n            }\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) > i && divisors(i) <= limit.toInt && divisors(divisors(i)) == i) {\n                sum += i + divisors(i)\n            }\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) != i && divisors(divisors(i)) == i) {\n                sum += i\n            }\n        }\n        return sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0L)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val j = divisors(i)\n            if (j <= limit.toInt && i == divisors(j) && i != j) {\n                sum += i\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = divisorsSum(i)\n            val b = divisorsSum(a)\n            if (i == b && i != a) {\n                sum += i\n            }\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) > i && divisors(i) <= limit.toInt && divisors(divisors(i)) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) > i && divisors(i) <= limit.toInt && divisors(divisors(i)) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = sumOfDivisors(i)\n            if (a != i && sumOfDivisors(a) == i) sum += i\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0L)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) != i && divisors(i) <= limit && divisors(divisors(i).toInt) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = sumOfDivisors(i)\n            if (a != i && sumOfDivisors(a) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) > i && divisors(divisors(i)) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) > i && divisors(i) <= limit.toInt && divisors(divisors(i)) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = sumOfProperDivisors(i)\n            if (a != i && sumOfProperDivisors(a) == i) sum += i\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- 2 * i to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) > i && divisors(i) <= limit.toInt && divisors(divisors(i)) == i) {\n                sum += i + divisors(i)\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = divisorsSum(i)\n            val b = divisorsSum(a)\n            if (i == b && i != a) sum += i\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) > i && divisors(i) <= limit.toInt && divisors(divisors(i)) == i) {\n                sum += i + divisors(i)\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = sumOfDivisors(i)\n            if (a != i && sumOfDivisors(a) == i) sum += i\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 2 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 2 to limit.toInt) {\n            if (divisors(i) > i && divisors(i) <= limit.toInt && divisors(divisors(i)) == i) {\n                sum += i + divisors(i)\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val j = sumOfDivisors(i)\n            if (i != j && sumOfDivisors(j) == i) sum += i\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val j = divisors(i)\n            if (j <= limit.toInt && i == divisors(j) && i != j) {\n                sum += i\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = sumOfDivisors(i)\n            if (a != i && sumOfDivisors(a) == i) sum += i\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) != i && divisors(i) <= limit.toInt && divisors(divisors(i)) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0L)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) < limit && divisors(i) != i && divisors(divisors(i).toInt) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        val sums = Array.fill(limit.toInt + 1)(1L)\n        for (i <- 2 to limit.toInt) {\n            for (j <- 2 * i to limit.toInt by i) {\n                sums(j) += i\n            }\n        }\n        (1 to limit.toInt).filter(i => i < sums(i) && i == sums(sums(i))).sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val j = divisors(i)\n            if (i != j && divisors(j) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val divisors = divisorsSum(i)\n            if (divisors != i && divisors <= limit && divisorsSum(divisors) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0L)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) != i && divisors(i) <= limit && divisors(divisors(i).toInt) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        val amicables = new HashSet[Long]\n        for (i <- 1 to limit.toInt) {\n            val sum = divisors(i).sum\n            if (sum != i && divisors(sum).sum == i) {\n                amicables += i\n                amicables += sum\n            }\n        }\n        amicables.sum",
    "        def sumOfDivisors(n : Long) : Long = {\n            val sqrt = sqrt(n).toLong\n            val divisors = ArrayBuffer[Long]()\n            for (i <- 1 to sqrt) {\n                if (n % i == 0) {\n                    divisors += i\n                    if (i != n / i) divisors += n / i\n                }\n            }\n            divisors.sum - n\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val sumOfDivisorsOfI = sumOfDivisors(i)\n            if (sumOfDivisorsOfI > i && sumOfDivisors(sumOfDivisorsOfI) == i) sum += i + sumOfDivisorsOfI\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) > i && divisors(i) <= limit.toInt && divisors(divisors(i)) == i) {\n                sum += i + divisors(i)\n            }\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 2 to limit.toInt) {\n            for (j <- i to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 2 to limit.toInt) {\n            if (divisors(i) != i && divisors(i) <= limit && divisors(divisors(i)) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) > i && divisors(i) <= limit.toInt && divisors(divisors(i)) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val j = divisors(i)\n            if (j <= limit.toInt && divisors(j) == i && i != j) sum += i\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) > i && divisors(i) <= limit.toInt && divisors(divisors(i)) == i) {\n                sum += i + divisors(i)\n            }\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) > i && divisors(i) <= limit.toInt && divisors(divisors(i)) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 2L to limit) {\n            val a = sumOfProperDivisors(i)\n            if (a != i && sumOfProperDivisors(a) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val sumOfDivisors = divisors(i).sum\n            if (i != sumOfDivisors && divisors(sumOfDivisors).sum == i) {\n                sum += i\n            }\n        }\n        sum",
    "        val sumOfDivisors = Array.fill(limit.toInt + 1)(0L)\n        for (i <- 1 to limit.toInt) {\n            for (j <- 2 * i to limit.toInt by i) {\n                sumOfDivisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (sumOfDivisors(i) > i && sumOfDivisors(i) <= limit && sumOfDivisors(sumOfDivisors(i).toInt) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = sumOfProperDivisors(i)\n            if (a != i && sumOfProperDivisors(a) == i) sum += i\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val j = divisors(i)\n            if (divisors(j) == i && i != j) {\n                sum += i\n            }\n        }\n        sum",
    "        val primes = new PrimeSet(limit)\n        val divisors = Array.fill(limit.toInt + 1)(0L)\n        for (i <- 2 to limit.toInt) {\n            if (divisors(i) == 0) {\n                var j = i\n                while (j <= limit) {\n                    divisors(j) += i\n                    j += i\n                }\n            }\n        }\n        var sum = 0L\n        for (i <- 2 to limit.toInt) {\n            val j = divisors(i)\n            if (divisors(j) == i && i != j) {\n                sum += i\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1L to limit) {\n            val a = sumOfProperDivisors(i)\n            if (a != i && sumOfProperDivisors(a) == i) sum += i\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val sum1 = divisors(i).sum\n            val sum2 = divisors(sum1).sum\n            if (sum2 == i && sum1 != i) sum += i\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) > i && divisors(i) <= limit.toInt && divisors(divisors(i)) == i) {\n                sum += i + divisors(i)\n            }\n        }\n        sum",
    "        val divisorSums = Array.fill(limit.toInt + 1)(0L)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisorSums(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisorSums(i) > i && divisorSums(i) <= limit.toInt && divisorSums(divisorSums(i).toInt) == i) {\n                sum += i + divisorSums(i)\n            }\n        }\n        sum",
    "        val factors = Array.fill[List[Long]](limit.toInt + 1)(Nil)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                factors(j) = i :: factors(j)\n            }\n        }\n        val sums = Array.fill[Long](limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            sums(i) = factors(i).sum\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (sums(i) <= limit && sums(i) != i && sums(sums(i).toInt) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        val factors = Array.fill(limit.toInt + 1)(List[Int]())\n        for (i <- 1 to limit.toInt) {\n            for (j <- i to limit.toInt by i) {\n                factors(j) = i :: factors(j)\n            }\n        }\n        val sums = factors.map(x => x.sum)\n        val amicable = new HashSet[Int]\n        for (i <- 1 to limit.toInt) {\n            val sum = sums(i)\n            if (sum <= limit.toInt && sum != i && sums(sum) == i) {\n                amicable += i\n                amicable += sum\n            }\n        }\n        amicable.sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) > i && divisors(i) <= limit.toInt && divisors(divisors(i)) == i) {\n                sum += i + divisors(i)\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = sumOfDivisors(i)\n            if (a != i && sumOfDivisors(a) == i) sum += i\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1L to limit) {\n            val a = sumOfDivisors(i)\n            if (a != i && sumOfDivisors(a) == i) sum += i\n        }\n        sum",
    "        val sumOfDivisors = Array.fill(limit.toInt + 1)(0L)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                sumOfDivisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (sumOfDivisors(i) <= limit.toInt && sumOfDivisors(i) != i && sumOfDivisors(sumOfDivisors(i)) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) > i && divisors(i) <= limit.toInt && divisors(divisors(i)) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) > i && divisors(divisors(i)) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) > i && divisors(divisors(i)) == i) {\n                sum += i\n            }\n        }\n        return sum",
    "        val sumOfDivisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                sumOfDivisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (sumOfDivisors(i) > i && sumOfDivisors(i) <= limit.toInt && sumOfDivisors(sumOfDivisors(i)) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        val factors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                factors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val j = factors(i)\n            if (j != i && factors(j) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val sumOfDivisors = divisors(i).sum\n            if (sumOfDivisors != i && divisors(sumOfDivisors).sum == i) {\n                sum += i\n            }\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) < limit.toInt && divisors(divisors(i)) == i && divisors(i) != i) {\n                sum += i\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = sumOfProperDivisors(i)\n            if (a != i && sumOfProperDivisors(a) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = sumOfProperDivisors(i)\n            if (a != i && sumOfProperDivisors(a) == i) sum += i\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) > i && divisors(i) <= limit.toInt && divisors(divisors(i)) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        val sumOfDivisors = Array.fill(limit.toInt + 1)(1L)\n        for (i <- 2 to limit.toInt) {\n            for (j <- 2 * i to limit.toInt by i) {\n                sumOfDivisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 2 to limit.toInt) {\n            val j = sumOfDivisors(i)\n            if (j <= limit && sumOfDivisors(j) == i && i != j) {\n                sum += i\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val sum1 = (1 to (i / 2)).filter(i % _ == 0).sum\n            val sum2 = (1 to (sum1 / 2)).filter(sum1 % _ == 0).sum\n            if (sum2 == i && sum1 != i) sum += i\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = divisorsSum(i)\n            if (a != i && divisorsSum(a) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = divisors(i).sum\n            val b = divisors(a).sum\n            if (i == b && i != a) sum += i\n        }\n        sum",
    "        def sumOfDivisors(n : Long) : Long = {\n            var sum = 1L\n            for (i <- 2L to sqrt(n).toLong) {\n                if (n % i == 0) {\n                    sum += i\n                    if (i != n / i) sum += n / i\n                }\n            }\n            sum\n        }\n        var sum = 0L\n        for (i <- 1L to limit) {\n            val a = sumOfDivisors(i)\n            if (a != i && sumOfDivisors(a) == i) sum += i\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) > i && divisors(i) <= limit.toInt && divisors(divisors(i)) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = sumOfProperDivisors(i)\n            val b = sumOfProperDivisors(a)\n            if (i == b && a != b) sum += i\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = sumOfDivisors(i)\n            if (a != i && sumOfDivisors(a) == i) sum += i\n        }\n        sum",
    "        val sumOfDivisors = Array.fill(limit.toInt + 1)(1L)\n        for (i <- 2 to limit.toInt) {\n            for (j <- 2 * i to limit.toInt by i) {\n                sumOfDivisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (sumOfDivisors(i) <= limit && sumOfDivisors(i) != i && sumOfDivisors(sumOfDivisors(i).toInt) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = sumOfProperDivisors(i)\n            if (a != i && sumOfProperDivisors(a) == i) sum += i\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) != i && divisors(divisors(i)) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) > i && divisors(divisors(i)) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        val sumOfDivisors = Array.fill(limit.toInt + 1)(0L)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                sumOfDivisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (sumOfDivisors(i) > i && sumOfDivisors(i) <= limit && sumOfDivisors(sumOfDivisors(i).toInt) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = sumOfProperDivisors(i)\n            if (a != i) {\n                val b = sumOfProperDivisors(a)\n                if (b == i) {\n                    sum += i\n                }\n            }\n        }\n        sum",
    "        val sumOfDivisors = Array.fill(limit.toInt + 1)(0L)\n        for (i <- 1 to limit.toInt) {\n            for (j <- 2 * i to limit.toInt by i) {\n                sumOfDivisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (sumOfDivisors(i) > i && sumOfDivisors(i) <= limit.toInt && sumOfDivisors(sumOfDivisors(i).toInt) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) > i && divisors(i) <= limit.toInt && divisors(divisors(i)) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1L to limit) {\n            val a = sumOfProperDivisors(i)\n            if (a != i && sumOfProperDivisors(a) == i) sum += i\n        }\n        return sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) > i && divisors(i) <= limit.toInt && divisors(divisors(i)) == i) {\n                sum += i + divisors(i)\n            }\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) > i && divisors(i) <= limit.toInt && divisors(divisors(i)) == i) {\n                sum += i + divisors(i)\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = sumOfProperDivisors(i)\n            if (a != i) {\n                val b = sumOfProperDivisors(a)\n                if (b == i) sum += i\n            }\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) divisors(j) += i\n        }\n        (1 to limit.toInt).filter(i => divisors(i) != i && divisors(divisors(i)) == i).sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = sumOfProperDivisors(i)\n            val b = sumOfProperDivisors(a)\n            if (i == b && i != a) sum += i\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- 2 * i to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) > i && divisors(i) <= limit.toInt && divisors(divisors(i)) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        val primes = Array.fill(limit.toInt + 1)(true)\n        primes(0) = false\n        primes(1) = false\n        for (i <- 2 to sqrt(limit).toInt) {\n            if (primes(i)) {\n                var j = i * i\n                while (j <= limit) {\n                    primes(j) = false\n                    j += i\n                }\n            }\n        }\n        val primeList = primes.zipWithIndex.filter(_._1).map(_._2)\n        val primeSet = primeList.toSet\n        val primeFactorization = Array.fill(limit.toInt + 1)(List[Int]())\n        for (i <- 2 to limit.toInt) {\n            if (primeFactorization(i).isEmpty) {\n                var j = i\n                var k = 0\n                while (j > 1) {\n                    if (j % primeList(k) == 0) {\n                        primeFactorization(i) = primeList(k) :: primeFactorization(i)\n                        j /= primeList(k)\n                    }\n                    else k += 1\n                }\n                var m = i\n                while (m <= limit) {\n                    primeFactorization(m) = primeFactorization(i)\n                    m += i\n                }\n            }\n        }\n        val divisorSums = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            var j = 1\n            for (k <- primeFactorization(i)) {\n                j *= (pow(k, primeFactorization(i).count(_ == k) + 1) - 1) / (k - 1)\n            }\n            divisorSums(i) = j.toInt - i\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisorSums(i) <= limit && divisorSums(i) > 0 && divisorSums(divisorSums(i)) == i && i != divisorSums(i)) {\n                sum += i\n            }\n        }\n       ",
    "        val sumOfDivisors = Array.fill(limit.toInt + 1)(0L)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                sumOfDivisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (sumOfDivisors(i) < limit && i == sumOfDivisors(sumOfDivisors(i).toInt) && i != sumOfDivisors(i)) {\n                sum += i\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val sumOfDivisors = divisors(i).sum\n            if (sumOfDivisors != i && divisors(sumOfDivisors).sum == i) {\n                sum += i\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = divisorsSum(i)\n            if (a != i && divisorsSum(a) == i) sum += i\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0L)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) > i && divisors(i) <= limit && divisors(divisors(i).toInt) == i) sum += i\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = sumOfProperDivisors(i)\n            if (a != i && sumOfProperDivisors(a) == i) sum += i\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = sumOfDivisors(i)\n            val b = sumOfDivisors(a)\n            if (i == b && a != b) sum += i\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) > i && divisors(i) <= limit.toInt && divisors(divisors(i)) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = sumOfDivisors(i)\n            if (a != i && sumOfDivisors(a) == i) sum += i\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val sumOfDivisors = divisors(i).sum\n            if (sumOfDivisors != i && divisors(sumOfDivisors).sum == i) sum += i\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = divisorsSum(i)\n            if (a != i) {\n                val b = divisorsSum(a)\n                if (b == i) {\n                    sum += i\n                }\n            }\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) > i && divisors(i) <= limit.toInt && divisors(divisors(i)) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 2 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 2 to limit.toInt) {\n            if (divisors(i) < limit.toInt && divisors(divisors(i)) == i && divisors(i) != i) {\n                sum += i\n            }\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) > i && divisors(i) <= limit.toInt && divisors(divisors(i)) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1L to limit) {\n            val sumOfDivisors = divisors(i).sum\n            if (i != sumOfDivisors && divisors(sumOfDivisors).sum == i) sum += i\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = sumOfProperDivisors(i)\n            if (a != i && sumOfProperDivisors(a) == i) sum += i\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = sumOfDivisors(i)\n            val b = sumOfDivisors(a)\n            if (i == b && i != a) sum += i\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) > i && divisors(i) <= limit.toInt && divisors(divisors(i)) == i) {\n                sum += i + divisors(i)\n            }\n        }\n        sum",
    "        val sumOfDivisors = Array.fill(limit.toInt + 1)(0L)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                sumOfDivisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val j = sumOfDivisors(i)\n            if (j <= limit && i != j && sumOfDivisors(j) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val j = divisors(i)\n            if (j <= limit.toInt && divisors(j) == i && i != j) {\n                sum += i\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = sumOfProperDivisors(i)\n            if (a != i && sumOfProperDivisors(a) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val j = divisors(i)\n            if (j != i && divisors(j) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        val sums = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- 2 * i to limit.toInt by i) {\n                sums(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (sums(i) > i && sums(i) <= limit.toInt && sums(sums(i)) == i) {\n                sum += i + sums(i)\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1L to limit) {\n            val sumOfDivisors = divisors(i).sum\n            if (sumOfDivisors > i && divisors(sumOfDivisors).sum == i) sum += i\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val divisors = divisors(i)\n            val sumOfDivisors = divisors.sum\n            if (sumOfDivisors > i) {\n                val sumOfDivisorsOfSumOfDivisors = divisors(sumOfDivisors).sum\n                if (sumOfDivisorsOfSumOfDivisors == i) {\n                    sum += i\n                }\n            }\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) > i && divisors(i) <= limit.toInt && divisors(divisors(i)) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val sum1 = divisorsSum(i)\n            val sum2 = divisorsSum(sum1)\n            if (sum2 == i && sum1 != sum2) sum += i\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) != i && divisors(divisors(i)) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        val divisors = Array.fill[Long](limit.toInt + 1)(1)\n        for (i <- 2 to limit.toInt) {\n            for (j <- 2 to (limit.toInt / i)) {\n                divisors(i * j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 2 to limit.toInt) {\n            if (divisors(i) != i && divisors(i) <= limit && divisors(divisors(i).toInt) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 2 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 2 to limit.toInt) {\n            val j = divisors(i)\n            if (i != j && divisors(j) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val j = divisors(i)\n            if (i != j && divisors(j) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val j = sumOfProperDivisors(i)\n            if (i != j && sumOfProperDivisors(j) == i) sum += i\n        }\n        sum",
    "        val sumOfProperDivisors = Array.fill(limit.toInt + 1)(0L)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                sumOfProperDivisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (sumOfProperDivisors(i) > i && sumOfProperDivisors(i) <= limit.toInt && sumOfProperDivisors(sumOfProperDivisors(i).toInt) == i) {\n                sum += i + sumOfProperDivisors(i)\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = sumOfDivisors(i)\n            val b = sumOfDivisors(a)\n            if (i == b && i != a) sum += i\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1L to limit) {\n            val a = sumOfDivisors(i)\n            if (i != a && sumOfDivisors(a) == i) sum += i\n        }\n        sum",
    "        val d = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                d(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (d(i) > i && d(i) <= limit.toInt && d(d(i)) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        val sum = new Array[Long](limit.toInt + 1)\n        for (i <- 1 to limit.toInt) {\n            val j = sumOfProperDivisors(i)\n            if (j <= limit.toInt) sum(j) += i\n        }\n        var result = 0L\n        for (i <- 1 to limit.toInt) {\n            if (sum(i) > i && sum(i) <= limit.toInt && sum(sum(i)) == i) result += i + sum(i)\n        }\n        result",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) > i && divisors(i) <= limit.toInt && divisors(divisors(i)) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- 2 * i to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) < limit.toInt && divisors(divisors(i)) == i && divisors(i) != i) {\n                sum += i\n            }\n        }\n        sum",
    "        def sumOfDivisors(n : Long) : Long = {\n            var sum = 1L\n            for (i <- 2L to sqrt(n).toLong) {\n                if (n % i == 0) {\n                    sum += i\n                    if (i != n / i) sum += n / i\n                }\n            }\n            sum\n        }\n        var sum = 0L\n        for (i <- 1L to limit) {\n            val j = sumOfDivisors(i)\n            if (i != j && sumOfDivisors(j) == i) sum += i\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val d = divisorSum(i)\n            if (i != d && divisorSum(d) == i) sum += i\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = sumOfDivisors(i)\n            if (a > i && sumOfDivisors(a) == i) {\n                sum += i + a\n            }\n        }\n        sum",
    "        val sums = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                sums(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (sums(i) > i && sums(i) <= limit.toInt && sums(sums(i)) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = sumOfProperDivisors(i)\n            if (a != i) {\n                val b = sumOfProperDivisors(a)\n                if (b == i) sum += i\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = sumOfDivisors(i)\n            if (a != i && sumOfDivisors(a) == i) sum += i\n        }\n        sum",
    "        val divisors = Array.ofDim[Long](limit.toInt + 1)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val j = divisors(i)\n            if (j <= limit && divisors(j) == i && i != j) {\n                sum += i\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val sumOfDivisors = divisors(i).sum\n            if (sumOfDivisors != i && divisors(sumOfDivisors).sum == i) {\n                sum += i\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = sumOfProperDivisors(i)\n            val b = sumOfProperDivisors(a)\n            if (b == i && a != b) sum += i\n        }\n        sum",
    "        val sumOfDivisors = Array.fill(limit.toInt + 1)(0L)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                sumOfDivisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (sumOfDivisors(i) > i && sumOfDivisors(i) <= limit && sumOfDivisors(sumOfDivisors(i).toInt) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) > i && divisors(i) <= limit.toInt && divisors(divisors(i)) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        val factors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                factors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val j = factors(i)\n            if (j != i && j <= limit.toInt && factors(j) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        val sumOfDivisors = Array.fill(limit.toInt + 1)(1L)\n        for (i <- 2 to limit.toInt) {\n            for (j <- 2 * i to limit.toInt by i) {\n                sumOfDivisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 2 to limit.toInt) {\n            if (sumOfDivisors(i) != i && sumOfDivisors(i) <= limit && sumOfDivisors(sumOfDivisors(i).toInt) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1L to limit) {\n            val a = sumOfProperDivisors(i)\n            if (a != i && sumOfProperDivisors(a) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i * 2 to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) != i && divisors(i) <= limit.toInt && divisors(divisors(i)) == i) {\n                sum += i\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = sumOfProperDivisors(i)\n            val b = sumOfProperDivisors(a)\n            if (i == b && i != a) sum += i\n        }\n        sum",
    "        val divisors = Array.fill(limit.toInt + 1)(0)\n        for (i <- 1 to limit.toInt) {\n            for (j <- i to limit.toInt by i) {\n                divisors(j) += i\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            if (divisors(i) > i && divisors(i) <= limit.toInt && divisors(divisors(i)) == i) {\n                sum += i + divisors(i)\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to limit.toInt) {\n            val a = divisors(i).sum\n            val b = divisors(a).sum\n            if (i == b && i != a) sum += i\n        }\n        sum"
  ]
}