{
  "name": "mbpp_305_start_withp",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_305_start_withp.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.charAt(0) == 'p') {\n                result += word + \" \"\n            }\n        }\n        result",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.charAt(0) == 'p') {\n                result += word + \" \"\n            }\n        }\n        result",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.charAt(0) == 'p') {\n                result += word + \" \"\n            }\n        }\n        result",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result = result + word + \" \"\n            }\n        }\n        result",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result",
    "        words.filter(word => word.startsWith(\"p\")).mkString(\" \")",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result",
    "        words.filter(x => x.startsWith(\"p\")).mkString(\" \")",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.charAt(0) == 'p') {\n                result += word + \" \"\n            }\n        }\n        result",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result",
    "        val result = words.filter(x => x.startsWith(\"p\"))\n        result.mkString(\" \")",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result",
    "        var ret = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                ret += word + \" \"\n            }\n        }\n        ret",
    "        val filtered = words.filter(word => word.startsWith(\"p\"))\n        if (filtered.length < 2) {\n            return \"Not enough words\"\n        }\n        return filtered(0) + \" \" + filtered(1)",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result",
    "        val result = words.filter(word => word.startsWith(\"p\")).take(2)\n        result.mkString(\" \")",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result",
    "        words.filter(word => word.startsWith(\"p\")).mkString(\" \")",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result",
    "        words.filter(x => x.startsWith(\"p\")).mkString(\",\")",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result",
    "        words.filter(_.startsWith(\"p\")).mkString(\" \")",
    "        words.filter(word => word.startsWith(\"p\")).mkString(\" \")",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.charAt(0) == 'p') {\n                result += word + \" \"\n            }\n        }\n        result",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result",
    "        words.filter(word => word.startsWith(\"p\")).mkString(\" \")",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result",
    "        words.filter(x => x.startsWith(\"p\")).mkString(\" \")",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result",
    "        val pwords = words.filter(w => w.startsWith(\"p\"))\n        if (pwords.length >= 2) pwords(0) + \" \" + pwords(1) else \"No words start with p\"",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result",
    "        words.filter(x => x.startsWith(\"p\")).mkString(\" \")",
    "        val pwords = words.filter(word => word.startsWith(\"p\"))\n        val pwords2 = pwords.map(word => word.toUpperCase)\n        pwords2.mkString(\" \")",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result = result + word + \" \"\n            }\n        }\n        result",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.charAt(0) == 'p') {\n                result += word + \" \"\n            }\n        }\n        result",
    "        words.filter(x => x.startsWith(\"p\")).take(2).mkString(\" \")",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.charAt(0) == 'p') {\n                result += word + \" \"\n            }\n        }\n        result",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result",
    "        val pwords = words.filter(word => word.startsWith(\"p\"))\n        pwords.mkString(\" \")",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result",
    "        words.filter(x => x.startsWith(\"p\")).mkString(\" \")",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result",
    "        val pwords = words.filter(word => word.startsWith(\"p\"))\n        pwords.mkString(\" \")",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result",
    "        return words.filter(x => x.startsWith(\"p\")).mkString(\" \")",
    "        words.filter(x => x.startsWith(\"p\")).mkString(\" \")",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.charAt(0) == 'p') {\n                result += word + \" \"\n            }\n        }\n        result",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.charAt(0) == 'p') {\n                result += word + \" \"\n            }\n        }\n        result",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.head == 'p') {\n                result += word + \" \"\n            }\n        }\n        result",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result",
    "        var result : String = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result = result + word + \" \"\n            }\n        }\n        result",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result",
    "        words.filter(x => x.startsWith(\"p\")).mkString(\" \")",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result",
    "        val pwords = words.filter(word => word.startsWith(\"p\"))\n        pwords.mkString(\", \")",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result = result + word + \" \"\n            }\n        }\n        result",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result",
    "        var result = \"\"\n        for(word <- words) {\n            if(word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result",
    "        val wordsWithP = words.filter(word => word.startsWith(\"p\"))\n        wordsWithP.mkString(\" \")",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result = result + \" \" + word\n            }\n        }\n        result",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result",
    "        val pwords = words.filter(word => word.startsWith(\"p\"))\n        pwords.mkString(\", \")",
    "        words.filter(x => x.startsWith(\"p\")).mkString(\" \")",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.charAt(0) == 'p') {\n                result += word + \" \"\n            }\n        }\n        result",
    "        val result = words.filter(_.startsWith(\"p\"))\n        result.mkString(\" \")",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.charAt(0) == 'p') {\n                result += word + \" \"\n            }\n        }\n        result",
    "        words.filter(x => x.startsWith(\"p\")).mkString(\" \")",
    "        words.filter(word => word.startsWith(\"p\")).mkString(\" \")",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.charAt(0) == 'p') {\n                result += word + \" \"\n            }\n        }\n        result",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result",
    "        val result = words.filter(word => word.startsWith(\"p\"))\n        result.mkString(\" \")",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result",
    "        words.filter(x => x.startsWith(\"p\")).mkString(\" \")",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result",
    "        val pwords = words.filter(word => word.startsWith(\"p\"))\n        pwords.mkString(\" \")",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result = result + word + \" \"\n            }\n        }\n        result",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result",
    "        var result = \"\"\n        for(word <- words) {\n            if(word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result",
    "        words.filter(x => x.startsWith(\"p\")).mkString(\" \")",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result = result + word + \" \"\n            }\n        }\n        result",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.charAt(0) == 'p') {\n                result += word + \" \"\n            }\n        }\n        result",
    "        words.filter(x => x.startsWith(\"p\")).mkString(\" \")",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result",
    "        var result = \"\"\n        for(word <- words) {\n            if(word.charAt(0) == 'p') {\n                result = result + word + \" \"\n            }\n        }\n        result",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result",
    "        val result = words.filter(x => x.charAt(0) == 'p')\n        result.mkString(\" \")",
    "        words.filter(word => word.startsWith(\"p\")).mkString(\" \")",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result",
    "        words.filter(word => word.startsWith(\"p\")).mkString(\" \")",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result",
    "        words.filter(word => word.startsWith(\"p\")).mkString(\" \")",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.charAt(0) == 'p') {\n                result += word + \" \"\n            }\n        }\n        result",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result",
    "        val pwords = words.filter(x => x.startsWith(\"p\"))\n        pwords.mkString(\" \")",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result",
    "        words.filter(x => x.startsWith(\"p\")).mkString(\" \")",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.charAt(0) == 'p') {\n                result += word + \" \"\n            }\n        }\n        result",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result = result + word + \" \"\n            }\n        }\n        result",
    "        var result = \"\"\n        for(word <- words) {\n            if(word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result",
    "        words.filter(x => x.startsWith(\"p\")).mkString(\" \")",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result",
    "        words.filter(x => x.startsWith(\"p\")).mkString(\" \")",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.charAt(0) == 'p') {\n                result += word + \" \"\n            }\n        }\n        result",
    "        val pwords = words.filter(x => x.startsWith(\"p\"))\n        pwords.mkString(\" \")",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.charAt(0) == 'p') {\n                result += word + \" \"\n            }\n        }\n        result",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result",
    "        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result"
  ]
}