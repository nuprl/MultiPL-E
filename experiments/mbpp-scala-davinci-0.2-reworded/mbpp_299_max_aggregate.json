{
  "name": "mbpp_299_max_aggregate",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_299_max_aggregate.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val lst = stdata.filter(_.isRight).map(_.right.get)\n        if (lst.isEmpty) Left(\"No data\")\n        else Right(lst.max)",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)",
    "        val stdata1 = stdata.filter(_.isRight)\n        if (stdata1.isEmpty) Left(\"No data\")\n        else Right(stdata1.map(_.right.get).max)",
    "        val (s, l) = stdata.partition(_.isLeft)\n        if (s.isEmpty) {\n            val agg = l.map(_.right.get).sum\n            Right(agg)\n        } else {\n            Left(s.map(_.left.get).mkString(\",\"))\n        }",
    "        val l = stdata.filter(_.isRight).map(_.right.get)\n        if (l.isEmpty) Left(\"No data\")\n        else Right(l.max)",
    "        val lst = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val lst2 = lst.filter(x => x match {\n            case Left(s) => false\n            case Right(l) => true\n        })\n        if (lst2.length == 0) {\n            Left(\"No data\")\n        } else {\n            Right(lst2.map(x => x match {\n                case Left(s) => 0\n                case Right(l) => l\n            }).max)\n        }",
    "        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val lefts = data.filter(x => x.isLeft)\n        if (lefts.length > 0) return lefts(0)\n        val rights = data.filter(x => x.isRight)\n        val sum = rights.map(x => x match {\n            case Right(l) => l\n        }).sum\n        Right(sum)",
    "        val l = stdata.filter(_.isRight).map(_.right.get)\n        if (l.isEmpty) Left(\"No numeric data\")\n        else Right(l.max)",
    "        var max = 0L\n        var max_string = \"\"\n        var max_count = 0L\n        var max_count_string = \"\"\n        var count = 0L\n        var count_string = \"\"\n        for (i <- stdata) {\n            i match {\n                case Left(s) => {\n                    if (count > max_count) {\n                        max_count = count\n                        max_count_string = count_string\n                    }\n                    count = 0\n                    count_string = s\n                }\n                case Right(n) => {\n                    count += n\n                }\n            }\n        }\n        if (count > max_count) {\n            max_count = count\n            max_count_string = count_string\n        }\n        if (max_count > max) {\n            max = max_count\n            max_string = max_count_string\n        }\n        if (max == 0) Left(\"No data\") else Right(max)",
    "        var max = 0L\n        var err = \"\"\n        stdata.foreach(x => x match {\n            case Left(s) => err = s\n            case Right(n) => max = max.max(n)\n        })\n        if (err == \"\") Right(max)\n        else Left(err)",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)",
    "        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val ldata = data.filter(x => x match {\n            case Left(s) => false\n            case Right(l) => true\n        })\n        if (ldata.isEmpty) {\n            Left(\"No data\")\n        } else {\n            val max = ldata.map(x => x match {\n                case Left(s) => 0\n                case Right(l) => l\n            }).max\n            Right(max)\n        }",
    "        val (strs, nums) = stdata.partition(_.isLeft)\n        if (strs.isEmpty) {\n            Right(nums.map(_.right.get).sum)\n        } else {\n            Left(strs.map(_.left.get).mkString(\"\"))\n        }",
    "        val (strs, nums) = stdata.partition(_.isLeft)\n        if (strs.isEmpty) {\n            Right(nums.map(_.right.get).max)\n        } else {\n            Left(strs.map(_.left.get).mkString(\",\"))\n        }",
    "        val longs = stdata.filter(_.isRight).map(_.right.get)\n        if (longs.isEmpty) Left(\"No longs\")\n        else Right(longs.max)",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)",
    "        val (strs, nums) = stdata.partition(_.isLeft)\n        if (strs.length > 0) Left(\"Error\")\n        else Right(nums.map(_.right.get).max)",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)"
  ]
}