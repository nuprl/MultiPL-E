{
  "name": "mbpp_299_max_aggregate",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_299_max_aggregate.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val lst = stdata.filter(_.isRight).map(_.right.get)\n        if (lst.isEmpty) Left(\"No data\")\n        else Right(lst.max)",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)",
    "        val stdata1 = stdata.filter(_.isRight)\n        if (stdata1.isEmpty) Left(\"No data\")\n        else Right(stdata1.map(_.right.get).max)",
    "        val (s, l) = stdata.partition(_.isLeft)\n        if (s.isEmpty) {\n            val agg = l.map(_.right.get).sum\n            Right(agg)\n        } else {\n            Left(s.map(_.left.get).mkString(\",\"))\n        }",
    "        val l = stdata.filter(_.isRight).map(_.right.get)\n        if (l.isEmpty) Left(\"No data\")\n        else Right(l.max)",
    "        val lst = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val lst2 = lst.filter(x => x match {\n            case Left(s) => false\n            case Right(l) => true\n        })\n        if (lst2.length == 0) {\n            Left(\"No data\")\n        } else {\n            Right(lst2.map(x => x match {\n                case Left(s) => 0\n                case Right(l) => l\n            }).max)\n        }",
    "        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val lefts = data.filter(x => x.isLeft)\n        if (lefts.length > 0) return lefts(0)\n        val rights = data.filter(x => x.isRight)\n        val sum = rights.map(x => x match {\n            case Right(l) => l\n        }).sum\n        Right(sum)",
    "        val l = stdata.filter(_.isRight).map(_.right.get)\n        if (l.isEmpty) Left(\"No numeric data\")\n        else Right(l.max)",
    "        var max = 0L\n        var max_string = \"\"\n        var max_count = 0L\n        var max_count_string = \"\"\n        var count = 0L\n        var count_string = \"\"\n        for (i <- stdata) {\n            i match {\n                case Left(s) => {\n                    if (count > max_count) {\n                        max_count = count\n                        max_count_string = count_string\n                    }\n                    count = 0\n                    count_string = s\n                }\n                case Right(n) => {\n                    count += n\n                }\n            }\n        }\n        if (count > max_count) {\n            max_count = count\n            max_count_string = count_string\n        }\n        if (max_count > max) {\n            max = max_count\n            max_string = max_count_string\n        }\n        if (max == 0) Left(\"No data\") else Right(max)",
    "        var max = 0L\n        var err = \"\"\n        stdata.foreach(x => x match {\n            case Left(s) => err = s\n            case Right(n) => max = max.max(n)\n        })\n        if (err == \"\") Right(max)\n        else Left(err)",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)",
    "        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val ldata = data.filter(x => x match {\n            case Left(s) => false\n            case Right(l) => true\n        })\n        if (ldata.isEmpty) {\n            Left(\"No data\")\n        } else {\n            val max = ldata.map(x => x match {\n                case Left(s) => 0\n                case Right(l) => l\n            }).max\n            Right(max)\n        }",
    "        val (strs, nums) = stdata.partition(_.isLeft)\n        if (strs.isEmpty) {\n            Right(nums.map(_.right.get).sum)\n        } else {\n            Left(strs.map(_.left.get).mkString(\"\"))\n        }",
    "        val (strs, nums) = stdata.partition(_.isLeft)\n        if (strs.isEmpty) {\n            Right(nums.map(_.right.get).max)\n        } else {\n            Left(strs.map(_.left.get).mkString(\",\"))\n        }",
    "        val longs = stdata.filter(_.isRight).map(_.right.get)\n        if (longs.isEmpty) Left(\"No longs\")\n        else Right(longs.max)",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)",
    "        val (strs, nums) = stdata.partition(_.isLeft)\n        if (strs.length > 0) Left(\"Error\")\n        else Right(nums.map(_.right.get).max)",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)",
    "        val (left, right) = stdata.partition(_.isLeft)\n        if (left.isEmpty) {\n            val max = right.map(_.right.get).max\n            Right(max)\n        } else {\n            Left(left.map(_.left.get).mkString(\",\"))\n        }",
    "        val (strs, nums) = stdata.partition(_.isLeft)\n        if (strs.isEmpty) {\n            val max = nums.map(_.right.get).max\n            Right(max)\n        } else {\n            Left(\"Error: List contains strings\")\n        }",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)",
    "        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val lefts = data.filter(x => x match {\n            case Left(s) => true\n            case Right(l) => false\n        })\n        val rights = data.filter(x => x match {\n            case Left(s) => false\n            case Right(l) => true\n        })\n        if (lefts.length > 0) {\n            lefts.head\n        } else {\n            Right(rights.map(x => x match {\n                case Left(s) => 0\n                case Right(l) => l\n            }).max)\n        }",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)",
    "        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val max = data.filter(x => x match {\n            case Left(s) => false\n            case Right(l) => true\n        }).map(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        }).max\n        val min = data.filter(x => x match {\n            case Left(s) => false\n            case Right(l) => true\n        }).map(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        }).min\n        val maxStr = data.filter(x => x match {\n            case Left(s) => true\n            case Right(l) => false\n        }).map(x => x match {\n            case Left(s) => s\n            case Right(l) => \"\"\n        }).max\n        val minStr = data.filter(x => x match {\n            case Left(s) => true\n            case Right(l) => false\n        }).map(x => x match {\n            case Left(s) => s\n            case Right(l) => \"\"\n        }).min\n        if (maxStr.length > minStr.length) {\n            Left(maxStr)\n        } else {\n            Right(max - min)\n        }",
    "        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val lefts = data.filter(x => x.isLeft)\n        if (lefts.length > 0) {\n            return lefts(0)\n        }\n        val rights = data.filter(x => x.isRight)\n        val rights2 = rights.map(x => x match {\n            case Right(l) => l\n        })\n        val max = rights2.max\n        return Right(max)",
    "        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val lefts = data.filter(x => x match {\n            case Left(s) => true\n            case Right(l) => false\n        })\n        val rights = data.filter(x => x match {\n            case Left(s) => false\n            case Right(l) => true\n        })\n        if (lefts.length > 0) {\n            return lefts(0)\n        }\n        else {\n            return Right(rights.map(x => x match {\n                case Left(s) => 0\n                case Right(l) => l\n            }).reduceLeft(_ + _))\n        }",
    "        var max : Long = 0\n        var max_index : Int = 0\n        var count : Int = 0\n        for (data <- stdata) {\n            data match {\n                case Left(s) => {\n                    if (s.length > max) {\n                        max = s.length\n                        max_index = count\n                    }\n                }\n                case Right(l) => {\n                    if (l > max) {\n                        max = l\n                        max_index = count\n                    }\n                }\n            }\n            count += 1\n        }\n        return stdata(max_index)",
    "        val l = stdata.filter(_.isRight).map(_.right.get)\n        if (l.isEmpty) Left(\"No data\")\n        else Right(l.max)",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\") else Right(data.max)",
    "        val l = stdata.filter(_.isRight).map(_.right.get)\n        if (l.isEmpty) Left(\"No data\")\n        else Right(l.max)",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)",
    "        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val l = data.filter(x => x match {\n            case Left(s) => false\n            case Right(l) => true\n        }).map(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        })\n        val s = data.filter(x => x match {\n            case Left(s) => true\n            case Right(l) => false\n        }).map(x => x match {\n            case Left(s) => s\n            case Right(l) => \"0\"\n        })\n        if (s.length > 0) Left(s.mkString(\",\"))\n        else Right(l.sum)",
    "        val (lefts, rights) = stdata.partition(_.isLeft)\n        if (lefts.isEmpty) {\n            val max = rights.map(_.right.get).max\n            Right(max)\n        } else {\n            Left(lefts.map(_.left.get).mkString(\"\\n\"))\n        }",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.length == 0) Left(\"No data\")\n        else Right(data.max)",
    "        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val lefts = data.filter(x => x match {\n            case Left(s) => true\n            case Right(l) => false\n        })\n        if (lefts.length > 0) {\n            return lefts(0)\n        }\n        val rights = data.filter(x => x match {\n            case Left(s) => false\n            case Right(l) => true\n        })\n        val sum = rights.map(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        }).sum\n        return Right(sum)",
    "        val (strs, nums) = stdata.partition(_.isLeft)\n        if (strs.isEmpty) Right(nums.map(_.right.get).max)\n        else Left(\"No numbers\")",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.length == 0) Left(\"No data\")\n        else Right(data.max)",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.length == 0) Left(\"No data\")\n        else Right(data.max)",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.length == 0) Left(\"No data\")\n        else Right(data.max)",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)",
    "        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(n) => Right(n)\n        })\n        val ndata = data.filter(x => x match {\n            case Left(s) => false\n            case Right(n) => true\n        })\n        if (ndata.length == 0) {\n            Left(\"No data\")\n        } else {\n            val max = ndata.reduce((x, y) => x match {\n                case Left(s) => x\n                case Right(n) => y match {\n                    case Left(s) => y\n                    case Right(m) => Right(max(n, m))\n                }\n            })\n            max\n        }",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)",
    "        val l = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val r = l.filter(x => x match {\n            case Left(s) => false\n            case Right(l) => true\n        })\n        if (r.isEmpty) {\n            Left(\"No data\")\n        } else {\n            Right(r.map(x => x match {\n                case Left(s) => 0\n                case Right(l) => l\n            }).max)\n        }",
    "        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val sum = data.foldLeft(0L)((x, y) => y match {\n            case Left(s) => x\n            case Right(l) => x + l\n        })\n        val count = data.foldLeft(0)((x, y) => y match {\n            case Left(s) => x\n            case Right(l) => x + 1\n        })\n        if (count == 0) Left(\"No data\")\n        else Right(sum / count)",
    "        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val longs = data.filter(x => x match {\n            case Left(s) => false\n            case Right(l) => true\n        })\n        if (longs.isEmpty) {\n            return Left(\"No Longs\")\n        }\n        val max = longs.map(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        }).max\n        return Right(max)",
    "        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val lefts = data.filter(x => x match {\n            case Left(s) => true\n            case Right(l) => false\n        })\n        if (lefts.length > 0) {\n            return lefts(0)\n        }\n        val rights = data.filter(x => x match {\n            case Left(s) => false\n            case Right(l) => true\n        })\n        if (rights.length == 0) {\n            return Left(\"No data\")\n        }\n        return Right(rights.map(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        }).max)",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)",
    "        val l = stdata.filter(_.isRight).map(_.right.get)\n        if (l.isEmpty) Left(\"No data\")\n        else Right(l.max)",
    "        val max = stdata.filter(x => x.isRight).map(x => x.right.get).max\n        val min = stdata.filter(x => x.isRight).map(x => x.right.get).min\n        val maxAggregate = max - min\n        if (maxAggregate < 0) Left(\"Error\") else Right(maxAggregate)",
    "        val l = stdata.filter(_.isRight).map(_.right.get)\n        if (l.isEmpty) Left(\"No numeric data\")\n        else Right(l.max)",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.length == 0) Left(\"No data\")\n        else Right(data.max)",
    "        val stdata_ = stdata.filter(_.isRight).map(_.right.get)\n        if (stdata_.length == 0) Left(\"No data\")\n        else Right(stdata_.max)",
    "        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val lefts = data.filter(x => x match {\n            case Left(s) => true\n            case Right(l) => false\n        })\n        if (lefts.length > 0) {\n            return lefts(0)\n        }\n        val rights = data.filter(x => x match {\n            case Left(s) => false\n            case Right(l) => true\n        })\n        val sum = rights.map(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        }).reduceLeft((x, y) => x + y)\n        return Right(sum)",
    "        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val l = data.filter(x => x match {\n            case Left(s) => false\n            case Right(l) => true\n        })\n        if (l.isEmpty) Left(\"No Data\")\n        else Right(l.map(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        }).max)",
    "        val l = stdata.filter(x => x.isRight).map(x => x.right.get)\n        if (l.length == 0) {\n            Left(\"No numeric data\")\n        } else {\n            Right(l.max)\n        }",
    "        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val lefts = data.filter(x => x match {\n            case Left(s) => true\n            case Right(l) => false\n        })\n        if (lefts.length > 0) return lefts(0)\n        val rights = data.filter(x => x match {\n            case Left(s) => false\n            case Right(l) => true\n        })\n        val max = rights.map(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        }).max\n        return Right(max)",
    "        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val lefts = data.filter(x => x match {\n            case Left(s) => true\n            case Right(l) => false\n        })\n        if (lefts.length > 0) {\n            Left(lefts.head.left.get)\n        } else {\n            Right(data.map(x => x match {\n                case Left(s) => 0\n                case Right(l) => l\n            }).reduceLeft((x, y) => x + y))\n        }",
    "        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val lefts = data.filter(x => x match {\n            case Left(s) => true\n            case Right(l) => false\n        })\n        if (lefts.length > 0) {\n            return lefts(0)\n        }\n        val rights = data.filter(x => x match {\n            case Left(s) => false\n            case Right(l) => true\n        })\n        val max = rights.map(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        }).max\n        return Right(max)",
    "        val l = stdata.filter(_.isRight).map(_.right.get)\n        if (l.isEmpty) Left(\"No data\")\n        else Right(l.max)",
    "        val (s, t) = stdata.partition(_.isLeft)\n        if (s.isEmpty) Right(t.map(_.right.get).max)\n        else Left(s.map(_.left.get).mkString(\"\\n\"))",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)",
    "        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val sum = data.foldLeft(0L)((a, b) => b match {\n            case Left(s) => a\n            case Right(l) => a + l\n        })\n        val count = data.foldLeft(0)((a, b) => b match {\n            case Left(s) => a\n            case Right(l) => a + 1\n        })\n        if (count == 0) Left(\"No data\")\n        else Right(sum / count)",
    "        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val lefts = data.filter(x => x match {\n            case Left(s) => true\n            case Right(l) => false\n        })\n        if (lefts.length > 0) {\n            return lefts(0)\n        }\n        val rights = data.filter(x => x match {\n            case Left(s) => false\n            case Right(l) => true\n        })\n        if (rights.length == 0) {\n            return Left(\"No data\")\n        }\n        return Right(rights.map(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        }).max)",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)",
    "        var max = Long.MinValue\n        var min = Long.MaxValue\n        var count = 0\n        var sum = 0L\n        var avg = 0L\n        for (i <- stdata) {\n            i match {\n                case Left(s) => return Left(s)\n                case Right(l) => {\n                    if (l > max) max = l\n                    if (l < min) min = l\n                    count += 1\n                    sum += l\n                }\n            }\n        }\n        avg = sum / count\n        Right(max + min + avg)",
    "        val (strs, longs) = stdata.partition(_.isLeft)\n        if (strs.isEmpty) Right(longs.map(_.right.get).max)\n        else Left(strs.map(_.left.get).mkString(\",\"))",
    "        val l = stdata.filter(_.isRight).map(_.right.get)\n        if (l.isEmpty) Left(\"No data\")\n        else Right(l.max)",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)",
    "        val data = stdata.map {\n            case Left(x) => Left(x)\n            case Right(x) => Right(x)\n        }\n        val sum = data.filter(_.isRight).map(_.right.get).sum\n        val count = data.filter(_.isRight).length\n        val avg = sum / count\n        val max = data.filter(_.isRight).map(_.right.get).max\n        val min = data.filter(_.isRight).map(_.right.get).min\n        val maxAggregate = max(max, max(avg, min))\n        Right(maxAggregate)",
    "        val (strings, longs) = stdata.partition(_.isLeft)\n        if (strings.isEmpty) {\n            Right(longs.map(_.right.get).max)\n        } else {\n            Left(strings.map(_.left.get).mkString(\",\"))\n        }",
    "        val (lefts, rights) = stdata.partition(_.isLeft)\n        if (lefts.isEmpty) {\n            val max = rights.map(_.right.get).max\n            Right(max)\n        } else {\n            Left(lefts.map(_.left.get).mkString(\",\"))\n        }",
    "        val lst = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(n) => Right(n)\n        })\n        val lst2 = lst.filter(x => x match {\n            case Left(s) => false\n            case Right(n) => true\n        })\n        val lst3 = lst2.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(n) => Right(n)\n        })\n        if (lst3.length == 0) Left(\"No numbers in list\")\n        else Right(lst3.map(x => x match {\n            case Left(s) => 0\n            case Right(n) => n\n        }).max)",
    "        val l = stdata.filter(_.isRight).map(_.right.get).sorted\n        if (l.length == 0) Left(\"No data\")\n        else Right(l.last)",
    "        val max = stdata.filter(_.isRight).map(_.right.get).max\n        val min = stdata.filter(_.isRight).map(_.right.get).min\n        val sum = stdata.filter(_.isRight).map(_.right.get).sum\n        val avg = sum / stdata.filter(_.isRight).map(_.right.get).size\n        val maxAggregate = max + min + sum + avg\n        Right(maxAggregate)",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\") else Right(data.max)",
    "        val stdata2 = stdata.filter(_.isRight).map(_.right.get)\n        if (stdata2.isEmpty) Left(\"No data\")\n        else Right(stdata2.max)",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        val max = data.max\n        val min = data.min\n        val sum = data.sum\n        val avg = sum / data.length\n        val agg = max + min + sum + avg\n        Right(agg)",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)",
    "        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val max = data.filter(x => x match {\n            case Left(s) => false\n            case Right(l) => true\n        }).map(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        }).max\n        val maxIndex = data.indexOf(Right(max))\n        data(maxIndex)",
    "        val l = stdata.filter(_.isRight).map(_.right.get)\n        if (l.isEmpty) Left(\"No data\")\n        else Right(l.max)",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)",
    "        val (strings, longs) = stdata.partition(_.isLeft)\n        if (strings.isEmpty) {\n            Right(longs.map(_.right.get).max)\n        } else {\n            Left(strings.map(_.left.get).mkString(\",\"))\n        }",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.size == 0) Left(\"No data\")\n        else Right(data.max)",
    "        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val lefts = data.filter(x => x match {\n            case Left(s) => true\n            case Right(l) => false\n        })\n        val rights = data.filter(x => x match {\n            case Left(s) => false\n            case Right(l) => true\n        })\n        if (lefts.size > 0) {\n            Left(lefts.head.left.get)\n        } else {\n            Right(rights.map(x => x.right.get).max)\n        }",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)",
    "        val l = stdata.filter(_.isRight).map(_.right.get)\n        if (l.isEmpty) Left(\"No data\")\n        else Right(l.max)",
    "        // Write your code here\n        val result = stdata.foldLeft(0L)((x, y) => y match {\n            case Left(s) => x\n            case Right(l) => x + l\n        })\n        if (result > 0) Right(result) else Left(\"Invalid Input\")",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)",
    "        val lst = stdata.filter(_.isRight).map(_.right.get)\n        if (lst.isEmpty) Left(\"No data\")\n        else Right(lst.max)",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.length == 0) Left(\"No data\")\n        else Right(data.max)",
    "        val (lefts, rights) = stdata.partition(_.isLeft)\n        if (lefts.isEmpty) {\n            val max = rights.map(_.right.get).max\n            Right(max)\n        } else {\n            Left(lefts.map(_.left.get).mkString(\",\"))\n        }",
    "        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val lefts = data.filter(x => x match {\n            case Left(s) => true\n            case Right(l) => false\n        })\n        if (lefts.length > 0) {\n            return lefts.head\n        }\n        val rights = data.filter(x => x match {\n            case Left(s) => false\n            case Right(l) => true\n        })\n        if (rights.length == 0) {\n            return Left(\"No data\")\n        }\n        return Right(rights.map(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        }).max)",
    "        val stdata2 = stdata.filter(_.isRight).map(_.right.get)\n        if (stdata2.isEmpty) Left(\"No data\")\n        else Right(stdata2.max)",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.length == 0) Left(\"No data\")\n        else Right(data.max)",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)",
    "        val (lefts, rights) = stdata.partition(_.isLeft)\n        if (lefts.isEmpty) {\n            Right(rights.map(_.right.get).max)\n        } else {\n            Left(lefts.map(_.left.get).mkString(\"\\n\"))\n        }",
    "        val (lefts, rights) = stdata.partition(_.isLeft)\n        if (lefts.isEmpty) {\n            val max = rights.map(_.right.get).max\n            Right(max)\n        } else {\n            val errors = lefts.map(_.left.get)\n            Left(errors.mkString(\"\\n\"))\n        }",
    "        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val l = data.filter(x => x match {\n            case Left(s) => false\n            case Right(l) => true\n        })\n        if (l.length == 0) {\n            Left(\"No data\")\n        } else {\n            val l2 = l.map(x => x match {\n                case Left(s) => 0\n                case Right(l) => l\n            })\n            val l3 = l2.map(x => x match {\n                case 0 => 0\n                case _ => 1\n            })\n            val l4 = l3.reduceLeft(_ + _)\n            if (l4 == 0) {\n                Left(\"No data\")\n            } else {\n                val l5 = l2.reduceLeft(_ + _)\n                val l6 = l5 / l4\n                Right(l6)\n            }\n        }",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.size == 0) Left(\"No data\")\n        else Right(data.max)",
    "        val l = stdata.filter(_.isRight).map(_.right.get)\n        if (l.isEmpty) Left(\"No data\")\n        else Right(l.max)",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.length == 0) Left(\"No data\")\n        else Right(data.max)",
    "        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val lefts = data.filter(x => x match {\n            case Left(s) => true\n            case Right(l) => false\n        })\n        if (lefts.length > 0) {\n            return lefts.head\n        }\n        val rights = data.filter(x => x match {\n            case Left(s) => false\n            case Right(l) => true\n        })\n        val max = rights.max(new Ordering[Either[String, Long]] {\n            def compare(x: Either[String, Long], y: Either[String, Long]) = x match {\n                case Left(s) => y match {\n                    case Left(t) => s.compare(t)\n                    case Right(l) => -1\n                }\n                case Right(l) => y match {\n                    case Left(t) => 1\n                    case Right(m) => l.compare(m)\n                }\n            }\n        })\n        max",
    "        val l = stdata.filter(_.isRight).map(_.right.get)\n        if (l.isEmpty) Left(\"No numeric data\")\n        else Right(l.max)",
    "        var max = 0L\n        var error = \"\"\n        for (i <- stdata) {\n            i match {\n                case Left(s) => error = s\n                case Right(l) => max = max + l\n            }\n        }\n        if (error != \"\") Left(error) else Right(max)",
    "        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val lefts = data.filter(x => x match {\n            case Left(s) => true\n            case Right(l) => false\n        })\n        if (lefts.length > 0) {\n            return lefts.head\n        }\n        val rights = data.filter(x => x match {\n            case Left(s) => false\n            case Right(l) => true\n        })\n        if (rights.length == 0) {\n            return Left(\"No data\")\n        }\n        return Right(rights.map(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        }).max)",
    "        val l = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val r = l.filter(x => x match {\n            case Left(s) => false\n            case Right(l) => true\n        })\n        val rr = r.map(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        })\n        val rrr = rr.foldLeft(0L)((x, y) => x + y)\n        Right(rrr)",
    "        val lst = stdata.filter(_.isRight).map(_.right.get)\n        if (lst.isEmpty) Left(\"No data found\")\n        else Right(lst.max)",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.length == 0) Left(\"No data\")\n        else Right(data.max)",
    "        val data = stdata.filter(x => x.isRight).map(x => x.right.get)\n        if (data.length == 0) Left(\"No data\")\n        else Right(data.max)",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)",
    "        // Write your code here\n        var max = 0L\n        var max_str = \"\"\n        for (e <- stdata) {\n            e match {\n                case Left(str) => {\n                    if (str.length > max_str.length) {\n                        max_str = str\n                    }\n                }\n                case Right(num) => {\n                    if (num > max) {\n                        max = num\n                    }\n                }\n            }\n        }\n        if (max_str.length > 0) {\n            Left(max_str)\n        } else {\n            Right(max)\n        }",
    "        var maxAggregate = 0L\n        var error : String = \"\"\n        for (i <- 0 until stdata.length) {\n            stdata(i) match {\n                case Left(s) => error = s\n                case Right(l) => maxAggregate = max(maxAggregate, l)\n            }\n        }\n        if (error != \"\") Left(error) else Right(maxAggregate)",
    "        val (lefts, rights) = stdata.partition(_.isLeft)\n        if (lefts.isEmpty) {\n            val max = rights.map(_.right.get).max\n            Right(max)\n        } else {\n            val leftsStr = lefts.map(_.left.get).mkString(\", \")\n            Left(leftsStr)\n        }",
    "        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val agg = data.foldLeft(Right(0L))((acc, x) => acc match {\n            case Left(s) => Left(s)\n            case Right(l) => x match {\n                case Left(s) => Left(s)\n                case Right(l) => Right(l + acc.right.get)\n            }\n        })\n        agg",
    "        val l = stdata.filter(_.isRight).map(_.right.get)\n        if (l.isEmpty) Left(\"No numeric data\")\n        else Right(l.max)",
    "        val max = stdata.filter(_.isRight).map(_.right.get).max\n        val min = stdata.filter(_.isRight).map(_.right.get).min\n        val sum = stdata.filter(_.isRight).map(_.right.get).sum\n        val avg = sum / stdata.filter(_.isRight).size\n        val maxAggregate = max + min + sum + avg\n        if (maxAggregate > Int.MaxValue) Left(\"Overflow\") else Right(maxAggregate)",
    "        val (left, right) = stdata.partition(_.isLeft)\n        if (left.length > 0) {\n            Left(left.map(_.left.get).mkString(\",\"))\n        } else {\n            Right(right.map(_.right.get).max)\n        }",
    "        val data = stdata.map(_.right.getOrElse(0))\n        val max = data.max\n        val min = data.min\n        val sum = data.sum\n        val avg = sum / data.length\n        val maxAggregate = max(max(max, min), avg)\n        Right(maxAggregate)",
    "        var max = 0L\n        for (x <- stdata) {\n            x match {\n                case Left(s) => return Left(s)\n                case Right(l) => {\n                    if (l > max) max = l\n                }\n            }\n        }\n        return Right(max)",
    "        val data = stdata.flatMap(x => x match {\n            case Left(s) => None\n            case Right(l) => Some(l)\n        })\n        if (data.isEmpty) Left(\"Empty list\")\n        else Right(data.max)",
    "        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val sum = data.filter(x => x match {\n            case Left(s) => false\n            case Right(l) => true\n        }).map(x => x match {\n            case Right(l) => l\n        }).sum\n        val count = data.filter(x => x match {\n            case Left(s) => false\n            case Right(l) => true\n        }).map(x => x match {\n            case Right(l) => l\n        }).length\n        if (count == 0) Left(\"No data\")\n        else Right(sum / count)",
    "        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val sum = data.map(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        }).sum\n        val count = data.map(x => x match {\n            case Left(s) => 0\n            case Right(l) => 1\n        }).sum\n        if (count == 0) Left(\"No data\")\n        else Right(sum / count)",
    "        val (str, num) = stdata.partition(_.isLeft)\n        if (str.isEmpty) Right(num.map(_.right.get).max)\n        else Left(\"Error: String found\")",
    "        val (lefts, rights) = stdata.partition(_.isLeft)\n        if (lefts.isEmpty) {\n            val max = rights.map(_.right.get).max\n            Right(max)\n        } else {\n            Left(lefts.map(_.left.get).mkString(\",\"))\n        }",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)",
    "        val (strs, nums) = stdata.partition(_.isLeft)\n        if (strs.isEmpty) Right(nums.map(_.right.get).max)\n        else Left(strs.map(_.left.get).mkString(\",\"))",
    "        val sum = stdata.foldLeft(0L)((acc, x) => x match {\n            case Left(s) => acc\n            case Right(l) => acc + l\n        })\n        if (sum > 0) Right(sum) else Left(\"No positive numbers\")",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)",
    "        val stdata_ = stdata.filter(_.isRight).map(_.right.get)\n        if (stdata_.isEmpty) Left(\"No data\")\n        else Right(stdata_.max)",
    "        if (stdata.isEmpty)\n            Left(\"Empty list\")\n        else {\n            val agg = stdata.map(x => x match {\n                case Left(s) => 0\n                case Right(l) => l\n            }).reduceLeft(_ + _)\n            Right(agg)\n        }",
    "        var max = Long.MinValue\n        var max_index = -1\n        var max_count = 0\n        var count = 0\n        var index = 0\n        for (i <- stdata) {\n            i match {\n                case Left(s) => {\n                    if (count > max_count) {\n                        max_count = count\n                        max_index = index\n                    }\n                    count = 0\n                    index += 1\n                }\n                case Right(l) => {\n                    count += l\n                }\n            }\n        }\n        if (count > max_count) {\n            max_count = count\n            max_index = index\n        }\n        if (max_index == -1) Left(\"No data\") else Right(max_count)",
    "        val (lefts, rights) = stdata.partition(_.isLeft)\n        if (lefts.isEmpty) {\n            val max = rights.map(_.right.get).max\n            Right(max)\n        } else {\n            Left(lefts.map(_.left.get).mkString(\",\"))\n        }",
    "        var max = 0L\n        var max_string = \"\"\n        var max_long = 0L\n        for (i <- stdata) {\n            i match {\n                case Left(s) => {\n                    if (s.length > max_string.length) max_string = s\n                }\n                case Right(l) => {\n                    if (l > max_long) max_long = l\n                }\n            }\n        }\n        if (max_string.length > max_long) Left(max_string) else Right(max_long)",
    "        val data = stdata.filter(x => x.isRight).map(x => x.right.get)\n        if (data.length == 0) {\n            Left(\"No data\")\n        } else {\n            Right(data.max)\n        }",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)",
    "        val (strs, longs) = stdata.partition(_.isLeft)\n        if (strs.isEmpty) {\n            Right(longs.map(_.right.get).max)\n        } else {\n            Left(strs.map(_.left.get).mkString(\",\"))\n        }",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.length == 0) Left(\"No data\")\n        else Right(data.max)",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)",
    "        // Write your code here\n        val l = stdata.filter(_.isRight).map(_.right.get)\n        if (l.isEmpty) Left(\"No data\")\n        else Right(l.max)",
    "        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val lefts = data.filter(x => x match {\n            case Left(s) => true\n            case Right(l) => false\n        })\n        if (lefts.length > 0) {\n            return lefts(0)\n        }\n        val rights = data.filter(x => x match {\n            case Left(s) => false\n            case Right(l) => true\n        })\n        val rights2 = rights.map(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        })\n        val max = rights2.max\n        return Right(max)",
    "        val (strs, longs) = stdata.partition(_.isLeft)\n        if (strs.isEmpty) {\n            Right(longs.map(_.right.get).max)\n        } else {\n            Left(strs.map(_.left.get).mkString(\",\"))\n        }",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.length == 0) Left(\"No data\")\n        else Right(data.max)",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.length == 0) Left(\"No data\")\n        else Right(data.max)",
    "        stdata.foldLeft(Right(0L))((acc, x) => {\n            (acc, x) match {\n                case (Right(a), Right(b)) => Right(max(a, b))\n                case (Left(a), Right(b)) => Left(a)\n                case (Right(a), Left(b)) => Left(b)\n                case (Left(a), Left(b)) => Left(a)\n            }\n        })",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)",
    "        val data = stdata.map(_.right.getOrElse(0L))\n        val max = data.max\n        val min = data.min\n        val sum = data.sum\n        val avg = sum / data.length\n        val agg = max + min + sum + avg\n        Right(agg)",
    "        val l = stdata.filter(_.isRight).map(_.right.get)\n        if (l.isEmpty) Left(\"No data\")\n        else Right(l.max)",
    "        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val lefts = data.filter(x => x match {\n            case Left(s) => true\n            case Right(l) => false\n        })\n        if (lefts.length > 0) {\n            return lefts.head\n        }\n        val rights = data.filter(x => x match {\n            case Left(s) => false\n            case Right(l) => true\n        })\n        val rights2 = rights.map(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        })\n        val rights3 = rights2.map(x => x.toLong)\n        val rights4 = rights3.map(x => x.toDouble)\n        val rights5 = rights4.map(x => log(x))\n        val rights6 = rights5.map(x => exp(x))\n        val rights7 = rights6.map(x => x.toLong)\n        val rights8 = rights7.map(x => x.toInt)\n        val rights9 = rights8.map(x => x.toLong)\n        val rights10 = rights9.map(x => x.toDouble)\n        val rights11 = rights10.map(x => log(x))\n        val rights12 = rights11.map(x => exp(x))\n        val rights13 = rights12.map(x => x.toLong)\n        val rights14 = rights13.map(x => x.toInt)\n        val rights15 = rights14.map(x => x.toLong)\n        val rights16 = rights15.map(x => x.toDouble)\n        val rights17 = rights16.map(x => log(x))\n        val rights18 = rights17.map(x => exp(x))\n        val rights19 = rights18.map(x => x.toLong)\n        val rights20 = rights19.map(x => x.toInt)\n        val rights21 = rights20.map(x => x.toLong)\n        val rights22",
    "        val stdata2 = stdata.filter(_.isRight).map(_.right.get)\n        if (stdata2.isEmpty) Left(\"No numeric data\")\n        else Right(stdata2.max)",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)",
    "        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val lefts = data.filter(x => x match {\n            case Left(s) => true\n            case Right(l) => false\n        })\n        if (lefts.length > 0) {\n            lefts(0)\n        } else {\n            val rights = data.filter(x => x match {\n                case Left(s) => false\n                case Right(l) => true\n            })\n            Right(rights.map(x => x match {\n                case Left(s) => 0\n                case Right(l) => l\n            }).sum)\n        }",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)",
    "        val (strs, nums) = stdata.partition(_.isLeft)\n        if (strs.length > 0) Left(\"Error\")\n        else Right(nums.map(_.right.get).max)",
    "        val (str, num) = stdata.partition(_.isLeft)\n        if (str.isEmpty) {\n            Right(num.map(_.right.get).max)\n        } else {\n            Left(str.map(_.left.get).mkString(\",\"))\n        }",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)",
    "        val data = stdata.filter(x => x.isRight)\n        if (data.length == 0) Left(\"No data\")\n        else Right(data.map(x => x.right.get).max)",
    "        var max = 0L\n        var maxIndex = -1\n        var min = 0L\n        var minIndex = -1\n        for (i <- 0 until stdata.length) {\n            stdata(i) match {\n                case Left(s) => {\n                    if (maxIndex != -1) {\n                        val aggregate = max - min\n                        if (aggregate > stdata(maxIndex).right.get) {\n                            maxIndex = i\n                        }\n                    }\n                    max = 0L\n                    min = 0L\n                    maxIndex = -1\n                    minIndex = -1\n                }\n                case Right(l) => {\n                    if (maxIndex == -1 || l > max) {\n                        max = l\n                        maxIndex = i\n                    }\n                    if (minIndex == -1 || l < min) {\n                        min = l\n                        minIndex = i\n                    }\n                }\n            }\n        }\n        if (maxIndex != -1) {\n            Right(max - min)\n        } else {\n            Left(\"No aggregate found\")\n        }",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)",
    "        val l = stdata.filter(_.isRight).map(_.right.get)\n        if (l.length == 0) Left(\"No data\")\n        else Right(l.max)",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)",
    "        val l = stdata.map(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        })\n        val sum = l.sum\n        val max = l.max\n        if (sum > max) Right(sum) else Left(\"sum is less than max\")",
    "        val (str, num) = stdata.partition(_.isLeft)\n        if (str.isEmpty) {\n            Right(num.map(_.right.get).max)\n        } else {\n            Left(str.map(_.left.get).mkString(\",\"))\n        }",
    "        val lst = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val lst2 = lst.filter(x => x match {\n            case Left(s) => false\n            case Right(l) => true\n        })\n        val lst3 = lst2.map(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        })\n        val lst4 = lst3.map(x => x match {\n            case 0 => 0\n            case l => l\n        })\n        val lst5 = lst4.map(x => x match {\n            case 0 => 0\n            case l => l\n        })\n        val lst6 = lst5.map(x => x match {\n            case 0 => 0\n            case l => l\n        })\n        val lst7 = lst6.map(x => x match {\n            case 0 => 0\n            case l => l\n        })\n        val lst8 = lst7.map(x => x match {\n            case 0 => 0\n            case l => l\n        })\n        val lst9 = lst8.map(x => x match {\n            case 0 => 0\n            case l => l\n        })\n        val lst10 = lst9.map(x => x match {\n            case 0 => 0\n            case l => l\n        })\n        val lst11 = lst10.map(x => x match {\n            case 0 => 0\n            case l => l\n        })\n        val lst12 = lst11.map(x => x match {\n            case 0 => 0\n            case l => l\n        })\n        val lst13 = lst12.map(x => x match {\n            case 0 => 0\n            case l => l\n        })\n        val lst14 = lst13.map(x => x match {\n            case 0 => 0\n            case l => l\n        })\n        val lst15 = lst14.map(x => x match {\n            case 0 => 0\n            case l =>",
    "        val l = stdata.filter(_.isRight).map(_.right.get)\n        if (l.isEmpty) Left(\"No data\")\n        else Right(l.max)",
    "        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val lefts = data.filter(x => x match {\n            case Left(s) => true\n            case Right(l) => false\n        })\n        val rights = data.filter(x => x match {\n            case Left(s) => false\n            case Right(l) => true\n        })\n        if (lefts.length > 0) {\n            return lefts(0)\n        }\n        else {\n            return Right(rights.map(x => x match {\n                case Left(s) => 0\n                case Right(l) => l\n            }).max)\n        }",
    "        // Write your code here\n        if (stdata.isEmpty) {\n            Left(\"Empty List\")\n        } else {\n            val lst = stdata.filter(_.isRight).map(_.right.get)\n            if (lst.isEmpty) {\n                Left(\"No Longs\")\n            } else {\n                Right(lst.max)\n            }\n        }",
    "        // Write your code here\n        val lst = stdata.filter(_.isRight).map(_.right.get)\n        if (lst.isEmpty) Left(\"No data\")\n        else Right(lst.max)",
    "        val (strs, nums) = stdata.partition(_.isLeft)\n        if (strs.isEmpty) Right(nums.map(_.right.get).max)\n        else Left(strs.map(_.left.get).mkString(\", \"))",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)",
    "        val stdata_filtered = stdata.filter(_.isRight)\n        if (stdata_filtered.isEmpty) Left(\"No data\")\n        else Right(stdata_filtered.map(_.right.get).max)",
    "        val l = stdata.filter(x => x.isRight).map(x => x.right.get)\n        if (l.isEmpty) Left(\"No data\")\n        else Right(l.max)",
    "        val lst = stdata.map(x => x match {\n            case Left(str) => Left(str)\n            case Right(num) => Right(num)\n        })\n        val lst2 = lst.filter(x => x match {\n            case Left(str) => false\n            case Right(num) => true\n        })\n        if (lst2.length == 0) {\n            Left(\"No data\")\n        } else {\n            val lst3 = lst2.map(x => x match {\n                case Left(str) => 0\n                case Right(num) => num\n            })\n            val lst4 = lst3.map(x => x.toDouble)\n            val lst5 = lst4.map(x => log(x))\n            val lst6 = lst5.map(x => exp(x))\n            val lst7 = lst6.map(x => x.toLong)\n            Right(lst7.max)\n        }",
    "        val data = stdata.map(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        })\n        val max = data.max\n        val min = data.min\n        val sum = data.sum\n        val avg = sum / data.length\n        val maxAggregate = max(max(max, min), avg)\n        if (maxAggregate == 0) Left(\"No data\")\n        else Right(maxAggregate)",
    "        val (strs, longs) = stdata.partition(_.isLeft)\n        if (strs.isEmpty) {\n            Right(longs.map(_.right.get).max)\n        } else {\n            Left(strs.map(_.left.get).mkString(\",\"))\n        }",
    "        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val lefts = data.filter(x => x match {\n            case Left(s) => true\n            case Right(l) => false\n        })\n        val rights = data.filter(x => x match {\n            case Left(s) => false\n            case Right(l) => true\n        })\n        if (lefts.size > 0) {\n            return lefts(0)\n        }\n        return Right(rights.map(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        }).max)",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)",
    "        val l = stdata.filter(_.isRight).map(_.right.get)\n        if (l.isEmpty) Left(\"No data\")\n        else Right(l.max)",
    "        val (lefts, rights) = stdata.partition(_.isLeft)\n        if (lefts.isEmpty) {\n            Right(rights.map(_.right.get).max)\n        } else {\n            Left(lefts.map(_.left.get).mkString(\",\"))\n        }",
    "        val (strs, nums) = stdata.partition(_.isLeft)\n        if (strs.length > 0) Left(strs.map(_.left.get).mkString(\",\"))\n        else Right(nums.map(_.right.get).sum)",
    "        val (lefts, rights) = stdata.partition(_.isLeft)\n        if (lefts.isEmpty) {\n            val max = rights.map(_.right.get).max\n            Right(max)\n        } else {\n            Left(lefts.map(_.left.get).mkString(\",\"))\n        }",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.length == 0) Left(\"No data\")\n        else Right(data.max)",
    "        stdata.foldLeft(Right(0L))((acc, x) => {\n            acc match {\n                case Left(s) => Left(s)\n                case Right(y) => x match {\n                    case Left(s) => Left(s)\n                    case Right(z) => Right(max(y, z))\n                }\n            }\n        })",
    "        val (lefts, rights) = stdata.partition(_.isLeft)\n        if (lefts.isEmpty) {\n            val max = rights.map(_.right.get).max\n            Right(max)\n        } else {\n            Left(lefts.map(_.left.get).mkString(\",\"))\n        }",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)"
  ]
}