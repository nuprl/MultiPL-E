{
  "name": "mbpp_142_count_samepair",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_142_count_samepair.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count : Long = 0\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count : Long = 0\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1666123284,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until min(list1.length, min(list2.length, list3.length))) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1666123284,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 to list1.length - 1) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1666123284,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list1(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1666123284,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count : Long = 0\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1666123284,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 to list1.length - 1) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1666123284,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        val list = list1.zip(list2).zip(list3).map(x => x._1._1 * x._1._2 * x._2)\n        list.foldLeft(0L)(_ + _)\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1666123284,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpnmipm2ye.scala:10)\n\tat Problem.main(tmpnmipm2ye.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        val list = list1.zip(list2).zip(list3).map(x => x._1._1 * x._1._2 * x._2).filter(x => x > 0)\n        list.foldLeft(0L)((x, y) => x + y)\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1666123284,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp3kw97dwp.scala:10)\n\tat Problem.main(tmp3kw97dwp.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        val minSize = min(list1.size, min(list2.size, list3.size))\n        var count = 0\n        for (i <- 0 until minSize) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1666123284,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count : Long = 0\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1666123284,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) {\n                count += 1\n            }\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1666123284,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        val map1 = new HashMap[Long, Long]\n        val map2 = new HashMap[Long, Long]\n        val map3 = new HashMap[Long, Long]\n        for (i <- 0 until list1.length) {\n            val key = list1(i)\n            if (map1.contains(key)) map1(key) += 1\n            else map1(key) = 1\n        }\n        for (i <- 0 until list2.length) {\n            val key = list2(i)\n            if (map2.contains(key)) map2(key) += 1\n            else map2(key) = 1\n        }\n        for (i <- 0 until list3.length) {\n            val key = list3(i)\n            if (map3.contains(key)) map3(key) += 1\n            else map3(key) = 1\n        }\n        var result = 0L\n        for (key <- map1.keySet) {\n            if (map2.contains(key) && map3.contains(key)) {\n                result += map1(key) * map2(key) * map3(key)\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1666123284,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpdvlkl8yk.scala:33)\n\tat Problem.main(tmpdvlkl8yk.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        if (list1.length != list2.length || list2.length != list3.length) throw new IllegalArgumentException\n        var count = 0\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1666123284,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        val list = list1.zip(list2).zip(list3).map(x => x._1._1 * x._1._2 * x._2)\n        list.filter(x => x > 0).length\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1666123284,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp_58u5tff.scala:10)\n\tat Problem.main(tmp_58u5tff.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        val list = list1.zip(list2).zip(list3).map(x => (x._1._1, x._1._2, x._2)).filter(x => x._1 == x._2 && x._2 == x._3)\n        list.length\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1666123284,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        val list = list1 zip list2 zip list3 map { case ((a, b), c) => (a, b, c) }\n        list.filter(x => x._1 == x._2 && x._2 == x._3).length\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1666123284,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        val list = list1.zip(list2).zip(list3).map(x => (x._1._1, x._1._2, x._2))\n        list.count(x => x._1 == x._2 && x._2 == x._3)\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1666123284,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count : Long = 0\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        val map1 = HashMap[Long, Long]()\n        val map2 = HashMap[Long, Long]()\n        val map3 = HashMap[Long, Long]()\n        for (i <- 0 until list1.length) {\n            map1(list1(i)) = map1.getOrElse(list1(i), 0) + 1\n            map2(list2(i)) = map2.getOrElse(list2(i), 0) + 1\n            map3(list3(i)) = map3.getOrElse(list3(i), 0) + 1\n        }\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            val x = list1(i)\n            if (map2.contains(x) && map3.contains(x)) {\n                val y = min(map2(x), map3(x))\n                count += y\n                map2(x) -= y\n                map3(x) -= y\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1666123284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp_qh5groc.scala:10:57 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m            map1(list1(i)) = map1.getOrElse(list1(i), \u001b[31m0\u001b[0m) + \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of AnyVal, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp_qh5groc.scala:11:57 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m            map2(list2(i)) = map2.getOrElse(list2(i), \u001b[31m0\u001b[0m) + \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of AnyVal, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp_qh5groc.scala:12:57 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            map3(list3(i)) = map3.getOrElse(list3(i), \u001b[31m0\u001b[0m) + \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of AnyVal, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Imp",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list1(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1666123284,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1665510315,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 to list1.length - 1) {\n            if (list1(i) == list2(i) && list2(i) == list3(i)) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n",
      "timestamp": 1666123284,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}