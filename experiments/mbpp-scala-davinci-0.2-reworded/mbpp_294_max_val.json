{
  "name": "mbpp_294_max_val",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum value in a given heterogeneous list.\n    def maxVal(listval : List[Either[String, Long]]) : Long = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_294_max_val.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(maxVal((List[Either[String, Long]](\"Python\", 3l, 2l, 4l, 5l, \"version\"))) == (5l));\n    assert(maxVal((List[Either[String, Long]](\"Python\", 15l, 20l, 25l))) == (25l));\n    assert(maxVal((List[Either[String, Long]](\"Python\", 30l, 20l, 40l, 50l, \"version\"))) == (50l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        listval.map(x => x match {\n            case Left(str) => str.toLong\n            case Right(num) => num\n        }).max",
    "        var max = 0L\n        for (i <- listval) {\n            i match {\n                case Left(s) => {\n                    if (s.length > max) max = s.length\n                }\n                case Right(l) => {\n                    if (l > max) max = l\n                }\n            }\n        }\n        max",
    "        var max : Long = 0\n        for (i <- listval) {\n            i match {\n                case Left(s) => {\n                    if (s.length > max) max = s.length\n                }\n                case Right(l) => {\n                    if (l > max) max = l\n                }\n            }\n        }\n        max",
    "        var max : Long = 0\n        for (i <- listval) {\n            i match {\n                case Left(x) => {\n                    if (max < x.toLong) max = x.toLong\n                }\n                case Right(x) => {\n                    if (max < x) max = x\n                }\n            }\n        }\n        max",
    "        var max : Long = 0\n        for (i <- listval) {\n            i match {\n                case Left(x) => println(\"String \" + x)\n                case Right(x) => {\n                    if (x > max) max = x\n                }\n            }\n        }\n        return max",
    "        listval.map(x => x match {\n            case Left(x) => 0\n            case Right(x) => x\n        }).max",
    "        var max : Long = 0\n        listval.foreach(x => x match {\n            case Left(s) => {\n                val num = s.toLong\n                if (num > max) max = num\n            }\n            case Right(l) => {\n                if (l > max) max = l\n            }\n        })\n        max",
    "        listval.map(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        }).max",
    "        var max : Long = 0\n        for (i <- 0 until listval.length) {\n            listval(i) match {\n                case Left(s) => {\n                    val num = s.toLong\n                    if (num > max) max = num\n                }\n                case Right(s) => {\n                    if (s > max) max = s\n                }\n            }\n        }\n        max",
    "        listval.map(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        }).max",
    "        listval.map(x => x match {\n            case Left(x) => 0\n            case Right(x) => x\n        }).max",
    "        var max : Long = 0\n        listval.foreach(x => x match {\n            case Left(s) => max = max\n            case Right(l) => max = max max l\n        })\n        max",
    "        var max : Long = 0\n        for (i <- listval) {\n            i match {\n                case Left(s) => {\n                    if (s.toLong > max) max = s.toLong\n                }\n                case Right(l) => {\n                    if (l > max) max = l\n                }\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- listval) {\n            i match {\n                case Left(s) => println(s)\n                case Right(l) => if (l > max) max = l\n            }\n        }\n        max",
    "        var max : Long = 0\n        for (i <- listval) {\n            i match {\n                case Left(s) => {\n                    val l = s.toLong\n                    if (l > max) max = l\n                }\n                case Right(l) => {\n                    if (l > max) max = l\n                }\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- listval) {\n            i match {\n                case Left(s) => {\n                    val l = s.toLong\n                    if (l > max) max = l\n                }\n                case Right(l) => {\n                    if (l > max) max = l\n                }\n            }\n        }\n        max",
    "        var max : Long = 0\n        for (i <- listval) {\n            i match {\n                case Left(s) => {\n                    val num = s.toLong\n                    if (num > max) max = num\n                }\n                case Right(n) => {\n                    if (n > max) max = n\n                }\n            }\n        }\n        max",
    "        listval.foldLeft(0L)((x, y) => y match {\n            case Left(str) => x\n            case Right(num) => max(x, num)\n        })",
    "        var max : Long = 0\n        for (i <- listval) {\n            i match {\n                case Left(x) => max = max\n                case Right(x) => max = max(max, x)\n            }\n        }\n        max",
    "        var max : Long = 0\n        for (i <- listval) {\n            i match {\n                case Left(s) => {\n                    if (s.length > max) max = s.length\n                }\n                case Right(l) => {\n                    if (l > max) max = l\n                }\n            }\n        }\n        max"
  ]
}