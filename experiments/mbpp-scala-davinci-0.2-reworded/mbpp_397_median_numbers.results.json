{
  "name": "mbpp_397_median_numbers",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_397_median_numbers.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val mid = sortedList(1)\n        mid\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1665509798,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1665509798,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1665509798,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1665509798,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val middle = sortedList(1)\n        middle.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1665509798,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val arr = Array(a, b, c)\n        val sorted = arr.sorted\n        if (arr.length % 2 == 0) {\n            (sorted(arr.length / 2) + sorted(arr.length / 2 - 1)).toFloat / 2\n        } else {\n            sorted(arr.length / 2).toFloat\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1665509798,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        var list = List(a, b, c)\n        list = list.sortWith(_ < _)\n        if (list.length % 2 == 0) (list(list.length / 2) + list(list.length / 2 - 1)) / 2.0f\n        else list(list.length / 2).toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1665509798,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1665509798,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val middle = sortedList(1)\n        middle\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1665509798,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val list = List(a, b, c).sorted\n        if (list.length % 2 == 0) {\n            (list(list.length / 2) + list(list.length / 2 - 1)).toFloat / 2\n        } else {\n            list(list.length / 2).toFloat\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1665509798,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1665509798,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val list = List(a, b, c).sorted\n        list(1)\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1665509798,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1665509798,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val arr = Array(a, b, c)\n        arr.sorted.apply(1)\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1665509798,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val mid = sortedList(1)\n        mid\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1665509798,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1665509798,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1665509798,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val arr = Array(a, b, c)\n        arr.sorted.apply(1)\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1665509798,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        var list = List(a, b, c)\n        list = list.sortWith(_ < _)\n        if (list.length % 2 == 0) {\n            val x = list(list.length / 2)\n            val y = list(list.length / 2 - 1)\n            (x + y).toFloat / 2\n        } else {\n            list(list.length / 2).toFloat\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1665509798,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val list = List(a, b, c).sorted\n        if (list.length % 2 == 0) (list(list.length / 2) + list(list.length / 2 - 1)) / 2.0f\n        else list(list.length / 2).toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1665509798,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val arr = Array(a, b, c)\n        arr.sorted.apply(1)\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1665509798,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val sorted = List(a, b, c).sorted\n        (sorted(1) + sorted(2)) / 2.0f\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1666123972,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpj1xxillt.scala:10)\n\tat Problem.main(tmpj1xxillt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val l = List(a, b, c)\n        val sortedList = l.sorted\n        val median = sortedList(1)\n        median.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1666123972,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val arr = Array(a, b, c)\n        arr.sorted.apply(1)\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1665509798,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        if (a > b) {\n            if (b > c) {\n                b\n            } else if (a > c) {\n                c\n            } else {\n                a\n            }\n        } else {\n            if (a > c) {\n                a\n            } else if (b > c) {\n                c\n            } else {\n                b\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1666123971,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val list = List(a, b, c)\n        val sortedList = list.sorted\n        if (sortedList.size % 2 == 0) {\n            (sortedList(sortedList.size / 2) + sortedList(sortedList.size / 2 - 1)).toFloat / 2\n        } else {\n            sortedList(sortedList.size / 2).toFloat\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1666123972,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        if (a > b) {\n            if (b > c) b else if (a > c) c else a\n        } else {\n            if (a > c) a else if (b > c) c else b\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1666123971,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val list = List(a, b, c)\n        val sorted = list.sorted\n        (sorted(0) + sorted(1)) / 2.0f\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1666123973,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpwkq15pu6.scala:11)\n\tat Problem.main(tmpwkq15pu6.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1665509798,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val list = List(a, b, c)\n        val sorted = list.sorted\n        val middle = sorted(1)\n        middle\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1666123972,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1665509798,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val list = List(a, b, c).sorted\n        if (list.size % 2 == 0) (list(list.size / 2) + list(list.size / 2 - 1)) / 2.0f\n        else list(list.size / 2)\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1666123973,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val list = List(a, b, c).sorted\n        if (list.length % 2 == 0) (list(list.length / 2) + list(list.length / 2 - 1)) / 2.0f\n        else list(list.length / 2)\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1666123973,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val arr = Array(a, b, c)\n        val sorted = arr.sorted\n        if (sorted.length % 2 == 0) {\n            (sorted(sorted.length / 2) + sorted(sorted.length / 2 - 1)).toFloat / 2\n        } else {\n            sorted(sorted.length / 2).toFloat\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1666123973,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val sorted = List(a, b, c).sorted\n        (sorted(1) + sorted(2)) / 2.0f\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1666123972,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpj1xxillt.scala:10)\n\tat Problem.main(tmpj1xxillt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val arr = Array(a, b, c)\n        arr.sortWith(_ < _)\n        if (arr.length % 2 == 0) {\n            (arr(arr.length / 2) + arr(arr.length / 2 - 1)).toFloat / 2\n        } else {\n            arr(arr.length / 2).toFloat\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1666123973,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp6nxnde6z.scala:16)\n\tat Problem.main(tmp6nxnde6z.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val x = Array(a, b, c)\n        x.sorted.apply(1)\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1666123972,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1665509798,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val arr = Array(a, b, c)\n        arr.sortWith(_ < _)\n        if (arr.length % 2 == 0) (arr(arr.length / 2) + arr(arr.length / 2 - 1)) / 2.0f\n        else arr(arr.length / 2)\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1666123972,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpi8u_619b.scala:13)\n\tat Problem.main(tmpi8u_619b.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val list = List(a, b, c)\n        val sortedList = list.sorted\n        if (sortedList.length % 2 == 0) {\n            val mid = sortedList.length / 2\n            (sortedList(mid - 1) + sortedList(mid)) / 2.0f\n        } else {\n            sortedList(sortedList.length / 2)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1666123972,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val list = List(a, b, c)\n        val sorted = list.sorted\n        val middle = sorted(1)\n        middle\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1666123972,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val list = List(a, b, c)\n        val sorted = list.sorted\n        val middle = sorted(1)\n        middle\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1666123972,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1665509798,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val list = List(a, b, c).sorted\n        if (list.length % 2 == 0) (list(list.length / 2) + list(list.length / 2 - 1)) / 2.0f\n        else list(list.length / 2)\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1666123973,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val sorted = List(a, b, c).sorted\n        if (sorted.length % 2 == 0) {\n            (sorted(sorted.length / 2) + sorted(sorted.length / 2 - 1)).toFloat / 2\n        } else {\n            sorted(sorted.length / 2).toFloat\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1666123972,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val list = List(a, b, c).sorted\n        if (list.length % 2 == 0) {\n            (list(list.length / 2) + list(list.length / 2 - 1)).toFloat / 2\n        } else {\n            list(list.length / 2).toFloat\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1665509798,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1665509798,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val arr = Array(a, b, c)\n        arr.sortWith(_ < _)(1)\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1666123972,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        var arr = Array(a, b, c)\n        arr = arr.sortWith(_ < _)\n        return arr(1)\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1666123973,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val middle = sortedList(1)\n        middle\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1665509798,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val max = max(a, max(b, c))\n        val min = min(a, min(b, c))\n        val mid = a + b + c - max - min\n        (max + min + mid) / 3.0f\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1666123964,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpnsvffysm.scala:6:18 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmax\u001b[0m = max(a, max(b, c))\n\u001b[31m\u001b[31m  |\u001b[0m                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35mmax\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpnsvffysm.scala:6:25 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmax\u001b[0m = max(a, max(b, c))\n\u001b[31m\u001b[31m  |\u001b[0m                         ^\u001b[0m\n\u001b[31m  |\u001b[0m                         Recursive \u001b[33mvalue\u001b[0m \u001b[35mmax\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpnsvffysm.scala:7:18 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmin\u001b[0m = min(a, min(b, c))\n\u001b[31m\u001b[31m  |\u001b[0m                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35mmin\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpnsvffysm.scala:7:25 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmin\u001b[0m = min(a, min(b, c))\n\u001b[31m\u001b[31m  |\u001b[0m                         ^\u001b[0m\n\u001b[31m  |\u001b[0m                         Recursive \u001b[33mvalue\u001b[0m \u001b[35mmin\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val list = List(a, b, c)\n        val sortedList = list.sorted\n        if (sortedList.length % 2 == 0) {\n            (sortedList(sortedList.length / 2) + sortedList(sortedList.length / 2 - 1)).toFloat / 2\n        } else {\n            sortedList(sortedList.length / 2).toFloat\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1666123973,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val list = List(a, b, c).sorted\n        if (list.length % 2 == 0) (list(list.length / 2) + list(list.length / 2 - 1)) / 2.0f\n        else list(list.length / 2)\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1666123973,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val list = List(a, b, c)\n        val sortedList = list.sorted\n        if (sortedList.length % 2 == 0) {\n            (sortedList(sortedList.length / 2) + sortedList(sortedList.length / 2 - 1)).toFloat / 2\n        } else {\n            sortedList(sortedList.length / 2).toFloat\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1666123973,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        if (a > b) {\n            if (b > c) b else if (a > c) c else a\n        } else {\n            if (a > c) a else if (b > c) c else b\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1666123971,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1665509798,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        var list = List(a, b, c)\n        list = list.sorted\n        if (list.length % 2 == 0) {\n            (list(list.length / 2) + list(list.length / 2 - 1)).toFloat / 2\n        } else {\n            list(list.length / 2)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1666123972,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val list = List(a, b, c).sorted\n        if (list.length % 2 == 0) (list(list.length / 2) + list(list.length / 2 - 1)) / 2.0f\n        else list(list.length / 2)\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1666123973,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1665509798,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val list = List(a, b, c)\n        list.sorted.apply(1)\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1666123972,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val arr = Array(a, b, c)\n        arr.sortWith(_ < _)\n        arr(1)\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1666123972,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp8o4z6z7v.scala:12)\n\tat Problem.main(tmp8o4z6z7v.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1665509798,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1665509798,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val list = List(a, b, c).sorted\n        if (list.length % 2 == 0) {\n            (list(list.length / 2) + list(list.length / 2 - 1)) / 2.0f\n        } else {\n            list(list.length / 2)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1666123973,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val list = List(a, b, c)\n        val sortedList = list.sorted\n        sortedList(1)\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val list = List(a, b, c).sorted\n        list(1)\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1665509798,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val l = List(a, b, c).sorted\n        (l(1) + l(2)) / 2.0f\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1666123990,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpfpbsvztw.scala:10)\n\tat Problem.main(tmpfpbsvztw.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val x = List(a, b, c)\n        val y = x.sorted\n        val z = y(1)\n        z.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1666123990,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val list = List(a, b, c).sorted\n        if (list.length % 2 == 0) (list(list.length / 2) + list(list.length / 2 - 1)).toFloat / 2\n        else list(list.length / 2).toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1666123990,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val list = List(a, b, c).sorted\n        if (list.length % 2 == 0) {\n            (list(list.length / 2) + list(list.length / 2 - 1)).toFloat / 2\n        } else {\n            list(list.length / 2).toFloat\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1665509798,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val list = List(a, b, c).sorted\n        if (list.length % 2 == 0) (list(list.length / 2) + list(list.length / 2 - 1)) / 2.0f\n        else list(list.length / 2)\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1666123973,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val list = List(a, b, c)\n        val sortedList = list.sorted\n        if (sortedList.length % 2 == 0) {\n            (sortedList(sortedList.length / 2) + sortedList(sortedList.length / 2 - 1)).toFloat / 2\n        } else {\n            sortedList(sortedList.length / 2).toFloat\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1666123973,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val list = List(a, b, c)\n        val sortedList = list.sorted\n        (sortedList(1) + sortedList(2)) / 2.0f\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1666123990,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpu2ugcqs8.scala:11)\n\tat Problem.main(tmpu2ugcqs8.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1665509798,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val list = List(a, b, c).sorted\n        if (list.length % 2 == 0) {\n            (list(list.length / 2) + list(list.length / 2 - 1)).toFloat / 2\n        } else {\n            list(list.length / 2).toFloat\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1665509798,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        if (a > b) {\n            if (b > c) {\n                b.toFloat\n            } else if (a > c) {\n                c.toFloat\n            } else {\n                a.toFloat\n            }\n        } else {\n            if (a > c) {\n                a.toFloat\n            } else if (b > c) {\n                c.toFloat\n            } else {\n                b.toFloat\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1666123989,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1665509798,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val list = List(a, b, c).sorted\n        if (list.length % 2 == 0) {\n            (list(list.length / 2) + list(list.length / 2 - 1)) / 2.0f\n        } else {\n            list(list.length / 2)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1666123973,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val mid = sortedList(1)\n        mid.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1666123990,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val list = List(a, b, c).sorted\n        (list(1) + list(2)) / 2.0f\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1666123991,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpn_msb6xt.scala:10)\n\tat Problem.main(tmpn_msb6xt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val list = List(a, b, c)\n        val sorted = list.sorted\n        val mid = sorted(1)\n        mid.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1666123991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = (sortedList(1) + sortedList(2)) / 2.0\n        median.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1666123991,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpbe1ssasb.scala:12)\n\tat Problem.main(tmpbe1ssasb.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val sorted = List(a, b, c).sorted\n        (sorted(1) + sorted(2)) / 2.0f\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1666123972,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpj1xxillt.scala:10)\n\tat Problem.main(tmpj1xxillt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1665509798,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val numbers = List(a, b, c).sorted\n        numbers(1)\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1666123991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val mid = sortedList(1)\n        mid.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1666123990,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val medianIndex = sortedList.length / 2\n        if (sortedList.length % 2 == 0) {\n            (sortedList(medianIndex - 1) + sortedList(medianIndex)) / 2.0f\n        } else {\n            sortedList(medianIndex)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1666123991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val arr = Array(a, b, c)\n        arr.sortWith(_ < _)\n        arr(1)\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1666123972,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp8o4z6z7v.scala:12)\n\tat Problem.main(tmp8o4z6z7v.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val list = List(a, b, c).sorted\n        if (list.length % 2 == 0) (list(list.length / 2) + list(list.length / 2 - 1)) / 2.0f\n        else list(list.length / 2)\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1666123973,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val arr = Array(a, b, c)\n        arr.sortWith(_ < _)\n        arr(1)\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1666123972,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp8o4z6z7v.scala:12)\n\tat Problem.main(tmp8o4z6z7v.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val list = List(a, b, c).sorted\n        list(1)\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1665509798,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1665509798,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val arr = Array(a, b, c)\n        arr.sorted.apply(1)\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1665509798,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val list = List(a, b, c).sorted\n        if (list.length % 2 == 0) (list(list.length / 2) + list(list.length / 2 - 1)) / 2.0f\n        else list(list.length / 2)\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1666123973,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        if (a > b) {\n            if (b > c) b\n            else if (a > c) c\n            else a\n        } else {\n            if (a > c) a\n            else if (b > c) c\n            else b\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1666123990,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val arr = Array(a, b, c)\n        arr.sortWith(_ < _)\n        if (arr.length % 2 == 0) (arr(arr.length / 2) + arr(arr.length / 2 - 1)) / 2.0f\n        else arr(arr.length / 2)\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1666123972,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpi8u_619b.scala:13)\n\tat Problem.main(tmpi8u_619b.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        var list = List(a, b, c)\n        list = list.sorted\n        return list(1)\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1666123991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1665509798,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        var arr = Array(a, b, c)\n        arr = arr.sortWith(_ < _)\n        if (arr.length % 2 == 0) {\n            val mid = arr.length / 2\n            (arr(mid - 1) + arr(mid)) / 2.0f\n        } else {\n            arr(arr.length / 2)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1666123991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val list = List(a, b, c).sorted\n        if (list.length % 2 == 0) (list(list.length / 2) + list(list.length / 2 - 1)) / 2.0f\n        else list(list.length / 2)\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1666123973,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val list = List(a, b, c).sorted\n        if (list.length % 2 == 0) {\n            (list(list.length / 2) + list(list.length / 2 - 1)) / 2.0f\n        } else {\n            list(list.length / 2)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1666123973,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val arr = Array(a, b, c)\n        arr.sorted.apply(1)\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1665509798,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val xs = List(a, b, c).sorted\n        if (xs.length % 2 == 0) {\n            (xs(xs.length / 2) + xs(xs.length / 2 - 1)).toFloat / 2\n        } else {\n            xs(xs.length / 2).toFloat\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1666123991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val middle = sortedList(1)\n        middle.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1665509798,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val list = List(a, b, c).sorted\n        if (list.length % 2 == 0) (list(list.length / 2) + list(list.length / 2 - 1)) / 2.0f\n        else list(list.length / 2)\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1666123973,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val list = List(a, b, c)\n        val sorted = list.sorted\n        val middle = sorted(1)\n        middle.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1666123991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1665509798,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val list = List(a, b, c)\n        list.sorted.apply(1)\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1666123972,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val list = List(a, b, c).sorted\n        list(1)\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1665509798,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val list = List(a, b, c)\n        val sorted = list.sorted\n        if (sorted.length % 2 == 0) {\n            (sorted(sorted.length / 2) + sorted(sorted.length / 2 - 1)).toFloat / 2\n        } else {\n            sorted(sorted.length / 2).toFloat\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1666123991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val middle = sortedList(1)\n        middle.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1665509798,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        var arr = Array(a, b, c)\n        arr = arr.sorted\n        return arr(1)\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1666123991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val middle = sortedList(1)\n        middle.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1665509798,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1665509798,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        var list = List(a, b, c)\n        list = list.sorted\n        return list(1)\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1666123991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val arr = Array(a, b, c)\n        arr.sorted.apply(1)\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1665509798,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        if (a > b) {\n            if (b > c) b.toFloat\n            else if (a > c) c.toFloat\n            else a.toFloat\n        }\n        else {\n            if (a > c) a.toFloat\n            else if (b > c) c.toFloat\n            else b.toFloat\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1666123990,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val list = List(a, b, c)\n        val sortedList = list.sorted\n        if (sortedList.length % 2 == 0) {\n            (sortedList(sortedList.length / 2) + sortedList(sortedList.length / 2 - 1)).toFloat / 2\n        } else {\n            sortedList(sortedList.length / 2).toFloat\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1666123973,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val numbers = Array(a, b, c)\n        numbers.sorted.apply(1)\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1666123991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val mid = sortedList(1)\n        mid\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1665509798,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        var list = List(a, b, c)\n        list = list.sorted\n        return (list(1) + list(2)) / 2.0f\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1666123991,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpaw7b0jnv.scala:11)\n\tat Problem.main(tmpaw7b0jnv.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val arr = Array(a, b, c)\n        arr.sortWith(_ < _)(1)\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1666123972,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1665509798,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        if (a > b) {\n            if (b > c) b.toFloat\n            else if (a > c) c.toFloat\n            else a.toFloat\n        } else {\n            if (a > c) a.toFloat\n            else if (b > c) c.toFloat\n            else b.toFloat\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1666123990,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1665509798,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        var list = List(a, b, c)\n        list = list.sorted\n        return list(1)\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1666123991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val sorted = List(a, b, c).sorted\n        if (sorted.length % 2 == 0) {\n            (sorted(sorted.length / 2) + sorted(sorted.length / 2 - 1)).toFloat / 2\n        } else {\n            sorted(sorted.length / 2).toFloat\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1666123972,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1665509798,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val arr = Array(a, b, c)\n        arr.sorted.apply(1)\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1665509798,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val arr = Array(a, b, c)\n        arr.sorted.apply(1)\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1665509798,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1665509798,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val list = List(a, b, c)\n        val sorted = list.sorted\n        val mid = sorted(1)\n        mid.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1666123991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val middle = sortedList(1)\n        val median = (sortedList(0) + sortedList(2)) / 2.0f\n        if (middle == median) middle else median\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1666123999,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp5gxx55hd.scala:13)\n\tat Problem.main(tmp5gxx55hd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val list = List(a, b, c)\n        val sortedList = list.sorted\n        sortedList(1)\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        if (a > b) {\n            if (b > c) b.toFloat\n            else if (a > c) c.toFloat\n            else a.toFloat\n        } else {\n            if (a > c) a.toFloat\n            else if (b > c) c.toFloat\n            else b.toFloat\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1666123990,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val list = List(a, b, c).sorted\n        if (list.size % 2 == 0) (list(list.size / 2) + list(list.size / 2 - 1)) / 2.0f\n        else list(list.size / 2)\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1666123973,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val l = List(a, b, c)\n        val sorted = l.sorted\n        if (sorted.length % 2 == 0) {\n            (sorted(sorted.length / 2) + sorted(sorted.length / 2 - 1)).toFloat / 2\n        } else {\n            sorted(sorted.length / 2).toFloat\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1666124001,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1665509798,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1665509798,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1665509798,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val middle = sortedList(1)\n        middle.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1665509798,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val middle = sortedList(1)\n        middle\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1665509798,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1665509798,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1665509798,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val list = List(a, b, c)\n        val sorted = list.sorted\n        val middle = sorted(1)\n        middle.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1666123991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1665509798,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1665509798,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val numbers = List(a, b, c)\n        val sortedNumbers = numbers.sorted\n        val middleNumber = sortedNumbers(1)\n        middleNumber.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1666124001,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1665509798,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val list = List(a, b, c)\n        val sortedList = list.sorted\n        (sortedList(1) + sortedList(2)) / 2.0f\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1666123990,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpu2ugcqs8.scala:11)\n\tat Problem.main(tmpu2ugcqs8.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1665509798,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val list = List(a, b, c).sorted\n        list(1)\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1665509798,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val arr = Array(a, b, c)\n        arr.sorted.apply(1)\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1665509798,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val arr = Array(a, b, c)\n        arr.sorted.apply(1)\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1665509798,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val l = List(a, b, c)\n        l.sorted.apply(1)\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1666124001,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1665509798,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val list = List(a, b, c).sorted\n        list(1)\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1665509798,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val mid = sortedList(1)\n        mid.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1666123990,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val list = List(a, b, c)\n        val sortedList = list.sorted\n        sortedList(1)\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val l = List(a, b, c).sorted\n        (l(1) + l(2)) / 2.0f\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1666123990,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpfpbsvztw.scala:10)\n\tat Problem.main(tmpfpbsvztw.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val middle = sortedList(1)\n        middle.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1665509798,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val m = Array(a, b, c)\n        m.sortWith(_ < _)\n        m(1)\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1666124001,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpezr7369q.scala:12)\n\tat Problem.main(tmpezr7369q.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val list = List(a, b, c).sorted\n        (list(1) + list(2)) / 2.0f\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1666123991,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpn_msb6xt.scala:10)\n\tat Problem.main(tmpn_msb6xt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val middle = sortedList(1)\n        return middle\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1666124001,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val x = Array(a, b, c)\n        x.sortWith(_ < _)\n        if (x.length % 2 == 0) (x(x.length / 2) + x(x.length / 2 - 1)) / 2.0f else x(x.length / 2)\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1666124001,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpqj9i43be.scala:12)\n\tat Problem.main(tmpqj9i43be.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val list = List(a, b, c).sorted\n        (list(0) + list(1)) / 2.0f\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1666124001,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpzf8l79pl.scala:10)\n\tat Problem.main(tmpzf8l79pl.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val list = List(a, b, c).sorted\n        if (list.length % 2 == 0) (list(list.length / 2) + list(list.length / 2 - 1)).toFloat / 2\n        else list(list.length / 2).toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1666123990,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val list = List(a, b, c).sorted\n        if (list.length % 2 == 0) (list(list.length / 2) + list(list.length / 2 - 1)).toFloat / 2\n        else list(list.length / 2).toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1666123990,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val list = List(a, b, c).sorted\n        (list(1) + list(2)) / 2.0f\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1666123991,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpn_msb6xt.scala:10)\n\tat Problem.main(tmpn_msb6xt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1665509798,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val list = List(a, b, c).sorted\n        if (list.length % 2 == 0) (list(list.length / 2) + list(list.length / 2 - 1)) / 2.0f\n        else list(list.length / 2)\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1666123973,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val sorted = List(a, b, c).sorted\n        (sorted(1) + sorted(2)) / 2.0f\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1666123972,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpj1xxillt.scala:10)\n\tat Problem.main(tmpj1xxillt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val mid = sortedList(1)\n        mid.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1666123990,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val list = List(a, b, c).sorted\n        if (list.length % 2 == 0) (list(list.length / 2) + list(list.length / 2 - 1)) / 2.0f\n        else list(list.length / 2)\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1666123973,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val list = List(a, b, c)\n        val sortedList = list.sorted\n        (sortedList(1) + sortedList(2)) / 2.0f\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1666123990,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpu2ugcqs8.scala:11)\n\tat Problem.main(tmpu2ugcqs8.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1665509798,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val arr = Array(a, b, c)\n        arr.sortWith(_ < _)\n        arr(1)\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1666123972,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp8o4z6z7v.scala:12)\n\tat Problem.main(tmp8o4z6z7v.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val arr = Array(a, b, c)\n        arr.sorted.apply(1)\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1665509798,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val l = List(a, b, c).sorted\n        (l(1) + l(2)) / 2.0f\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1666123990,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpfpbsvztw.scala:10)\n\tat Problem.main(tmpfpbsvztw.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val list = List(a, b, c)\n        val sortedList = list.sorted\n        sortedList(1)\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val x = Array(a, b, c)\n        x.sortWith(_ < _)\n        x(1)\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1666124001,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp8tf85q01.scala:12)\n\tat Problem.main(tmp8tf85q01.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val arr = Array(a, b, c)\n        arr.sortWith(_ < _)\n        arr(1)\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1666123972,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp8o4z6z7v.scala:12)\n\tat Problem.main(tmp8o4z6z7v.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val list = List(a, b, c)\n        val sortedList = list.sorted\n        if (sortedList.length % 2 == 0) {\n            val index = sortedList.length / 2\n            (sortedList(index - 1) + sortedList(index)) / 2.0f\n        } else {\n            sortedList(sortedList.length / 2)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1666124002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1665509798,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val list = List(a, b, c)\n        val sortedList = list.sorted\n        sortedList(1)\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val list = List(a, b, c).sorted\n        if (list.size % 2 == 0) (list(list.size / 2) + list(list.size / 2 - 1)) / 2.0f\n        else list(list.size / 2)\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1666123973,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val list = List(a, b, c)\n        val sortedList = list.sorted\n        if (sortedList.length % 2 == 0) {\n            (sortedList(sortedList.length / 2) + sortedList(sortedList.length / 2 - 1)).toFloat / 2\n        } else {\n            sortedList(sortedList.length / 2).toFloat\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1666123973,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val l = List(a, b, c)\n        val sorted = l.sorted\n        (sorted(1) + sorted(2)) / 2.0f\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1666124001,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp_an9khnu.scala:11)\n\tat Problem.main(tmp_an9khnu.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        var list = List(a, b, c)\n        list = list.sorted\n        return list(1)\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1666123991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1665509798,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        var list = List(a, b, c)\n        list = list.sorted\n        if (list.size % 2 == 0) {\n            return (list(list.size / 2) + list(list.size / 2 - 1)).toFloat / 2\n        } else {\n            return list(list.size / 2).toFloat\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1666124002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        if (a > b) {\n            if (b > c) (b + min(a, c)) / 2.0f\n            else if (a > c) (a + b) / 2.0f\n            else (a + c) / 2.0f\n        } else {\n            if (a > c) (a + min(b, c)) / 2.0f\n            else if (b > c) (b + a) / 2.0f\n            else (b + c) / 2.0f\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1666124001,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpovopx4di.scala:17)\n\tat Problem.main(tmpovopx4di.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val list = List(a, b, c)\n        val sortedList = list.sorted\n        if (sortedList.length % 2 == 0) {\n            val mid = sortedList.length / 2\n            (sortedList(mid) + sortedList(mid - 1)) / 2.0f\n        } else {\n            sortedList(sortedList.length / 2)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1666124002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1665509798,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val list = List(a, b, c).sorted\n        (list(1) + list(2)) / 2.0f\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1666123991,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpn_msb6xt.scala:10)\n\tat Problem.main(tmpn_msb6xt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val list = List(a, b, c).sorted\n        if (list.length % 2 == 0) (list(list.length / 2) + list(list.length / 2 - 1)) / 2.0f\n        else list(list.length / 2)\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1666123973,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val list = List(a, b, c).sorted\n        if (list.size % 2 == 0) (list(list.size / 2) + list(list.size / 2 - 1)) / 2.0f\n        else list(list.size / 2)\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1666123973,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val middle = sortedList(1)\n        middle.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1665509798,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1665509798,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        val list = List(a, b, c)\n        val sortedList = list.sorted\n        if (sortedList.length % 2 == 0) {\n            val mid = sortedList.length / 2\n            (sortedList(mid - 1) + sortedList(mid)) / 2.0f\n        } else {\n            sortedList(sortedList.length / 2)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
      "timestamp": 1666123972,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}