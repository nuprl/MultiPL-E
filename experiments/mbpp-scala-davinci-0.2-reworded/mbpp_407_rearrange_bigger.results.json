{
  "name": "mbpp_407_rearrange_bigger",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_407_rearrange_bigger.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.asDigit)\n        val sorted = digits.sorted\n        val sortedReverse = sorted.reverse\n        if (digits == sortedReverse) {\n            \"Not possible\"\n        } else {\n            val index = digits.indexOf(sortedReverse.find(x => x > digits.last).get)\n            val (left, right) = digits.splitAt(index)\n            val (left1, right1) = right.splitAt(right.length - 1)\n            val result = (left ::: (right1.head :: left1)).sorted.mkString.toLong\n            result\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1665509940,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp00zbtxb.scala:20:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp00zbtxb.scala:21:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp00zbtxb.scala:22:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.toString.toInt)\n        val sorted = digits.sorted\n        if (sorted == digits.reverse) {\n            \"not possible\"\n        } else {\n            val (head, tail) = digits.span(_ == digits.max)\n            val (head2, tail2) = tail.span(_ == tail.min)\n            val (head3, tail3) = tail2.span(_ == tail2.max)\n            val (head4, tail4) = tail3.span(_ == tail3.min)\n            val (head5, tail5) = tail4.span(_ == tail4.max)\n            val (head6, tail6) = tail5.span(_ == tail5.min)\n            val (head7, tail7) = tail6.span(_ == tail6.max)\n            val (head8, tail8) = tail7.span(_ == tail7.min)\n            val (head9, tail9) = tail8.span(_ == tail8.max)\n            val (head10, tail10) = tail9.span(_ == tail9.min)\n            val (head11, tail11) = tail10.span(_ == tail10.max)\n            val (head12, tail12) = tail11.span(_ == tail11.min)\n            val (head13, tail13) = tail12.span(_ == tail12.max)\n            val (head14, tail14) = tail13.span(_ == tail13.min)\n            val (head15, tail15) = tail14.span(_ == tail14.max)\n            val (head16, tail16) = tail15.span(_ == tail15.min)\n            val (head17, tail17) = tail16.span(_ == tail16.max)\n            val (head18, tail18) = tail17.span(_ == tail17.min)\n            val (head19, tail19) = tail18.span(_ == tail18.max)\n            val (head20, tail20) = tail19.span(_ == tail19.min)\n            val (head21, tail21) = tail20.span(_ == tail20.max)\n           \n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1665509941,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp6hh2e_wk.scala:41:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6hh2e_wk.scala:35:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6hh2e_wk.scala:36:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6hh2e_wk.scala:37:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmp6hh2e_wk.scala:34:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m34 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.toString.toInt)\n        val sorted = digits.sorted\n        val reversed = sorted.reverse\n        if (digits == reversed) -1\n        else {\n            val index = digits.indexOf(reversed.head)\n            val (left, right) = digits.splitAt(index)\n            val newRight = reversed.head :: right.tail.sorted\n            (left ::: newRight).mkString.toLong\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1665509940,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsf8_sadt.scala:18:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsf8_sadt.scala:19:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsf8_sadt.scala:20:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.toString.toInt)\n        val sorted = digits.sorted\n        val sortedRev = sorted.reverse\n        val index = digits.indexOf(sortedRev.head)\n        val (left, right) = digits.splitAt(index)\n        val (leftRev, rightRev) = left.reverse.splitAt(1)\n        val result = (leftRev ++ rightRev ++ right).mkString.toLong\n        if (result > n) result else -1\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1665509940,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4vp5wwaj.scala:16:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4vp5wwaj.scala:17:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4vp5wwaj.scala:18:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.map(_.asDigit).toList\n        val sorted = digits.sorted\n        val reversed = sorted.reverse\n        val index = digits.indexOf(reversed.head)\n        val (left, right) = digits.splitAt(index)\n        val (left1, right1) = right.splitAt(1)\n        val newRight = left1 ::: right1.tail\n        val newLeft = left ::: right1.head :: newRight.sorted\n        val newNumber = newLeft.mkString.toLong\n        if (newNumber > n) newNumber else -1\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1665509940,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpwtr8sz9a.scala:18:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpwtr8sz9a.scala:19:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpwtr8sz9a.scala:20:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.toString.toInt)\n        val sorted = digits.sorted\n        val sortedRev = sorted.reverse\n        if (digits == sortedRev) {\n            \"Not possible\"\n        } else {\n            val index = digits.lastIndexWhere(x => x < digits.last)\n            val newDigits = digits.updated(index, digits.last).updated(digits.length - 1, digits(index))\n            newDigits.mkString(\"\").toLong\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1665509940,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpg2u7t7lj.scala:18:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpg2u7t7lj.scala:19:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpg2u7t7lj.scala:20:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.asDigit)\n        val sorted = digits.sorted\n        val sortedReverse = sorted.reverse\n        val index = digits.indexOf(sortedReverse.head)\n        val (left, right) = digits.splitAt(index)\n        val (leftSorted, rightSorted) = (left.sorted, right.sorted)\n        val (leftSortedReverse, rightSortedReverse) = (leftSorted.reverse, rightSorted.reverse)\n        val (leftSortedReverseTail, rightSortedReverseTail) = (leftSortedReverse.tail, rightSortedReverse.tail)\n        val (leftSortedReverseTailSorted, rightSortedReverseTailSorted) = (leftSortedReverseTail.sorted, rightSortedReverseTail.sorted)\n        val (leftSortedReverseTailSortedReverse, rightSortedReverseTailSortedReverse) = (leftSortedReverseTailSorted.reverse, rightSortedReverseTailSorted.reverse)\n        val result = leftSortedReverseTailSortedReverse ++ rightSortedReverseTailSortedReverse\n        if (result.mkString.toLong > n) result.mkString.toLong else -1\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1665509940,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvu7w1fw3.scala:20:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvu7w1fw3.scala:21:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvu7w1fw3.scala:22:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.toString.toInt)\n        val sorted = digits.sorted\n        val sortedReverse = sorted.reverse\n        val index = digits.indexOf(sortedReverse.head)\n        if (index == 0) {\n            val newDigits = sortedReverse.tail ::: List(sortedReverse.head)\n            newDigits.mkString.toLong\n        } else {\n            val newDigits = sortedReverse.tail ::: List(sortedReverse.head)\n            val (left, right) = digits.splitAt(index)\n            val newLeft = left.take(left.length - 1) ::: List(sortedReverse.head)\n            newLeft.mkString.toLong + newDigits.mkString.toLong\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1665509940,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpl4b5s9mw.scala:21:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpl4b5s9mw.scala:22:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpl4b5s9mw.scala:23:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.map(_.asDigit).toList\n        val sorted = digits.sorted\n        val max = sorted.last\n        val maxIndex = digits.indexOf(max)\n        val maxIndexSorted = sorted.indexOf(max)\n        val min = sorted.head\n        val minIndex = digits.indexOf(min)\n        val minIndexSorted = sorted.indexOf(min)\n        if (maxIndex == digits.length - 1) {\n            val newDigits = digits.updated(maxIndex, min).updated(minIndex, max)\n            newDigits.mkString.toLong\n        }\n        else {\n            val newDigits = digits.updated(maxIndex, min).updated(minIndex, max)\n            val newSorted = newDigits.sorted\n            val newMaxIndex = newDigits.indexOf(max)\n            val newMinIndex = newDigits.indexOf(min)\n            val newMaxIndexSorted = newSorted.indexOf(max)\n            val newMinIndexSorted = newSorted.indexOf(min)\n            val newDigits2 = newDigits.updated(newMaxIndex, newSorted(newMaxIndexSorted + 1)).updated(newMinIndex, newSorted(newMinIndexSorted - 1))\n            newDigits2.mkString.toLong\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1665509940,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpk11yq7js.scala:30:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpk11yq7js.scala:31:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpk11yq7js.scala:32:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.asDigit)\n        val sorted = digits.sorted.reverse\n        if (digits == sorted) return -1\n        val (left, right) = digits.splitAt(digits.length - 1)\n        val (x, y) = left.reverse.span(_ >= digits.last)\n        val z = x.head\n        val newLeft = (x.tail :+ digits.last).reverse ++ y\n        val newRight = z :: right.tail\n        (newLeft ++ newRight).mkString.toLong\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1665509940,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprhlpand1.scala:17:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprhlpand1.scala:18:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprhlpand1.scala:19:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.toString.toInt)\n        val sortedDigits = digits.sorted\n        val sortedDigitsReversed = sortedDigits.reverse\n        val digitsReversed = digits.reverse\n        if (sortedDigitsReversed == digitsReversed) return -1\n        val index = digitsReversed.indexWhere(x => x > digitsReversed(0))\n        val temp = digitsReversed(0)\n        digitsReversed(0) = digitsReversed(index)\n        digitsReversed(index) = temp\n        val result = digitsReversed.reverse.mkString.toLong\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1665509941,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpu4xdivu1.scala:13:8 -------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        digitsReversed(\u001b[31m0\u001b[0m) = digitsReversed(index)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Int] - did you mean digitsReversed.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpu4xdivu1.scala:14:8 -------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        digitsReversed(index) = temp\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Int] - did you mean digitsReversed.updated?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpu4xdivu1.scala:19:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpu4xdivu1.scala:20:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpu4xdivu1.scala:21:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.map(_.asDigit).toList\n        val sorted = digits.sorted\n        val max = sorted.last\n        val maxIndex = digits.indexOf(max)\n        val maxIndexSorted = sorted.indexOf(max)\n        val next = sorted(maxIndexSorted - 1)\n        val nextIndex = digits.indexOf(next)\n        val (left, right) = digits.splitAt(nextIndex)\n        val result = (left :+ max) ++ right.tail.sorted\n        if (result.head == 0) -1 else result.mkString.toLong\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1665509940,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpolsxmara.scala:18:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpolsxmara.scala:19:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpolsxmara.scala:20:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.toString.toInt)\n        val sorted = digits.sorted\n        val sortedReverse = sorted.reverse\n        val index = digits.indexOf(sortedReverse.head)\n        val (left, right) = digits.splitAt(index)\n        val (leftSorted, rightSorted) = (left.sorted, right.sorted)\n        val leftSortedReverse = leftSorted.reverse\n        val rightSortedReverse = rightSorted.reverse\n        val (leftSortedReverseHead, leftSortedReverseTail) = (leftSortedReverse.head, leftSortedReverse.tail)\n        val (rightSortedReverseHead, rightSortedReverseTail) = (rightSortedReverse.head, rightSortedReverse.tail)\n        if (leftSortedReverseHead > rightSortedReverseHead) {\n            val newLeft = leftSortedReverseTail :+ rightSortedReverseHead\n            val newRight = rightSortedReverseTail :+ leftSortedReverseHead\n            (newLeft ++ newRight).mkString.toLong\n        } else {\n            -1\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1665509940,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvmj5mvib.scala:25:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvmj5mvib.scala:26:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvmj5mvib.scala:27:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.map(_.asDigit).toList\n        val sorted = digits.sorted.reverse\n        if (digits == sorted) return -1\n        val (left, right) = digits.span(_ != sorted.head)\n        val (left2, right2) = right.span(_ != sorted.tail.head)\n        val newRight = sorted.head :: sorted.tail.head :: left2.tail\n        val newLeft = left ::: right2\n        (newLeft ::: newRight).mkString.toLong\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1665509940,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9agz3pko.scala:16:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9agz3pko.scala:17:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9agz3pko.scala:18:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.toString.toInt)\n        val (left, right) = digits.splitAt(digits.length - 1)\n        val rightSorted = right.sorted\n        if (rightSorted.head > left.last) {\n            val (rightHead, rightTail) = rightSorted.splitAt(1)\n            return (left ::: rightHead ::: rightTail.sorted).mkString.toLong\n        }\n        return -1\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1665509940,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4mlebq4x.scala:16:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4mlebq4x.scala:17:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4mlebq4x.scala:18:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.asDigit)\n        val (left, right) = digits.splitAt(digits.length - 1)\n        val rightSorted = right.sorted\n        val rightSortedIndex = rightSorted.indexOf(right.head)\n        if (rightSortedIndex == 0) {\n            val leftSorted = left.sorted\n            val leftSortedIndex = leftSorted.indexOf(left.head)\n            if (leftSortedIndex == leftSorted.length - 1) None\n            else {\n                val leftSortedHead = leftSorted(leftSortedIndex + 1)\n                val leftSortedTail = leftSorted.drop(leftSortedIndex + 1)\n                val leftSortedTailSorted = leftSortedTail.sorted\n                val leftSortedTailSortedHead = leftSortedTailSorted.head\n                val leftSortedTailSortedTail = leftSortedTailSorted.tail\n                Some(leftSortedHead.toString + leftSortedTailSortedHead.toString + leftSortedTailSortedTail.mkString + rightSorted.mkString)\n            }\n        }\n        else {\n            val rightSortedHead = rightSorted(rightSortedIndex - 1)\n            val rightSortedTail = rightSorted.drop(rightSortedIndex - 1)\n            val rightSortedTailSorted = rightSortedTail.sorted\n            val rightSortedTailSortedHead = rightSortedTailSorted.head\n            val rightSortedTailSortedTail = rightSortedTailSorted.tail\n            Some(left.mkString + rightSortedHead.toString + rightSortedTailSortedHead.toString + rightSortedTailSortedTail.mkString)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1665509940,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpphhxjnvz.scala:33:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpphhxjnvz.scala:34:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpphhxjnvz.scala:35:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.toString.toInt)\n        val sortedDigits = digits.sorted\n        val sortedDigitsReversed = sortedDigits.reverse\n        val index = digits.indexOf(sortedDigitsReversed.head)\n        val (left, right) = digits.splitAt(index)\n        val newDigits = left ::: sortedDigitsReversed\n        val newNumber = newDigits.mkString.toLong\n        if (newNumber > n) newNumber else -1\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1665509940,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprk9h8dj6.scala:16:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprk9h8dj6.scala:17:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprk9h8dj6.scala:18:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.toString.toInt)\n        val sorted = digits.sorted\n        if (digits == sorted.reverse) return -1\n        val (i, j) = (digits.indexWhere(x => x < digits.last), sorted.indexWhere(x => x > digits(i)))\n        val (left, right) = (digits.take(i), digits.drop(i + 1))\n        val (left1, right1) = (left :+ sorted(j), sorted.drop(j + 1) ::: right)\n        val result = (left1 ::: right1).mkString.toLong\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1665509940,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmphmy5dxbv.scala:9:13 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mval\u001b[0m (i, j) = (digits.indexWhere(\u001b[36mx\u001b[0m => x < digits.last), sorted.indexWhere(\u001b[36mx\u001b[0m => x > digits(i)))\n\u001b[31m\u001b[31m  |\u001b[0m             ^\u001b[0m\n\u001b[31m  |\u001b[0m             Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphmy5dxbv.scala:16:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphmy5dxbv.scala:17:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphmy5dxbv.scala:18:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.asDigit)\n        val sorted = digits.sorted\n        val max = sorted.last\n        val index = digits.indexOf(max)\n        val (left, right) = digits.splitAt(index)\n        val next = sorted.filter(_ > max).min\n        val nextIndex = sorted.indexOf(next)\n        val (left2, right2) = sorted.splitAt(nextIndex)\n        val newLeft = left2 ::: left ::: right2\n        val newRight = right.filter(_ != next)\n        val newDigits = newLeft ::: newRight\n        if (newDigits.head == 0) -1 else newDigits.mkString.toLong\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1665509940,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxfg8tanh.scala:20:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxfg8tanh.scala:21:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxfg8tanh.scala:22:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.asDigit)\n        val sorted = digits.sorted\n        val sortedReverse = sorted.reverse\n        val index = digits.indexOf(sortedReverse.head)\n        val (left, right) = digits.splitAt(index)\n        val (leftSorted, rightSorted) = (left.sorted, right.sorted)\n        val (leftSortedReverse, rightSortedReverse) = (leftSorted.reverse, rightSorted.reverse)\n        val (leftSortedReverseTail, rightSortedReverseTail) = (leftSortedReverse.tail, rightSortedReverse.tail)\n        val (leftSortedReverseTailSorted, rightSortedReverseTailSorted) = (leftSortedReverseTail.sorted, rightSortedReverseTail.sorted)\n        val (leftSortedReverseTailSortedReverse, rightSortedReverseTailSortedReverse) = (leftSortedReverseTailSorted.reverse, rightSortedReverseTailSorted.reverse)\n        val leftSortedReverseTailSortedReverseHead = leftSortedReverseTailSortedReverse.head\n        val rightSortedReverseTailSortedReverseHead = rightSortedReverseTailSortedReverse.head\n        val leftSortedReverseTailSortedReverseHeadIndex = leftSortedReverseTail.indexOf(leftSortedReverseTailSortedReverseHead)\n        val rightSortedReverseTailSortedReverseHeadIndex = rightSortedReverseTail.indexOf(rightSortedReverseTailSortedReverseHead)\n        val leftSortedReverseTailSortedReverseHeadIndexPlusOne = leftSortedReverseTailSortedReverseHeadIndex + 1\n        val rightSortedReverseTailSortedReverseHeadIndexPlusOne = rightSortedReverseTailSortedR\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1665509940,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9au0wlkk.scala:21:66 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mrightSortedReverseTailSortedReverseHeadIndexPlusOne\u001b[0m = rightSortedReverseTailSortedR\n\u001b[31m\u001b[31m   |\u001b[0m                                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                Not found: rightSortedReverseTailSortedR\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9au0wlkk.scala:24:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9au0wlkk.scala:25:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9au0wlkk.scala:26:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.toString.toInt)\n        val sorted = digits.sorted\n        val reversed = sorted.reverse\n        if (digits == reversed) {\n            \"Not possible\"\n        } else {\n            val index = digits.indexOf(reversed.find(x => x > digits.last).get)\n            val (a, b) = digits.splitAt(index)\n            val (c, d) = b.splitAt(1)\n            val result = (a ::: c ::: b.drop(1) ::: d).mkString.toLong\n            result\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122861,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp0pevgo6s.scala:20:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp0pevgo6s.scala:21:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp0pevgo6s.scala:22:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.map(_.asDigit).toList\n        val sortedDigits = digits.sorted\n        val sortedDigitsReversed = sortedDigits.reverse\n        val digitsReversed = digits.reverse\n        val sortedDigitsReversedTail = sortedDigitsReversed.tail\n        val sortedDigitsReversedTailReversed = sortedDigitsReversedTail.reverse\n        val sortedDigitsReversedHead = sortedDigitsReversed.head\n        val digitsReversedHead = digitsReversed.head\n        val digitsReversedTail = digitsReversed.tail\n        val digitsReversedTailReversed = digitsReversedTail.reverse\n        val digitsReversedTailReversedSorted = digitsReversedTailReversed.sorted\n        val digitsReversedTailReversedSortedReversed = digitsReversedTailReversedSorted.reverse\n        val digitsReversedTailReversedSortedReversedHead = digitsReversedTailReversedSortedReversed.head\n        val digitsReversedTailReversedSortedReversedTail = digitsReversedTailReversedSortedReversed.tail\n        val digitsReversedTailReversedSortedReversedTailReversed = digitsReversedTailReversedSortedReversedTail.reverse\n        val digitsReversedTailReversedSortedReversedTailReversedHead = digitsReversedTailReversedSortedReversedTailReversed.head\n        val digitsReversedTailReversedSortedReversedTailReversedTail = digitsReversedTailReversedSortedReversedTailReversed.tail\n        val digitsReversedTailReversedSortedReversedTailReversedTailReversed = digitsReversedTailReversedSortedReversedTailReversedTail.reverse\n        val digitsReversedTailReversedSortedReversedTailReversedTailReversedHead\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122861,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpk047suc3.scala:25:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpk047suc3.scala:27:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpk047suc3.scala:28:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpk047suc3.scala:29:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.asDigit)\n        val sorted = digits.sorted\n        val sortedReverse = sorted.reverse\n        val index = digits.indexOf(sortedReverse.head)\n        val (left, right) = digits.splitAt(index)\n        val (leftReverse, rightReverse) = (left.reverse, right.reverse)\n        val (leftReverseSorted, rightReverseSorted) = (leftReverse.sorted, rightReverse.sorted)\n        val (leftReverseSortedReverse, rightReverseSortedReverse) = (leftReverseSorted.reverse, rightReverseSorted.reverse)\n        val (leftReverseSortedReverseTail, rightReverseSortedReverseHead) = (leftReverseSortedReverse.tail, rightReverseSortedReverse.head)\n        val (leftReverseSortedReverseTailSorted, rightReverseSortedReverseHeadSorted) = (leftReverseSortedReverseTail.sorted, rightReverseSortedReverseHead.sorted)\n        val (leftReverseSortedReverseTailSortedReverse, rightReverseSortedReverseHeadSortedReverse) = (leftReverseSortedReverseTailSorted.reverse, rightReverseSortedReverseHeadSorted.reverse)\n        val (leftReverseSortedReverseTailSortedReverseHead, rightReverseSortedReverseHeadSortedReverseHead) = (leftReverseSortedReverseTailSortedReverse.head, rightReverseSortedReverseHeadSortedReverse.head)\n        val (leftReverseSortedReverseTailSortedReverseTail, rightReverseSortedReverseHeadSortedReverseTail) = (leftReverseSortedReverseTailSortedReverse.tail, rightReverseSortedReverse\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122866,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjn8zmotb.scala:19:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpjn8zmotb.scala:15:156 -----------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m (leftReverseSortedReverseTailSorted, rightReverseSortedReverseHeadSorted) = (leftReverseSortedReverseTail.sorted, rightReverseSortedReverseHead.sorted)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     value sorted is not a member of Int\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpjn8zmotb.scala:16:183 -----------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m (leftReverseSortedReverseTailSortedReverse, rightReverseSortedReverseHeadSortedReverse) = (leftReverseSortedReverseTailSorted.reverse, rightReverseSortedReverseHeadSorted.reverse)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue reverse is not a member of Nothing, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Ordering.Implicits.seqOrdering\n\u001b[31m   |\u001b[0m  import math.Ordering.Implicits.sortedSetOrdering\n\u001b[31m   |\u001b[0m  import math.Ordering.Iterable\n\u001b[31m   |\u001b[0m  import math.Ordering.Option\n\u001b[31m   |\u001b[0m  import math.Ordering.comparatorToOrdering\n\u001b[31m   |\u001b[0m  import math.Ordering.ordered\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.list asScalaBuffer\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToScala.list asScalaBuffer\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpjn8zmotb.scala:17:202 ----------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.asDigit)\n        val sortedDigits = digits.sorted\n        val sortedDigitsReversed = sortedDigits.reverse\n        val digitsReversed = digits.reverse\n        val index = digitsReversed.indexWhere(sortedDigitsReversed(_) > sortedDigitsReversed(0))\n        if (index == -1) -1\n        else {\n            val newDigits = digitsReversed.updated(index, sortedDigitsReversed(0))\n            val newDigitsReversed = newDigits.updated(0, sortedDigitsReversed(index))\n            val newDigitsSorted = newDigitsReversed.sorted\n            newDigitsSorted.reverse.mkString.toLong\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122861,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvfig8nuf.scala:20:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvfig8nuf.scala:21:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvfig8nuf.scala:22:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.asDigit)\n        val sorted = digits.sorted\n        val reversed = sorted.reverse\n        val reversedDigits = reversed.map(_.toString).mkString.toLong\n        if (reversedDigits == n) -1\n        else {\n            val index = digits.indexOf(reversed.head)\n            val (left, right) = digits.splitAt(index)\n            val (left1, right1) = right.splitAt(1)\n            val left2 = left ::: right1\n            val right2 = left1 ::: left2.sorted\n            val result = (left2 ::: right2).map(_.toString).mkString.toLong\n            result\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122861,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8u1b71gy.scala:22:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8u1b71gy.scala:23:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8u1b71gy.scala:24:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.asDigit)\n        val sortedDigits = digits.sorted\n        if (digits == sortedDigits.reverse) {\n            \"Not possible\"\n        } else {\n            val index = digits.lastIndexWhere(x => x > digits(digits.length - 1))\n            val (left, right) = digits.splitAt(index)\n            val min = sortedDigits.find(x => x > digits(index)).get\n            val (left1, right1) = right.partition(x => x != min)\n            (left ::: List(min) ::: left1.sorted ::: right1.sorted).mkString.toLong\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122862,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpca_oy1aa.scala:19:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpca_oy1aa.scala:20:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpca_oy1aa.scala:21:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.asDigit)\n        val sorted = digits.sorted\n        val sortedReverse = sorted.reverse\n        val index = digits.indexOfSlice(sortedReverse)\n        if (index == -1) -1\n        else {\n            val (left, right) = digits.splitAt(index)\n            val (leftReverse, rightReverse) = (left.reverse, right.reverse)\n            val (leftReverseSorted, rightReverseSorted) = (leftReverse.sorted, rightReverse.sorted)\n            val (leftReverseSortedReverse, rightReverseSortedReverse) = (leftReverseSorted.reverse, rightReverseSorted.reverse)\n            val (leftReverseSortedReverseTail, rightReverseSortedReverseHead) = (leftReverseSortedReverse.tail, rightReverseSortedReverse.head)\n            val (leftReverseSortedReverseTailSorted, rightReverseSortedReverseHeadSorted) = (leftReverseSortedReverseTail.sorted, rightReverseSortedReverseHead.sorted)\n            val (leftReverseSortedReverseTailSortedReverse, rightReverseSortedReverseHeadSortedReverse) = (leftReverseSortedReverseTailSorted.reverse, rightReverseSortedReverseHeadSorted.reverse)\n            val (leftReverseSortedReverseTailSortedReverseHead, rightReverseSortedReverseHeadSortedReverseHead) = (leftReverseSortedReverseTailSortedReverse.head, rightReverseSortedReverseHeadSortedReverse.head)\n            val (leftReverseSortedReverseTailSortedReverseTail, rightReverseSortedReverseHeadSortedReverseTail) = (leftReverseSortedReverseTailSorted\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122866,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpb0qiupk0.scala:21:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpb0qiupk0.scala:29:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpb0qiupk0.scala:17:160 -----------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            \u001b[33mval\u001b[0m (leftReverseSortedReverseTailSorted, rightReverseSortedReverseHeadSorted) = (leftReverseSortedReverseTail.sorted, rightReverseSortedReverseHead.sorted)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     value sorted is not a member of Int\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpb0qiupk0.scala:18:187 -----------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            \u001b[33mval\u001b[0m (leftReverseSortedReverseTailSortedReverse, rightReverseSortedReverseHeadSortedReverse) = (leftReverseSortedReverseTailSorted.reverse, rightReverseSortedReverseHeadSorted.reverse)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue reverse is not a member of Nothing, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Ordering.Implicits.seqOrdering\n\u001b[31m   |\u001b[0m  import math.Ordering.Implicits.sortedSetOrdering\n\u001b[31m   |\u001b[0m  import math.Ordering.Iterable\n\u001b[31m   |\u001b[0m  import math.Ordering.Option\n\u001b[31m   |\u001b[0m  import math.Ordering.comparatorToOrdering\n\u001b[31m   |\u001b[0m  import math.Ordering.ordered\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.list asSc",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.map(_.asDigit).toList\n        val sorted = digits.sorted\n        val sortedReverse = sorted.reverse\n        val index = digits.indexOf(sortedReverse.head)\n        val (left, right) = digits.splitAt(index)\n        val (leftReverse, rightReverse) = left.reverse.splitAt(left.length - 1)\n        val newDigits = leftReverse ++ right ++ rightReverse\n        if (newDigits.head == 0) None else Some(newDigits.mkString.toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122862,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2e_t2lil.scala:16:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2e_t2lil.scala:17:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2e_t2lil.scala:18:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.map(_.asDigit).toList\n        val sorted = digits.sorted\n        val sortedReverse = sorted.reverse\n        val index = digits.indexOf(sortedReverse.head)\n        val (left, right) = digits.splitAt(index)\n        val (leftSorted, rightSorted) = (left.sorted, right.sorted)\n        val (leftSortedReverse, rightSortedReverse) = (leftSorted.reverse, rightSorted.reverse)\n        val leftSortedReverseHead = leftSortedReverse.head\n        val leftSortedReverseTail = leftSortedReverse.tail\n        val rightSortedReverseHead = rightSortedReverse.head\n        val rightSortedReverseTail = rightSortedReverse.tail\n        val newLeft = leftSortedReverseHead :: leftSortedReverseTail\n        val newRight = rightSortedReverseHead :: rightSortedReverseTail\n        val newDigits = newLeft ::: newRight\n        val newDigitsString = newDigits.map(_.toString).reduceLeft(_ + _)\n        val newDigitsLong = newDigitsString.toLong\n        if (newDigitsLong == n) -1 else newDigitsLong\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122862,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfljjj8ww.scala:25:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfljjj8ww.scala:26:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfljjj8ww.scala:27:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.toString.toInt)\n        val sorted = digits.sorted\n        val sortedReverse = sorted.reverse\n        val index = digits.indexOf(sortedReverse.head)\n        val (left, right) = digits.splitAt(index)\n        val newRight = sortedReverse.tail :+ sortedReverse.head\n        val newDigits = left ::: newRight\n        val newNumber = newDigits.mkString.toLong\n        if (newNumber == n) -1 else newNumber\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122861,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1peibu5u.scala:17:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1peibu5u.scala:18:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1peibu5u.scala:19:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.map(_.asDigit).toList\n        val sorted = digits.sorted\n        val sortedReverse = sorted.reverse\n        val sortedReverseIndex = sortedReverse.indexOf(digits.last)\n        val sortedReverseIndexValue = sortedReverse(sortedReverseIndex)\n        val sortedReverseIndexValueIndex = digits.indexOf(sortedReverseIndexValue)\n        val newDigits = digits.take(sortedReverseIndexValueIndex) ::: digits.drop(sortedReverseIndexValueIndex + 1) ::: List(digits(sortedReverseIndexValueIndex))\n        val newDigitsSorted = newDigits.sorted\n        val newDigitsSortedReverse = newDigitsSorted.reverse\n        val newDigitsSortedReverseIndex = newDigitsSortedReverse.indexOf(sortedReverseIndexValue)\n        val newDigitsSortedReverseIndexValue = newDigitsSortedReverse(newDigitsSortedReverseIndex)\n        val newDigitsSortedReverseIndexValueIndex = newDigits.indexOf(newDigitsSortedReverseIndexValue)\n        val newDigitsSortedReverseIndexValueIndexValue = newDigits(newDigitsSortedReverseIndexValueIndex)\n        val newDigitsSortedReverseIndexValueIndexValueIndex = newDigitsSortedReverse.indexOf(newDigitsSortedReverseIndexValueIndexValue)\n        val newDigitsSortedReverseIndexValueIndexValueIndexValue = newDigitsSortedReverse(newDigitsSortedReverseIndexValueIndexValueIndex)\n        val newDigitsSortedReverseIndexValueIndexValueIndexValueIndex = newDigits.indexOf(newDigitsSortedReverseIndexValueIndexValueIndexValue)\n        val newDigitsSortedReverseIndexValueIndexValueIndexValueIndexValue = newDigits(newDigitsSortedReverseIndexValueIndexValueIndexValueIndex)\n        val newDigitsSortedReverseIndexValueIndexValueIndexValueIndexValueIndex = newDig\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122861,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpy4pn27kh.scala:23:82 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnewDigitsSortedReverseIndexValueIndexValueIndexValueIndexValueIndex\u001b[0m = newDig\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                       Not found: newDig\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpy4pn27kh.scala:26:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpy4pn27kh.scala:27:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpy4pn27kh.scala:28:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.map(_.asDigit).toList\n        val sorted = digits.sorted.reverse\n        if (digits == sorted) return -1\n        val (left, right) = digits.splitAt(digits.length - 1)\n        val (min, max) = (left.min, left.max)\n        val (minIndex, maxIndex) = (left.indexOf(min), left.indexOf(max))\n        if (minIndex < maxIndex) {\n            val (newLeft, newRight) = (left.updated(minIndex, max), right.updated(0, min))\n            (newLeft ::: newRight).mkString.toLong\n        } else {\n            val (newLeft, newRight) = (left.updated(minIndex, max).updated(maxIndex, min), right)\n            (newLeft ::: newRight).mkString.toLong\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122861,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpepdwta28.scala:21:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpepdwta28.scala:22:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpepdwta28.scala:23:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.asDigit)\n        val sorted = digits.sorted\n        val sortedReverse = sorted.reverse\n        val index = digits.indexOfSlice(sortedReverse)\n        if (index == -1) return -1\n        val (left, right) = digits.splitAt(index)\n        val (leftReverse, rightReverse) = (left.reverse, right.reverse)\n        val (leftReverseSorted, rightReverseSorted) = (leftReverse.sorted, rightReverse.sorted)\n        val (leftReverseSortedReverse, rightReverseSortedReverse) = (leftReverseSorted.reverse, rightReverseSorted.reverse)\n        val (leftReverseSortedReverseTail, rightReverseSortedReverseTail) = (leftReverseSortedReverse.tail, rightReverseSortedReverse.tail)\n        val (leftReverseSortedReverseTailSorted, rightReverseSortedReverseTailSorted) = (leftReverseSortedReverseTail.sorted, rightReverseSortedReverseTail.sorted)\n        val (leftReverseSortedReverseTailSortedReverse, rightReverseSortedReverseTailSortedReverse) = (leftReverseSortedReverseTailSorted.reverse, rightReverseSortedReverseTailSorted.reverse)\n        val (leftReverseSortedReverseTailSortedReverseHead, rightReverseSortedReverseTailSortedReverseHead) = (leftReverseSortedReverseTailSortedReverse.head, rightReverseSortedReverseTailSortedReverse.head)\n        val (leftReverseSortedReverseTailSortedReverseHeadTail, rightReverseSortedReverseTailSortedReverseHeadTail) = (leftReverseSorted\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122861,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp88kbpde3.scala:20:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp88kbpde3.scala:22:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp88kbpde3.scala:23:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp88kbpde3.scala:24:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.asDigit)\n        val sorted = digits.sorted\n        val sortedReverse = sorted.reverse\n        val index = digits.lastIndexWhere(sortedReverse.head > _)\n        if (index == -1) -1\n        else {\n            val (left, right) = digits.splitAt(index)\n            val (right1, right2) = right.tail.partition(_ == sortedReverse.head)\n            val newRight = sortedReverse.head :: right1.sorted ::: right2\n            (left ::: newRight).mkString.toLong\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122862,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2m6tuqin.scala:19:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2m6tuqin.scala:20:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2m6tuqin.scala:21:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.asDigit)\n        val sorted = digits.sorted\n        val sortedDesc = sorted.reverse\n        val sortedDescIndex = sortedDesc.zipWithIndex.toMap\n        val sortedIndex = sorted.zipWithIndex.toMap\n        val sortedDescIndexReverse = sortedDescIndex.map(_.swap)\n        val sortedIndexReverse = sortedIndex.map(_.swap)\n        val sortedDescIndexReverseMap = sortedDescIndexReverse.toMap\n        val sortedIndexReverseMap = sortedIndexReverse.toMap\n        var i = digits.length - 1\n        var j = digits.length - 1\n        var k = digits.length - 1\n        var found = false\n        while (i >= 0 && !found) {\n            if (digits(i) != sortedDesc(i)) {\n                found = true\n                j = sortedDescIndexReverseMap(digits(i))\n                k = sortedIndexReverseMap(digits(i))\n            }\n            i -= 1\n        }\n        if (found) {\n            val temp = sortedDesc(j)\n            sortedDesc(j) = sortedDesc(k)\n            sortedDesc(k) = temp\n            sortedDesc.mkString.toLong\n        }\n        else -1\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaev8y1cd.scala:29:12 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            sortedDesc(j) = sortedDesc(k)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Int] - did you mean sortedDesc.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaev8y1cd.scala:30:12 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m            sortedDesc(k) = temp\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Int] - did you mean sortedDesc.updated?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpaev8y1cd.scala:36:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpaev8y1cd.scala:37:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpaev8y1cd.scala:38:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.asDigit)\n        val sorted = digits.sorted\n        val sortedReverse = sorted.reverse\n        val index = digits.indexOfSlice(sortedReverse)\n        if (index == -1) -1\n        else {\n            val (left, right) = digits.splitAt(index)\n            val (left1, right1) = left.splitAt(left.length - 1)\n            val (left2, right2) = right.splitAt(right.length - 1)\n            val min = right2.min\n            val minIndex = right1.indexOf(min)\n            val (left3, right3) = right1.splitAt(minIndex)\n            val (left4, right4) = right3.splitAt(right3.length - 1)\n            val newRight = right4 ::: left4 ::: left3 ::: left2 ::: left1\n            val newNumber = newRight.mkString.toLong\n            newNumber\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122862,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmph12ahqqh.scala:25:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmph12ahqqh.scala:26:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmph12ahqqh.scala:27:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.toString.toInt)\n        val sorted = digits.sorted\n        val sortedReverse = sorted.reverse\n        val sortedReverseStr = sortedReverse.mkString\n        val sortedStr = sorted.mkString\n        if (sortedStr == n.toString) {\n            \"not possible\"\n        } else {\n            val sortedReverseStr2 = sortedReverseStr.substring(1)\n            val sortedReverseStr2Int = sortedReverseStr2.toInt\n            val sortedReverseStr2IntStr = sortedReverseStr2Int.toString\n            val sortedReverseStr2IntStrList = sortedReverseStr2IntStr.toList.map(_.toString.toInt)\n            val sortedReverseStr2IntStrListSorted = sortedReverseStr2IntStrList.sorted\n            val sortedReverseStr2IntStrListSortedStr = sortedReverseStr2IntStrListSorted.mkString\n            val sortedReverseStr2IntStrListSortedStrInt = sortedReverseStr2IntStrListSortedStr.toInt\n            val sortedReverseStr2IntStrListSortedStrIntStr = sortedReverseStr2IntStrListSortedStrInt.toString\n            val sortedReverseStr2IntStrListSortedStrIntStrList = sortedReverseStr2IntStrListSortedStrIntStr.toList.map(_.toString.toInt)\n            val sortedReverseStr2IntStrListSortedStrIntStrListSorted = sortedReverseStr2IntStrListSortedStrIntStrList.sorted\n            val sortedReverseStr2IntStrListSortedStrIntStrListSortedStr = sortedReverseStr2IntStrListSortedStrIntStrListSorted.mkString\n            val sortedReverseStr2IntStrListSortedStrIntStrListSortedStrInt = sortedReverseStr2IntStrListSortedStrIntStrListSortedStr.toInt\n            val sortedReverseStr2IntStrListSortedStrIntStrListSortedStrIntStr = sortedReverse\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122862,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp7rqvlhp4.scala:35:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7rqvlhp4.scala:29:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7rqvlhp4.scala:30:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7rqvlhp4.scala:31:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmp7rqvlhp4.scala:28:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m28 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.toString.toInt)\n        val sorted = digits.sorted\n        if (digits == sorted.reverse) return -1\n        val index = digits.lastIndexWhere(_ < digits.last)\n        val (left, right) = digits.splitAt(index)\n        val min = right.min\n        val minIndex = right.indexOf(min)\n        val newRight = right.updated(minIndex, right(0)).updated(0, min)\n        (left ++ newRight.sorted).mkString.toLong\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122862,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_ci5vx1g.scala:17:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_ci5vx1g.scala:18:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_ci5vx1g.scala:19:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.map(_.asDigit).toList\n        val sorted = digits.sorted\n        val sortedReverse = sorted.reverse\n        val index = digits.indexOf(sortedReverse.head)\n        val (left, right) = digits.splitAt(index)\n        val (leftSorted, rightSorted) = (left.sorted, right.sorted)\n        val (leftSortedReverse, rightSortedReverse) = (leftSorted.reverse, rightSorted.reverse)\n        val (leftSortedReverseTail, rightSortedReverseTail) = (leftSortedReverse.tail, rightSortedReverse.tail)\n        val (leftSortedReverseHead, rightSortedReverseHead) = (leftSortedReverse.head, rightSortedReverse.head)\n        val newLeft = (leftSortedReverseHead :: leftSortedReverseTail) ++ rightSortedReverseTail\n        val newRight = rightSortedReverseHead :: newLeft\n        val newDigits = newRight.mkString.toLong\n        if (newDigits > n) newDigits else -1\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122862,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjj35dslr.scala:21:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjj35dslr.scala:22:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjj35dslr.scala:23:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.toString.toInt)\n        val sorted = digits.sorted\n        val sortedReverse = sorted.reverse\n        val index = digits.indexOf(sortedReverse.head)\n        val (left, right) = digits.splitAt(index)\n        val (leftSorted, rightSorted) = (left.sorted, right.sorted)\n        val (leftSortedReverse, rightSortedReverse) = (leftSorted.reverse, rightSorted.reverse)\n        val (leftSortedReverseTail, rightSortedReverseTail) = (leftSortedReverse.tail, rightSortedReverse.tail)\n        val (leftSortedReverseHead, rightSortedReverseHead) = (leftSortedReverse.head, rightSortedReverse.head)\n        val (leftSortedReverseTailSorted, rightSortedReverseTailSorted) = (leftSortedReverseTail.sorted, rightSortedReverseTail.sorted)\n        val (leftSortedReverseTailSortedReverse, rightSortedReverseTailSortedReverse) = (leftSortedReverseTailSorted.reverse, rightSortedReverseTailSorted.reverse)\n        val (leftSortedReverseTailSortedReverseHead, rightSortedReverseTailSortedReverseHead) = (leftSortedReverseTailSortedReverse.head, rightSortedReverseTailSortedReverse.head)\n        val (leftSortedReverseTailSortedReverseTail, rightSortedReverseTailSortedReverseTail) = (leftSortedReverseTailSortedReverse.tail, rightSortedReverseTailSortedReverse.tail)\n        val (leftSortedReverseTailSortedReverseTailSorted, rightSortedReverseTailSortedReverseTailSorted) = (leftSortedReverse\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122862,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp3q1yixxo.scala:20:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3q1yixxo.scala:22:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3q1yixxo.scala:23:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3q1yixxo.scala:24:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.asDigit)\n        val sorted = digits.sorted\n        val sortedReverse = sorted.reverse\n        val index = digits.indexOf(sortedReverse.head)\n        val (left, right) = digits.splitAt(index)\n        val (leftSorted, rightSorted) = (left.sorted, right.sorted)\n        val (leftSortedReverse, rightSortedReverse) = (leftSorted.reverse, rightSorted.reverse)\n        val leftSortedReverseHead = leftSortedReverse.head\n        val leftSortedReverseTail = leftSortedReverse.tail\n        val rightSortedReverseHead = rightSortedReverse.head\n        val rightSortedReverseTail = rightSortedReverse.tail\n        val leftSortedReverseTailSorted = leftSortedReverseTail.sorted\n        val leftSortedReverseTailSortedReverse = leftSortedReverseTailSorted.reverse\n        val leftSortedReverseTailSortedReverseHead = leftSortedReverseTailSortedReverse.head\n        val leftSortedReverseTailSortedReverseTail = leftSortedReverseTailSortedReverse.tail\n        val leftSortedReverseTailSortedReverseTailSorted = leftSortedReverseTailSortedReverseTail.sorted\n        val leftSortedReverseTailSortedReverseTailSortedReverse = leftSortedReverseTailSortedReverseTailSorted.reverse\n        val leftSortedReverseTailSortedReverseTailSortedReverseHead = leftSortedReverseTailSortedReverseTailSortedReverse.head\n        val leftSortedReverseTailSortedReverseTailSortedReverseTail = leftSortedReverseTailSortedReverseTailSortedReverse.tail\n        val leftSorted\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122861,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmplewanhb4.scala:26:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplewanhb4.scala:28:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplewanhb4.scala:29:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplewanhb4.scala:30:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.asDigit)\n        val sorted = digits.sorted\n        val reversed = sorted.reverse\n        val result = new ListBuffer[Int]\n        for (i <- 0 until digits.length) {\n            val digit = digits(i)\n            val index = reversed.indexOf(digit)\n            if (index != 0) {\n                result += reversed(index - 1)\n                reversed.remove(index - 1)\n            } else {\n                result += reversed(0)\n                reversed.remove(0)\n            }\n        }\n        result.mkString.toLong\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp5pe6nn2u.scala:15:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                reversed.remove(index - \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue remove is not a member of List[Int] - did you mean reversed.reduce?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp5pe6nn2u.scala:18:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                reversed.remove(\u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue remove is not a member of List[Int], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.collection asJava\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.collection asJava\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5pe6nn2u.scala:24:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5pe6nn2u.scala:25:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5pe6nn2u.scala:26:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.toString.toInt)\n        var i = digits.length - 1\n        while (i > 0 && digits(i) <= digits(i - 1)) i -= 1\n        if (i == 0) return -1\n        var j = digits.length - 1\n        while (digits(j) <= digits(i - 1)) j -= 1\n        val temp = digits(i - 1)\n        digits(i - 1) = digits(j)\n        digits(j) = temp\n        digits.slice(0, i) ++ digits.slice(i, digits.length).sortWith(_ < _)\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpkqvitxye.scala:13:8 -------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        digits(i - \u001b[31m1\u001b[0m) = digits(j)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Int] - did you mean digits.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpkqvitxye.scala:14:8 -------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        digits(j) = temp\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Int] - did you mean digits.updated?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkqvitxye.scala:18:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkqvitxye.scala:19:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkqvitxye.scala:20:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.toString.toInt)\n        val sorted = digits.sorted\n        val sortedR = sorted.reverse\n        val index = digits.indexOf(sortedR.head)\n        val (left, right) = digits.splitAt(index)\n        val (leftR, rightR) = right.splitAt(1)\n        val newRight = leftR ++ left\n        val newLeft = rightR ++ sorted.drop(1)\n        val newDigits = newRight ++ newLeft\n        val newNumber = newDigits.mkString.toLong\n        if (newNumber > n) newNumber else -1\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122869,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpcpcqx67f.scala:19:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpcpcqx67f.scala:20:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpcpcqx67f.scala:21:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.toString.toInt)\n        val sorted = digits.sorted\n        val sortedDesc = sorted.reverse\n        if (sorted == digits) {\n            -1\n        } else {\n            val index = digits.indexOf(sortedDesc.find(x => x > digits(digits.length - 1)).get)\n            val (left, right) = digits.splitAt(index)\n            val result = (left ::: sortedDesc.filter(_ != sortedDesc.find(x => x > digits(digits.length - 1)).get) ::: right.tail).mkString.toLong\n            if (result > 1000000000) -1 else result\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122869,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpnetky1k_.scala:19:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpnetky1k_.scala:20:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpnetky1k_.scala:21:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.map(_.asDigit).toList\n        val sortedDigits = digits.sorted\n        val sortedDigitsRev = sortedDigits.reverse\n        val sortedDigitsRevStr = sortedDigitsRev.mkString\n        val nStr = n.toString\n        if (nStr == sortedDigitsRevStr) {\n            \"Not possible\"\n        } else {\n            val sortedDigitsRevStrList = sortedDigitsRevStr.toList\n            val nStrList = nStr.toList\n            val diff = nStrList.diff(sortedDigitsRevStrList)\n            val diffStr = diff.mkString\n            val diffInt = diffStr.toInt\n            val diffIntStr = diffInt.toString\n            val diffIntStrList = diffIntStr.toList\n            val diffIntStrListSorted = diffIntStrList.sorted\n            val diffIntStrListSortedStr = diffIntStrListSorted.mkString\n            val diffIntStrListSortedStrInt = diffIntStrListSortedStr.toInt\n            val diffIntStrListSortedStrIntStr = diffIntStrListSortedStrInt.toString\n            val diffIntStrListSortedStrIntStrList = diffIntStrListSortedStrIntStr.toList\n            val diffIntStrListSortedStrIntStrListRev = diffIntStrListSortedStrIntStrList.reverse\n            val diffIntStrListSortedStrIntStrListRevStr = diffIntStrListSortedStrIntStrListRev.mkString\n            val diffIntStrListSortedStrIntStrListRevStrInt = diffIntStrListSortedStrIntStrListRevStr.toInt\n            val diffIntStrListSortedStrIntStrListRevStrIntStr = diffIntStrListSortedStrIntStrListRevStrInt.toString\n            val diffIntStrListSortedStrIntStrListRevStrIntStrList = diffIntStrListSortedStrIntStrListRevStrIntStr.toList\n            val diffIntStrListSortedStrIntStrListRevStrIntStrListSorted = diffIntStrListSortedStrIntStrListRevStrIntStrList.sorted\n            val diffIntStrListSortedStrIntStrListRevStr\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122869,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp1ktidp_2.scala:33:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp1ktidp_2.scala:41:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1ktidp_2.scala:35:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1ktidp_2.scala:36:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1ktidp_2.scala:37:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmp1ktidp_2.scala:34:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m34 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.map(_.asDigit).toList\n        val sorted = digits.sorted\n        val sortedReverse = sorted.reverse\n        val index = digits.indexOf(sortedReverse.head)\n        val (left, right) = digits.splitAt(index)\n        val (left2, right2) = right.tail.splitAt(right.tail.indexOf(sortedReverse.tail.head))\n        val result = left ::: List(right.head) ::: left2 ::: List(right2.head) ::: right2.tail.sorted\n        if (result.mkString.toLong == n) -1 else result.mkString.toLong\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122869,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_cj17n8b.scala:16:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_cj17n8b.scala:17:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_cj17n8b.scala:18:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.toString.toInt)\n        val sorted = digits.sorted\n        val sortedReverse = sorted.reverse\n        val index = digits.indexOf(sortedReverse.head)\n        val (left, right) = digits.splitAt(index)\n        val (leftSorted, rightSorted) = (left.sorted, right.sorted)\n        val (leftSortedReverse, rightSortedReverse) = (leftSorted.reverse, rightSorted.reverse)\n        val (leftSortedReverseTail, rightSortedReverseTail) = (leftSortedReverse.tail, rightSortedReverse.tail)\n        val (leftSortedReverseTailSorted, rightSortedReverseTailSorted) = (leftSortedReverseTail.sorted, rightSortedReverseTail.sorted)\n        val (leftSortedReverseTailSortedReverse, rightSortedReverseTailSortedReverse) = (leftSortedReverseTailSorted.reverse, rightSortedReverseTailSorted.reverse)\n        val leftSortedReverseTailSortedReverseHead = leftSortedReverseTailSortedReverse.head\n        val rightSortedReverseTailSortedReverseHead = rightSortedReverseTailSortedReverse.head\n        if (leftSortedReverseTailSortedReverseHead < rightSortedReverseTailSortedReverseHead) {\n            val (leftSortedReverseTailSortedReverseHeadTail, rightSortedReverseTailSortedReverseHeadTail) = (leftSortedReverseTailSortedReverse.tail, rightSortedReverseTailSortedReverse.tail)\n            val (leftSortedReverseTailSortedReverseHeadTailSorted, rightSortedReverseTailSortedReverseHeadTailSorted) = (leftSortedReverseTailS\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122869,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp388b6q8c.scala:21:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp388b6q8c.scala:29:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp388b6q8c.scala:20:121 -----------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m            \u001b[33mval\u001b[0m (leftSortedReverseTailSortedReverseHeadTailSorted, rightSortedReverseTailSortedReverseHeadTailSorted) = (leftSortedReverseTailS\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                         ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Not found: leftSortedReverseTailS\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp388b6q8c.scala:20:17 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m            \u001b[33mval\u001b[0m (leftSortedReverseTailSortedReverseHeadTailSorted, rightSortedReverseTailSortedReverseHeadTailSorted) = (leftSortedReverseTailS\n\u001b[31m\u001b[31m   |\u001b[0m                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                 Recursive \u001b[33mvalue\u001b[0m \u001b[35m$8$\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp388b6q8c.scala:20:67 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m            \u001b[33mval\u001b[0m (leftSortedReverseTailSortedReverseHeadTailSorted, rightSortedReverseTailSortedReverseHeadTailSorted) = (leftSortedReverseTailS\n\u001b[31m\u001b[31m   |\u001b[0m                                                                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Recursive \u001b[33mvalue\u001b[0m \u001b[35m$8$\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp388b6q8c",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toArray.map(_.toString.toInt)\n        val sorted = digits.sorted\n        val sortedRev = sorted.reverse\n        if (digits == sortedRev) return -1\n        val index = digits.lastIndexWhere(x => x < digits(digits.length - 1))\n        val temp = digits(index)\n        digits(index) = digits(digits.length - 1)\n        digits(digits.length - 1) = temp\n        val result = digits.slice(0, index + 1) ++ digits.slice(index + 1, digits.length).sorted\n        result.mkString.toLong\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122870,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmps91gjdo4.scala:18:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmps91gjdo4.scala:19:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmps91gjdo4.scala:20:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.map(_.asDigit).toList\n        val sorted = digits.sorted\n        val sortedDesc = sorted.reverse\n        val index = digits.indexOf(sortedDesc.head)\n        val (left, right) = digits.splitAt(index)\n        val (leftSorted, rightSorted) = (left.sorted, right.sorted)\n        val leftSortedDesc = leftSorted.reverse\n        val rightSortedDesc = rightSorted.reverse\n        val leftSortedDescHead = leftSortedDesc.head\n        val rightSortedDescHead = rightSortedDesc.head\n        val (leftSortedDescTail, rightSortedDescTail) = (leftSortedDesc.tail, rightSortedDesc.tail)\n        val (leftSortedDescTailSorted, rightSortedDescTailSorted) = (leftSortedDescTail.sorted, rightSortedDescTail.sorted)\n        val leftSortedDescTailSortedDesc = leftSortedDescTailSorted.reverse\n        val rightSortedDescTailSortedDesc = rightSortedDescTailSorted.reverse\n        val leftSortedDescTailSortedDescHead = leftSortedDescTailSortedDesc.head\n        val rightSortedDescTailSortedDescHead = rightSortedDescTailSortedDesc.head\n        val (leftSortedDescTailSortedDescTail, rightSortedDescTailSortedDescTail) = (leftSortedDescTailSortedDesc.tail, rightSortedDescTailSortedDesc.tail)\n        val leftSortedDescTailSortedDescTailSorted = leftSortedDescTailSortedDescTail.sorted\n        val rightSortedDescTailSortedDescTailSorted = rightSortedDescTailSortedDescTail.sorted\n        val leftSortedDescTailSortedDescTailSortedDesc = leftSortedDescTailSortedDescTailSorted.reverse\n        val rightSortedDescTailSortedDescTailSortedDesc = rightSortedDescTailSortedDescTailSorted.reverse\n        val leftSortedDesc\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122869,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp0jdrwjax.scala:28:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp0jdrwjax.scala:30:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp0jdrwjax.scala:31:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp0jdrwjax.scala:32:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        def rearrangeBigger(n : Long, i : Int) : Any = {\n            if (i == n.toString.length) return -1\n            val m = n.toString.substring(0, i) + n.toString.substring(i + 1)\n            val x = n.toString.substring(i, i + 1).toInt\n            val y = m.toString.substring(0, m.toString.length - 1).toInt\n            if (x > y) return m.toString.substring(0, m.toString.length - 1) + x.toString + y.toString\n            rearrangeBigger(n, i + 1)\n        }\n        rearrangeBigger(n, 0)\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122869,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp79jnm_mc.scala:17:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp79jnm_mc.scala:18:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp79jnm_mc.scala:19:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.toString.toInt)\n        val sorted = digits.sorted\n        val sortedRev = sorted.reverse\n        if (digits == sortedRev) {\n            \"Not possible\"\n        } else {\n            val index = digits.indexOf(sortedRev.find(x => x > digits.last).get)\n            val (front, back) = digits.splitAt(index)\n            val (front1, back1) = back.splitAt(back.size - 1)\n            val result = (front ::: back1 ::: front1).mkString.toLong\n            result\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122869,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpllgd3bdz.scala:20:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpllgd3bdz.scala:21:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpllgd3bdz.scala:22:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.toString.toInt)\n        val sorted = digits.sorted.reverse\n        if (digits == sorted) return -1\n        val index = digits.indexWhere(x => x < digits(digits.indexWhere(y => y > x)))\n        val (left, right) = digits.splitAt(index)\n        val (left1, right1) = right.splitAt(right.indexWhere(x => x > left.last))\n        (left ::: (left1.last :: right1.tail) ::: (left1.init :+ right1.head)).mkString.toLong\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122869,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp83cyc8fl.scala:15:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp83cyc8fl.scala:16:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp83cyc8fl.scala:17:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.asDigit)\n        val sorted = digits.sorted\n        val max = sorted.last\n        val min = sorted.head\n        if (max == min) return -1\n        val index = digits.indexOf(max)\n        val (left, right) = digits.splitAt(index)\n        val (left1, right1) = right.splitAt(right.length - 1)\n        val left2 = left1.filter(_ != max)\n        val right2 = right1.filter(_ != max)\n        val left3 = left2 :+ min\n        val right3 = right2 :+ max\n        val result = (left ::: left3 ::: right3).mkString.toLong\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122870,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpphlv1al3.scala:22:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpphlv1al3.scala:23:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpphlv1al3.scala:24:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.asDigit)\n        val sorted = digits.sorted\n        val diff = digits.diff(sorted)\n        val diffSorted = diff.sorted\n        if (diff.length == 0) return -1\n        val diffSortedReverse = diffSorted.reverse\n        val diffSortedReverseTail = diffSortedReverse.tail\n        val diffSortedReverseHead = diffSortedReverse.head\n        val diffSortedReverseTailSorted = diffSortedReverseTail.sorted\n        val diffSortedReverseTailSortedReverse = diffSortedReverseTailSorted.reverse\n        val diffSortedReverseTailSortedReverseHead = diffSortedReverseTailSortedReverse.head\n        val diffSortedReverseTailSortedReverseTail = diffSortedReverseTailSortedReverse.tail\n        val diffSortedReverseTailSortedReverseTailSorted = diffSortedReverseTailSortedReverseTail.sorted\n        val diffSortedReverseTailSortedReverseTailSortedReverse = diffSortedReverseTailSortedReverseTailSorted.reverse\n        val diffSortedReverseTailSortedReverseTailSortedReverseHead = diffSortedReverseTailSortedReverseTailSortedReverse.head\n        val diffSortedReverseTailSortedReverseTailSortedReverseTail = diffSortedReverseTailSortedReverseTailSortedReverse.tail\n        val diffSortedReverseTailSortedReverseTailSortedReverseTailSorted = diffSortedReverseTailSortedReverseTailSortedReverseTail.sorted\n        val diffSortedReverseTailSortedReverseTailSortedReverseTailSortedReverse = diffSortedReverseTailSortedR\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122869,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpi0shoiha.scala:23:83 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mdiffSortedReverseTailSortedReverseTailSortedReverseTailSortedReverse\u001b[0m = diffSortedReverseTailSortedR\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                 Not found: diffSortedReverseTailSortedR\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpi0shoiha.scala:26:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpi0shoiha.scala:27:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpi0shoiha.scala:28:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.toString.toInt)\n        val sorted = digits.sorted\n        if (digits == sorted.reverse) return -1\n        val index = digits.lastIndexWhere(x => x < digits.last)\n        val temp = digits(index)\n        digits(index) = digits.last\n        digits(digits.length - 1) = temp\n        val sortedTail = digits.slice(index + 1, digits.length).sorted\n        val result = digits.slice(0, index + 1) ++ sortedTail\n        result.mkString.toLong\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122871,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp8j4ab89p.scala:11:8 -------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        digits(index) = digits.last\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Int] - did you mean digits.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp8j4ab89p.scala:12:8 -------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        digits(digits.length - \u001b[31m1\u001b[0m) = temp\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Int] - did you mean digits.updated?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8j4ab89p.scala:18:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8j4ab89p.scala:19:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8j4ab89p.scala:20:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.map(_.asDigit).toList\n        val sortedDigits = digits.sorted\n        val maxDigit = sortedDigits.last\n        val maxDigitIndex = digits.indexOf(maxDigit)\n        val maxDigitIndexSorted = sortedDigits.indexOf(maxDigit)\n        val maxDigitIndexSortedPlusOne = maxDigitIndexSorted + 1\n        val maxDigitIndexSortedPlusOneDigit = sortedDigits(maxDigitIndexSortedPlusOne)\n        val maxDigitIndexSortedPlusOneDigitIndex = digits.indexOf(maxDigitIndexSortedPlusOneDigit)\n        val (left, right) = digits.splitAt(maxDigitIndexSortedPlusOneDigitIndex)\n        val newDigits = left ::: List(maxDigit) ::: right.filter(_ != maxDigit)\n        val newDigitsSorted = newDigits.sorted\n        val newDigitsSortedTail = newDigitsSorted.tail\n        val newDigitsSortedTailReverse = newDigitsSortedTail.reverse\n        val newDigitsSortedTailReverseString = newDigitsSortedTailReverse.map(_.toString).reduce(_ + _)\n        val newDigitsSortedTailReverseLong = newDigitsSortedTailReverseString.toLong\n        val newDigitsSortedHead = newDigitsSorted.head\n        val newDigitsSortedHeadString = newDigitsSortedHead.toString\n        val newDigitsSortedHeadLong = newDigitsSortedHeadString.toLong\n        val newDigitsSortedHeadLongMultiplied = newDigitsSortedHeadLong * pow(10, newDigitsSortedTailReverseString.length).toLong\n        val newDigitsSortedHeadLongMultipliedPlusNewDigitsSortedTailReverseLong = newDigitsSortedHeadLongMultiplied + newDigitsSortedTailReverseLong\n        newDigitsSortedHeadLongMultipliedPlusNewDigitsSortedTailReverseLong\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122870,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpynyu08iu.scala:29:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpynyu08iu.scala:30:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpynyu08iu.scala:31:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.asDigit)\n        val sorted = digits.sorted\n        val sortedRev = sorted.reverse\n        val sortedRevStr = sortedRev.mkString\n        val nStr = n.toString\n        if (nStr == sortedRevStr) return -1\n        val nStrRev = nStr.reverse\n        val nStrRevSorted = nStrRev.sorted\n        val nStrRevSortedStr = nStrRevSorted.mkString\n        val nStrRevSortedStrRev = nStrRevSortedStr.reverse\n        val nStrRevSortedStrRevInt = nStrRevSortedStrRev.toInt\n        val nStrRevSortedStrRevIntStr = nStrRevSortedStrRevInt.toString\n        val nStrRevSortedStrRevIntStrRev = nStrRevSortedStrRevIntStr.reverse\n        val nStrRevSortedStrRevIntStrRevInt = nStrRevSortedStrRevIntStrRev.toInt\n        val nStrRevSortedStrRevIntStrRevIntStr = nStrRevSortedStrRevIntStrRevInt.toString\n        val nStrRevSortedStrRevIntStrRevIntStrRev = nStrRevSortedStrRevIntStrRevIntStr.reverse\n        val nStrRevSortedStrRevIntStrRevIntStrRevInt = nStrRevSortedStrRevIntStrRevIntStrRev.toInt\n        val nStrRevSortedStrRevIntStrRevIntStrRevIntStr = nStrRevSortedStrRevIntStrRevIntStrRevInt.toString\n        val nStrRevSortedStrRevIntStrRevIntStrRevIntStrRev = nStrRevSortedStrRevIntStrRevIntStrRevIntStr.reverse\n        val nStrRevSortedStrRevIntStrRevIntStrRevIntStrRevInt = nStrRevSortedStrRevIntStrRevIntStrRevIntStrRev.toInt\n        val nStrRevSortedStrRevIntStrRevIntStrRevIntStrRevIntStr = nStrRevSortedStrRevIntStrRevIntStrRevIntStrRevInt.toString\n        val nStrRevSortedStrRevIntStrRevIntStrRevIntStrRevIntStrRev = nStrRev\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122870,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpca6erbpj.scala:30:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpca6erbpj.scala:31:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpca6erbpj.scala:32:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.asDigit)\n        val sorted = digits.sorted\n        val max = sorted.last\n        val min = sorted.head\n        if (max == min) return -1\n        val index = digits.indexOf(max)\n        val newDigits = digits.updated(index, min)\n        val newDigits2 = newDigits.updated(0, max)\n        newDigits2.mkString.toLong\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122870,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpy_s3ofvs.scala:17:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpy_s3ofvs.scala:18:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpy_s3ofvs.scala:19:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.asDigit)\n        val sorted = digits.sorted\n        val reversed = sorted.reverse\n        val index = digits.indexOfSlice(reversed)\n        if (index == -1) -1\n        else {\n            val (left, right) = digits.splitAt(index)\n            val (left1, right1) = right.splitAt(right.length - 1)\n            val (left2, right2) = left1.splitAt(left1.length - 1)\n            val (left3, right3) = right2.splitAt(right2.length - 1)\n            val left4 = left2 ::: right3\n            val right4 = left3 ::: right2\n            val left5 = left4.sorted\n            val right5 = right4.sorted\n            val result = left5 ::: right5\n            result.mkString.toLong\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122870,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyiy7abnk.scala:25:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyiy7abnk.scala:26:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyiy7abnk.scala:27:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.map(_.asDigit).toList\n        val sorted = digits.sorted\n        val sortedReverse = sorted.reverse\n        val sortedReverseIndex = sortedReverse.zipWithIndex.toMap\n        val sortedIndex = sorted.zipWithIndex.toMap\n        val sortedReverseIndexReverse = sortedReverseIndex.map(_.swap)\n        val sortedIndexReverse = sortedIndex.map(_.swap)\n        def rearrange(n : Long) : Long = {\n            val digits = n.toString.map(_.asDigit).toList\n            val sorted = digits.sorted\n            val sortedReverse = sorted.reverse\n            val sortedReverseIndex = sortedReverse.zipWithIndex.toMap\n            val sortedIndex = sorted.zipWithIndex.toMap\n            val sortedReverseIndexReverse = sortedReverseIndex.map(_.swap)\n            val sortedIndexReverse = sortedIndex.map(_.swap)\n            val digitsReverse = digits.reverse\n            val digitsReverseIndex = digitsReverse.zipWithIndex.toMap\n            val digitsReverseIndexReverse = digitsReverseIndex.map(_.swap)\n            val digitsIndex = digits.zipWithIndex.toMap\n            val digitsIndexReverse = digitsIndex.map(_.swap)\n            val digitsReverseSorted = digitsReverse.sorted\n            val digitsReverseSortedReverse = digitsReverseSorted.reverse\n            val digitsReverseSortedReverseIndex = digitsReverseSortedReverse.zipWithIndex.toMap\n            val digitsReverseSortedIndex = digitsReverseSorted.zipWithIndex.toMap\n            val digitsReverseSortedReverseIndexReverse = digitsReverseSortedReverseIndex.map(_.swap)\n            val digitsReverseSortedIndexReverse = digitsReverseSortedIndex.map(_.swap)\n            val digitsSorted = digits.sorted\n            val digitsSortedReverse = digitsSorted.reverse\n\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122873,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpmgfnmqkw.scala:43:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmgfnmqkw.scala:35:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmgfnmqkw.scala:37:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmgfnmqkw.scala:38:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmgfnmqkw.scala:39:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmpmgfnmqkw.scala:36:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m36 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.toString.toInt)\n        val sorted = digits.sorted\n        val reversed = sorted.reverse\n        val index = digits.indexOf(reversed.head)\n        val (left, right) = digits.splitAt(index)\n        val newRight = reversed.tail ::: left\n        val newNumber = newRight.mkString.toLong\n        if (newNumber > n) newNumber else -1\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122871,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9p9q4_ds.scala:16:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9p9q4_ds.scala:17:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9p9q4_ds.scala:18:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.asDigit)\n        val sorted = digits.sorted\n        val sortedReverse = sorted.reverse\n        if (digits == sortedReverse) return -1\n        val index = digits.lastIndexWhere(_ < digits.last)\n        val digit = digits(index)\n        val index2 = sortedReverse.indexWhere(_ > digit)\n        val digit2 = sortedReverse(index2)\n        val newDigits = digits.updated(index, digit2).updated(index2, digit)\n        val newDigits2 = newDigits.slice(0, index + 1) ++ newDigits.slice(index + 1, newDigits.length).sorted\n        newDigits2.mkString.toLong\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122872,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfhzm049y.scala:19:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfhzm049y.scala:20:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfhzm049y.scala:21:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.toString.toInt)\n        val sorted = digits.sorted\n        val sortedReverse = sorted.reverse\n        val sortedReverseString = sortedReverse.mkString\n        val nString = n.toString\n        if (nString == sortedReverseString) return -1\n        val nStringList = nString.toList.map(_.toString.toInt)\n        val nStringListReverse = nStringList.reverse\n        val nStringListReverseSorted = nStringListReverse.sorted\n        val nStringListReverseSortedReverse = nStringListReverseSorted.reverse\n        val nStringListReverseSortedReverseString = nStringListReverseSortedReverse.mkString\n        val nStringListReverseSortedReverseStringList = nStringListReverseSortedReverseString.toList.map(_.toString.toInt)\n        val nStringListReverseSortedReverseStringListReverse = nStringListReverseSortedReverseStringList.reverse\n        val nStringListReverseSortedReverseStringListReverseString = nStringListReverseSortedReverseStringListReverse.mkString\n        nStringListReverseSortedReverseStringListReverseString.toLong\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122872,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqawm7cby.scala:23:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqawm7cby.scala:24:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqawm7cby.scala:25:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.asDigit)\n        val sorted = digits.sorted\n        val sortedReversed = sorted.reverse\n        val index = digits.indexOfSlice(sortedReversed)\n        if (index == -1) \"Not possible\"\n        else {\n            val (left, right) = digits.splitAt(index)\n            val (leftSorted, rightSorted) = (left.sorted, right.sorted)\n            val (leftSortedReversed, rightSortedReversed) = (leftSorted.reverse, rightSorted.reverse)\n            val (leftSortedReversedTail, rightSortedReversedTail) = (leftSortedReversed.tail, rightSortedReversed.tail)\n            val (leftSortedReversedTailSorted, rightSortedReversedTailSorted) = (leftSortedReversedTail.sorted, rightSortedReversedTail.sorted)\n            val (leftSortedReversedTailSortedReversed, rightSortedReversedTailSortedReversed) = (leftSortedReversedTailSorted.reverse, rightSortedReversedTailSorted.reverse)\n            val result = (leftSortedReversedTailSortedReversed :+ leftSortedReversed.head) ++ rightSortedReversedTailSortedReversed\n            result.mkString.toLong\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122873,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpykqh4acb.scala:23:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpykqh4acb.scala:24:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpykqh4acb.scala:25:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.toString.toInt)\n        val (left, right) = digits.splitAt(digits.length - 1)\n        val rightSorted = right.sorted\n        val rightSortedIndex = right.indexOf(rightSorted.head)\n        val rightSortedTail = rightSorted.tail\n        val rightSortedTailIndex = rightSortedTail.indexOf(rightSorted.head)\n        val rightSortedTailSorted = rightSortedTail.sorted\n        val rightSortedTailSortedIndex = rightSortedTail.indexOf(rightSortedTailSorted.head)\n        val rightSortedTailSortedTail = rightSortedTailSorted.tail\n        val rightSortedTailSortedTailIndex = rightSortedTailSorted.indexOf(rightSortedTailSortedTail.head)\n        val rightSortedTailSortedTailSorted = rightSortedTailSortedTail.sorted\n        val rightSortedTailSortedTailSortedIndex = rightSortedTailSortedTail.indexOf(rightSortedTailSortedTailSorted.head)\n        val rightSortedTailSortedTailSortedTail = rightSortedTailSortedTailSorted.tail\n        val rightSortedTailSortedTailSortedTailIndex = rightSortedTailSortedTailSorted.indexOf(rightSortedTailSortedTailSortedTail.head)\n        val rightSortedTailSortedTailSortedTailSorted = rightSortedTailSortedTailSortedTail.sorted\n        val rightSortedTailSortedTailSortedTailSortedIndex = rightSortedTailSortedTailSortedTail.indexOf(rightSortedTailSortedTailSortedTailSorted.head)\n        val rightSortedTailSortedTailSortedTailSortedTail = rightSortedTailSortedTailSortedTailSorted.tail\n        val rightSortedTailSortedTailSorted\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122873,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpmzh6bp24.scala:24:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmzh6bp24.scala:26:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmzh6bp24.scala:27:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmzh6bp24.scala:28:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.asDigit)\n        val sorted = digits.sorted\n        val sortedReverse = sorted.reverse\n        val index = digits.lastIndexWhere(_ < digits.last)\n        if (index == -1) return -1\n        val (left, right) = digits.splitAt(index)\n        val (leftSorted, rightSorted) = sortedReverse.partition(_ < digits(index))\n        val newRight = rightSorted.head :: right.tail\n        val newLeft = left ::: leftSorted.sorted\n        val newDigits = newLeft ::: newRight\n        newDigits.mkString.toLong\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122876,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpux15ztjf.scala:19:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpux15ztjf.scala:20:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpux15ztjf.scala:21:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.toString.toInt)\n        val sorted = digits.sorted\n        val sortedReverse = sorted.reverse\n        val index = digits.indexOfSlice(sorted)\n        val indexReverse = digits.indexOfSlice(sortedReverse)\n        if (index == 0) {\n            if (indexReverse == 0) {\n                -1\n            } else {\n                val (left, right) = digits.splitAt(indexReverse)\n                val (leftReverse, rightReverse) = left.reverse.splitAt(1)\n                val newLeft = leftReverse.head :: rightReverse\n                val newRight = left.head :: right\n                (newLeft.mkString.toLong + newRight.mkString.toLong).toString\n            }\n        } else {\n            val (left, right) = digits.splitAt(index)\n            val (leftReverse, rightReverse) = left.reverse.splitAt(1)\n            val newLeft = leftReverse.head :: rightReverse\n            val newRight = left.head :: right\n            (newLeft.mkString.toLong + newRight.mkString.toLong).toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122876,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpnduj2dc6.scala:30:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpnduj2dc6.scala:31:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpnduj2dc6.scala:32:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.asDigit)\n        val sorted = digits.sorted\n        val sortedReverse = sorted.reverse\n        val index = digits.indexOfSlice(sortedReverse)\n        if (index == -1) return -1\n        val (left, right) = digits.splitAt(index)\n        val (leftReverse, rightReverse) = left.reverse.splitAt(left.length - 1)\n        val (leftReverseHead, leftReverseTail) = leftReverse.splitAt(1)\n        val (rightReverseHead, rightReverseTail) = rightReverse.splitAt(1)\n        val newLeft = leftReverseHead ::: rightReverseHead ::: leftReverseTail\n        val newRight = rightReverseTail ::: right\n        val newDigits = newLeft ::: newRight\n        newDigits.mkString.toLong\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122877,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpow12c1_w.scala:21:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpow12c1_w.scala:22:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpow12c1_w.scala:23:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.asDigit)\n        val sorted = digits.sorted\n        val sortedReverse = sorted.reverse\n        val index = digits.indexOfSlice(sortedReverse)\n        if (index == -1) -1\n        else {\n            val (left, right) = digits.splitAt(index)\n            val (leftReverse, rightReverse) = left.reverse.splitAt(1)\n            val (leftReverseSorted, rightReverseSorted) = (leftReverse.sorted, rightReverse.sorted)\n            val (leftSorted, rightSorted) = (leftReverseSorted.reverse, rightReverseSorted.reverse)\n            val (leftSortedString, rightSortedString) = (leftSorted.mkString, rightSorted.mkString)\n            val result = leftSortedString + rightSortedString\n            result.toLong\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122877,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfs9_1gzf.scala:22:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfs9_1gzf.scala:23:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfs9_1gzf.scala:24:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.toString.toInt)\n        val sorted = digits.sorted\n        val sortedReverse = sorted.reverse\n        if (digits == sortedReverse) {\n            -1\n        } else {\n            val index = digits.indexWhere(x => digits.indexOf(x) != sorted.indexOf(x))\n            val index2 = sorted.indexWhere(x => x > digits(index))\n            val newDigits = digits.updated(index, sorted(index2)).updated(index2, digits(index))\n            newDigits.mkString.toLong\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122877,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuv714ho7.scala:19:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuv714ho7.scala:20:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuv714ho7.scala:21:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.asDigit)\n        val sorted = digits.sorted\n        val sortedRev = sorted.reverse\n        val index = digits.indexOfSlice(sortedRev)\n        if (index == -1) -1\n        else {\n            val (left, right) = digits.splitAt(index)\n            val (leftRev, rightRev) = (left.reverse, right.reverse)\n            val (leftRevSorted, rightRevSorted) = (leftRev.sorted, rightRev.sorted)\n            val (leftRevSortedRev, rightRevSortedRev) = (leftRevSorted.reverse, rightRevSorted.reverse)\n            val (leftRevSortedRevTail, rightRevSortedRevHead) = (leftRevSortedRev.tail, rightRevSortedRev.head)\n            val (leftRevSortedRevTailSorted, rightRevSortedRevHeadSorted) = (leftRevSortedRevTail.sorted, rightRevSortedRevHead.sorted)\n            val (leftRevSortedRevTailSortedRev, rightRevSortedRevHeadSortedRev) = (leftRevSortedRevTailSorted.reverse, rightRevSortedRevHeadSorted.reverse)\n            val (leftRevSortedRevTailSortedRevTail, rightRevSortedRevHeadSortedRevTail) = (leftRevSortedRevTailSortedRev.tail, rightRevSortedRevHeadSortedRev.tail)\n            val (leftRevSortedRevTailSortedRevTailSorted, rightRevSortedRevHeadSortedRevTailSorted) = (leftRevSortedRevTailSortedRevTail.sorted, rightRevSortedRevHeadSortedRevTail.sorted)\n            val (leftRevSortedRevTailSortedRevTailSortedRev, rightRevSortedRevHeadSortedRevTailSortedRev) = (leftRevSortedRevTailSortedRevTailSorted.reverse, rightRevSortedRevHeadSortedRevTailSorted.reverse)\n            val result = (leftRevSortedRevTailSortedRevTailSortedRev :\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122881,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp3yviunsq.scala:23:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp3yviunsq.scala:31:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp3yviunsq.scala:17:128 -----------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            \u001b[33mval\u001b[0m (leftRevSortedRevTailSorted, rightRevSortedRevHeadSorted) = (leftRevSortedRevTail.sorted, rightRevSortedRevHead.sorted)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     value sorted is not a member of Int\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp3yviunsq.scala:18:147 -----------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            \u001b[33mval\u001b[0m (leftRevSortedRevTailSortedRev, rightRevSortedRevHeadSortedRev) = (leftRevSortedRevTailSorted.reverse, rightRevSortedRevHeadSorted.reverse)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue reverse is not a member of Nothing, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Ordering.Implicits.seqOrdering\n\u001b[31m   |\u001b[0m  import math.Ordering.Implicits.sortedSetOrdering\n\u001b[31m   |\u001b[0m  import math.Ordering.Iterable\n\u001b[31m   |\u001b[0m  import math.Ordering.Option\n\u001b[31m   |\u001b[0m  import math.Ordering.comparatorToOrdering\n\u001b[31m   |\u001b[0m  import math.Ordering.ordered\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.list asScalaBuffer\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToScala.list asScalaBuffer\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.asDigit)\n        val sortedDigits = digits.sorted\n        val sortedDigitsReversed = sortedDigits.reverse\n        val index = digits.indexOf(sortedDigitsReversed.head)\n        if (index == 0) {\n            val nextDigit = sortedDigitsReversed.tail.head\n            val nextDigitIndex = digits.indexOf(nextDigit)\n            val newDigits = digits.updated(nextDigitIndex, sortedDigitsReversed.head).updated(0, nextDigit)\n            newDigits.mkString.toLong\n        } else {\n            val newDigits = digits.updated(index, digits.head).updated(0, sortedDigitsReversed.head)\n            newDigits.mkString.toLong\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122877,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplwpw87g_.scala:21:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplwpw87g_.scala:22:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplwpw87g_.scala:23:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val s = n.toString\n        val l = s.length\n        val a = s.toArray\n        for (i <- l - 2 to 0 by -1) {\n            if (a(i) < a(i + 1)) {\n                val min = (i + 1 until l).minBy(x => a(x))\n                val t = a(i)\n                a(i) = a(min)\n                a(min) = t\n                val b = a.slice(i + 1, l).sorted\n                return (a.slice(0, i + 1) ++ b).mkString.toLong\n            }\n        }\n        -1\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122877,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp59u8ydeu.scala:22:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp59u8ydeu.scala:23:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp59u8ydeu.scala:24:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.asDigit)\n        val sorted = digits.sorted\n        val index = digits.indexOf(sorted.last)\n        val (left, right) = digits.splitAt(index)\n        val newRight = sorted.filter(x => !right.contains(x))\n        val newLeft = left.filter(x => !right.contains(x))\n        val newDigits = newLeft ::: newRight\n        if (newDigits.head == 0) None else Some(newDigits.mkString.toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122877,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp201g03en.scala:16:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp201g03en.scala:17:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp201g03en.scala:18:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(x => x.asDigit)\n        val sortedDigits = digits.sorted\n        val maxDigits = sortedDigits.reverse\n        val max = maxDigits.mkString.toLong\n        if (n == max) -1\n        else {\n            val index = digits.indexOf(maxDigits.head)\n            val (left, right) = digits.splitAt(index)\n            val newDigits = left ::: maxDigits.tail ::: maxDigits.head :: right.tail\n            newDigits.mkString.toLong\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122877,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpre1x358_.scala:19:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpre1x358_.scala:20:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpre1x358_.scala:21:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(x => x.asDigit)\n        val sorted = digits.sorted\n        val sortedReverse = sorted.reverse\n        val sortedReverseIndex = sortedReverse.zipWithIndex.toMap\n        val sortedIndex = sorted.zipWithIndex.toMap\n        val digitsIndex = digits.zipWithIndex.toMap\n        val digitsReverseIndex = digits.reverse.zipWithIndex.toMap\n        val sortedReverseIndex2 = sortedReverse.zipWithIndex.toMap\n        val sortedIndex2 = sorted.zipWithIndex.toMap\n        val digitsIndex2 = digits.zipWithIndex.toMap\n        val digitsReverseIndex2 = digits.reverse.zipWithIndex.toMap\n        var result = -1\n        for (i <- 0 until digits.length) {\n            if (digits(i) != sorted(i)) {\n                val index = digitsIndex(sorted(i))\n                val temp = digits(i)\n                digits(i) = digits(index)\n                digits(index) = temp\n                result = digits.mkString.toLong\n                break\n            }\n        }\n        if (result == -1) {\n            for (i <- 0 until digits.length) {\n                if (digits(i) != sortedReverse(i)) {\n                    val index = digitsIndex(sortedReverse(i))\n                    val temp = digits(i)\n                    digits(i) = digits(index)\n                    digits(index) = temp\n                    result = digits.mkString.toLong\n                    break\n                }\n            }\n        }\n        if (result == -1) {\n            for (i <- 0 until digits.length) {\n                if (digits(i) != sorted(i)) {\n                    val index = digitsReverseIndex(sorted(i))\n                    val temp = digits(i)\n                    digits(i) = digits(index)\n                    digits(index) = temp\n                    result = digits.mkString.toLong\n                    break\n                }\n            }\n        }\n        if (result == -1) {\n            for (i <- 0 until digits.length)\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122882,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmp92_dcgmv.scala:53:44 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m53 |\u001b[0m            \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until digits.length)\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp92_dcgmv.scala:62:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp92_dcgmv.scala:22:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m                digits(i) = digits(index)\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Int] - did you mean digits.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp92_dcgmv.scala:23:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m                digits(index) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Int] - did you mean digits.updated?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp92_dcgmv.scala:24:41 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m                result = digits.mkString.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Found:    Long\n\u001b[31m   |\u001b[0m                         Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp92_dcgmv.scala:25:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m                break\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp92_dcgmv.scala:33:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m                    digits(i) = ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.map(_.asDigit).toList\n        val sortedDigits = digits.sorted\n        val sortedDigitsReversed = sortedDigits.reverse\n        val sortedDigitsReversedSet = sortedDigitsReversed.toSet\n        val digitsSet = digits.toSet\n        if (sortedDigitsReversedSet == digitsSet) {\n            -1\n        } else {\n            val index = digits.indexOf(sortedDigitsReversed.find(x => digitsSet.contains(x) && x > digits.head).get)\n            val (left, right) = digits.splitAt(index)\n            val result = left.reverse.tail.reverse ::: digits.head :: right.tail.sorted\n            result.mkString.toLong\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122877,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdav_1xfo.scala:21:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdav_1xfo.scala:22:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdav_1xfo.scala:23:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.asDigit)\n        val sortedDigits = digits.sorted\n        val sortedDigitsReversed = sortedDigits.reverse\n        val sortedDigitsReversedStr = sortedDigitsReversed.mkString\n        val sortedDigitsReversedLong = sortedDigitsReversedStr.toLong\n        if (n == sortedDigitsReversedLong) -1\n        else sortedDigitsReversedLong\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122877,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpahapk7ma.scala:15:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpahapk7ma.scala:16:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpahapk7ma.scala:17:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.asDigit)\n        val sorted = digits.sorted\n        val sortedR = sorted.reverse\n        val index = digits.indexOf(sortedR.head)\n        val (left, right) = digits.splitAt(index)\n        val newRight = sortedR.tail :+ sortedR.head\n        val newDigits = left ++ newRight\n        val newNum = newDigits.mkString.toLong\n        if (newNum == n) -1 else newNum\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122877,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp0__1r_yd.scala:17:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp0__1r_yd.scala:18:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp0__1r_yd.scala:19:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.toString.toInt)\n        val sorted = digits.sorted\n        if (digits == sorted.reverse) None\n        else {\n            val (left, right) = digits.splitAt(digits.length - 1)\n            val min = right.min\n            val minIndex = right.indexOf(min)\n            val max = left.max\n            val maxIndex = left.indexOf(max)\n            val newRight = right.patch(minIndex, List(max), 1).sorted\n            val newLeft = left.patch(maxIndex, List(min), 1)\n            (newLeft ::: newRight).mkString.toLong\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpebf721ve.scala:21:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpebf721ve.scala:22:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpebf721ve.scala:23:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.toString.toInt)\n        val sorted = digits.sorted\n        val sortedReverse = sorted.reverse\n        val index = digits.indexOfSlice(sorted)\n        if (index == -1) {\n            -1\n        } else {\n            val (left, right) = digits.splitAt(index)\n            val (leftSorted, rightSorted) = sorted.splitAt(index)\n            val (leftSortedReverse, rightSortedReverse) = sortedReverse.splitAt(index)\n            val (leftReverse, rightReverse) = digits.splitAt(index)\n            val (leftReverseSorted, rightReverseSorted) = sorted.splitAt(index)\n            val (leftReverseSortedReverse, rightReverseSortedReverse) = sortedReverse.splitAt(index)\n            val leftSortedReverseSet = leftSortedReverse.toSet\n            val rightSortedReverseSet = rightSortedReverse.toSet\n            val leftReverseSortedReverseSet = leftReverseSortedReverse.toSet\n            val rightReverseSortedReverseSet = rightReverseSortedReverse.toSet\n            val leftSortedSet = leftSorted.toSet\n            val rightSortedSet = rightSorted.toSet\n            val leftReverseSortedSet = leftReverseSorted.toSet\n            val rightReverseSortedSet = rightReverseSorted.toSet\n            val leftSet = left.toSet\n            val rightSet = right.toSet\n            val leftReverseSet = leftReverse.toSet\n            val rightReverseSet = rightReverse.toSet\n            val leftSortedReverseSetDiff = leftSortedReverseSet -- leftSet\n            val rightSortedReverseSetDiff = rightSortedReverseSet -- rightSet\n            val leftReverseSortedReverseSetDiff = leftReverseSortedReverseSet -- leftReverseSet\n\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp3owof18y.scala:43:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3owof18y.scala:37:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3owof18y.scala:38:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3owof18y.scala:39:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmp3owof18y.scala:36:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m36 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.toString.toInt)\n        val sortedDigits = digits.sorted\n        val sortedDigitsReversed = sortedDigits.reverse\n        val sortedDigitsReversedSet = sortedDigitsReversed.toSet\n        val sortedDigitsReversedSetSorted = sortedDigitsReversedSet.toList.sorted\n        val sortedDigitsReversedSetSortedReversed = sortedDigitsReversedSetSorted.reverse\n        val sortedDigitsReversedSetSortedReversedMap = sortedDigitsReversedSetSortedReversed.zipWithIndex.toMap\n        val sortedDigitsReversedMap = sortedDigitsReversed.zipWithIndex.toMap\n        val sortedDigitsReversedMapSorted = sortedDigitsReversedMap.toList.sortBy(_._2)\n        val sortedDigitsReversedMapSortedReversed = sortedDigitsReversedMapSorted.reverse\n        val sortedDigitsReversedMapSortedReversedMap = sortedDigitsReversedMapSortedReversed.toMap\n        val sortedDigitsReversedMapSortedReversedMapSorted = sortedDigitsReversedMapSortedReversedMap.toList.sortBy(_._2)\n        val sortedDigitsReversedMapSortedReversedMapSortedReversed = sortedDigitsReversedMapSortedReversedMapSorted.reverse\n        val sortedDigitsReversedMapSortedReversedMapSortedReversedMap = sortedDigitsReversedMapSortedReversedMapSortedReversed.toMap\n        val sortedDigitsReversedMapSortedReversedMapSortedReversedMapSorted = sortedDigitsReversedMapSortedReversedMapSortedReversedMap.toList.sortBy(_._2)\n        val sortedDigitsReversedMapSortedReversedMapSortedReversedMapSortedReversed = sortedDigitsReversedMapSortedReversedMapSortedReversedMapSorted.reverse\n        val sortedDigitsReversedMapSorted\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122879,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpi4kgm_9j.scala:23:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpi4kgm_9j.scala:25:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpi4kgm_9j.scala:26:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpi4kgm_9j.scala:27:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.asDigit)\n        val sorted = digits.sorted\n        val index = digits.indexOf(sorted.last)\n        val (left, right) = digits.splitAt(index)\n        val (left2, right2) = right.splitAt(right.length - 1)\n        val result = (left ::: right2 ::: left2).mkString.toLong\n        if (result > n) result else -1\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8cf_ihdp.scala:15:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8cf_ihdp.scala:16:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8cf_ihdp.scala:17:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.map(_.toString.toInt).toList\n        val (left, right) = digits.splitAt(digits.length - 1)\n        val rightSorted = right.sorted\n        val rightSortedReverse = rightSorted.reverse\n        val rightSortedReverseHead = rightSortedReverse.head\n        val rightSortedReverseTail = rightSortedReverse.tail\n        val rightSortedReverseTailSorted = rightSortedReverseTail.sorted\n        val rightSortedReverseTailSortedReverse = rightSortedReverseTailSorted.reverse\n        val rightSortedReverseTailSortedReverseHead = rightSortedReverseTailSortedReverse.head\n        val rightSortedReverseTailSortedReverseTail = rightSortedReverseTailSortedReverse.tail\n        val rightSortedReverseTailSortedReverseTailSorted = rightSortedReverseTailSortedReverseTail.sorted\n        val rightSortedReverseTailSortedReverseTailSortedReverse = rightSortedReverseTailSortedReverseTailSorted.reverse\n        val rightSortedReverseTailSortedReverseTailSortedReverseHead = rightSortedReverseTailSortedReverseTailSortedReverse.head\n        val rightSortedReverseTailSortedReverseTailSortedReverseTail = rightSortedReverseTailSortedReverseTailSortedReverse.tail\n        val rightSortedReverseTailSortedReverseTailSortedReverseTailSorted = rightSortedReverseTailSortedReverseTailSortedReverseTail.sorted\n        val rightSortedReverseTailSortedReverseTailSortedReverseTailSortedReverse = rightSortedReverseTailSortedReverseTailSortedReverseTailS\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122880,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5n6cqr7f.scala:21:84 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mrightSortedReverseTailSortedReverseTailSortedReverseTailSortedReverse\u001b[0m = rightSortedReverseTailSortedReverseTailSortedReverseTailS\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m    Not found: rightSortedReverseTailSortedReverseTailSortedReverseTailS\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5n6cqr7f.scala:24:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5n6cqr7f.scala:25:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5n6cqr7f.scala:26:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.map(_.asDigit).toList\n        val sortedDigits = digits.sorted\n        val sortedDigitsReversed = sortedDigits.reverse\n        val index = digits.indexOfSlice(sortedDigitsReversed)\n        if (index == -1) -1\n        else {\n            val (left, right) = digits.splitAt(index)\n            val (leftSorted, rightSorted) = (left.sorted, right.sorted)\n            val (leftSortedReversed, rightSortedReversed) = (leftSorted.reverse, rightSorted.reverse)\n            val (leftSortedReversedTail, rightSortedReversedTail) = (leftSortedReversed.tail, rightSortedReversed.tail)\n            val (leftSortedReversedHead, rightSortedReversedHead) = (leftSortedReversed.head, rightSortedReversed.head)\n            val (leftSortedReversedHeadNext, rightSortedReversedHeadNext) = (leftSortedReversedHead + 1, rightSortedReversedHead - 1)\n            val (leftSortedReversedHeadNextSorted, rightSortedReversedHeadNextSorted) = (leftSortedReversedHeadNext.toString.map(_.asDigit).toList.sorted, rightSortedReversedHeadNext.toString.map(_.asDigit).toList.sorted)\n            val (leftSortedReversedHeadNextSortedReversed, rightSortedReversedHeadNextSortedReversed) = (leftSortedReversedHeadNextSorted.reverse, rightSortedReversedHeadNextSorted.reverse)\n            val (leftSortedReversedHeadNextSortedReversedTail, rightSortedReversedHeadNextSortedReversedTail) = (leftSortedReversedHeadNextSortedReversed.tail, rightSortedReversedHeadNextSortedReversed.tail)\n            val (leftSortedReversedHeadNextSortedReversedHead, rightSortedReversedHead\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122879,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpap4iak99.scala:22:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpap4iak99.scala:30:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpap4iak99.scala:21:63 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            \u001b[33mval\u001b[0m (leftSortedReversedHeadNextSortedReversedHead, rightSortedReversedHead\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mrightSortedReversedHead is already defined as \u001b[33mvalue\u001b[0m \u001b[35mrightSortedReversedHead\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpap4iak99.scala:24:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpap4iak99.scala:25:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpap4iak99.scala:26:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           N",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.asDigit)\n        val sorted = digits.sorted\n        val max = sorted.last\n        val min = sorted.head\n        val maxIndex = digits.indexOf(max)\n        val minIndex = digits.indexOf(min)\n        val newDigits = digits.updated(maxIndex, min).updated(minIndex, max)\n        val newNumber = newDigits.mkString.toLong\n        if (newNumber > n) newNumber else -1\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122881,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmppwswbwqn.scala:17:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmppwswbwqn.scala:18:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmppwswbwqn.scala:19:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.map(_.toString.toInt).toList\n        val sorted = digits.sorted.reverse\n        if (digits == sorted) {\n            \"Not Possible\"\n        } else {\n            val index = digits.indexOf(sorted.head)\n            val (left, right) = digits.splitAt(index)\n            val newDigits = left ::: sorted.tail ::: List(sorted.head)\n            newDigits.mkString.toLong\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122882,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp_cvmnkx.scala:18:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp_cvmnkx.scala:19:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp_cvmnkx.scala:20:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.map(_.asDigit).toList\n        val sortedDigits = digits.sorted\n        val sortedDigitsRev = sortedDigits.reverse\n        val digitsRev = digits.reverse\n        val sortedDigitsRevTail = sortedDigitsRev.tail\n        val sortedDigitsRevTailRev = sortedDigitsRevTail.reverse\n        val sortedDigitsRevHead = sortedDigitsRev.head\n        val sortedDigitsRevHeadIndex = digitsRev.indexOf(sortedDigitsRevHead)\n        val digitsRevTail = digitsRev.take(sortedDigitsRevHeadIndex)\n        val digitsRevHead = digitsRev.drop(sortedDigitsRevHeadIndex)\n        val digitsRevHeadTail = digitsRevHead.tail\n        val digitsRevHeadHead = digitsRevHead.head\n        val digitsRevHeadHeadIndex = sortedDigitsRevTailRev.indexOf(digitsRevHeadHead)\n        val sortedDigitsRevTailRevTail = sortedDigitsRevTailRev.take(digitsRevHeadHeadIndex)\n        val sortedDigitsRevTailRevHead = sortedDigitsRevTailRev.drop(digitsRevHeadHeadIndex)\n        val sortedDigitsRevTailRevHeadHead = sortedDigitsRevTailRevHead.head\n        val sortedDigitsRevTailRevHeadTail = sortedDigitsRevTailRevHead.tail\n        val sortedDigitsRevTailRevHeadTailRev = sortedDigitsRevTailRevHeadTail.reverse\n        val sortedDigitsRevTailRevHeadHeadIndex = digitsRevHeadTail.indexOf(sortedDigitsRevTailRevHeadHead)\n        val digitsRevHeadTailTail = digitsRevHeadTail.take(sortedDigitsRevTailRevHeadHeadIndex)\n        val digitsRevHeadTailHead = digitsRevHeadTail.drop(sortedDigitsRevTailRevHeadHeadIndex)\n        val digitsRevHeadTailHeadHead = digitsRevHeadTailHead.head\n        val digitsRevHeadTailHeadTail = digitsRevHeadTailHead.tail\n        val digitsRevHeadTailHeadTailRev = digitsRevHeadTailHeadTail.reverse\n        val\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122881,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpz0d95ne4.scala:30:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpz0d95ne4.scala:33:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpz0d95ne4.scala:34:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpz0d95ne4.scala:35:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.toString.toInt)\n        val sorted = digits.sorted\n        val sortedReverse = sorted.reverse\n        if (digits == sortedReverse) return -1\n        val index = digits.indexOf(sortedReverse.find(x => x > digits(0)).get)\n        val first = sortedReverse(index)\n        val rest = sortedReverse.take(index) ++ sortedReverse.drop(index + 1)\n        val result = first.toString + rest.mkString\n        result.toLong\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122884,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpybf_n7w1.scala:17:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpybf_n7w1.scala:18:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpybf_n7w1.scala:19:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.asDigit)\n        val sortedDigits = digits.sorted\n        val sortedDigitsReversed = sortedDigits.reverse\n        val sortedDigitsReversedString = sortedDigitsReversed.mkString\n        val sortedDigitsReversedLong = sortedDigitsReversedString.toLong\n        if (sortedDigitsReversedLong == n) -1\n        else {\n            val digitsReversed = digits.reverse\n            val digitsReversedString = digitsReversed.mkString\n            val digitsReversedLong = digitsReversedString.toLong\n            if (digitsReversedLong == n) -1\n            else {\n                val digitsReversedSorted = digitsReversed.sorted\n                val digitsReversedSortedString = digitsReversedSorted.mkString\n                val digitsReversedSortedLong = digitsReversedSortedString.toLong\n                if (digitsReversedSortedLong == n) -1\n                else {\n                    val digitsReversedSortedReversed = digitsReversedSorted.reverse\n                    val digitsReversedSortedReversedString = digitsReversedSortedReversed.mkString\n                    val digitsReversedSortedReversedLong = digitsReversedSortedReversedString.toLong\n                    if (digitsReversedSortedReversedLong == n) -1\n                    else {\n                        val digitsReversedSortedReversedSorted = digitsReversedSortedReversed.sorted\n                        val digitsReversedSortedReversedSortedString = digitsReversedSortedReversedSorted.mkString\n                        val digitsReversedSortedReversedSortedLong = digitsReversedSortedReversedSortedString.toLong\n                        if (digitsReversedSortedReversedSortedLong == n) -1\n                        else {\n                            val digitsReversedSortedReversedSortedReversed = digitsReversedSortedReversedSorted.reverse\n                            val digitsReversedSortedReversedSortedReversed\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122884,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpl79yxqpu.scala:35:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpl79yxqpu.scala:43:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpl79yxqpu.scala:37:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpl79yxqpu.scala:38:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpl79yxqpu.scala:39:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmpl79yxqpu.scala:36:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m36 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.asDigit)\n        val sortedDigits = digits.sorted\n        val sortedDigitsReversed = sortedDigits.reverse\n        val sortedDigitsReversedTail = sortedDigitsReversed.tail\n        val sortedDigitsReversedTailHead = sortedDigitsReversedTail.head\n        val sortedDigitsReversedTailTail = sortedDigitsReversedTail.tail\n        val sortedDigitsReversedHead = sortedDigitsReversed.head\n        val sortedDigitsReversedTailTailSorted = sortedDigitsReversedTailTail.sorted\n        val sortedDigitsReversedTailTailSortedReversed = sortedDigitsReversedTailTailSorted.reverse\n        val sortedDigitsReversedTailTailSortedReversedTail = sortedDigitsReversedTailTailSortedReversed.tail\n        val sortedDigitsReversedTailTailSortedReversedTailHead = sortedDigitsReversedTailTailSortedReversedTail.head\n        val sortedDigitsReversedTailTailSortedReversedTailTail = sortedDigitsReversedTailTailSortedReversedTail.tail\n        val sortedDigitsReversedTailTailSortedReversedTailTailSorted = sortedDigitsReversedTailTailSortedReversedTailTail.sorted\n        val sortedDigitsReversedTailTailSortedReversedTailTailSortedReversed = sortedDigitsReversedTailTailSortedReversedTailTailSorted.reverse\n        val sortedDigitsReversedTailTailSortedReversedTailTailSortedReversedTail = sortedDigitsReversedTailTailSortedReversedTailTailSortedReversed.tail\n        val sortedDigitsReversedTailTailSortedReversedTailTailSortedReversedTailHead = sortedDigitsReversedTailTailSorted\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122884,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpplajhoy5.scala:24:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpplajhoy5.scala:25:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpplajhoy5.scala:26:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.map(_.asDigit).toList\n        val sorted = digits.sorted\n        val max = sorted.last\n        val maxIndex = digits.indexOf(max)\n        val maxIndexSorted = sorted.indexOf(max)\n        val nextMax = sorted(maxIndexSorted - 1)\n        val nextMaxIndex = digits.indexOf(nextMax)\n        val (left, right) = digits.splitAt(nextMaxIndex)\n        val result = left.dropRight(1) ++ List(max) ++ right.drop(1) ++ List(nextMax)\n        result.mkString.toLong\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122884,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4bs2rmea.scala:18:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4bs2rmea.scala:19:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4bs2rmea.scala:20:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.toString.toInt)\n        val sortedDigits = digits.sorted\n        val sortedDigitsReversed = sortedDigits.reverse\n        val index = sortedDigits.indexOf(digits.last)\n        if (index == 0) {\n            -1\n        } else {\n            val lastDigit = sortedDigitsReversed(index - 1)\n            val newDigits = digits.dropRight(1) :+ lastDigit\n            val newDigitsSorted = newDigits.sorted\n            val newDigitsSortedReversed = newDigitsSorted.reverse\n            val newDigitsSortedReversedTail = newDigitsSortedReversed.drop(1)\n            val result = newDigits ::: newDigitsSortedReversedTail\n            result.mkString.toLong\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122884,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9mdc5_8v.scala:23:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9mdc5_8v.scala:24:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9mdc5_8v.scala:25:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.toString.toInt)\n        val sorted = digits.sorted\n        val sortedRev = sorted.reverse\n        val index = digits.indexOf(sortedRev.head)\n        val (left, right) = digits.splitAt(index)\n        val newLeft = left.dropRight(1) :+ sortedRev.head\n        val newRight = sortedRev.tail :+ left.last\n        val newDigits = newLeft ++ newRight\n        if (newDigits.head == 0) None else Some(newDigits.mkString.toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122885,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpw4gfywdv.scala:17:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpw4gfywdv.scala:18:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpw4gfywdv.scala:19:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.map(_.asDigit).toList\n        val sorted = digits.sorted\n        val index = digits.indexOf(sorted.last)\n        val (left, right) = digits.splitAt(index)\n        val (left2, right2) = right.splitAt(right.length - 1)\n        val next = sorted.last :: left ::: right2 ::: left2.reverse\n        if (next.mkString.toLong > n) next.mkString.toLong else -1\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122885,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp17wlc6gg.scala:15:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp17wlc6gg.scala:16:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp17wlc6gg.scala:17:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.toString.toInt)\n        val sorted = digits.sorted\n        val sortedDesc = sorted.reverse\n        if (digits == sortedDesc) {\n            \"Not possible\"\n        } else {\n            val index = digits.indexWhere(x => x < digits.max)\n            val max = digits.max\n            val newDigits = digits.updated(index, max).updated(digits.indexOf(max), digits(index))\n            newDigits.mkString.toLong\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122885,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdz5d5a35.scala:19:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdz5d5a35.scala:20:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdz5d5a35.scala:21:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.toString.toInt)\n        val sorted = digits.sorted\n        val sortedReversed = sorted.reverse\n        if (digits == sortedReversed) {\n            \"Not possible\"\n        } else {\n            var index = digits.length - 1\n            while (digits(index) >= digits(index - 1)) {\n                index -= 1\n            }\n            val (left, right) = digits.splitAt(index)\n            val (left1, right1) = right.splitAt(1)\n            val left2 = left1 ++ left\n            val right2 = right1 ++ right.drop(1)\n            val right3 = right2.sorted\n            val result = left2 ++ right3\n            result.mkString.toLong\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122885,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_rx35jeh.scala:26:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_rx35jeh.scala:27:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_rx35jeh.scala:28:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toCharArray.map(_.toString.toInt)\n        val sorted = digits.sorted\n        val sortedReversed = sorted.reverse\n        val sortedReversedString = sortedReversed.mkString\n        val nString = n.toString\n        if (nString == sortedReversedString) {\n            \"Not possible\"\n        } else {\n            val sortedReversedStringBuffer = new StringBuffer(sortedReversedString)\n            val nStringBuffer = new StringBuffer(nString)\n            val index = sortedReversedStringBuffer.indexOf(nStringBuffer.reverse.toString)\n            val digit = sortedReversedStringBuffer.charAt(index)\n            sortedReversedStringBuffer.deleteCharAt(index)\n            sortedReversedStringBuffer.append(digit)\n            sortedReversedStringBuffer.toString.toLong\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122885,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2voox3a1.scala:24:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2voox3a1.scala:25:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2voox3a1.scala:26:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.toString.toInt)\n        val sorted = digits.sorted\n        val sortedReverse = sorted.reverse\n        val index = digits.indexOf(sortedReverse.head)\n        val (left, right) = digits.splitAt(index)\n        val (leftSorted, rightSorted) = (left.sorted, right.sorted)\n        val (leftSortedReverse, rightSortedReverse) = (leftSorted.reverse, rightSorted.reverse)\n        val (leftSortedReverseTail, rightSortedReverseTail) = (leftSortedReverse.tail, rightSortedReverse.tail)\n        val (leftSortedReverseHead, rightSortedReverseHead) = (leftSortedReverse.head, rightSortedReverse.head)\n        val (leftSortedReverseTailSorted, rightSortedReverseTailSorted) = (leftSortedReverseTail.sorted, rightSortedReverseTail.sorted)\n        val (leftSortedReverseTailSortedReverse, rightSortedReverseTailSortedReverse) = (leftSortedReverseTailSorted.reverse, rightSortedReverseTailSorted.reverse)\n        val (leftSortedReverseTailSortedReverseHead, rightSortedReverseTailSortedReverseHead) = (leftSortedReverseTailSortedReverse.head, rightSortedReverseTailSortedReverse.head)\n        val (leftSortedReverseTailSortedReverseTail, rightSortedReverseTailSortedReverseTail) = (leftSortedReverseTailSortedReverse.tail, rightSortedReverseTailSortedReverse.tail)\n        val (leftSortedReverseTailSortedReverseTailSorted, rightSortedReverseTailSortedReverseTailSorted) = (leftSortedReverse\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122862,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp3q1yixxo.scala:20:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3q1yixxo.scala:22:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3q1yixxo.scala:23:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3q1yixxo.scala:24:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.map(_.asDigit).toList\n        val sorted = digits.sorted\n        val max = sorted.last\n        val maxIndex = digits.indexOf(max)\n        val min = sorted.head\n        val minIndex = digits.indexOf(min)\n        val maxIndexes = digits.zipWithIndex.filter(_._1 == max).map(_._2)\n        val minIndexes = digits.zipWithIndex.filter(_._1 == min).map(_._2)\n        if (maxIndexes.size == 1 && minIndexes.size == 1) {\n            val (i, j) = (maxIndex, minIndex)\n            val (a, b) = (digits(i), digits(j))\n            val newDigits = digits.updated(i, b).updated(j, a)\n            newDigits.mkString.toLong\n        } else if (maxIndexes.size == 1 && minIndexes.size > 1) {\n            val i = maxIndex\n            val a = digits(i)\n            val newDigits = digits.updated(i, min)\n            newDigits.mkString.toLong\n        } else if (maxIndexes.size > 1 && minIndexes.size == 1) {\n            val j = minIndex\n            val b = digits(j)\n            val newDigits = digits.updated(j, max)\n            newDigits.mkString.toLong\n        } else {\n            val (i, j) = (maxIndexes.head, minIndexes.head)\n            val (a, b) = (digits(i), digits(j))\n            val newDigits = digits.updated(i, b).updated(j, a)\n            newDigits.mkString.toLong\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122885,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyh89hzo3.scala:37:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyh89hzo3.scala:38:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyh89hzo3.scala:39:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.asDigit)\n        val sorted = digits.sorted\n        val sortedReverse = sorted.reverse\n        val index = digits.indexOfSlice(sortedReverse)\n        if (index == -1) -1\n        else {\n            val (left, right) = digits.splitAt(index)\n            val (leftSorted, rightSorted) = left.sorted.splitAt(left.length - 1)\n            val (leftSortedReverse, rightSortedReverse) = right.sorted.reverse.splitAt(1)\n            val result = (leftSorted ++ rightSortedReverse ++ leftSortedReverse ++ rightSorted).mkString(\"\").toLong\n            if (result == n) -1\n            else result\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122885,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3m7ruzg7.scala:21:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3m7ruzg7.scala:22:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3m7ruzg7.scala:23:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.toString.toInt).sorted\n        val digits2 = digits.reverse\n        if (digits == digits2) return -1\n        val digits3 = digits2.tail :+ digits2.head\n        val digits4 = digits3.reverse\n        val digits5 = digits4.tail :+ digits4.head\n        val digits6 = digits5.reverse\n        val digits7 = digits6.tail :+ digits6.head\n        val digits8 = digits7.reverse\n        val digits9 = digits8.tail :+ digits8.head\n        val digits10 = digits9.reverse\n        val digits11 = digits10.tail :+ digits10.head\n        val digits12 = digits11.reverse\n        val digits13 = digits12.tail :+ digits12.head\n        val digits14 = digits13.reverse\n        val digits15 = digits14.tail :+ digits14.head\n        val digits16 = digits15.reverse\n        val digits17 = digits16.tail :+ digits16.head\n        val digits18 = digits17.reverse\n        val digits19 = digits18.tail :+ digits18.head\n        val digits20 = digits19.reverse\n        val digits21 = digits20.tail :+ digits20.head\n        val digits22 = digits21.reverse\n        val digits23 = digits22.tail :+ digits22.head\n        val digits24 = digits23.reverse\n        val digits25 = digits24.tail :+ digits24.head\n        val digits26 = digits25.reverse\n        val digits27 = digits26.tail :+ digits26.head\n        val digits28 = digits27.reverse\n        val digits29 = digits28.tail :+ digits28.head\n        val digits30 = digits29.reverse\n        val digits31 = digits30.tail :+ digits30.head\n        val digits32 = digits31.reverse\n        val digits33 = digits32.tail :+ digits32.head\n        val digits34 = digits33.reverse\n        val digits35 = digits34.tail :+ digits34.head\n        val digits36 = digits35.reverse\n        val digits37 = digits36.tail :+ digits36.head\n        val digits38 = digits37\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122886,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7lqmm2te.scala:47:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7lqmm2te.scala:48:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7lqmm2te.scala:49:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.asDigit)\n        val (left, right) = digits.splitAt(digits.length - 1)\n        val rightSorted = right.sorted\n        val rightSortedIndex = rightSorted.indexOf(right.head)\n        val rightSortedHead = rightSorted(rightSortedIndex)\n        val rightSortedTail = rightSorted.take(rightSortedIndex) ++ rightSorted.drop(rightSortedIndex + 1)\n        val rightSortedTailSorted = rightSortedTail.sorted\n        val rightSortedTailSortedHead = rightSortedTailSorted.head\n        val rightSortedTailSortedTail = rightSortedTailSorted.tail\n        val rightSortedTailSortedTailSorted = rightSortedTailSortedTail.sorted\n        val result = (left :+ rightSortedHead) ++ (rightSortedTailSortedHead +: rightSortedTailSortedTailSorted)\n        if (result.head == 0) -1 else result.mkString.toLong\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122886,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprpbz62rr.scala:20:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprpbz62rr.scala:21:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprpbz62rr.scala:22:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.map(_.asDigit).toList\n        val sortedDigits = digits.sorted\n        val sortedDigitsReversed = sortedDigits.reverse\n        val digitsReversed = digits.reverse\n        val index = digitsReversed.indexWhere(x => x < sortedDigitsReversed(digitsReversed.indexOf(x)))\n        if (index == -1) -1\n        else {\n            val (left, right) = digitsReversed.splitAt(index)\n            val (left1, right1) = right.splitAt(1)\n            val (left2, right2) = left1.splitAt(1)\n            val left3 = left2 ::: right1\n            val right3 = left3.sorted.reverse\n            val result = (left ::: right3).reverse.mkString.toLong\n            result\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122886,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpzag0p6py.scala:23:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpzag0p6py.scala:24:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpzag0p6py.scala:25:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.asDigit)\n        val sorted = digits.sorted.reverse\n        if (digits == sorted) return -1\n        val (left, right) = digits.splitAt(digits.length - 1)\n        val (min, minIndex) = left.zipWithIndex.minBy(_._1)\n        val (max, maxIndex) = right.zipWithIndex.maxBy(_._1)\n        if (min < max) {\n            val (left1, right1) = left.splitAt(minIndex)\n            val (left2, right2) = right.splitAt(maxIndex)\n            (left1 ::: (max :: right1.tail) ::: (min :: left2.tail) ::: right2).mkString.toLong\n        } else {\n            val (left1, right1) = left.splitAt(minIndex)\n            val (left2, right2) = right.splitAt(maxIndex)\n            (left1 ::: (max :: right1.tail) ::: (min :: left2.tail) ::: right2).mkString.toLong\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122888,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfgwjpp3b.scala:23:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfgwjpp3b.scala:24:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfgwjpp3b.scala:25:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.asDigit)\n        val sorted = digits.sorted\n        val sortedR = sorted.reverse\n        val index = digits.indexOfSlice(sortedR)\n        if (index == -1) return -1\n        val (head, tail) = digits.splitAt(index)\n        val (head1, head2) = head.splitAt(head.length - 1)\n        val head3 = head1 :+ head2.head\n        val head4 = head3.sorted\n        val head5 = head4.reverse\n        val result = head5 ::: tail\n        result.mkString.toLong\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122887,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsb_xp4a8.scala:20:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsb_xp4a8.scala:21:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsb_xp4a8.scala:22:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.map(_.asDigit).toList\n        val sorted = digits.sorted\n        val reverse = sorted.reverse\n        val index = digits.indexOf(reverse.head)\n        val (left, right) = digits.splitAt(index)\n        val (left1, right1) = right.splitAt(1)\n        val left2 = left ::: right1\n        val right2 = left1 ::: right.drop(1)\n        val result = left2 ::: right2.sorted\n        if (result.mkString.toLong > n) result.mkString.toLong else -1\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122887,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpiy_ks3ez.scala:18:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpiy_ks3ez.scala:19:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpiy_ks3ez.scala:20:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.asDigit)\n        val sortedDigits = digits.sorted\n        val sortedDigitsReversed = sortedDigits.reverse\n        val sortedDigitsReversedString = sortedDigitsReversed.mkString\n        val sortedDigitsReversedStringLong = sortedDigitsReversedString.toLong\n        if (sortedDigitsReversedStringLong == n) {\n            \"Not possible\"\n        } else {\n            sortedDigitsReversedStringLong\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122888,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbhk1rz7t.scala:18:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbhk1rz7t.scala:19:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbhk1rz7t.scala:20:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.toString.toInt)\n        val sorted = digits.sorted\n        val sortedReverse = sorted.reverse\n        val index = digits.indexOf(sortedReverse.head)\n        val (left, right) = digits.splitAt(index)\n        val (leftSorted, rightSorted) = (left.sorted, right.sorted)\n        val (leftSortedReverse, rightSortedReverse) = (leftSorted.reverse, rightSorted.reverse)\n        val (leftSortedReverseTail, rightSortedReverseTail) = (leftSortedReverse.tail, rightSortedReverse.tail)\n        val (leftSortedReverseTailSorted, rightSortedReverseTailSorted) = (leftSortedReverseTail.sorted, rightSortedReverseTail.sorted)\n        val (leftSortedReverseTailSortedReverse, rightSortedReverseTailSortedReverse) = (leftSortedReverseTailSorted.reverse, rightSortedReverseTailSorted.reverse)\n        val leftSortedReverseTailSortedReverseHead = leftSortedReverseTailSortedReverse.head\n        val rightSortedReverseTailSortedReverseHead = rightSortedReverseTailSortedReverse.head\n        val leftSortedReverseTailSortedReverseTail = leftSortedReverseTailSortedReverse.tail\n        val rightSortedReverseTailSortedReverseTail = rightSortedReverseTailSortedReverse.tail\n        val leftSortedReverseTailSortedReverseTailSorted = leftSortedReverseTailSortedReverseTail.sorted\n        val rightSortedReverseTailSortedReverseTailSorted = rightSortedReverseTailSortedReverseTail.sorted\n        val leftSortedReverseTailSortedR\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122888,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp1hzyn7pa.scala:23:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1hzyn7pa.scala:25:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1hzyn7pa.scala:26:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1hzyn7pa.scala:27:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.map(_.asDigit).toList\n        val sortedDigits = digits.sorted\n        val sortedDigitsReversed = sortedDigits.reverse\n        val sortedDigitsReversedMap = sortedDigitsReversed.zipWithIndex.toMap\n        val sortedDigitsReversedMapReverse = sortedDigitsReversedMap.map(_.swap)\n        val digitsMap = digits.zipWithIndex.toMap\n        val digitsMapReverse = digitsMap.map(_.swap)\n        val sortedDigitsReversedMapReverseFiltered = sortedDigitsReversedMapReverse.filter(x => x._1 > digitsMapReverse(x._2))\n        if (sortedDigitsReversedMapReverseFiltered.size == 0) return -1\n        val sortedDigitsReversedMapReverseFilteredMin = sortedDigitsReversedMapReverseFiltered.minBy(_._1)\n        val sortedDigitsReversedMapReverseFilteredMinKey = sortedDigitsReversedMapReverseFilteredMin._1\n        val sortedDigitsReversedMapReverseFilteredMinValue = sortedDigitsReversedMapReverseFilteredMin._2\n        val sortedDigitsReversedMapReverseFilteredMinValueNew = sortedDigitsReversedMapReverseFilteredMinValue - 1\n        val sortedDigitsReversedMapReverseFilteredMinKeyNew = sortedDigitsReversedMapReverseFilteredMinKey + 1\n        val sortedDigitsReversedMapReverseFilteredMinKeyNewValue = sortedDigitsReversedMapReverse(sortedDigitsReversedMapReverseFilteredMinKeyNew)\n        val sortedDigitsReversedMapReverseFilteredMinKeyNewValueNew = sortedDigitsReversedMapReverseFilteredMinKeyNewValue - 1\n        val sortedDigitsReversedMapReverseFilteredMinKeyNewValueNewValue = sortedDigitsReversed(sortedDigitsReversedMapReverseFilteredMinKeyNewValueNew)\n        val digitsMapR\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122889,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp6h2j4fej.scala:24:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6h2j4fej.scala:26:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6h2j4fej.scala:27:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6h2j4fej.scala:28:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.map(_.asDigit).toList\n        val sorted = digits.sorted\n        val sortedRev = sorted.reverse\n        val index = digits.indexOf(sortedRev.head)\n        val (left, right) = digits.splitAt(index)\n        val (leftRev, rightRev) = (left.reverse, right.reverse)\n        val (leftRevHead, leftRevTail) = (leftRev.head, leftRev.tail)\n        val (rightRevHead, rightRevTail) = (rightRev.head, rightRev.tail)\n        val (leftRevTailSorted, rightRevTailSorted) = (leftRevTail.sorted, rightRevTail.sorted)\n        if (leftRevHead > rightRevHead) {\n            val result = (leftRevHead :: leftRevTailSorted) ::: (rightRevHead :: rightRevTailSorted)\n            result.mkString.toLong\n        } else {\n            -1\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122889,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvd5wxsev.scala:23:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvd5wxsev.scala:24:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvd5wxsev.scala:25:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.map(_.asDigit).toList\n        val sorted = digits.sorted\n        val sortedReverse = sorted.reverse\n        val index = digits.indexOf(sortedReverse.head)\n        val (left, right) = digits.splitAt(index)\n        val newRight = sortedReverse.tail ::: left\n        val newNumber = newRight.mkString.toLong\n        if (newNumber == n) \"Not possible\" else newNumber\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122889,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuaxat0sg.scala:16:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuaxat0sg.scala:17:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuaxat0sg.scala:18:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.map(_.asDigit).toList\n        val sortedDigits = digits.sorted\n        val sortedDigitsReverse = sortedDigits.reverse\n        val digitsReverse = digits.reverse\n        val sortedDigitsReverseTail = sortedDigitsReverse.tail\n        val sortedDigitsReverseTailReverse = sortedDigitsReverseTail.reverse\n        val sortedDigitsReverseTailReverseHead = sortedDigitsReverseTailReverse.head\n        val sortedDigitsReverseTailReverseHeadIndex = sortedDigitsReverseTailReverse.indexOf(sortedDigitsReverseTailReverseHead)\n        val sortedDigitsReverseTailReverseHeadIndexPlusOne = sortedDigitsReverseTailReverseHeadIndex + 1\n        val sortedDigitsReverseTailReverseHeadIndexPlusOnePlusOne = sortedDigitsReverseTailReverseHeadIndexPlusOne + 1\n        val sortedDigitsReverseTailReverseHeadIndexPlusOnePlusOnePlusOne = sortedDigitsReverseTailReverseHeadIndexPlusOne + 2\n        val sortedDigitsReverseTailReverseHeadIndexPlusOnePlusOnePlusOnePlusOne = sortedDigitsReverseTailReverseHeadIndexPlusOne + 3\n        val sortedDigitsReverseTailReverseHeadIndexPlusOnePlusOnePlusOnePlusOnePlusOne = sortedDigitsReverseTailReverseHeadIndexPlusOne + 4\n        val sortedDigitsReverseTailReverseHeadIndexPlusOnePlusOnePlusOnePlusOnePlusOnePlusOne = sortedDigitsReverseTailReverseHeadIndexPlusOne + 5\n        val sortedDigitsReverseTailReverseHeadIndexPlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOne = sortedDigitsReverseTailReverseHeadIndexPlusOne + 6\n        val sortedDigitsReverseTailReverseHeadIndexPlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOne = sortedDigitsReverseTailReverse\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122891,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpspxsdw13.scala:24:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpspxsdw13.scala:25:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpspxsdw13.scala:26:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.toString.toInt)\n        val sorted = digits.sorted\n        val index = digits.lastIndexWhere(_ < sorted.last)\n        if (index == -1) -1\n        else {\n            val (left, right) = digits.splitAt(index)\n            val min = sorted.filter(_ > right.head).min\n            val (left1, right1) = right.partition(_ != min)\n            (left ::: (min :: left1.sorted) ::: right1).mkString.toLong\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122891,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpf499ro3o.scala:18:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpf499ro3o.scala:19:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpf499ro3o.scala:20:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.map(_.asDigit).toList\n        val sortedDigits = digits.sorted\n        val maxDigits = sortedDigits.reverse\n        val minDigits = sortedDigits\n        val max = maxDigits.mkString.toLong\n        val min = minDigits.mkString.toLong\n        if (n == max) \"Not possible\"\n        else if (n == min) minDigits.reverse.mkString.toLong\n        else {\n            val index = digits.lastIndexWhere(_ < digits.last)\n            val (left, right) = digits.splitAt(index)\n            val (left1, right1) = right.splitAt(1)\n            val left2 = left ::: left1\n            val right2 = right1.sorted\n            val result = (left2 ::: right2).mkString.toLong\n            result\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122892,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpw0qdesy_.scala:25:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpw0qdesy_.scala:26:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpw0qdesy_.scala:27:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.asDigit)\n        val sorted = digits.sorted\n        val reversed = sorted.reverse\n        if (digits == reversed) {\n            -1\n        } else {\n            val index = digits.indexWhere(x => x < digits.max)\n            val max = digits.max\n            val (left, right) = digits.splitAt(index)\n            val (left2, right2) = right.splitAt(right.indexOf(max))\n            val newRight = (left2.head :: right2.tail).sorted.reverse\n            val newLeft = left ::: List(max) ::: newRight\n            newLeft.mkString.toLong\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122892,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphdk6objp.scala:22:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphdk6objp.scala:23:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphdk6objp.scala:24:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.map(_.asDigit).toList\n        val sorted = digits.sorted\n        val sortedReverse = sorted.reverse\n        if (digits == sortedReverse) {\n            -1\n        } else {\n            val index = digits.lastIndexWhere(digits(_) < digits.last)\n            val (first, second) = digits.splitAt(index)\n            val secondSorted = second.sorted\n            val secondSortedReverse = secondSorted.reverse\n            val secondIndex = secondSortedReverse.lastIndexWhere(secondSortedReverse(_) > second.last)\n            val (secondFirst, secondSecond) = secondSortedReverse.splitAt(secondIndex)\n            val secondSecondReverse = secondSecond.reverse\n            val result = first ::: (secondSecondReverse.head :: secondFirst) ::: secondSecondReverse.tail\n            result.mkString.toLong\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122892,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqqeoya4g.scala:24:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqqeoya4g.scala:25:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqqeoya4g.scala:26:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.asDigit)\n        val sortedDigits = digits.sorted.reverse\n        if (digits == sortedDigits) return -1\n        val index = digits.lastIndexWhere(_ < digits.last)\n        val nextDigit = sortedDigits.find(_ > digits(index)).get\n        val (left, right) = digits.splitAt(index)\n        val newDigits = left ::: List(nextDigit) ::: sortedDigits.filter(_ != nextDigit).reverse\n        newDigits.mkString.toLong\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122892,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp095amdqm.scala:16:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp095amdqm.scala:17:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp095amdqm.scala:18:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.toString.toInt)\n        val sorted = digits.sorted\n        val sortedReverse = sorted.reverse\n        val (left, right) = digits.span(_ == sortedReverse.head)\n        if (left.length == digits.length) -1\n        else {\n            val (rightHead, rightTail) = right.span(_ == sortedReverse.head)\n            val (leftHead, leftTail) = left.span(_ == sortedReverse.head)\n            val rightHeadSorted = rightHead.sorted\n            val leftHeadSorted = leftHead.sorted\n            val newRight = rightHeadSorted.head :: rightTail\n            val newLeft = leftHeadSorted.tail ::: leftTail\n            val newDigits = newLeft ::: newRight\n            newDigits.mkString.toLong\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122892,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8jr3kz7p.scala:23:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8jr3kz7p.scala:24:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8jr3kz7p.scala:25:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.asDigit)\n        val (left, right) = digits.splitAt(digits.length - 1)\n        val sortedRight = right.sorted\n        val maxRight = sortedRight.last\n        val minRight = sortedRight.head\n        if (maxRight > minRight) {\n            val (maxRightIndex, minRightIndex) = (right.indexOf(maxRight), right.indexOf(minRight))\n            val newRight = right.updated(maxRightIndex, minRight).updated(minRightIndex, maxRight)\n            (left ::: newRight).mkString.toLong\n        } else {\n            val (leftIndex, rightIndex) = (left.indexOf(maxRight), left.indexOf(minRight))\n            val newLeft = left.updated(leftIndex, minRight).updated(rightIndex, maxRight)\n            (newLeft ::: sortedRight).mkString.toLong\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122892,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpki8iopwr.scala:22:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpki8iopwr.scala:23:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpki8iopwr.scala:24:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.asDigit)\n        val sorted = digits.sorted.reverse\n        if (digits == sorted) {\n            \"Not possible\"\n        } else {\n            val index = digits.indexWhere(x => x < digits.drop(digits.indexOf(x) + 1).min)\n            val min = digits.drop(index + 1).min\n            val minIndex = digits.indexOf(min)\n            val newDigits = digits.updated(index, min).updated(minIndex, digits(index))\n            val newDigitsSorted = newDigits.drop(index + 1).sorted\n            val result = newDigits.take(index + 1) ++ newDigitsSorted\n            result.mkString.toLong\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122892,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpzs8p2qam.scala:21:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpzs8p2qam.scala:22:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpzs8p2qam.scala:23:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.asDigit)\n        val sorted = digits.sorted\n        val max = sorted.last\n        val min = sorted.head\n        val maxIndex = digits.indexOf(max)\n        val minIndex = digits.indexOf(min)\n        if (maxIndex == minIndex) return -1\n        val newDigits = digits.updated(maxIndex, min).updated(minIndex, max)\n        newDigits.mkString.toLong\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122892,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmppeveshnr.scala:17:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmppeveshnr.scala:18:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmppeveshnr.scala:19:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.map(_.toString.toInt).toList\n        val sortedDigits = digits.sorted\n        val sortedDigitsReversed = sortedDigits.reverse\n        val sortedDigitsReversedMap = sortedDigitsReversed.zipWithIndex.toMap\n        val digitsMap = digits.zipWithIndex.toMap\n        val sortedDigitsReversedMap2 = sortedDigitsReversedMap.map(x => (x._1, x._2 + 1))\n        val digitsMap2 = digitsMap.map(x => (x._1, x._2 + 1))\n        val sortedDigitsReversedMap3 = sortedDigitsReversedMap2.map(x => (x._2, x._1))\n        val digitsMap3 = digitsMap2.map(x => (x._2, x._1))\n        val sortedDigitsReversedMap4 = sortedDigitsReversedMap3.map(x => (x._1, x._2.toString))\n        val digitsMap4 = digitsMap3.map(x => (x._1, x._2.toString))\n        val sortedDigitsReversedMap5 = sortedDigitsReversedMap4.toList.sortBy(_._1)\n        val digitsMap5 = digitsMap4.toList.sortBy(_._1)\n        val sortedDigitsReversedMap6 = sortedDigitsReversedMap5.map(x => (x._1, x._2.toInt))\n        val digitsMap6 = digitsMap5.map(x => (x._1, x._2.toInt))\n        val sortedDigitsReversedMap7 = sortedDigitsReversedMap6.map(x => (x._1, x._2.toString))\n        val digitsMap7 = digitsMap6.map(x => (x._1, x._2.toString))\n        val sortedDigitsReversedMap8 = sortedDigitsReversedMap7.toMap\n        val digitsMap8 = digitsMap7.toMap\n        val sortedDigitsReversedMap9 = sortedDigitsReversedMap8.map(x => (x._2, x\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122892,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpd_rx_6s0.scala:26:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpd_rx_6s0.scala:28:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpd_rx_6s0.scala:29:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpd_rx_6s0.scala:30:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.toString.toInt)\n        val sortedDigits = digits.sorted\n        if (digits == sortedDigits.reverse) {\n            \"Not possible\"\n        } else {\n            val index = digits.lastIndexWhere(digits(_) < digits.last)\n            val (left, right) = digits.splitAt(index)\n            val min = right.min\n            val minIndex = right.indexOf(min)\n            val newRight = right.updated(minIndex, digits(index))\n            val newLeft = left.updated(index, min)\n            (newLeft ++ newRight.sorted).mkString.toLong\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122892,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpaut5yhtd.scala:21:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpaut5yhtd.scala:22:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpaut5yhtd.scala:23:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.asDigit)\n        val sorted = digits.sorted\n        val sortedReverse = sorted.reverse\n        val sortedReverseIndex = sortedReverse.zipWithIndex.toMap\n        val sortedIndex = sorted.zipWithIndex.toMap\n        val sortedReverseIndex2 = sortedReverse.zipWithIndex.toMap\n        val sortedIndex2 = sorted.zipWithIndex.toMap\n        val sortedReverseIndex3 = sortedReverse.zipWithIndex.toMap\n        val sortedIndex3 = sorted.zipWithIndex.toMap\n        val sortedReverseIndex4 = sortedReverse.zipWithIndex.toMap\n        val sortedIndex4 = sorted.zipWithIndex.toMap\n        val sortedReverseIndex5 = sortedReverse.zipWithIndex.toMap\n        val sortedIndex5 = sorted.zipWithIndex.toMap\n        val sortedReverseIndex6 = sortedReverse.zipWithIndex.toMap\n        val sortedIndex6 = sorted.zipWithIndex.toMap\n        val sortedReverseIndex7 = sortedReverse.zipWithIndex.toMap\n        val sortedIndex7 = sorted.zipWithIndex.toMap\n        val sortedReverseIndex8 = sortedReverse.zipWithIndex.toMap\n        val sortedIndex8 = sorted.zipWithIndex.toMap\n        val sortedReverseIndex9 = sortedReverse.zipWithIndex.toMap\n        val sortedIndex9 = sorted.zipWithIndex.toMap\n        val sortedReverseIndex10 = sortedReverse.zipWithIndex.toMap\n        val sortedIndex10 = sorted.zipWithIndex.toMap\n        val sortedReverseIndex11 = sortedReverse.zipWithIndex.toMap\n        val sortedIndex11 = sorted.zipWithIndex.toMap\n        val sortedReverseIndex12 = sortedReverse.zipWithIndex.toMap\n        val sortedIndex12 = sorted.zipWithIndex.toMap\n        val sortedReverseIndex13 = sortedReverse.zipWithIndex.toMap\n        val sortedIndex13 = sorted.zipWithIndex.toMap\n        val sortedRever\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122893,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjchaww8u.scala:36:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjchaww8u.scala:38:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjchaww8u.scala:39:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjchaww8u.scala:40:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.map(_.asDigit).toList\n        val sorted = digits.sorted\n        val (p, q) = digits.span(_ == sorted.last)\n        val (r, s) = sorted.span(_ == sorted.last)\n        if (p.length == digits.length) None\n        else Some(digits.take(p.length - 1) ::: r.head :: p.tail ::: r.tail ::: s)\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122893,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp62u7_1v4.scala:14:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp62u7_1v4.scala:15:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp62u7_1v4.scala:16:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.toString.toInt)\n        val sorted = digits.sorted\n        val index = digits.indexOf(sorted.last)\n        val (left, right) = digits.splitAt(index)\n        val (left1, left2) = left.splitAt(left.length - 1)\n        val (right1, right2) = right.splitAt(1)\n        val newLeft = left1 ::: right1 ::: left2\n        val newRight = right2 ::: left.last :: Nil\n        val newDigits = newLeft ::: newRight\n        if (newDigits.head == 0) -1 else newDigits.mkString.toLong\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122893,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpw2rcq071.scala:18:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpw2rcq071.scala:19:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpw2rcq071.scala:20:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        def rearrangeBigger(n : Long, i : Int) : Any = {\n            if (i == n.toString.length) return -1\n            val c = n.toString.charAt(i)\n            val d = n.toString.charAt(i + 1)\n            if (c < d) {\n                val s = n.toString.substring(0, i) + d + c + n.toString.substring(i + 2)\n                return s.toLong\n            }\n            rearrangeBigger(n, i + 1)\n        }\n        rearrangeBigger(n, 0)\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122894,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpcvlsa3lo.scala:19:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpcvlsa3lo.scala:20:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpcvlsa3lo.scala:21:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.asDigit)\n        val sorted = digits.sorted\n        val (head, tail) = digits.span(_ == sorted.head)\n        if (tail.isEmpty) return -1\n        val (head2, tail2) = tail.span(_ == tail.head)\n        val (head3, tail3) = tail2.span(_ == tail2.head)\n        val (head4, tail4) = tail3.span(_ == tail3.head)\n        val (head5, tail5) = tail4.span(_ == tail4.head)\n        val (head6, tail6) = tail5.span(_ == tail5.head)\n        val (head7, tail7) = tail6.span(_ == tail6.head)\n        val (head8, tail8) = tail7.span(_ == tail7.head)\n        val (head9, tail9) = tail8.span(_ == tail8.head)\n        val (head10, tail10) = tail9.span(_ == tail9.head)\n        val (head11, tail11) = tail10.span(_ == tail10.head)\n        val (head12, tail12) = tail11.span(_ == tail11.head)\n        val (head13, tail13) = tail12.span(_ == tail12.head)\n        val (head14, tail14) = tail13.span(_ == tail13.head)\n        val (head15, tail15) = tail14.span(_ == tail14.head)\n        val (head16, tail16) = tail15.span(_ == tail15.head)\n        val (head17, tail17) = tail16.span(_ == tail16.head)\n        val (head18, tail18) = tail17.span(_ == tail17.head)\n        val (head19, tail19) = tail18.span(_ == tail18.head)\n        val (head20, tail20) = tail19.span(_ == tail19.head)\n        val (head21, tail21) = tail20.span(_ == tail20.head)\n        val (head22, tail22) = tail21.span\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122895,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpg4920ow_.scala:33:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpg4920ow_.scala:34:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpg4920ow_.scala:35:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.toString.toInt)\n        val sorted = digits.sorted\n        val sortedReverse = sorted.reverse\n        if (digits == sortedReverse) return -1\n        val index = digits.indexWhere(x => x != sortedReverse(digits.indexOf(x)))\n        val temp = digits(index)\n        digits(index) = digits(index - 1)\n        digits(index - 1) = temp\n        digits.slice(0, index).mkString.toLong\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122898,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpmbmcc3kh.scala:12:8 -------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        digits(index) = digits(index - \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Int] - did you mean digits.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpmbmcc3kh.scala:13:8 -------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        digits(index - \u001b[31m1\u001b[0m) = temp\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Int] - did you mean digits.updated?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmbmcc3kh.scala:17:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmbmcc3kh.scala:18:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmbmcc3kh.scala:19:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.toString.toInt)\n        val sortedDigits = digits.sorted\n        val sortedDigitsReversed = sortedDigits.reverse\n        val index = digits.lastIndexWhere(_ < digits.last)\n        if (index == -1) -1\n        else {\n            val newDigits = digits.updated(index, digits.last).updated(digits.length - 1, digits(index))\n            val newDigitsSorted = newDigits.sorted\n            val newDigitsSortedReversed = newDigitsSorted.reverse\n            val newDigitsSortedReversedTail = newDigitsSortedReversed.tail\n            val newDigitsSortedReversedTailUpdated = newDigitsSortedReversedTail.updated(index, newDigitsSortedReversed.head)\n            newDigitsSortedReversedTailUpdated.mkString.toLong\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122895,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9h85dxtp.scala:21:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9h85dxtp.scala:22:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9h85dxtp.scala:23:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.asDigit)\n        val sorted = digits.sorted.reverse\n        if (digits == sorted) return -1\n        val (left, right) = digits.splitAt(digits.length - 1)\n        val (leftSorted, rightSorted) = (left.sorted.reverse, right.sorted)\n        val (leftMax, rightMin) = (leftSorted.head, rightSorted.head)\n        val (leftMaxIndex, rightMinIndex) = (left.indexOf(leftMax), right.indexOf(rightMin))\n        val (leftSortedWithoutMax, rightSortedWithoutMin) = (leftSorted.filter(_ != leftMax), rightSorted.filter(_ != rightMin))\n        val leftSortedWithoutMaxAndMin = leftSortedWithoutMax :+ rightMin\n        val rightSortedWithoutMaxAndMin = rightSortedWithoutMin :+ leftMax\n        val (leftSortedWithoutMaxAndMinSorted, rightSortedWithoutMaxAndMinSorted) = (leftSortedWithoutMaxAndMin.sorted.reverse, rightSortedWithoutMaxAndMin.sorted)\n        val leftSortedWithoutMaxAndMinSortedWithoutMax = leftSortedWithoutMaxAndMinSorted.filter(_ != leftMax)\n        val rightSortedWithoutMaxAndMinSortedWithoutMin = rightSortedWithoutMaxAndMinSorted.filter(_ != rightMin)\n        val (leftSortedWithoutMaxAndMinSortedWithoutMaxSorted, rightSortedWithoutMaxAndMinSortedWithoutMinSorted) = (leftSortedWithoutMaxAndMinSortedWithoutMax.sorted.reverse, rightSortedWithoutMaxAndMinSortedWithoutMin.sorted)\n        val leftSortedWithoutMaxAndMinSortedWithoutMaxSortedWithoutMin = leftSortedWithoutMaxAndMinSortedWithoutMaxSorted.filter(_ != rightMin)\n        val rightSortedWithoutMaxAndMinSortedWithoutMaxSortedWithoutMin = rightSortedWithoutMaxAndMinSortedWithoutMinSorted.filter(_ != leftMax)\n        val leftSortedWithoutMaxAndMinSortedWithoutMaxSortedWithoutMinSorted = leftSortedWithoutMaxAndMinSortedWithoutMaxSorted\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqiehe1jb.scala:25:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqiehe1jb.scala:26:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqiehe1jb.scala:27:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.asDigit)\n        val sorted = digits.sorted\n        val reversed = sorted.reverse\n        val index = digits.indexOf(reversed.head)\n        val (left, right) = digits.splitAt(index)\n        val newRight = reversed.tail ::: left\n        val newDigits = newRight.sorted\n        val newNumber = newDigits.mkString.toLong\n        if (newNumber == n) -1 else newNumber\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122896,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpw27qrrfr.scala:17:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpw27qrrfr.scala:18:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpw27qrrfr.scala:19:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.asDigit)\n        val sorted = digits.sorted\n        val sortedReverse = sorted.reverse\n        if (digits == sortedReverse) {\n            -1\n        } else {\n            val (i, j) = findSwap(digits)\n            val (a, b) = digits.splitAt(i)\n            val c = b.updated(0, digits(j))\n            val d = c.updated(j - i, digits(i))\n            (a ++ d).mkString.toLong\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1jk4djxx.scala:12:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mval\u001b[0m (i, j) = findSwap(digits)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: findSwap\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp1jk4djxx.scala:12:17 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mval\u001b[0m (i, j) = findSwap(digits)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                 Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp1jk4djxx.scala:12:20 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mval\u001b[0m (i, j) = findSwap(digits)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^\u001b[0m\n\u001b[31m   |\u001b[0m                    Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1jk4djxx.scala:20:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1jk4djxx.scala:21:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1jk4djxx.scala:22:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.map(_.asDigit).toList\n        val sorted = digits.sorted\n        val sortedReverse = sorted.reverse\n        val index = digits.indexOf(sortedReverse.head)\n        val (left, right) = digits.splitAt(index)\n        val (leftSorted, rightSorted) = (left.sorted, right.sorted)\n        val (leftSortedReverse, rightSortedReverse) = (leftSorted.reverse, rightSorted.reverse)\n        val newDigits = leftSortedReverse ++ rightSortedReverse\n        if (newDigits.head == 0) None else Some(newDigits.mkString.toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5acep0lx.scala:17:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5acep0lx.scala:18:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5acep0lx.scala:19:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.map(_.asDigit).toList\n        val sorted = digits.sorted.reverse\n        if (digits == sorted) return -1\n        val index = digits.lastIndexWhere(_ < digits.last)\n        val (left, right) = digits.splitAt(index)\n        val next = sorted.find(_ > digits(index)).get\n        val (newLeft, newRight) = right.partition(_ == next)\n        (left ::: List(next) ::: newRight ::: newLeft).mkString.toLong\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122898,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8vnsjf8l.scala:16:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8vnsjf8l.scala:17:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8vnsjf8l.scala:18:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.toString.toInt)\n        val sorted = digits.sorted\n        val sortedRev = sorted.reverse\n        val index = digits.indexOfSlice(sortedRev)\n        if (index == 0) {\n            -1\n        } else {\n            val (left, right) = digits.splitAt(index)\n            val (leftRev, rightRev) = left.reverse.splitAt(left.length - 1)\n            val leftRevSorted = leftRev.sorted\n            val leftRevSortedRev = leftRevSorted.reverse\n            val leftRevSortedRevTail = leftRevSortedRev.tail\n            val leftRevSortedRevTailSorted = leftRevSortedRevTail.sorted\n            val leftRevSortedRevTailSortedRev = leftRevSortedRevTailSorted.reverse\n            val leftRevSortedRevTailSortedRevTail = leftRevSortedRevTailSortedRev.tail\n            val leftRevSortedRevTailSortedRevTailSorted = leftRevSortedRevTailSortedRevTail.sorted\n            val leftRevSortedRevTailSortedRevTailSortedRev = leftRevSortedRevTailSortedRevTailSorted.reverse\n            val leftRevSortedRevTailSortedRevTailSortedRevTail = leftRevSortedRevTailSortedRevTailSortedRev.tail\n            val leftRevSortedRevTailSortedRevTailSortedRevTailSorted = leftRevSortedRevTailSortedRevTailSortedRevTail.sorted\n            val leftRevSortedRevTailSortedRevTailSortedRevTailSortedRev = leftRevSortedRevTailSortedRevTailSortedRevTailSorted.reverse\n            val leftRevSortedRevTailSortedRevTailSortedRevTailSortedRevTail = leftRevSortedRevTailSortedRevTailSortedRevTailSortedRev.tail\n            val leftRevSortedRevTailSortedRevTailSortedRevTailSortedRevTailSorted = leftRevSortedRevT\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122898,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp6nwvadc9.scala:36:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6nwvadc9.scala:27:84 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mleftRevSortedRevTailSortedRevTailSortedRevTailSortedRevTailSorted\u001b[0m = leftRevSortedRevT\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                    ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Not found: leftRevSortedRevT\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6nwvadc9.scala:30:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6nwvadc9.scala:31:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6nwvadc9.scala:32:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmp6nwvadc9.scala:29:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.map(_.asDigit).toList\n        val sorted = digits.sorted\n        val sortedReverse = sorted.reverse\n        val sortedReverseIndex = sortedReverse.indexOf(digits.last)\n        if (sortedReverseIndex == 0) return -1\n        val lastDigit = sortedReverse(sortedReverseIndex - 1)\n        val lastDigitIndex = digits.indexOf(lastDigit)\n        val (left, right) = digits.splitAt(lastDigitIndex)\n        val newDigits = left ::: (digits.last :: right.tail.sorted)\n        newDigits.mkString.toLong\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122899,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmppveg_4c4.scala:18:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmppveg_4c4.scala:19:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmppveg_4c4.scala:20:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.toString.toInt)\n        val sorted = digits.sorted\n        val sortedReverse = sorted.reverse\n        val sortedReverseStr = sortedReverse.mkString\n        val sortedStr = sorted.mkString\n        val index = digits.indexOf(sortedReverse.head)\n        val (left, right) = digits.splitAt(index)\n        val leftStr = left.mkString\n        val rightStr = right.mkString\n        val rightSorted = right.sorted\n        val rightSortedStr = rightSorted.mkString\n        if (sortedStr == n.toString) {\n            -1\n        } else if (rightSortedStr == rightStr) {\n            val rightSortedReverse = rightSorted.reverse\n            val rightSortedReverseStr = rightSortedReverse.mkString\n            val rightSortedReverseStr2 = rightSortedReverse.tail.mkString\n            val leftStr2 = leftStr + rightSortedReverse.head\n            val result = leftStr2 + rightSortedReverseStr2\n            result.toLong\n        } else {\n            val rightSortedReverse = rightSorted.reverse\n            val rightSortedReverseStr = rightSortedReverse.mkString\n            val rightSortedReverseStr2 = rightSortedReverse.tail.mkString\n            val leftStr2 = leftStr + rightSortedReverse.head\n            val result = leftStr2 + rightSortedReverseStr2\n            result.toLong\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122899,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmptg28o6t_.scala:36:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmptg28o6t_.scala:37:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmptg28o6t_.scala:38:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.map(_.asDigit).toList\n        val sortedDigits = digits.sorted\n        val maxDigit = sortedDigits.last\n        val maxDigitIndex = digits.indexOf(maxDigit)\n        val maxDigitIndex2 = digits.lastIndexOf(maxDigit)\n        val maxDigitIndex3 = digits.indexOf(maxDigit, maxDigitIndex2 + 1)\n        if (maxDigitIndex == digits.length - 1) {\n            if (maxDigitIndex2 == digits.length - 2) {\n                if (maxDigitIndex3 == -1) {\n                    val newDigits = digits.take(digits.length - 1)\n                    val newSortedDigits = newDigits.sorted\n                    val newMaxDigit = newSortedDigits.last\n                    val newMaxDigitIndex = newDigits.indexOf(newMaxDigit)\n                    val newMaxDigitIndex2 = newDigits.lastIndexOf(newMaxDigit)\n                    val newMaxDigitIndex3 = newDigits.indexOf(newMaxDigit, newMaxDigitIndex2 + 1)\n                    if (newMaxDigitIndex == newDigits.length - 1) {\n                        if (newMaxDigitIndex2 == newDigits.length - 2) {\n                            if (newMaxDigitIndex3 == -1) {\n                                None\n                            } else {\n                                val newDigits2 = newDigits.take(newMaxDigitIndex3) ++ List(newDigits(newMaxDigitIndex2)) ++ List(newDigits(newMaxDigitIndex3)) ++ newDigits.drop(newMaxDigitIndex3 + 1)\n                                val newSortedDigits2 = newDigits2.sorted\n                                val newMaxDigit2 = newSortedDigits2.last\n                                val newMaxDigitIndex4 = newDigits2.indexOf(newMaxDigit2)\n                                val newMaxDigitIndex5 = newDigits2.lastIndexOf(newMaxDigit2)\n                                val newMaxDigitIndex6 = newDigits2.indexOf(new\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122899,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpuau6g5pz.scala:32:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpuau6g5pz.scala:40:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuau6g5pz.scala:34:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuau6g5pz.scala:35:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuau6g5pz.scala:36:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmpuau6g5pz.scala:33:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m33 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.asDigit)\n        val sortedDigits = digits.sorted\n        val sortedDigitsReversed = sortedDigits.reverse\n        val sortedDigitsReversedString = sortedDigitsReversed.mkString\n        val sortedDigitsReversedLong = sortedDigitsReversedString.toLong\n        if (sortedDigitsReversedLong == n) {\n            return -1\n        }\n        val sortedDigitsReversedStringBuffer = new StringBuffer(sortedDigitsReversedString)\n        val sortedDigitsReversedStringBufferReversed = sortedDigitsReversedStringBuffer.reverse\n        val sortedDigitsReversedStringBufferReversedString = sortedDigitsReversedStringBufferReversed.toString\n        val sortedDigitsReversedStringBufferReversedStringLong = sortedDigitsReversedStringBufferReversedString.toLong\n        sortedDigitsReversedStringBufferReversedStringLong\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122899,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpzrvywlsb.scala:21:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpzrvywlsb.scala:22:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpzrvywlsb.scala:23:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.map(_.asDigit).toList\n        val sorted = digits.sorted\n        val index = digits.indexOf(sorted.last)\n        val (head, tail) = digits.splitAt(index)\n        val (head1, head2) = head.splitAt(head.length - 1)\n        val head3 = head2 :+ head1.head\n        val head4 = head3.sorted\n        val result = head4 ::: tail\n        if (result.mkString.toLong > n) result.mkString.toLong else -1\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122899,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmph59_h9ux.scala:17:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmph59_h9ux.scala:18:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmph59_h9ux.scala:19:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.map(_.asDigit).toList\n        val sorted = digits.sorted\n        val sortedReverse = sorted.reverse\n        val index = digits.lastIndexWhere(_ != sortedReverse.head)\n        if (index == -1) None\n        else {\n            val (left, right) = digits.splitAt(index)\n            val (left2, right2) = right.splitAt(1)\n            val (left3, right3) = left2.splitAt(1)\n            val left4 = left3.head :: left.tail\n            val right4 = right3.head :: right2.tail\n            val right5 = right4.sorted\n            val result = (left4 ::: right5).mkString.toLong\n            if (result == n) None\n            else Some(result)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122900,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2z6j8p3w.scala:24:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2z6j8p3w.scala:25:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2z6j8p3w.scala:26:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.asDigit)\n        val (left, right) = digits.splitAt(digits.length - 1)\n        val sortedRight = right.sorted\n        val (min, max) = (sortedRight.head, sortedRight.last)\n        if (min == max) return -1\n        val (leftIndex, rightIndex) = (left.indexOf(max), sortedRight.indexOf(min))\n        val newLeft = left.updated(leftIndex, min)\n        val newRight = sortedRight.updated(rightIndex, max)\n        (newLeft ++ newRight).mkString.toLong\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122900,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpy1zk4khv.scala:17:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpy1zk4khv.scala:18:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpy1zk4khv.scala:19:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toCharArray.map(_.asDigit)\n        val sorted = digits.sorted.reverse\n        if (digits.deep == sorted.deep) {\n            return -1\n        }\n        val index = digits.lastIndexWhere(_ < digits.last)\n        val newDigits = digits.updated(index, digits.last).updated(digits.length - 1, digits(index))\n        val newDigits2 = newDigits.slice(0, index + 1) ++ newDigits.slice(index + 1, newDigits.length).sorted.reverse\n        newDigits2.mkString.toLong\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122902,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7xjkgkav.scala:8:19 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mif\u001b[0m (digits.deep == sorted.deep) {\n\u001b[31m\u001b[31m  |\u001b[0m            ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m            value deep is not a member of Array[Int]\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7xjkgkav.scala:17:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7xjkgkav.scala:18:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7xjkgkav.scala:19:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.toString.toInt)\n        val sortedDigits = digits.sorted\n        val sortedDigitsReversed = sortedDigits.reverse\n        val index = digits.indexOfSlice(sortedDigitsReversed)\n        if (index == -1) -1\n        else {\n            val (left, right) = digits.splitAt(index)\n            val (leftReversed, rightReversed) = (left.reverse, right.reverse)\n            val (leftReversedSorted, rightReversedSorted) = (leftReversed.sorted, rightReversed.sorted)\n            val (leftReversedSortedReversed, rightReversedSortedReversed) = (leftReversedSorted.reverse, rightReversedSorted.reverse)\n            val (leftReversedSortedReversedTail, rightReversedSortedReversedHead) = (leftReversedSortedReversed.tail, rightReversedSortedReversed.head)\n            val (leftReversedSortedReversedTailSorted, rightReversedSortedReversedHeadSorted) = (leftReversedSortedReversedTail.sorted, rightReversedSortedReversedHead.sorted)\n            val (leftReversedSortedReversedTailSortedReversed, rightReversedSortedReversedHeadSortedReversed) = (leftReversedSortedReversedTailSorted.reverse, rightReversedSortedReversedHeadSorted.reverse)\n            val (leftReversedSortedReversedTailSortedReversedHead, rightReversedSortedReversedHeadSortedReversedHead) = (leftReversedSortedReversedTailSortedReversed.head, rightReversedSortedReversedHeadSortedReversed.head)\n            val (leftReversedSortedReversedTailSortedReversedHeadTail, rightReversedSortedReversedHeadSortedReversedHeadTail) = (left\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122904,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpb88z7w2v.scala:21:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpb88z7w2v.scala:29:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpb88z7w2v.scala:17:168 -----------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            \u001b[33mval\u001b[0m (leftReversedSortedReversedTailSorted, rightReversedSortedReversedHeadSorted) = (leftReversedSortedReversedTail.sorted, rightReversedSortedReversedHead.sorted)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     value sorted is not a member of Int\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpb88z7w2v.scala:18:197 -----------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            \u001b[33mval\u001b[0m (leftReversedSortedReversedTailSortedReversed, rightReversedSortedReversedHeadSortedReversed) = (leftReversedSortedReversedTailSorted.reverse, rightReversedSortedReversedHeadSorted.reverse)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue reverse is not a member of Nothing, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Ordering.Implicits.seqOrdering\n\u001b[31m   |\u001b[0m  import math.Ordering.Implicits.sortedSetOrdering\n\u001b[31m   |\u001b[0m  import math.Ordering.Iterable\n\u001b[31m   |\u001b[0m  import math.Ordering.Option\n\u001b[31m   |\u001b[0m  import math.Ordering.comparatorToOrdering\n\u001b[31m   |\u001b[0m  import math.Ordering.ordered\n\u001b[31m   |\u001b[0m  import collection.c",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.asDigit)\n        val sorted = digits.sorted\n        val sortedReverse = sorted.reverse\n        val index = digits.indexOf(sortedReverse.head)\n        val (left, right) = digits.splitAt(index)\n        val rightSorted = right.sorted\n        val rightSortedReverse = rightSorted.reverse\n        val rightSortedReverseTail = rightSortedReverse.tail\n        val rightSortedReverseHead = rightSortedReverse.head\n        val rightSortedReverseTailSorted = rightSortedReverseTail.sorted\n        val rightSortedReverseTailSortedReverse = rightSortedReverseTailSorted.reverse\n        val rightSortedReverseTailSortedReverseHead = rightSortedReverseTailSortedReverse.head\n        val rightSortedReverseTailSortedReverseTail = rightSortedReverseTailSortedReverse.tail\n        val rightSortedReverseTailSortedReverseTailSorted = rightSortedReverseTailSortedReverseTail.sorted\n        val rightSortedReverseTailSortedReverseTailSortedReverse = rightSortedReverseTailSortedReverseTailSorted.reverse\n        val rightSortedReverseTailSortedReverseTailSortedReverseHead = rightSortedReverseTailSortedReverseTailSortedReverse.head\n        val rightSortedReverseTailSortedReverseTailSortedReverseTail = rightSortedReverseTailSortedReverseTailSortedReverse.tail\n        val rightSortedReverseTailSortedReverseTailSortedReverseTailSorted = rightSortedReverseTailSortedReverseTailSortedReverseTail.sorted\n        val rightSortedReverseTailSortedReverseTailSortedRever\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122900,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp95v4jsit.scala:25:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp95v4jsit.scala:27:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp95v4jsit.scala:28:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp95v4jsit.scala:29:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.asDigit)\n        val sorted = digits.sorted\n        val index = digits.lastIndexWhere(x => x < sorted.last)\n        if (index == -1) -1\n        else {\n            val (left, right) = digits.splitAt(index)\n            val (left2, right2) = right.splitAt(right.indexWhere(x => x > left.last))\n            val newRight = left2.head :: right2.tail\n            val newLeft = left.init ::: List(right2.head)\n            (newLeft ::: newRight.sorted).mkString.toLong\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122901,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2nczg5lu.scala:19:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2nczg5lu.scala:20:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2nczg5lu.scala:21:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.toString.toInt)\n        val sortedDigits = digits.sorted\n        val sortedDigitsReversed = sortedDigits.reverse\n        val index = digits.indexOf(sortedDigitsReversed.head)\n        val (left, right) = digits.splitAt(index)\n        val newDigits = left ::: sortedDigitsReversed\n        val newNumber = newDigits.mkString.toLong\n        if (newNumber == n) -1 else newNumber\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122900,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpoyy5cllc.scala:16:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpoyy5cllc.scala:17:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpoyy5cllc.scala:18:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.asDigit)\n        val sorted = digits.sorted\n        val (left, right) = digits.splitAt(digits.length - 1)\n        val (leftSorted, rightSorted) = sorted.splitAt(sorted.length - 1)\n        if (left == leftSorted && right == rightSorted) {\n            -1\n        } else {\n            val (leftSortedTail, rightSortedHead) = leftSorted.splitAt(leftSorted.length - 1)\n            val (leftTail, rightHead) = left.splitAt(left.length - 1)\n            val leftTailSorted = leftTail.sorted\n            val rightHeadSorted = rightHead.sorted\n            val leftTailSortedTail = leftTailSorted.tail\n            val rightHeadSortedTail = rightHeadSorted.tail\n            val rightHeadSortedHead = rightHeadSorted.head\n            val leftTailSortedHead = leftTailSorted.head\n            val leftTailSortedTailSorted = leftTailSortedTail.sorted\n            val rightHeadSortedTailSorted = rightHeadSortedTail.sorted\n            val leftTailSortedTailSortedHead = leftTailSortedTailSorted.head\n            val rightHeadSortedTailSortedHead = rightHeadSortedTailSorted.head\n            val leftTailSortedTailSortedTail = leftTailSortedTailSorted.tail\n            val rightHeadSortedTailSortedTail = rightHeadSortedTailSorted.tail\n            val leftTailSortedTailSortedTailSorted = leftTailSortedTailSortedTail.sorted\n            val rightHeadSortedTailSortedTailSorted = rightHeadSortedTailSortedTail.sorted\n            val leftTailSortedTailSortedTailSortedHead = leftTailSortedTailSortedTailSorted.head\n            val rightHeadSortedTailSortedTailSortedHead = rightHeadSortedTailSortedTailS\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122901,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpfovabyni.scala:39:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfovabyni.scala:30:58 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mrightHeadSortedTailSortedTailSortedHead\u001b[0m = rightHeadSortedTailSortedTailS\n\u001b[31m\u001b[31m   |\u001b[0m                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                               Not found: rightHeadSortedTailSortedTailS\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfovabyni.scala:33:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfovabyni.scala:34:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfovabyni.scala:35:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmpfovabyni.scala:32:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m32 |\u001b[0m    \u001b[33mdef\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.map(_.asDigit).toList\n        val sorted = digits.sorted\n        val sortedReverse = sorted.reverse\n        val index = digits.indexOf(sortedReverse.head)\n        val (left, right) = digits.splitAt(index)\n        val newDigits = left ::: sortedReverse.tail ::: List(sortedReverse.head)\n        val newNumber = newDigits.mkString.toLong\n        if (newNumber > n) newNumber else -1\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122901,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpzb3c2umn.scala:16:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpzb3c2umn.scala:17:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpzb3c2umn.scala:18:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.asDigit)\n        val sorted = digits.sorted\n        val max = sorted.last\n        val index = digits.indexOf(max)\n        val (left, right) = digits.splitAt(index)\n        val next = sorted.filter(_ > max).min\n        val (left2, right2) = left.splitAt(left.indexOf(next))\n        val result = (left2 :+ max) ++ (right2 :+ next) ++ right\n        if (result.mkString.toLong == n) -1 else result.mkString.toLong\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122903,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpabvlw11e.scala:17:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpabvlw11e.scala:18:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpabvlw11e.scala:19:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.map(_.asDigit).toList\n        val sortedDigits = digits.sorted\n        val sortedDigitsReversed = sortedDigits.reverse\n        val sortedDigitsReversedMap = sortedDigitsReversed.zipWithIndex.toMap\n        val digitsReversed = digits.reverse\n        val digitsReversedMap = digitsReversed.zipWithIndex.toMap\n        val digitsReversedSorted = digitsReversed.sorted\n        val digitsReversedSortedMap = digitsReversedSorted.zipWithIndex.toMap\n        val digitsReversedSortedReversed = digitsReversedSorted.reverse\n        val digitsReversedSortedReversedMap = digitsReversedSortedReversed.zipWithIndex.toMap\n        val digitsReversedSortedReversedSet = digitsReversedSortedReversed.toSet\n        val digitsReversedSortedReversedSetMap = digitsReversedSortedReversedSet.zipWithIndex.toMap\n        val digitsReversedSortedReversedSetMapReversed = digitsReversedSortedReversedSetMap.map(_.swap)\n        val digitsReversedSortedReversedSetMapReversedMap = digitsReversedSortedReversedSetMapReversed.toMap\n        val digitsReversedSortedReversedSetMapReversedMapMap = digitsReversedSortedReversedSetMapReversedMap.map(_.swap)\n        val digitsReversedSortedReversedSetMapReversedMapMapMap = digitsReversedSortedReversedSetMapReversedMapMap.toMap\n        val digitsReversedSortedReversedSetMapReversedMapMapMapMap = digitsReversedSortedReversedSetMapReversedMapMapMap.map(_.swap)\n        val digitsReversedSortedReversedSetMapReversedMapMapMapMapMap = digitsReversedSortedReversedSetMapReversedMapMapMapMap.toMap\n        val digitsReversedSortedReversedSetMapReversedMap\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122903,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmprymtsoy3.scala:25:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprymtsoy3.scala:27:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprymtsoy3.scala:28:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprymtsoy3.scala:29:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.asDigit)\n        val sorted = digits.sorted\n        val sortedReverse = sorted.reverse\n        val index = digits.indexOfSlice(sortedReverse)\n        if (index == -1) -1\n        else {\n            val (left, right) = digits.splitAt(index)\n            val (leftSorted, rightSorted) = (left.sorted, right.sorted)\n            val (leftSortedReverse, rightSortedReverse) = (leftSorted.reverse, rightSorted.reverse)\n            val (leftSortedReverseTail, rightSortedReverseTail) = (leftSortedReverse.tail, rightSortedReverse.tail)\n            val (leftSortedReverseTailSorted, rightSortedReverseTailSorted) = (leftSortedReverseTail.sorted, rightSortedReverseTail.sorted)\n            val (leftSortedReverseTailSortedReverse, rightSortedReverseTailSortedReverse) = (leftSortedReverseTailSorted.reverse, rightSortedReverseTailSorted.reverse)\n            val (leftSortedReverseTailSortedReverseHead, rightSortedReverseTailSortedReverseHead) = (leftSortedReverseTailSortedReverse.head, rightSortedReverseTailSortedReverse.head)\n            val (leftSortedReverseTailSortedReverseHeadSorted, rightSortedReverseTailSortedReverseHeadSorted) = (leftSortedReverseTailSortedReverseHead.sorted, rightSortedReverseTailSortedReverseHead.sorted)\n            val (leftSortedReverseTailSortedReverseHeadSortedReverse, rightSortedReverseTailSortedReverseHeadSortedReverse) = (leftSortedReverseTailSortedReverseHeadSorted.reverse, rightSortedR\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122908,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmppyisdfw7.scala:21:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmppyisdfw7.scala:29:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmppyisdfw7.scala:19:152 -----------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            \u001b[33mval\u001b[0m (leftSortedReverseTailSortedReverseHeadSorted, rightSortedReverseTailSortedReverseHeadSorted) = (leftSortedReverseTailSortedReverseHead.sorted, rightSortedReverseTailSortedReverseHead.sorted)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     value sorted is not a member of Int\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmppyisdfw7.scala:19:200 -----------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            \u001b[33mval\u001b[0m (leftSortedReverseTailSortedReverseHeadSorted, rightSortedReverseTailSortedReverseHeadSorted) = (leftSortedReverseTailSortedReverseHead.sorted, rightSortedReverseTailSortedReverseHead.sorted)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     value sorted is not a member of Int\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmppyisdfw7.scala:20:172 -----------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m            \u001b[33mval\u001b[0m (leftSortedReverseTailSortedReverseHeadSortedReverse, rightSortedReverseTailSortedReverseHeadSortedReverse) = (leftSortedReverseTailSortedReverseHeadSorted.reverse, rightSortedR\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                          ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.map(_.asDigit).toList\n        val sorted = digits.sorted\n        val reversed = sorted.reverse\n        val reversedIndex = digits.indexOf(reversed.head)\n        val (left, right) = digits.splitAt(reversedIndex)\n        val (left1, right1) = right.splitAt(1)\n        val left2 = left1 ++ left\n        val right2 = right1 ++ right.drop(1)\n        val result = left2 ++ right2.sorted\n        if (result.head == 0) -1 else result.mkString.toLong\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122904,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpm0c6dnf2.scala:18:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpm0c6dnf2.scala:19:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpm0c6dnf2.scala:20:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.asDigit)\n        val sorted = digits.sorted\n        val max = sorted.last\n        val index = digits.indexOf(max)\n        val left = digits.take(index)\n        val right = digits.drop(index + 1)\n        val next = sorted.dropWhile(_ != max).tail.head\n        val nextIndex = left.indexOf(next)\n        val nextLeft = left.take(nextIndex)\n        val nextRight = left.drop(nextIndex + 1)\n        val result = nextLeft ++ List(max) ++ nextRight ++ List(next) ++ right\n        if (result.head == 0) -1 else result.mkString.toLong\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122905,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkzbqe06c.scala:20:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkzbqe06c.scala:21:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkzbqe06c.scala:22:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.map(_.asDigit).toList\n        val sorted = digits.sorted\n        val sortedReversed = sorted.reverse\n        val sortedReversedIndex = sortedReversed.zipWithIndex.toMap\n        val sortedIndex = sorted.zipWithIndex.toMap\n        val sortedReversedIndexRev = sortedReversedIndex.map(_.swap)\n        val sortedIndexRev = sortedIndex.map(_.swap)\n        val digitsIndex = digits.zipWithIndex.toMap\n        val digitsIndexRev = digitsIndex.map(_.swap)\n        val digitsReversed = digits.reverse\n        val digitsReversedIndex = digitsReversed.zipWithIndex.toMap\n        val digitsReversedIndexRev = digitsReversedIndex.map(_.swap)\n        val digitsReversedIndexRevSorted = digitsReversedIndexRev.toList.sortBy(_._1)\n        val digitsReversedIndexRevSortedIndex = digitsReversedIndexRevSorted.zipWithIndex.toMap\n        val digitsReversedIndexRevSortedIndexRev = digitsReversedIndexRevSortedIndex.map(_.swap)\n        val digitsReversedIndexRevSortedIndexRevSorted = digitsReversedIndexRevSortedIndexRev.toList.sortBy(_._1)\n        val digitsReversedIndexRevSortedIndexRevSortedIndex = digitsReversedIndexRevSortedIndexRevSorted.zipWithIndex.toMap\n        val digitsReversedIndexRevSortedIndexRevSortedIndexRev = digitsReversedIndexRevSortedIndexRevSortedIndex.map(_.swap)\n        val digitsReversedIndexRevSortedIndexRevSortedIndexRevSorted = digitsReversedIndexRevSortedIndexRevSortedIndexRev.toList.sortBy(_._1)\n        val digitsReversedIndexRevSortedIndexRevSortedIndexRevSortedIndex = digitsReversedIndexRevSortedIndexRevSortedIndexRevSorted.zipWithIndex.toMap\n        val digitsReversedIndexRevSortedIndexRevSortedIndexRevSortedIndexRev = digitsReversedIndexRevSortedIndexRevSorted\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122905,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpapwdcmx2.scala:29:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpapwdcmx2.scala:30:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpapwdcmx2.scala:31:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.asDigit)\n        val sortedDigits = digits.sorted\n        val sortedDigitsReversed = sortedDigits.reverse\n        val sortedDigitsReversedTail = sortedDigitsReversed.tail\n        val sortedDigitsReversedTailHead = sortedDigitsReversedTail.head\n        val sortedDigitsReversedHead = sortedDigitsReversed.head\n        val sortedDigitsReversedTailTail = sortedDigitsReversedTail.tail\n        val sortedDigitsReversedTailTailSorted = sortedDigitsReversedTailTail.sorted\n        val sortedDigitsReversedTailTailSortedReversed = sortedDigitsReversedTailTailSorted.reverse\n        val sortedDigitsReversedTailTailSortedReversedHead = sortedDigitsReversedTailTailSortedReversed.head\n        val sortedDigitsReversedTailTailSortedReversedTail = sortedDigitsReversedTailTailSortedReversed.tail\n        val sortedDigitsReversedTailTailSortedReversedTailSorted = sortedDigitsReversedTailTailSortedReversedTail.sorted\n        val sortedDigitsReversedTailTailSortedReversedTailSortedReversed = sortedDigitsReversedTailTailSortedReversedTailSorted.reverse\n        val sortedDigitsReversedTailTailSortedReversedTailSortedReversedHead = sortedDigitsReversedTailTailSortedReversedTailSortedReversed.head\n        val sortedDigitsReversedTailTailSortedReversedTailSortedReversedTail = sortedDigitsReversedTailTailSortedReversedTailSortedReversed.tail\n        val sortedDigitsReversedTailTailSortedReversedTailSortedReversedTailSorted = sortedDigitsReversedTailTailSortedReversedTailSortedRe\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122905,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5j77b5q_.scala:21:85 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msortedDigitsReversedTailTailSortedReversedTailSortedReversedTailSorted\u001b[0m = sortedDigitsReversedTailTailSortedReversedTailSortedRe\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m       Not found: sortedDigitsReversedTailTailSortedReversedTailSortedRe\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5j77b5q_.scala:24:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5j77b5q_.scala:25:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5j77b5q_.scala:26:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.map(_.asDigit).toList\n        val sorted = digits.sorted\n        val sortedReverse = sorted.reverse\n        val index = digits.indexOf(sortedReverse.head)\n        val (left, right) = digits.splitAt(index)\n        val (leftSorted, rightSorted) = (left.sorted, right.sorted)\n        val (leftSortedReverse, rightSortedReverse) = (leftSorted.reverse, rightSorted.reverse)\n        val (leftSortedReverseTail, rightSortedReverseTail) = (leftSortedReverse.tail, rightSortedReverse.tail)\n        val (leftSortedReverseTailSorted, rightSortedReverseTailSorted) = (leftSortedReverseTail.sorted, rightSortedReverseTail.sorted)\n        val (leftSortedReverseTailSortedReverse, rightSortedReverseTailSortedReverse) = (leftSortedReverseTailSorted.reverse, rightSortedReverseTailSorted.reverse)\n        val result = leftSortedReverse.head :: leftSortedReverseTailSortedReverse ::: rightSortedReverseTailSortedReverse\n        if (result.mkString.toLong > n) result.mkString.toLong else -1\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122905,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_qm6zdem.scala:20:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_qm6zdem.scala:21:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_qm6zdem.scala:22:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.asDigit)\n        val (left, right) = digits.splitAt(digits.length - 1)\n        val sortedRight = right.sorted\n        val min = sortedRight.head\n        val minIndex = right.indexOf(min)\n        val max = left.max\n        if (min > max) {\n            val (left1, right1) = left.splitAt(left.indexOf(max))\n            val left2 = left1 :+ min\n            val right2 = right1.drop(1) :+ max\n            (left2 ::: sortedRight.drop(1)).mkString.toLong\n        } else {\n            val (left1, right1) = left.splitAt(left.indexOf(max))\n            val left2 = left1 :+ min\n            val right2 = right1.drop(1) :+ max\n            (left2 ::: sortedRight.drop(1)).mkString.toLong\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122905,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpz9tf_6ov.scala:25:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpz9tf_6ov.scala:26:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpz9tf_6ov.scala:27:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.toString.toInt)\n        val sortedDigits = digits.sorted\n        if (digits == sortedDigits.reverse) return -1\n        val index = digits.lastIndexWhere(_ < digits.last)\n        val newDigits = digits.updated(index, digits.last).updated(digits.length - 1, digits(index))\n        val sortedNewDigits = newDigits.sorted\n        val result = (newDigits.take(index) ::: sortedNewDigits.drop(index)).mkString.toLong\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122906,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmo22sxcx.scala:16:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmo22sxcx.scala:17:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmo22sxcx.scala:18:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.asDigit)\n        val sorted = digits.sorted\n        val index = digits.lastIndexWhere(_ < digits.last)\n        if (index == -1) return -1\n        val (left, right) = digits.splitAt(index)\n        val pivot = digits(index)\n        val (left1, right1) = right.partition(_ > pivot)\n        val newRight = (left1.min :: right1).sorted\n        val newLeft = left ::: newRight.tail\n        (newLeft ::: List(newRight.head)).mkString.toLong\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122908,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpe6wrii3e.scala:18:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpe6wrii3e.scala:19:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpe6wrii3e.scala:20:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.toString.toInt).sorted\n        val digitsReverse = digits.reverse\n        val digitsReverseString = digitsReverse.mkString\n        val digitsReverseInt = digitsReverseString.toLong\n        if (digitsReverseInt == n) {\n            \"Not possible\"\n        } else {\n            val digitsReverseIntString = digitsReverseInt.toString\n            val digitsReverseIntStringList = digitsReverseIntString.toList\n            val digitsReverseIntStringListReverse = digitsReverseIntStringList.reverse\n            val digitsReverseIntStringListReverseString = digitsReverseIntStringListReverse.mkString\n            val digitsReverseIntStringListReverseInt = digitsReverseIntStringListReverseString.toLong\n            digitsReverseIntStringListReverseInt\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122907,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpcq7q5i3q.scala:22:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpcq7q5i3q.scala:23:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpcq7q5i3q.scala:24:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.asDigit)\n        val sorted = digits.sorted\n        val sortedRev = sorted.reverse\n        val index = digits.indexOf(sortedRev.head)\n        val (left, right) = digits.splitAt(index)\n        val (leftRev, rightRev) = (left.reverse, right.reverse)\n        val (leftRevHead, leftRevTail) = (leftRev.head, leftRev.tail)\n        val (rightRevHead, rightRevTail) = (rightRev.head, rightRev.tail)\n        if (leftRevHead < rightRevHead) {\n            val newLeftRev = leftRevTail :+ rightRevHead\n            val newRightRev = leftRevHead :: rightRevTail\n            (newLeftRev.reverse ::: newRightRev.reverse).mkString.toLong\n        } else {\n            -1\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122906,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkcyyqwbu.scala:23:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkcyyqwbu.scala:24:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkcyyqwbu.scala:25:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.map(_.asDigit).toList\n        val sorted = digits.sorted\n        val sortedReversed = sorted.reverse\n        val index = digits.indexOf(sortedReversed.head)\n        val first = digits.take(index)\n        val second = digits.drop(index)\n        val secondSorted = second.sorted\n        val secondSortedReversed = secondSorted.reverse\n        val secondSortedReversedTail = secondSortedReversed.tail\n        val secondSortedReversedHead = secondSortedReversed.head\n        val secondSortedReversedTailSorted = secondSortedReversedTail.sorted\n        val secondSortedReversedTailSortedReversed = secondSortedReversedTailSorted.reverse\n        val secondSortedReversedTailSortedReversedHead = secondSortedReversedTailSortedReversed.head\n        val secondSortedReversedTailSortedReversedTail = secondSortedReversedTailSortedReversed.tail\n        val secondSortedReversedTailSortedReversedTailSorted = secondSortedReversedTailSortedReversedTail.sorted\n        val secondSortedReversedTailSortedReversedTailSortedReversed = secondSortedReversedTailSortedReversedTailSorted.reverse\n        val secondSortedReversedTailSortedReversedTailSortedReversedHead = secondSortedReversedTailSortedReversedTailSortedReversed.head\n        val secondSortedReversedTailSortedReversedTailSortedReversedTail = secondSortedReversedTailSortedReversedTailSortedReversed.tail\n        val secondSortedReversedTailSortedReversedTailSortedReversedTailSorted = secondSortedReversedTailSortedReversedTailSortedReversedTail.sorted\n        val secondSortedReversedTailSortedReversedT\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122907,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmprr60x8j3.scala:26:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprr60x8j3.scala:28:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprr60x8j3.scala:29:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprr60x8j3.scala:30:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.toString.toInt)\n        val sorted = digits.sorted\n        val sortedReverse = sorted.reverse\n        val index = sortedReverse.indexOf(digits.last)\n        if (index == 0) return -1\n        val last = sortedReverse(index - 1)\n        val newDigits = digits.filter(_ != last) :+ last\n        newDigits.mkString(\"\").toLong\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122907,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8z4sh_5d.scala:16:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8z4sh_5d.scala:17:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8z4sh_5d.scala:18:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.map(_.asDigit).toList\n        val sorted = digits.sorted\n        val max = sorted.last\n        val min = sorted.head\n        val maxIndex = digits.indexOf(max)\n        val minIndex = digits.indexOf(min)\n        if (maxIndex == minIndex) return \"Not possible\"\n        val (left, right) = digits.splitAt(maxIndex)\n        val (left1, right1) = right.splitAt(1)\n        val (left2, right2) = left.splitAt(minIndex)\n        val (left3, right3) = right2.splitAt(1)\n        val result = (left2 ::: left3 ::: left1 ::: right3 ::: right1).mkString\n        if (result.head == '0') \"Not possible\" else result\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122908,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4o0xrhim.scala:21:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4o0xrhim.scala:22:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4o0xrhim.scala:23:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.asDigit)\n        val sorted = digits.sorted.reverse\n        val (left, right) = digits.splitAt(digits.length - 1)\n        val (leftSorted, rightSorted) = sorted.splitAt(sorted.length - 1)\n        if (left == leftSorted && right == rightSorted) -1\n        else {\n            val (leftSorted2, rightSorted2) = sorted.splitAt(sorted.length - 2)\n            val (left2, right2) = digits.splitAt(digits.length - 2)\n            if (left2 == leftSorted2 && right2 == rightSorted2) {\n                val (left3, right3) = digits.splitAt(digits.length - 3)\n                val (leftSorted3, rightSorted3) = sorted.splitAt(sorted.length - 3)\n                if (left3 == leftSorted3 && right3 == rightSorted3) -1\n                else {\n                    val (left4, right4) = digits.splitAt(digits.length - 4)\n                    val (leftSorted4, rightSorted4) = sorted.splitAt(sorted.length - 4)\n                    if (left4 == leftSorted4 && right4 == rightSorted4) -1\n                    else {\n                        val (left5, right5) = digits.splitAt(digits.length - 5)\n                        val (leftSorted5, rightSorted5) = sorted.splitAt(sorted.length - 5)\n                        if (left5 == leftSorted5 && right5 == rightSorted5) -1\n                        else {\n                            val (left6, right6) = digits.splitAt(digits.length - 6)\n                            val (leftSorted6, rightSorted6) = sorted.splitAt(sorted.length - 6)\n                            if (left6 == leftSorted6 && right6 == rightSorted6) -1\n                            else {\n                                val (left7, right7) = digits.splitAt(digits.length - 7)\n                                val (leftSorted7,\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122909,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpxq0vas26.scala:33:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpxq0vas26.scala:41:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxq0vas26.scala:35:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxq0vas26.scala:36:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxq0vas26.scala:37:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmpxq0vas26.scala:34:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m34 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n\u001b[33m\u001b[33m-- [E129] Potential Issue Warning: /tmp/tmpxq0vas26.scala:17:68 ----------------\u001b[0m\u001b[0m\n\u001b[33m17 |\u001b[0m                \u001b[33mif\u001b[0m (l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.map(_.asDigit).toList\n        val sorted = digits.sorted\n        val sortedRev = sorted.reverse\n        val index = digits.indexOf(sortedRev.head)\n        val (left, right) = digits.splitAt(index)\n        val (leftRev, rightRev) = (left.reverse, right.reverse)\n        val (leftRevHead, leftRevTail) = (leftRev.head, leftRev.tail)\n        val (rightRevHead, rightRevTail) = (rightRev.head, rightRevTail)\n        val (leftRevTailSorted, rightRevTailSorted) = (leftRevTail.sorted, rightRevTail.sorted)\n        val (leftRevTailSortedRev, rightRevTailSortedRev) = (leftRevTailSorted.reverse, rightRevTailSorted.reverse)\n        val leftRevTailSortedRevHead = leftRevTailSortedRev.head\n        val rightRevTailSortedRevHead = rightRevTailSortedRev.head\n        val leftRevTailSortedRevTail = leftRevTailSortedRev.tail\n        val rightRevTailSortedRevTail = rightRevTailSortedRev.tail\n        val leftRevTailSortedRevTailSorted = leftRevTailSortedRevTail.sorted\n        val rightRevTailSortedRevTailSorted = rightRevTailSortedRevTail.sorted\n        val leftRevTailSortedRevTailSortedRev = leftRevTailSortedRevTailSorted.reverse\n        val rightRevTailSortedRevTailSortedRev = rightRevTailSortedRevTailSorted.reverse\n        val leftRevTailSortedRevTailSortedRevHead = leftRevTailSortedRevTailSortedRev.head\n        val rightRevTailSortedRevTailSortedRevHead = rightRevTailSortedRevTailSortedRev.head\n        val leftRevTailSortedRevTailSortedRevTail = leftRevTailSortedRevTailSortedRev.tail\n        val rightRev\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122912,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjbaqegyk.scala:28:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpjbaqegyk.scala:13:27 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m (rightRevHead, rightRevTail) = (rightRev.head, rightRevTail)\n\u001b[31m\u001b[31m   |\u001b[0m                           ^\u001b[0m\n\u001b[31m   |\u001b[0m                           Recursive \u001b[33mvalue\u001b[0m \u001b[35m$4$\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpjbaqegyk.scala:15:107 -----------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m (leftRevTailSortedRev, rightRevTailSortedRev) = (leftRevTailSorted.reverse, rightRevTailSorted.reverse)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue reverse is not a member of Nothing, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Ordering.Implicits.seqOrdering\n\u001b[31m   |\u001b[0m  import math.Ordering.Implicits.sortedSetOrdering\n\u001b[31m   |\u001b[0m  import math.Ordering.Iterable\n\u001b[31m   |\u001b[0m  import math.Ordering.Option\n\u001b[31m   |\u001b[0m  import math.Ordering.comparatorToOrdering\n\u001b[31m   |\u001b[0m  import math.Ordering.ordered\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.list asScalaBuffer\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToScala.list asScalaBuffer\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpjbaqegyk.scala:17:62 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mrightRevTailSortedRevHead\u001b[0m = rightRevTailSortedRev.head\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue head is not a member of Nothing, but could be made available as ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.toString.toInt)\n        val sorted = digits.sorted\n        val sortedReverse = sorted.reverse\n        if (digits == sortedReverse) return -1\n        val index = digits.lastIndexWhere(_ < digits.last)\n        val digit = digits(index)\n        val digitIndex = sortedReverse.indexOf(digit)\n        val newDigit = sortedReverse(digitIndex + 1)\n        val newDigits = digits.updated(index, newDigit)\n        val newDigitsSorted = newDigits.sorted.reverse\n        val newDigitsSortedTail = newDigitsSorted.tail\n        val newDigitsSortedTailString = newDigitsSortedTail.foldLeft(\"\")(_ + _)\n        val newDigitString = newDigit.toString\n        val newNumber = newDigitString + newDigitsSortedTailString\n        newNumber.toLong\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122909,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6_s6th6n.scala:23:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6_s6th6n.scala:24:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6_s6th6n.scala:25:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.toString.toInt)\n        val sorted = digits.sorted\n        val sortedReverse = sorted.reverse\n        val index = digits.indexOf(sortedReverse.head)\n        if (index == 0) return -1\n        val (left, right) = digits.splitAt(index)\n        val (leftSorted, rightSorted) = (left.sorted, right.sorted)\n        val (leftSortedReverse, rightSortedReverse) = (leftSorted.reverse, rightSorted.reverse)\n        val (leftSortedReverseTail, rightSortedReverseHead) = (leftSortedReverse.tail, rightSortedReverse.head)\n        val (leftSortedReverseTailSorted, rightSortedReverseTailSorted) = (leftSortedReverseTail.sorted, rightSortedReverse.tail.sorted)\n        val result = leftSortedReverseTailSorted ::: List(rightSortedReverseHead) ::: rightSortedReverseTailSorted\n        result.mkString.toLong\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122909,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpwnmg_yk0.scala:20:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpwnmg_yk0.scala:21:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpwnmg_yk0.scala:22:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.map(_.asDigit).toList\n        val sortedDigits = digits.sorted\n        val sortedDigitsReversed = sortedDigits.reverse\n        val sortedDigitsReversedTail = sortedDigitsReversed.tail\n        val sortedDigitsReversedHead = sortedDigitsReversed.head\n        val sortedDigitsReversedTailIndex = sortedDigitsReversedTail.indexWhere(_ > sortedDigitsReversedHead)\n        if (sortedDigitsReversedTailIndex == -1) {\n            -1\n        } else {\n            val sortedDigitsReversedTailHead = sortedDigitsReversedTail(sortedDigitsReversedTailIndex)\n            val sortedDigitsReversedTailTail = sortedDigitsReversedTail.patch(sortedDigitsReversedTailIndex, Nil, 1)\n            val sortedDigitsReversedHeadTail = sortedDigitsReversedHead :: sortedDigitsReversedTailTail\n            val sortedDigitsReversedHeadTailSorted = sortedDigitsReversedHeadTail.sorted\n            val sortedDigitsReversedHeadTailSortedTail = sortedDigitsReversedHeadTailSorted.tail\n            val sortedDigitsReversedHeadTailSortedHead = sortedDigitsReversedHeadTailSorted.head\n            val sortedDigitsReversedHeadTailSortedTailHead = sortedDigitsReversedHeadTailSortedTail.head\n            val sortedDigitsReversedHeadTailSortedTailTail = sortedDigitsReversedHeadTailSortedTail.tail\n            val sortedDigitsReversedHeadTailSortedTailTailSorted = sortedDigitsReversedHeadTailSortedTailTail.sorted\n            val sortedDigitsReversedHeadTailSortedTailTailSortedReversed = sortedDigitsReversedHeadTailSortedTailTailSorted.reverse\n            val sortedDigitsReversedHeadTailSortedTailTailSortedReversedHead = sortedDig\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122909,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpsopeqhzk.scala:34:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsopeqhzk.scala:25:79 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36msortedDigitsReversedHeadTailSortedTailTailSortedReversedHead\u001b[0m = sortedDig\n\u001b[31m\u001b[31m   |\u001b[0m                                                                               ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                    Not found: sortedDig\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsopeqhzk.scala:28:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsopeqhzk.scala:29:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsopeqhzk.scala:30:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmpsopeqhzk.scala:27:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m27 |\u001b[0m    \u001b[33mdef\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.toString.toInt)\n        val sorted = digits.sorted\n        val sortedReversed = sorted.reverse\n        if (digits == sortedReversed) {\n            -1\n        } else {\n            val pivot = digits.indexWhere(x => digits.indexOf(x) != sorted.indexOf(x))\n            val pivotValue = digits(pivot)\n            val next = sortedReversed.find(_ > pivotValue).get\n            val nextIndex = digits.indexOf(next)\n            val (left, right) = digits.splitAt(nextIndex)\n            val (left2, right2) = left.splitAt(left.length - 1)\n            val result = (left2 ::: List(pivotValue) ::: right2.tail ::: List(right2.head) ::: right.tail).mkString.toLong\n            result\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122911,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpltcmlc7p.scala:23:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpltcmlc7p.scala:24:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpltcmlc7p.scala:25:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.asDigit)\n        val sorted = digits.sorted\n        val sortedReverse = sorted.reverse\n        val index = digits.indexOfSlice(sortedReverse)\n        if (index == -1) -1\n        else {\n            val (left, right) = digits.splitAt(index)\n            val min = right.min\n            val minIndex = right.indexOf(min)\n            val (left2, right2) = right.splitAt(minIndex)\n            val right3 = right2.tail\n            val left3 = left ::: List(min) ::: right3\n            left3.mkString.toLong\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122911,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpi_gkpjc4.scala:22:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpi_gkpjc4.scala:23:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpi_gkpjc4.scala:24:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.asDigit)\n        val (left, right) = digits.splitAt(digits.length - 1)\n        val (left2, right2) = right.splitAt(right.length - 1)\n        val min = right2.min\n        val minIndex = right2.indexOf(min)\n        val (left3, right3) = right2.splitAt(minIndex)\n        val right4 = min :: left3\n        val right5 = right4.sorted\n        val left4 = left ++ right5\n        left4.mkString.toLong\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122911,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpttq97iv9.scala:18:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpttq97iv9.scala:19:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpttq97iv9.scala:20:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.toString.toInt)\n        val sorted = digits.sorted\n        val sortedReverse = sorted.reverse\n        val index = digits.indexOf(sortedReverse.head)\n        if (index == 0) {\n            val (a, b) = sortedReverse.splitAt(1)\n            val c = a.head +: b.tail\n            val d = c.sorted\n            val e = d.reverse\n            val f = e.mkString.toLong\n            if (f <= n) -1 else f\n        } else {\n            val (a, b) = sortedReverse.splitAt(index)\n            val c = a.head +: b.tail\n            val d = c.sorted\n            val e = d.reverse\n            val f = e.mkString.toLong\n            if (f <= n) -1 else f\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122912,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpozl0kaa1.scala:27:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpozl0kaa1.scala:28:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpozl0kaa1.scala:29:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.asDigit)\n        val sorted = digits.sorted\n        val sortedReverse = sorted.reverse\n        val sortedReverseIndex = sortedReverse.zipWithIndex.toMap\n        val sortedIndex = sorted.zipWithIndex.toMap\n        val sortedReverseIndexReverse = sortedReverseIndex.map(_.swap)\n        val sortedIndexReverse = sortedIndex.map(_.swap)\n        val sortedReverseIndexReverseMap = sortedReverseIndexReverse.toMap\n        val sortedIndexReverseMap = sortedIndexReverse.toMap\n        val sortedReverseIndexReverseMapMap = sortedReverseIndexReverseMap.toMap\n        val sortedIndexReverseMapMap = sortedIndexReverseMap.toMap\n        val sortedReverseIndexReverseMapMapMap = sortedReverseIndexReverseMapMap.toMap\n        val sortedIndexReverseMapMapMap = sortedIndexReverseMapMap.toMap\n        val sortedReverseIndexReverseMapMapMapMap = sortedReverseIndexReverseMapMapMap.toMap\n        val sortedIndexReverseMapMapMapMap = sortedIndexReverseMapMapMap.toMap\n        val sortedReverseIndexReverseMapMapMapMapMap = sortedReverseIndexReverseMapMapMapMap.toMap\n        val sortedIndexReverseMapMapMapMapMap = sortedIndexReverseMapMapMapMap.toMap\n        val sortedReverseIndexReverseMapMapMapMapMapMap = sortedReverseIndexReverseMapMapMapMapMap.toMap\n        val sortedIndexReverseMapMapMapMapMapMap = sortedIndexReverseMapMapMapMapMap.toMap\n        val sortedReverseIndexReverseMapMapMapMapMapMapMap = sortedReverseIndexReverseMapMapMapMapMapMap.toMap\n        val sortedIndexReverseMapMapMapMapMapMapMap = sortedIndexReverseMapMapMapMapMapMap.toMap\n        val sortedReverseIndexReverseMapMapMapMapMapMapMap\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122912,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpsrhy3im8.scala:28:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsrhy3im8.scala:30:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsrhy3im8.scala:31:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsrhy3im8.scala:32:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.toString.toInt).sorted\n        val digitsReversed = digits.reverse\n        val nDigits = digits.length\n        val nDigitsReversed = digitsReversed.length\n        val nDigitsReversedMinusOne = nDigitsReversed - 1\n        val nDigitsMinusOne = nDigits - 1\n        val nDigitsMinusTwo = nDigits - 2\n        val nDigitsMinusThree = nDigits - 3\n        val nDigitsMinusFour = nDigits - 4\n        val nDigitsMinusFive = nDigits - 5\n        val nDigitsMinusSix = nDigits - 6\n        val nDigitsMinusSeven = nDigits - 7\n        val nDigitsMinusEight = nDigits - 8\n        val nDigitsMinusNine = nDigits - 9\n        val nDigitsMinusTen = nDigits - 10\n        val nDigitsMinusEleven = nDigits - 11\n        val nDigitsMinusTwelve = nDigits - 12\n        val nDigitsMinusThirteen = nDigits - 13\n        val nDigitsMinusFourteen = nDigits - 14\n        val nDigitsMinusFifteen = nDigits - 15\n        val nDigitsMinusSixteen = nDigits - 16\n        val nDigitsMinusSeventeen = nDigits - 17\n        val nDigitsMinusEighteen = nDigits - 18\n        val nDigitsMinusNineteen = nDigits - 19\n        val nDigitsMinusTwenty = nDigits - 20\n        val nDigitsMinusTwentyOne = nDigits - 21\n        val nDigitsMinusTwentyTwo = nDigits - 22\n        val nDigitsMinusTwentyThree = nDigits - 23\n        val nDigitsMinusTwentyFour = nDigits - 24\n        val nDigitsMinusTwentyFive = nDigits - 25\n        val nDigitsMinusTwentySix = nDigits - 26\n        val nDigitsMinusTwentySeven = nDigits - 27\n        val nDigitsMinus\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122913,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmplr_7rw3w.scala:39:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplr_7rw3w.scala:41:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplr_7rw3w.scala:42:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplr_7rw3w.scala:43:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.toString.toInt)\n        val sorted = digits.sorted\n        val sortedReverse = sorted.reverse\n        if (digits == sortedReverse) return -1\n        val index = digits.indexOf(sortedReverse.find(x => x > digits.last).get)\n        val (left, right) = digits.splitAt(index)\n        val newRight = right.tail :+ right.head\n        val newDigits = left ::: newRight.sorted\n        newDigits.mkString.toLong\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122912,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5q04ty66.scala:17:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5q04ty66.scala:18:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5q04ty66.scala:19:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.toString.toInt)\n        val sorted = digits.sorted\n        val sortedReversed = sorted.reverse\n        val index = digits.indexOf(sortedReversed.head)\n        val (left, right) = digits.splitAt(index)\n        val newRight = sortedReversed.tail ::: left\n        val newNumber = newRight.mkString.toLong\n        if (newNumber > n) newNumber else -1\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122913,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp65i4h7i_.scala:16:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp65i4h7i_.scala:17:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp65i4h7i_.scala:18:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.map(_.asDigit).toList\n        val sortedDigits = digits.sorted\n        val sortedDigitsReversed = sortedDigits.reverse\n        val digitsReversed = digits.reverse\n        val sortedDigitsReversedTail = sortedDigitsReversed.tail\n        val digitsReversedTail = digitsReversed.tail\n        val digitsReversedTailSorted = digitsReversedTail.sorted\n        val digitsReversedTailSortedReversed = digitsReversedTailSorted.reverse\n        val digitsReversedTailSortedReversedTail = digitsReversedTailSortedReversed.tail\n        val digitsReversedTailSortedReversedTailSorted = digitsReversedTailSortedReversedTail.sorted\n        val digitsReversedTailSortedReversedTailSortedReversed = digitsReversedTailSortedReversedTailSorted.reverse\n        val digitsReversedTailSortedReversedTailSortedReversedTail = digitsReversedTailSortedReversedTailSortedReversed.tail\n        val digitsReversedTailSortedReversedTailSortedReversedTailSorted = digitsReversedTailSortedReversedTailSortedReversedTail.sorted\n        val digitsReversedTailSortedReversedTailSortedReversedTailSortedReversed = digitsReversedTailSortedReversedTailSortedReversedTailSorted.reverse\n        val digitsReversedTailSortedReversedTailSortedReversedTailSortedReversedTail = digitsReversedTailSortedReversedTailSortedReversedTailSortedReversed.tail\n        val digitsReversedTailSortedReversedTailSortedReversedTailSortedReversedTailSorted = digitsReversedTailSortedReversedTailSortedReversedTailSortedReversedTail.sorted\n        val\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122913,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpgwvk20yp.scala:22:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgwvk20yp.scala:25:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgwvk20yp.scala:26:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgwvk20yp.scala:27:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.toString.toInt)\n        val sorted = digits.sorted\n        val sortedReverse = sorted.reverse\n        if (digits == sortedReverse) {\n            -1\n        } else {\n            val index = digits.indexOf(sortedReverse.find(x => x > digits.last).get)\n            val (left, right) = digits.splitAt(index)\n            val newLeft = left.dropRight(1) :+ sortedReverse.head\n            val newRight = sortedReverse.tail :+ left.last\n            (newLeft ::: newRight).mkString.toLong\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122913,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9e6z598b.scala:20:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9e6z598b.scala:21:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9e6z598b.scala:22:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.asDigit)\n        val sorted = digits.sorted\n        val reversed = sorted.reverse\n        val index = digits.indexOfSlice(reversed)\n        if (index == -1) -1\n        else {\n            val (left, right) = digits.splitAt(index)\n            val (left2, right2) = right.splitAt(right.length - 1)\n            val (left3, right3) = left2.splitAt(left2.length - 1)\n            val (left4, right4) = right3.splitAt(right3.length - 1)\n            val result = (left ::: List(right4.head) ::: left4 ::: List(right2.head) ::: left3 ::: right3.tail).mkString.toLong\n            if (result > n) result else -1\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122914,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpzg0jkzco.scala:21:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpzg0jkzco.scala:22:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpzg0jkzco.scala:23:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.toString.toInt)\n        val sorted = digits.sorted\n        val sortedReverse = sorted.reverse\n        if (digits == sortedReverse) {\n            -1\n        } else {\n            val index = digits.indexOf(sortedReverse.find(x => x > digits.last).get)\n            val (left, right) = digits.splitAt(index)\n            val newRight = right.tail.sorted.reverse\n            val newLeft = left :+ right.head\n            (newLeft ::: newRight).mkString.toLong\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122914,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpy_nlgech.scala:20:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpy_nlgech.scala:21:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpy_nlgech.scala:22:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.asDigit)\n        val sortedDigits = digits.sorted\n        val sortedDigitsReversed = sortedDigits.reverse\n        val sortedDigitsReversedMap = sortedDigitsReversed.zipWithIndex.toMap\n        val digitsReversed = digits.reverse\n        val digitsReversedMap = digitsReversed.zipWithIndex.toMap\n        val digitsReversedMapSorted = digitsReversedMap.toList.sortBy(_._1)\n        var digitsReversedMapSortedMap = digitsReversedMapSorted.toMap\n        var digitsReversedMapSortedMap2 = digitsReversedMapSortedMap\n        var digitsReversedMapSortedMap3 = digitsReversedMapSortedMap\n        var digitsReversedMapSortedMap4 = digitsReversedMapSortedMap\n        var digitsReversedMapSortedMap5 = digitsReversedMapSortedMap\n        var digitsReversedMapSortedMap6 = digitsReversedMapSortedMap\n        var digitsReversedMapSortedMap7 = digitsReversedMapSortedMap\n        var digitsReversedMapSortedMap8 = digitsReversedMapSortedMap\n        var digitsReversedMapSortedMap9 = digitsReversedMapSortedMap\n        var digitsReversedMapSortedMap10 = digitsReversedMapSortedMap\n        var digitsReversedMapSortedMap11 = digitsReversedMapSortedMap\n        var digitsReversedMapSortedMap12 = digitsReversedMapSortedMap\n        var digitsReversedMapSortedMap13 = digitsReversedMapSortedMap\n        var digitsReversedMapSortedMap14 = digitsReversedMapSortedMap\n        var digitsReversedMapSortedMap15 = digitsReversedMapSortedMap\n        var digitsReversedMapSortedMap16 = digitsReversedMapSortedMap\n        var digitsReversedMapSortedMap17 = digitsReversedMapSortedMap\n        var digitsReversedMapSortedMap18 = digitsReversedMapSortedMap\n        var digitsRevers\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122914,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpf6mh4z9d.scala:32:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpf6mh4z9d.scala:34:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpf6mh4z9d.scala:35:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpf6mh4z9d.scala:36:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.map(_.asDigit).toList\n        val sorted = digits.sorted\n        val sortedReversed = sorted.reverse\n        val index = digits.indexOf(sortedReversed.head)\n        val (left, right) = digits.splitAt(index)\n        val (leftSorted, rightSorted) = (left.sorted, right.sorted)\n        val leftSortedReversed = leftSorted.reverse\n        val rightSortedReversed = rightSorted.reverse\n        val (leftSortedReversedHead, leftSortedReversedTail) = (leftSortedReversed.head, leftSortedReversed.tail)\n        val (rightSortedReversedHead, rightSortedReversedTail) = (rightSortedReversed.head, rightSortedReversed.tail)\n        if (leftSortedReversedHead > rightSortedReversedHead) {\n            val newLeft = leftSortedReversedHead :: leftSortedReversedTail\n            val newRight = rightSortedReversedHead :: rightSortedReversedTail\n            val newDigits = newLeft ::: newRight\n            newDigits.mkString.toLong\n        } else {\n            None\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122915,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpa9rcpx3k.scala:26:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpa9rcpx3k.scala:27:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpa9rcpx3k.scala:28:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.asDigit)\n        val sorted = digits.sorted\n        val reversed = sorted.reverse\n        val index = digits.indexOfSlice(reversed)\n        if (index == -1) -1\n        else {\n            val (left, right) = digits.splitAt(index)\n            val (left1, right1) = left.splitAt(left.length - 1)\n            val (left2, right2) = right.splitAt(1)\n            val result = (left1 ::: right2 ::: left2 ::: right1).mkString.toLong\n            if (result > n) result else -1\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122914,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp1l22skc.scala:20:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp1l22skc.scala:21:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp1l22skc.scala:22:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.toString.toInt)\n        val sorted = digits.sorted\n        val reversed = sorted.reverse\n        val index = digits.indexOf(reversed.head)\n        val (left, right) = digits.splitAt(index)\n        val (left1, right1) = right.splitAt(1)\n        val left2 = left ::: left1\n        val right2 = right1 ::: left\n        val result = (left2 ::: right2).mkString.toLong\n        if (result > n) result else -1\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122914,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmsag9npc.scala:18:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmsag9npc.scala:19:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmsag9npc.scala:20:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.asDigit)\n        val sorted = digits.sorted\n        val max = sorted.last\n        val index = digits.indexOf(max)\n        val (left, right) = digits.splitAt(index)\n        val next = sorted.find(_ > max).get\n        val nextIndex = sorted.indexOf(next)\n        val (left2, right2) = sorted.splitAt(nextIndex)\n        val newLeft = left2 ::: left\n        val newRight = right2 ::: right\n        val newDigits = newLeft ::: newRight\n        val newNum = newDigits.mkString.toLong\n        if (newNum == n) \"Not possible\" else newNum\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122915,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9uckcpza.scala:21:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9uckcpza.scala:22:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9uckcpza.scala:23:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.map(_.asDigit).toList\n        val sorted = digits.sorted\n        val sortedReverse = sorted.reverse\n        val index = digits.indexOf(sortedReverse.head)\n        val (left, right) = digits.splitAt(index)\n        val (leftSorted, rightSorted) = (left.sorted, right.sorted)\n        val (leftSortedReverse, rightSortedReverse) = (leftSorted.reverse, rightSorted.reverse)\n        val (leftSortedReverseTail, rightSortedReverseTail) = (leftSortedReverse.tail, rightSortedReverse.tail)\n        val (leftSortedReverseTailSorted, rightSortedReverseTailSorted) = (leftSortedReverseTail.sorted, rightSortedReverseTail.sorted)\n        val (leftSortedReverseTailSortedReverse, rightSortedReverseTailSortedReverse) = (leftSortedReverseTailSorted.reverse, rightSortedReverseTailSorted.reverse)\n        val leftSortedReverseTailSortedReverseHead = leftSortedReverseTailSortedReverse.head\n        val rightSortedReverseTailSortedReverseHead = rightSortedReverseTailSortedReverse.head\n        val leftSortedReverseTailSortedReverseHeadIndex = leftSortedReverseTail.indexOf(leftSortedReverseTailSortedReverseHead)\n        val rightSortedReverseTailSortedReverseHeadIndex = rightSortedReverseTail.indexOf(rightSortedReverseTailSortedReverseHead)\n        val (leftSortedReverseTailSortedReverseHeadLeft, leftSortedReverseTailSortedReverseHeadRight) = leftSortedReverseTail.splitAt(leftSortedReverseTailSortedReverseHeadIndex)\n        val (rightS\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122914,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpqb8ls8kr.scala:22:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqb8ls8kr.scala:24:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqb8ls8kr.scala:25:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqb8ls8kr.scala:26:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.toString.toInt)\n        val sorted = digits.sorted\n        val sortedReverse = sorted.reverse\n        val index = digits.indexOf(sortedReverse.head)\n        val (left, right) = digits.splitAt(index)\n        val (leftSorted, rightSorted) = (left.sorted, right.sorted)\n        val (leftSortedReverse, rightSortedReverse) = (leftSorted.reverse, rightSorted.reverse)\n        val (leftSortedReverseTail, rightSortedReverseHead) = (leftSortedReverse.tail, rightSortedReverse.head)\n        val (leftSortedReverseTailSorted, rightSortedReverseHeadSorted) = (leftSortedReverseTail.sorted, rightSortedReverseHead.sorted)\n        val (leftSortedReverseTailSortedReverse, rightSortedReverseHeadSortedReverse) = (leftSortedReverseTailSorted.reverse, rightSortedReverseHeadSortedReverse.reverse)\n        val (leftSortedReverseTailSortedReverseHead, rightSortedReverseHeadSortedReverseTail) = (leftSortedReverseTailSortedReverse.head, rightSortedReverseHeadSortedReverseTail.tail)\n        val (leftSortedReverseTailSortedReverseHeadSorted, rightSortedReverseHeadSortedReverseTailSorted) = (leftSortedReverseTailSortedReverseHead.sorted, rightSortedReverseHeadSortedReverseTailSorted.sorted)\n        val (leftSortedReverseTailSortedReverseHeadSortedReverse, rightSortedReverseHeadSortedReverseTailSortedReverse) = (leftSortedReverseTailSortedReverseHeadSorted.reverse, rightSortedReverseHeadSortedReverseTailSorted\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122917,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpvc2sw_sv.scala:19:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpvc2sw_sv.scala:14:128 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m (leftSortedReverseTailSorted, rightSortedReverseHeadSorted) = (leftSortedReverseTail.sorted, rightSortedReverseHead.sorted)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     value sorted is not a member of Int\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpvc2sw_sv.scala:15:49 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m (leftSortedReverseTailSortedReverse, rightSortedReverseHeadSortedReverse) = (leftSortedReverseTailSorted.reverse, rightSortedReverseHeadSortedReverse.reverse)\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Recursive \u001b[33mvalue\u001b[0m \u001b[35m$6$\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpvc2sw_sv.scala:16:53 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m (leftSortedReverseTailSortedReverseHead, rightSortedReverseHeadSortedReverseTail) = (leftSortedReverseTailSortedReverse.head, rightSortedReverseHeadSortedReverseTail.tail)\n\u001b[31m\u001b[31m   |\u001b[0m                                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Recursive \u001b[33mvalue\u001b[0m \u001b[35m$7$\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpvc2sw_sv.scala:17:59 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m (leftSortedReverseTailSortedReverseHeadSorted, rightSortedReverseHeadSortedReverseTailSorted)",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.asDigit)\n        val sorted = digits.sorted\n        val sortedReverse = sorted.reverse\n        val index = digits.indexOf(sortedReverse.head)\n        val (left, right) = digits.splitAt(index)\n        val (leftSorted, rightSorted) = (left.sorted, right.sorted)\n        val (leftSortedReverse, rightSortedReverse) = (leftSorted.reverse, rightSorted.reverse)\n        val (leftSortedReverseTail, rightSortedReverseHead) = (leftSortedReverse.tail, rightSortedReverse.head)\n        val (leftSortedReverseTailSorted, rightSortedReverseHeadSorted) = (leftSortedReverseTail.sorted, rightSortedReverseHead.sorted)\n        val (leftSortedReverseTailSortedReverse, rightSortedReverseHeadSortedReverse) = (leftSortedReverseTailSorted.reverse, rightSortedReverseHeadSortedReverse.reverse)\n        val (leftSortedReverseTailSortedReverseHead, rightSortedReverseHeadSortedReverseTail) = (leftSortedReverseTailSortedReverse.head, rightSortedReverseHeadSortedReverse.tail)\n        val (leftSortedReverseTailSortedReverseHeadSorted, rightSortedReverseHeadSortedReverseTailSorted) = (leftSortedReverseTailSortedReverseHead.sorted, rightSortedReverseHeadSortedReverseTail.sorted)\n        val (leftSortedReverseTailSortedReverseHeadSortedReverse, rightSortedReverseHeadSortedReverseTailSortedReverse) = (leftSortedReverseTailSortedReverseHeadSorted.reverse, rightSortedReverseHeadSortedReverseTailSortedReverse.reverse)\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122917,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpdeazo984.scala:14:128 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m (leftSortedReverseTailSorted, rightSortedReverseHeadSorted) = (leftSortedReverseTail.sorted, rightSortedReverseHead.sorted)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     value sorted is not a member of Int\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpdeazo984.scala:15:49 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m (leftSortedReverseTailSortedReverse, rightSortedReverseHeadSortedReverse) = (leftSortedReverseTailSorted.reverse, rightSortedReverseHeadSortedReverse.reverse)\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Recursive \u001b[33mvalue\u001b[0m \u001b[35m$6$\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpdeazo984.scala:17:148 -----------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m (leftSortedReverseTailSortedReverseHeadSorted, rightSortedReverseHeadSortedReverseTailSorted) = (leftSortedReverseTailSortedReverseHead.sorted, rightSortedReverseHeadSortedReverseTail.sorted)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     value sorted is not a member of Int\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpdeazo984.scala:17:196 -----------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m (leftSortedReverseTailSortedReverseHeadSorted, rightSortedReverseHeadSortedReverseTailSorted) = (leftSortedReverseTailSortedReverseHead.sorted, rightSortedReverseHeadSortedReverseTail.sorted)\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.asDigit)\n        val sorted = digits.sorted\n        val sortedReverse = sorted.reverse\n        val index = digits.indexOfSlice(sortedReverse)\n        if (index == -1) \"Not Possible\"\n        else {\n            val (left, right) = digits.splitAt(index)\n            val (leftSorted, rightSorted) = (left.sorted, right.sorted)\n            val (leftSortedReverse, rightSortedReverse) = (leftSorted.reverse, rightSorted.reverse)\n            val (leftSortedReverseTail, rightSortedReverseTail) = (leftSortedReverse.tail, rightSortedReverse.tail)\n            val (leftSortedReverseHead, rightSortedReverseHead) = (leftSortedReverse.head, rightSortedReverse.head)\n            val (leftSortedReverseTailSorted, rightSortedReverseTailSorted) = (leftSortedReverseTail.sorted, rightSortedReverseTail.sorted)\n            val (leftSortedReverseTailSortedReverse, rightSortedReverseTailSortedReverse) = (leftSortedReverseTailSorted.reverse, rightSortedReverseTailSorted.reverse)\n            val (leftSortedReverseTailSortedReverseHead, rightSortedReverseTailSortedReverseHead) = (leftSortedReverseTailSortedReverse.head, rightSortedReverseTailSortedReverse.head)\n            val (leftSortedReverseTailSortedReverseTail, rightSortedReverseTailSortedReverseTail) = (leftSortedReverseTailSortedReverse.tail, rightSortedReverseTailSortedReverse.tail)\n            val (leftSortedReverseTailSortedReverseTailSorted, rightSortedReverseTailSortedR\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122915,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp9tjp7zy5.scala:22:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp9tjp7zy5.scala:30:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9tjp7zy5.scala:24:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9tjp7zy5.scala:25:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9tjp7zy5.scala:26:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmp9tjp7zy5.scala:23:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m23 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.toString.toInt)\n        val sorted = digits.sorted\n        val sortedReversed = sorted.reverse\n        if (digits == sortedReversed) {\n            -1\n        } else {\n            val index = digits.indexWhere(x => digits.indexOf(x) != sorted.indexOf(x))\n            val index2 = sorted.indexWhere(x => x > digits(index))\n            val newDigits = digits.updated(index, sorted(index2)).updated(index2, digits(index))\n            newDigits.mkString.toLong\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122915,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyq77xttb.scala:19:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyq77xttb.scala:20:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyq77xttb.scala:21:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toArray.map(_.asDigit)\n        val sorted = digits.sorted.reverse\n        if (digits.deep == sorted.deep) {\n            \"Not possible\"\n        } else {\n            var i = digits.length - 1\n            while (i > 0 && digits(i - 1) >= digits(i)) i -= 1\n            val j = i - 1\n            var k = digits.length - 1\n            while (k > j && digits(k) <= digits(j)) k -= 1\n            val temp = digits(k)\n            digits(k) = digits(j)\n            digits(j) = temp\n            val (left, right) = digits.splitAt(i)\n            (left.mkString + right.reverse.mkString).toLong\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122917,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpe7vinmw_.scala:8:19 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mif\u001b[0m (digits.deep == sorted.deep) {\n\u001b[31m\u001b[31m  |\u001b[0m            ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m            value deep is not a member of Array[Int]\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpe7vinmw_.scala:24:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpe7vinmw_.scala:25:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpe7vinmw_.scala:26:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.asDigit)\n        val sorted = digits.sorted\n        val sortedR = sorted.reverse\n        if (digits == sortedR) {\n            \"Not possible\"\n        } else {\n            val index = digits.lastIndexWhere(digits(_) < digits.last)\n            val (left, right) = digits.splitAt(index)\n            val (right1, right2) = right.splitAt(1)\n            val right3 = right1 ++ right2.tail\n            val right4 = right3.sorted.reverse\n            val result = left ++ right4\n            result.mkString.toLong\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122916,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7nem8fm8.scala:22:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7nem8fm8.scala:23:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7nem8fm8.scala:24:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.asDigit)\n        val sorted = digits.sorted\n        val reversed = sorted.reverse\n        val index = digits.indexOfSlice(reversed)\n        if (index == -1) -1\n        else {\n            val (left, right) = digits.splitAt(index)\n            val (left1, right1) = right.splitAt(right.length - 1)\n            val (left2, right2) = left1.splitAt(left1.length - 1)\n            val (left3, right3) = right2.splitAt(right2.length - 1)\n            val left4 = left2 ::: right3 ::: left3\n            val left5 = left4.sorted\n            val left6 = left5.reverse\n            val result = left ::: left6\n            result.mkString.toLong\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122917,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6f3cd7ae.scala:24:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6f3cd7ae.scala:25:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6f3cd7ae.scala:26:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.map(_.asDigit).toList\n        val sortedDigits = digits.sorted\n        val sortedDigitsReversed = sortedDigits.reverse\n        val digitsReversed = digits.reverse\n        val sortedDigitsReversedTail = sortedDigitsReversed.tail\n        val sortedDigitsReversedTailReversed = sortedDigitsReversedTail.reverse\n        val sortedDigitsReversedTailReversedTail = sortedDigitsReversedTailReversed.tail\n        val sortedDigitsReversedTailReversedTailReversed = sortedDigitsReversedTailReversedTail.reverse\n        val sortedDigitsReversedTailReversedTailReversedHead = sortedDigitsReversedTailReversedTailReversed.head\n        val sortedDigitsReversedTailReversedTailReversedHeadDigits = sortedDigitsReversedTailReversedTailReversedHead.toString.map(_.asDigit).toList\n        val sortedDigitsReversedTailReversedTailReversedHeadDigitsReversed = sortedDigitsReversedTailReversedTailReversedHeadDigits.reverse\n        val sortedDigitsReversedTailReversedTailReversedHeadDigitsReversedTail = sortedDigitsReversedTailReversedTailReversedHeadDigitsReversed.tail\n        val sortedDigitsReversedTailReversedTailReversedHeadDigitsReversedTailReversed = sortedDigitsReversedTailReversedTailReversedHeadDigitsReversedTail.reverse\n        val sortedDigitsReversedTailReversedTailReversedHeadDigitsReversedTailReversedHead = sortedDigitsReversedTailReversedTailReversedHeadDigitsReversedTailReversed.head\n        val sortedDigitsReversedTailReversedTailReversedHeadDigitsReversedTailReversedHeadDigits = sortedDigits\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122917,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkkv02tsi.scala:23:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkkv02tsi.scala:24:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkkv02tsi.scala:25:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n        val digits = n.toString.toList.map(_.toString.toInt)\n        val sorted = digits.sorted\n        val sortedReversed = sorted.reverse\n        if (digits == sortedReversed) {\n            \"Not Possible\"\n        } else {\n            val index = digits.indexWhere(x => x > digits.min)\n            val min = digits.min\n            val newDigits = digits.updated(index, min).updated(digits.indexOf(min), digits(index))\n            newDigits.mkString.toLong\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
      "timestamp": 1666122917,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp78og98p1.scala:19:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(rearrangeBigger((\u001b[31m12l\u001b[0m)).equals((Any(\u001b[31m21l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp78og98p1.scala:20:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(rearrangeBigger((\u001b[31m10l\u001b[0m)).equals((Any(\u001b[31mfalse\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp78og98p1.scala:21:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(rearrangeBigger((\u001b[31m102l\u001b[0m)).equals((Any(\u001b[31m120l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}