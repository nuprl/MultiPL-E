{
  "name": "mbpp_104_sort_sublists",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(input_list : List[String]) : List[List[String]] = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_104_sort_sublists.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[String](\" red \", \"green\"), List[String](\"blue \", \" black\"), List[String](\" orange\", \"brown\")))).equals((List[List[String]](List[String](\" red \", \"green\"), List[String](\" black\", \"blue \"), List[String](\" orange\", \"brown\")))));\n    assert(sortSublists((List[String](\"zilver\", \"gold\"), List[String](\"magnesium\", \"aluminium\"), List[String](\"steel\", \"bronze\")))).equals((List[List[String]](List[String](\"gold\", \"zilver\"), List[String](\"aluminium\", \"magnesium\"), List[String](\"bronze\", \"steel\")))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        input_list.map(x => x.split(\" \").toList.sorted)",
    "        input_list.map(x => x.split(\" \").toList.sorted)",
    "        input_list.map(x => x.split(\" \").toList.sortWith(_ < _)).toList",
    "        input_list.map(x => x.split(\" \").toList.sorted)",
    "        input_list.map(x => x.split(\" \").toList.sorted)",
    "        input_list.map(x => x.split(\" \").toList.sortWith(_ < _)).toList",
    "        input_list.map(x => x.split(\" \").toList.sorted)",
    "        input_list.map(x => x.split(\" \").toList.sortWith(_ < _)).toList",
    "        input_list.map(x => x.split(\" \").toList.sorted)",
    "        input_list.groupBy(x => x.length).values.toList.map(x => x.sorted)",
    "        input_list.map(x => x.split(\" \").toList.sorted)",
    "        input_list.map(x => x.split(\" \").toList).map(x => x.sortWith(_ < _))",
    "        input_list.map(x => x.split(\" \").toList.sortWith(_ < _))",
    "        input_list.map(x => x.split(\" \").toList.sorted)",
    "        input_list.map(x => x.split(\" \").toList.sorted)",
    "        input_list.map(x => x.split(\" \").toList.sortWith(_ < _)).toList",
    "        val list_of_lists = input_list.grouped(3).toList\n        val sorted_list_of_lists = list_of_lists.map(x => x.sorted)\n        sorted_list_of_lists",
    "        input_list.map(x => x.split(\" \").toList.sorted)",
    "        input_list.map(x => x.split(\" \").toList.sorted)",
    "        input_list.map(x => x.split(\" \").toList.sorted)"
  ]
}