{
  "name": "mbpp_597_find_kth",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_597_find_kth.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.length)\n        val mid2 = min(k / 2, arr2.length)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n        else findKth(arr1, arr2.slice(mid2, arr2.length), k - mid2)",
    "        if (arr1.length == 0) return arr2(k.toInt)\n        if (arr2.length == 0) return arr1(k.toInt)\n        if (k == 0) return min(arr1(0), arr2(0))\n        val mid1 = arr1.length / 2\n        val mid2 = arr2.length / 2\n        if (mid1 + mid2 < k) {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1, arr2.slice(mid2 + 1, arr2.length), k - mid2 - 1)\n            else findKth(arr1.slice(mid1 + 1, arr1.length), arr2, k - mid1 - 1)\n        }\n        else {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1.slice(0, mid1), arr2, k)\n            else findKth(arr1, arr2.slice(0, mid2), k)\n        }",
    "        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.length)\n        val mid2 = min(k / 2, arr2.length)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n        else findKth(arr1, arr2.slice(mid2, arr2.length), k - mid2)",
    "        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.length)\n        val mid2 = min(k / 2, arr2.length)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n        else findKth(arr1, arr2.slice(mid2, arr2.length), k - mid2)",
    "        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.length)\n        val mid2 = min(k / 2, arr2.length)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n        else findKth(arr1, arr2.slice(mid2, arr2.length), k - mid2)",
    "        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(arr1.length, (k / 2).toInt)\n        val mid2 = min(arr2.length, (k / 2).toInt)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) return findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n        else return findKth(arr1, arr2.slice(mid2, arr2.length), k - mid2)",
    "        if (arr1.size == 0) return arr2(k.toInt)\n        if (arr2.size == 0) return arr1(k.toInt)\n        if (k == 0) return min(arr1(0), arr2(0))\n        val mid1 = arr1.size / 2\n        val mid2 = arr2.size / 2\n        if (arr1(mid1) <= arr2(mid2)) {\n            if (k <= mid1 + mid2) return findKth(arr1.slice(0, mid1), arr2, k)\n            else return findKth(arr1, arr2.slice(mid2 + 1, arr2.size), k - mid2 - 1)\n        } else {\n            if (k <= mid1 + mid2) return findKth(arr1, arr2.slice(0, mid2), k)\n            else return findKth(arr1.slice(mid1 + 1, arr1.size), arr2, k - mid1 - 1)\n        }",
    "        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.length)\n        val mid2 = min(k / 2, arr2.length)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) return findKth(arr1.drop(mid1), arr2, k - mid1)\n        else return findKth(arr1, arr2.drop(mid2), k - mid2)",
    "        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.length)\n        val mid2 = min(k / 2, arr2.length)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) findKth(arr1.drop(mid1), arr2, k - mid1)\n        else findKth(arr1, arr2.drop(mid2), k - mid2)",
    "        def findKth(arr1 : List[Long], arr2 : List[Long], k : Long, i : Int, j : Int) : Long = {\n            if (i == arr1.length) arr2(j + k.toInt - 1)\n            else if (j == arr2.length) arr1(i + k.toInt - 1)\n            else if (k == 1) min(arr1(i), arr2(j))\n            else {\n                val mid1 = if (i + k / 2 - 1 < arr1.length) arr1(i + k / 2.toInt - 1) else Long.MaxValue\n                val mid2 = if (j + k / 2 - 1 < arr2.length) arr2(j + k / 2.toInt - 1) else Long.MaxValue\n                if (mid1 < mid2) findKth(arr1, arr2, k - k / 2, i + k / 2.toInt, j)\n                else findKth(arr1, arr2, k - k / 2, i, j + k / 2.toInt)\n            }\n        }\n        findKth(arr1, arr2, k, 0, 0)",
    "        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.length)\n        val mid2 = min(k / 2, arr2.length)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) return findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n        else return findKth(arr1, arr2.slice(mid2, arr2.length), k - mid2)",
    "        if (k == 1) {\n            min(arr1(0), arr2(0))\n        } else {\n            if (arr1.length == 0) {\n                arr2(k.toInt - 1)\n            } else if (arr2.length == 0) {\n                arr1(k.toInt - 1)\n            } else {\n                val mid1 = arr1(min(k.toInt / 2 - 1, arr1.length - 1))\n                val mid2 = arr2(min(k.toInt / 2 - 1, arr2.length - 1))\n                if (mid1 < mid2) {\n                    findKth(arr1.slice(min(k.toInt / 2, arr1.length), arr1.length), arr2, k - min(k.toInt / 2, arr1.length))\n                } else {\n                    findKth(arr1, arr2.slice(min(k.toInt / 2, arr2.length), arr2.length), k - min(k.toInt / 2, arr2.length))\n                }\n            }\n        }",
    "        if (arr1.isEmpty) arr2(k.toInt)\n        else if (arr2.isEmpty) arr1(k.toInt)\n        else {\n            val mid1 = arr1.length / 2\n            val mid2 = arr2.length / 2\n            if (mid1 + mid2 < k) {\n                if (arr1(mid1) > arr2(mid2)) findKth(arr1, arr2.drop(mid2 + 1), k - mid2 - 1)\n                else findKth(arr1.drop(mid1 + 1), arr2, k - mid1 - 1)\n            }\n            else {\n                if (arr1(mid1) > arr2(mid2)) findKth(arr1.take(mid1), arr2, k)\n                else findKth(arr1, arr2.take(mid2), k)\n            }\n        }",
    "        if (arr1.length == 0) return arr2(k.toInt)\n        if (arr2.length == 0) return arr1(k.toInt)\n        if (k == 0) return min(arr1(0), arr2(0))\n        val mid1 = arr1.length / 2\n        val mid2 = arr2.length / 2\n        if (mid1 + mid2 < k) {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1, arr2.slice(mid2 + 1, arr2.length), k - mid2 - 1)\n            else findKth(arr1.slice(mid1 + 1, arr1.length), arr2, k - mid1 - 1)\n        } else {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1.slice(0, mid1), arr2, k)\n            else findKth(arr1, arr2.slice(0, mid2), k)\n        }",
    "        if (arr1.length == 0) arr2(k.toInt - 1)\n        else if (arr2.length == 0) arr1(k.toInt - 1)\n        else {\n            val mid1 = arr1.length / 2\n            val mid2 = arr2.length / 2\n            if (mid1 + mid2 < k) {\n                if (arr1(mid1) > arr2(mid2)) findKth(arr1, arr2.slice(mid2 + 1, arr2.length), k - mid2 - 1)\n                else findKth(arr1.slice(mid1 + 1, arr1.length), arr2, k - mid1 - 1)\n            }\n            else {\n                if (arr1(mid1) > arr2(mid2)) findKth(arr1.slice(0, mid1), arr2, k)\n                else findKth(arr1, arr2.slice(0, mid2), k)\n            }\n        }",
    "        if (k == 1) {\n            min(arr1.head, arr2.head)\n        } else {\n            val a = arr1.head\n            val b = arr2.head\n            if (a < b) {\n                findKth(arr1.tail, arr2, k - 1)\n            } else {\n                findKth(arr1, arr2.tail, k - 1)\n            }\n        }",
    "        if (arr1.isEmpty) return arr2(k.toInt - 1)\n        if (arr2.isEmpty) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = arr1.length / 2\n        val mid2 = arr2.length / 2\n        if (arr1(mid1) <= arr2(mid2)) {\n            if (k <= mid1 + mid2 + 1) findKth(arr1.slice(0, mid1), arr2, k)\n            else findKth(arr1, arr2.slice(mid2 + 1, arr2.length), k - mid2 - 1)\n        } else {\n            if (k <= mid1 + mid2 + 1) findKth(arr1, arr2.slice(0, mid2), k)\n            else findKth(arr1.slice(mid1 + 1, arr1.length), arr2, k - mid1 - 1)\n        }",
    "        if (arr1.length == 0) return arr2(k.toInt)\n        if (arr2.length == 0) return arr1(k.toInt)\n        if (k == 0) return min(arr1(0), arr2(0))\n        val mid1 = min(arr1.length - 1, k / 2)\n        val mid2 = min(arr2.length - 1, k / 2)\n        if (arr1(mid1) > arr2(mid2)) findKth(arr1, arr2.drop(mid2 + 1), k - mid2 - 1)\n        else findKth(arr1.drop(mid1 + 1), arr2, k - mid1 - 1)",
    "        if (arr1.isEmpty) return arr2(k.toInt)\n        if (arr2.isEmpty) return arr1(k.toInt)\n        val mid1 = arr1.length / 2\n        val mid2 = arr2.length / 2\n        if (mid1 + mid2 < k) {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1, arr2.slice(mid2 + 1, arr2.length), k - mid2 - 1)\n            else findKth(arr1.slice(mid1 + 1, arr1.length), arr2, k - mid1 - 1)\n        }\n        else {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1.slice(0, mid1), arr2, k)\n            else findKth(arr1, arr2.slice(0, mid2), k)\n        }",
    "        if (arr1.isEmpty) return arr2(k.toInt - 1)\n        if (arr2.isEmpty) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1.head, arr2.head)\n        val mid1 = min(k / 2, arr1.length)\n        val mid2 = min(k / 2, arr2.length)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) findKth(arr1.drop(mid1), arr2, k - mid1)\n        else findKth(arr1, arr2.drop(mid2), k - mid2)",
    "        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.length)\n        val mid2 = min(k / 2, arr2.length)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) findKth(arr1.drop(mid1), arr2, k - mid1)\n        else findKth(arr1, arr2.drop(mid2), k - mid2)",
    "        if (arr1.isEmpty) return arr2(k.toInt - 1)\n        if (arr2.isEmpty) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.length)\n        val mid2 = min(k / 2, arr2.length)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) findKth(arr1.drop(mid1), arr2, k - mid1)\n        else findKth(arr1, arr2.drop(mid2), k - mid2)",
    "        if (arr1.length == 0) arr2(k.toInt - 1)\n        else if (arr2.length == 0) arr1(k.toInt - 1)\n        else if (k == 1) min(arr1(0), arr2(0))\n        else {\n            val mid1 = arr1.length / 2\n            val mid2 = arr2.length / 2\n            if (arr1(mid1) <= arr2(mid2)) {\n                if (k <= mid1 + mid2 + 1) findKth(arr1.slice(0, mid1), arr2, k)\n                else findKth(arr1.slice(mid1 + 1, arr1.length), arr2, k - mid1 - 1)\n            }\n            else {\n                if (k <= mid1 + mid2 + 1) findKth(arr1, arr2.slice(0, mid2), k)\n                else findKth(arr1, arr2.slice(mid2 + 1, arr2.length), k - mid2 - 1)\n            }\n        }",
    "        if (arr1.isEmpty) return arr2(k.toInt - 1)\n        if (arr2.isEmpty) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.length)\n        val mid2 = min(k / 2, arr2.length)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) findKth(arr1.drop(mid1), arr2, k - mid1)\n        else findKth(arr1, arr2.drop(mid2), k - mid2)",
    "        if (arr1.isEmpty) return arr2(k.toInt)\n        if (arr2.isEmpty) return arr1(k.toInt)\n        if (k == 0) return min(arr1(0), arr2(0))\n        val k1 = min(k / 2, arr1.length - 1)\n        val k2 = min(k / 2, arr2.length - 1)\n        if (arr1(k1) < arr2(k2)) findKth(arr1.drop(k1 + 1), arr2, k - k1 - 1)\n        else findKth(arr1, arr2.drop(k2 + 1), k - k2 - 1)",
    "        if (arr1.size == 0) return arr2(k.toInt - 1)\n        if (arr2.size == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.size)\n        val mid2 = min(k / 2, arr2.size)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) findKth(arr1.slice(mid1, arr1.size), arr2, k - mid1)\n        else findKth(arr1, arr2.slice(mid2, arr2.size), k - mid2)",
    "        if (arr1.length == 0) return arr2(k.toInt)\n        if (arr2.length == 0) return arr1(k.toInt)\n        if (k == 0) return min(arr1(0), arr2(0))\n        val mid1 = arr1.length / 2\n        val mid2 = arr2.length / 2\n        if (arr1(mid1) <= arr2(mid2)) {\n            if (k <= mid1 + mid2) findKth(arr1.slice(0, mid1), arr2, k)\n            else findKth(arr1, arr2.slice(mid2 + 1, arr2.length), k - mid2 - 1)\n        } else {\n            if (k <= mid1 + mid2) findKth(arr1, arr2.slice(0, mid2), k)\n            else findKth(arr1.slice(mid1 + 1, arr1.length), arr2, k - mid1 - 1)\n        }",
    "        if (arr1.length == 0) return arr2(k.toInt)\n        if (arr2.length == 0) return arr1(k.toInt)\n        if (k == 0) return min(arr1(0), arr2(0))\n        val m = min(arr1.length, k / 2)\n        val n = min(arr2.length, k / 2)\n        if (arr1(m - 1) > arr2(n - 1)) return findKth(arr1, arr2.slice(n, arr2.length), k - n)\n        else return findKth(arr1.slice(m, arr1.length), arr2, k - m)",
    "        def findKth(arr1 : List[Long], arr2 : List[Long], k : Long, i : Long) : Long = {\n            if (i == k) arr1(i.toInt - 1)\n            else if (arr1(i.toInt - 1) < arr2(i.toInt - 1)) findKth(arr1, arr2, k, i + 1)\n            else findKth(arr2, arr1, k, i + 1)\n        }\n        findKth(arr1, arr2, k, 1)",
    "        def findKth(arr1 : List[Long], arr2 : List[Long], k : Long, i : Long, j : Long) : Long = {\n            if (i >= arr1.length) return arr2(j.toInt + k.toInt - 1)\n            if (j >= arr2.length) return arr1(i.toInt + k.toInt - 1)\n            if (k == 1) return min(arr1(i.toInt), arr2(j.toInt))\n            val mid1 = if (i + k / 2 - 1 < arr1.length) arr1(i.toInt + k.toInt / 2 - 1) else Long.MaxValue\n            val mid2 = if (j + k / 2 - 1 < arr2.length) arr2(j.toInt + k.toInt / 2 - 1) else Long.MaxValue\n            if (mid1 < mid2) findKth(arr1, arr2, k - k / 2, i + k / 2, j)\n            else findKth(arr1, arr2, k - k / 2, i, j + k / 2)\n        }\n        findKth(arr1, arr2, k, 0, 0)",
    "        if (arr1.length == 0) return arr2(k.toInt)\n        if (arr2.length == 0) return arr1(k.toInt)\n        if (k == 0) return min(arr1(0), arr2(0))\n        val mid1 = min(arr1.length - 1, (k / 2).toInt)\n        val mid2 = min(arr2.length - 1, (k / 2).toInt)\n        if (arr1(mid1) < arr2(mid2)) findKth(arr1.drop(mid1 + 1), arr2, k - mid1 - 1)\n        else findKth(arr1, arr2.drop(mid2 + 1), k - mid2 - 1)",
    "        def findKthRec(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n            if (arr1.length == 0) return arr2(k.toInt - 1)\n            if (arr2.length == 0) return arr1(k.toInt - 1)\n            if (k == 1) return min(arr1(0), arr2(0))\n            val mid1 = min(arr1.length, k / 2)\n            val mid2 = min(arr2.length, k / 2)\n            if (arr1(mid1 - 1) < arr2(mid2 - 1)) findKthRec(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n            else findKthRec(arr1, arr2.slice(mid2, arr2.length), k - mid2)\n        }\n        findKthRec(arr1, arr2, k)",
    "        def findKthHelper(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n            if (arr1.length == 0) return arr2(k.toInt - 1)\n            if (arr2.length == 0) return arr1(k.toInt - 1)\n            if (k == 1) return min(arr1(0), arr2(0))\n            val mid1 = min(k / 2, arr1.length)\n            val mid2 = min(k / 2, arr2.length)\n            if (arr1(mid1 - 1) < arr2(mid2 - 1)) findKthHelper(arr1.drop(mid1), arr2, k - mid1)\n            else findKthHelper(arr1, arr2.drop(mid2), k - mid2)\n        }\n        findKthHelper(arr1, arr2, k)",
    "        def findKth(arr1 : List[Long], arr2 : List[Long], k : Long, i : Long, j : Long) : Long = {\n            if (i >= arr1.length) return arr2(j.toInt + k.toInt - 1)\n            if (j >= arr2.length) return arr1(i.toInt + k.toInt - 1)\n            if (k == 1) return min(arr1(i.toInt), arr2(j.toInt))\n            val mid1 = if (i + k / 2 - 1 < arr1.length) arr1(i.toInt + k.toInt / 2 - 1) else Long.MaxValue\n            val mid2 = if (j + k / 2 - 1 < arr2.length) arr2(j.toInt + k.toInt / 2 - 1) else Long.MaxValue\n            if (mid1 < mid2) findKth(arr1, arr2, k - k / 2, i + k / 2, j)\n            else findKth(arr1, arr2, k - k / 2, i, j + k / 2)\n        }\n        findKth(arr1, arr2, k, 0, 0)",
    "        if (arr1.isEmpty) return arr2(k.toInt - 1)\n        if (arr2.isEmpty) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val m = min(arr1.length, (k / 2).toInt)\n        val n = min(arr2.length, (k / 2).toInt)\n        if (arr1(m - 1) < arr2(n - 1)) findKth(arr1.drop(m), arr2, k - m)\n        else findKth(arr1, arr2.drop(n), k - n)",
    "        if (arr1.length == 0) arr2(k.toInt - 1)\n        else if (arr2.length == 0) arr1(k.toInt - 1)\n        else {\n            val mid1 = arr1.length / 2\n            val mid2 = arr2.length / 2\n            if (k <= mid1 + mid2 + 1) {\n                if (arr1(mid1) > arr2(mid2)) findKth(arr1.slice(0, mid1), arr2, k)\n                else findKth(arr1, arr2.slice(0, mid2), k)\n            } else {\n                if (arr1(mid1) > arr2(mid2)) findKth(arr1, arr2.slice(mid2 + 1, arr2.length), k - mid2 - 1)\n                else findKth(arr1.slice(mid1 + 1, arr1.length), arr2, k - mid1 - 1)\n            }\n        }",
    "        if (arr1.length == 0) return arr2(k.toInt)\n        if (arr2.length == 0) return arr1(k.toInt)\n        if (k == 0) return min(arr1(0), arr2(0))\n        val k1 = min(k / 2, arr1.length - 1)\n        val k2 = min(k / 2, arr2.length - 1)\n        if (arr1(k1) < arr2(k2)) findKth(arr1.slice(k1 + 1, arr1.length), arr2, k - k1 - 1)\n        else findKth(arr1, arr2.slice(k2 + 1, arr2.length), k - k2 - 1)",
    "        def findKth(arr1 : List[Long], arr2 : List[Long], k : Long, i : Long, j : Long) : Long = {\n            if (i >= arr1.length) arr2(j.toInt + k.toInt - 1)\n            else if (j >= arr2.length) arr1(i.toInt + k.toInt - 1)\n            else if (k == 1) min(arr1(i.toInt), arr2(j.toInt))\n            else {\n                val mid1 = if (i + k / 2 - 1 < arr1.length) arr1(i.toInt + (k / 2).toInt - 1) else Long.MaxValue\n                val mid2 = if (j + k / 2 - 1 < arr2.length) arr2(j.toInt + (k / 2).toInt - 1) else Long.MaxValue\n                if (mid1 < mid2) findKth(arr1, arr2, k - k / 2, i + k / 2, j)\n                else findKth(arr1, arr2, k - k / 2, i, j + k / 2)\n            }\n        }\n        findKth(arr1, arr2, k, 0, 0)",
    "        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.length)\n        val mid2 = min(k / 2, arr2.length)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) {\n            findKth(arr1.drop(mid1), arr2, k - mid1)\n        } else {\n            findKth(arr1, arr2.drop(mid2), k - mid2)\n        }",
    "        if (arr1.length == 0) return arr2(k.toInt)\n        if (arr2.length == 0) return arr1(k.toInt)\n        if (k == 0) return min(arr1(0), arr2(0))\n        val mid1 = arr1.length / 2\n        val mid2 = arr2.length / 2\n        if (mid1 + mid2 < k) {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1, arr2.drop(mid2 + 1), k - mid2 - 1)\n            else findKth(arr1.drop(mid1 + 1), arr2, k - mid1 - 1)\n        }\n        else {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1.take(mid1), arr2, k)\n            else findKth(arr1, arr2.take(mid2), k)\n        }",
    "        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(arr1.length, k / 2)\n        val mid2 = min(arr2.length, k / 2)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) findKth(arr1.drop(mid1), arr2, k - mid1)\n        else findKth(arr1, arr2.drop(mid2), k - mid2)",
    "        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(arr1.length, (k / 2).toInt)\n        val mid2 = min(arr2.length, (k / 2).toInt)\n        if (arr1(mid1 - 1) > arr2(mid2 - 1)) return findKth(arr1, arr2.slice(mid2, arr2.length), k - mid2)\n        else return findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)",
    "        if (arr1.length == 0) return arr2(k.toInt)\n        if (arr2.length == 0) return arr1(k.toInt)\n        if (k == 0) return min(arr1(0), arr2(0))\n        val mid1 = arr1.length / 2\n        val mid2 = arr2.length / 2\n        if (arr1(mid1) <= arr2(mid2)) {\n            if (mid1 + mid2 + 1 >= k) findKth(arr1.slice(0, mid1), arr2, k)\n            else findKth(arr1.slice(mid1 + 1, arr1.length), arr2, k - mid1 - 1)\n        } else {\n            if (mid1 + mid2 + 1 >= k) findKth(arr1, arr2.slice(0, mid2), k)\n            else findKth(arr1, arr2.slice(mid2 + 1, arr2.length), k - mid2 - 1)\n        }",
    "        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.length)\n        val mid2 = min(k / 2, arr2.length)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) findKth(arr1.drop(mid1), arr2, k - mid1)\n        else findKth(arr1, arr2.drop(mid2), k - mid2)",
    "        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.length)\n        val mid2 = min(k / 2, arr2.length)\n        if (arr1(mid1 - 1) > arr2(mid2 - 1)) return findKth(arr1, arr2.slice(mid2, arr2.length), k - mid2)\n        else return findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)",
    "        if (arr1.length == 0) return arr2(k.toInt)\n        if (arr2.length == 0) return arr1(k.toInt)\n        if (k == 0) return min(arr1(0), arr2(0))\n        if (arr1.length == 1 && arr2.length == 1) return min(arr1(0), arr2(0))\n        val mid1 = arr1.length / 2\n        val mid2 = arr2.length / 2\n        if (arr1(mid1) > arr2(mid2)) {\n            if (k <= mid1 + mid2) return findKth(arr1.slice(0, mid1), arr2, k)\n            else return findKth(arr1, arr2.slice(mid2 + 1, arr2.length), k - mid2 - 1)\n        } else {\n            if (k <= mid1 + mid2) return findKth(arr1, arr2.slice(0, mid2), k)\n            else return findKth(arr1.slice(mid1 + 1, arr1.length), arr2, k - mid1 - 1)\n        }",
    "        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val m = min(arr1.length, (k / 2).toInt)\n        val n = min(arr2.length, (k / 2).toInt)\n        if (arr1(m - 1) < arr2(n - 1)) findKth(arr1.drop(m), arr2, k - m)\n        else findKth(arr1, arr2.drop(n), k - n)",
    "        if (arr1.length == 0) return arr2(k.toInt)\n        if (arr2.length == 0) return arr1(k.toInt)\n        if (k == 0) return min(arr1(0), arr2(0))\n        val mid1 = arr1.length / 2\n        val mid2 = arr2.length / 2\n        if (mid1 + mid2 < k) {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1, arr2.drop(mid2 + 1), k - mid2 - 1)\n            else findKth(arr1.drop(mid1 + 1), arr2, k - mid1 - 1)\n        } else {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1.take(mid1), arr2, k)\n            else findKth(arr1, arr2.take(mid2), k)\n        }",
    "        if (arr1.length == 0) return arr2(k.toInt)\n        if (arr2.length == 0) return arr1(k.toInt)\n        if (k == 0) return min(arr1(0), arr2(0))\n        val mid1 = arr1.length / 2\n        val mid2 = arr2.length / 2\n        if (mid1 + mid2 < k) {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1, arr2.slice(mid2 + 1, arr2.length), k - mid2 - 1)\n            else findKth(arr1.slice(mid1 + 1, arr1.length), arr2, k - mid1 - 1)\n        }\n        else {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1.slice(0, mid1), arr2, k)\n            else findKth(arr1, arr2.slice(0, mid2), k)\n        }",
    "        if (arr1.length == 0) return arr2(k.toInt)\n        if (arr2.length == 0) return arr1(k.toInt)\n        if (k == 0) return min(arr1(0), arr2(0))\n        val mid1 = min(arr1.length - 1, (k / 2).toInt)\n        val mid2 = min(arr2.length - 1, (k / 2).toInt)\n        if (arr1(mid1) > arr2(mid2)) {\n            findKth(arr1, arr2.slice(mid2 + 1, arr2.length), k - mid2 - 1)\n        } else {\n            findKth(arr1.slice(mid1 + 1, arr1.length), arr2, k - mid1 - 1)\n        }",
    "        if (arr1.length == 0) arr2(k.toInt - 1)\n        else if (arr2.length == 0) arr1(k.toInt - 1)\n        else {\n            val m = arr1.length / 2\n            val n = arr2.length / 2\n            if (m + n < k) {\n                if (arr1(m) < arr2(n)) findKth(arr1.drop(m + 1), arr2, k - m - 1)\n                else findKth(arr1, arr2.drop(n + 1), k - n - 1)\n            }\n            else {\n                if (arr1(m) < arr2(n)) findKth(arr1, arr2.dropRight(n + 1), k)\n                else findKth(arr1.dropRight(m + 1), arr2, k)\n            }\n        }",
    "        if (k == 1) min(arr1.head, arr2.head)\n        else {\n            val m = min(arr1.length, arr2.length)\n            val n = min(k / 2, m)\n            if (arr1(n - 1) < arr2(n - 1)) findKth(arr1.drop(n), arr2, k - n)\n            else findKth(arr1, arr2.drop(n), k - n)\n        }",
    "        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.length).toInt\n        val mid2 = min(k / 2, arr2.length).toInt\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n        else findKth(arr1, arr2.slice(mid2, arr2.length), k - mid2)",
    "        if (arr1.length == 0) return arr2(k.toInt)\n        if (arr2.length == 0) return arr1(k.toInt)\n        if (k == 0) return min(arr1(0), arr2(0))\n        val mid1 = arr1.length / 2\n        val mid2 = arr2.length / 2\n        if (mid1 + mid2 < k) {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1, arr2.drop(mid2 + 1), k - mid2 - 1)\n            else findKth(arr1.drop(mid1 + 1), arr2, k - mid1 - 1)\n        }\n        else {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1.take(mid1), arr2, k)\n            else findKth(arr1, arr2.take(mid2), k)\n        }",
    "        if (arr1.length == 0) arr2(k.toInt - 1)\n        else if (arr2.length == 0) arr1(k.toInt - 1)\n        else {\n            val mid1 = arr1.length / 2\n            val mid2 = arr2.length / 2\n            if (k <= (mid1 + mid2 + 1)) {\n                if (arr1(mid1) > arr2(mid2)) findKth(arr1.slice(0, mid1 + 1), arr2.slice(0, mid2), k)\n                else findKth(arr1.slice(0, mid1), arr2.slice(0, mid2 + 1), k)\n            }\n            else {\n                if (arr1(mid1) > arr2(mid2)) findKth(arr1.slice(mid1 + 1, arr1.length), arr2, k - mid1 - 1)\n                else findKth(arr1, arr2.slice(mid2 + 1, arr2.length), k - mid2 - 1)\n            }\n        }",
    "        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val a = arr1(min(k.toInt / 2 - 1, arr1.length - 1))\n        val b = arr2(min(k.toInt / 2 - 1, arr2.length - 1))\n        if (a < b) findKth(arr1.drop(min(k.toInt / 2, arr1.length)), arr2, k - min(k.toInt / 2, arr1.length))\n        else findKth(arr1, arr2.drop(min(k.toInt / 2, arr2.length)), k - min(k.toInt / 2, arr2.length))",
    "        val n = arr1.length\n        val m = arr2.length\n        if (n == 0) return arr2(k.toInt - 1)\n        if (m == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val i = min(n, k / 2)\n        val j = min(m, k / 2)\n        if (arr1(i - 1) < arr2(j - 1)) findKth(arr1.drop(i), arr2, k - i)\n        else findKth(arr1, arr2.drop(j), k - j)",
    "        def findKth(arr1 : List[Long], arr2 : List[Long], k : Long, i : Long, j : Long) : Long = {\n            if (k == 1) min(arr1(i.toInt), arr2(j.toInt))\n            else {\n                val m = min(i + k / 2, arr1.length)\n                val n = min(j + k / 2, arr2.length)\n                if (arr1(m.toInt) < arr2(n.toInt)) findKth(arr1, arr2, k - (m - i), m, j)\n                else findKth(arr1, arr2, k - (n - j), i, n)\n            }\n        }\n        findKth(arr1, arr2, k, 0, 0)",
    "        if (arr1.isEmpty) return arr2(k.toInt - 1)\n        if (arr2.isEmpty) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.length)\n        val mid2 = min(k / 2, arr2.length)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) findKth(arr1.drop(mid1), arr2, k - mid1)\n        else findKth(arr1, arr2.drop(mid2), k - mid2)",
    "        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.length)\n        val mid2 = min(k / 2, arr2.length)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) findKth(arr1.drop(mid1), arr2, k - mid1)\n        else findKth(arr1, arr2.drop(mid2), k - mid2)",
    "        val n = arr1.length\n        val m = arr2.length\n        if (n == 0) return arr2(k.toInt - 1)\n        if (m == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val i = min(n, k / 2)\n        val j = min(m, k / 2)\n        if (arr1(i - 1) > arr2(j - 1)) findKth(arr1, arr2.slice(j, m), k - j)\n        else findKth(arr1.slice(i, n), arr2, k - i)",
    "        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.length)\n        val mid2 = min(k / 2, arr2.length)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n        else findKth(arr1, arr2.slice(mid2, arr2.length), k - mid2)",
    "        if (arr1.length == 0) return arr2(k.toInt)\n        if (arr2.length == 0) return arr1(k.toInt)\n        if (k == 0) return min(arr1(0), arr2(0))\n        if (arr1.length == 1 && arr2.length == 1) return min(arr1(0), arr2(0))\n        val mid1 = arr1.length / 2\n        val mid2 = arr2.length / 2\n        if (mid1 + mid2 < k) {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1, arr2.slice(mid2 + 1, arr2.length), k - mid2 - 1)\n            else findKth(arr1.slice(mid1 + 1, arr1.length), arr2, k - mid1 - 1)\n        }\n        else {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1.slice(0, mid1), arr2, k)\n            else findKth(arr1, arr2.slice(0, mid2), k)\n        }",
    "        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = arr1.length / 2\n        val mid2 = arr2.length / 2\n        if (arr1(mid1) < arr2(mid2)) {\n            if (k <= mid1 + mid2 + 1) findKth(arr1.slice(0, mid1), arr2, k)\n            else findKth(arr1.slice(mid1 + 1, arr1.length), arr2, k - mid1 - 1)\n        }\n        else {\n            if (k <= mid1 + mid2 + 1) findKth(arr1, arr2.slice(0, mid2), k)\n            else findKth(arr1, arr2.slice(mid2 + 1, arr2.length), k - mid2 - 1)\n        }",
    "        def findKth(arr1 : List[Long], arr2 : List[Long], k : Long, i : Long, j : Long) : Long = {\n            if (i >= arr1.length) return arr2(j.toInt + k.toInt - 1)\n            if (j >= arr2.length) return arr1(i.toInt + k.toInt - 1)\n            if (k == 1) return min(arr1(i.toInt), arr2(j.toInt))\n            val mid1 = if (i + k / 2 - 1 < arr1.length) arr1(i.toInt + k.toInt / 2 - 1) else Long.MaxValue\n            val mid2 = if (j + k / 2 - 1 < arr2.length) arr2(j.toInt + k.toInt / 2 - 1) else Long.MaxValue\n            if (mid1 < mid2) findKth(arr1, arr2, k - k / 2, i + k / 2, j)\n            else findKth(arr1, arr2, k - k / 2, i, j + k / 2)\n        }\n        findKth(arr1, arr2, k, 0, 0)",
    "        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        val mid1 = arr1.length / 2\n        val mid2 = arr2.length / 2\n        if (k <= (mid1 + mid2 + 1)) {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1.slice(0, mid1 + 1), arr2.slice(0, mid2), k)\n            else findKth(arr1.slice(0, mid1), arr2.slice(0, mid2 + 1), k)\n        } else {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n            else findKth(arr1, arr2.slice(mid2, arr2.length), k - mid2)\n        }",
    "        def findKth(arr1 : List[Long], arr2 : List[Long], k : Long, i : Long) : Long = {\n            if (i == k) {\n                if (arr1.head < arr2.head) arr1.head else arr2.head\n            } else {\n                if (arr1.head < arr2.head) findKth(arr1.tail, arr2, k, i + 1) else findKth(arr1, arr2.tail, k, i + 1)\n            }\n        }\n        findKth(arr1, arr2, k, 0)",
    "        if (arr1.length == 0) return arr2(k.toInt)\n        if (arr2.length == 0) return arr1(k.toInt)\n        if (k == 0) return min(arr1.head, arr2.head)\n        val mid1 = arr1.length / 2\n        val mid2 = arr2.length / 2\n        if (mid1 + mid2 < k) {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1, arr2.drop(mid2 + 1), k - mid2 - 1)\n            else findKth(arr1.drop(mid1 + 1), arr2, k - mid1 - 1)\n        } else {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1.take(mid1), arr2, k)\n            else findKth(arr1, arr2.take(mid2), k)\n        }",
    "        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val m = min(arr1.length, (k / 2).toInt)\n        val n = min(arr2.length, (k / 2).toInt)\n        if (arr1(m - 1) < arr2(n - 1)) findKth(arr1.drop(m), arr2, k - m)\n        else findKth(arr1, arr2.drop(n), k - n)",
    "        if (arr1.length == 0) return arr2(k.toInt)\n        if (arr2.length == 0) return arr1(k.toInt)\n        if (k == 0) return min(arr1(0), arr2(0))\n        val mid1 = arr1.length / 2\n        val mid2 = arr2.length / 2\n        if (mid1 + mid2 < k) {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1, arr2.drop(mid2 + 1), k - mid2 - 1)\n            else findKth(arr1.drop(mid1 + 1), arr2, k - mid1 - 1)\n        }\n        else {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1.take(mid1), arr2, k)\n            else findKth(arr1, arr2.take(mid2), k)\n        }",
    "        if (arr1.length == 0) return arr2(k.toInt)\n        if (arr2.length == 0) return arr1(k.toInt)\n        if (k == 0) return min(arr1(0), arr2(0))\n        val mid1 = arr1.length / 2\n        val mid2 = arr2.length / 2\n        if (mid1 + mid2 < k) {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1, arr2.drop(mid2 + 1), k - mid2 - 1)\n            else findKth(arr1.drop(mid1 + 1), arr2, k - mid1 - 1)\n        } else {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1.take(mid1), arr2, k)\n            else findKth(arr1, arr2.take(mid2), k)\n        }",
    "        if (arr1.length == 0) arr2(k.toInt - 1)\n        else if (arr2.length == 0) arr1(k.toInt - 1)\n        else if (k == 1) min(arr1(0), arr2(0))\n        else {\n            val mid1 = arr1.length / 2\n            val mid2 = arr2.length / 2\n            if (arr1(mid1) <= arr2(mid2)) {\n                if (mid1 + mid2 + 1 >= k) findKth(arr1.slice(0, mid1), arr2, k)\n                else findKth(arr1.slice(mid1 + 1, arr1.length), arr2, k - mid1 - 1)\n            } else {\n                if (mid1 + mid2 + 1 >= k) findKth(arr1, arr2.slice(0, mid2), k)\n                else findKth(arr1, arr2.slice(mid2 + 1, arr2.length), k - mid2 - 1)\n            }\n        }",
    "        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(arr1.length, k / 2)\n        val mid2 = min(arr2.length, k / 2)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n        else findKth(arr1, arr2.slice(mid2, arr2.length), k - mid2)",
    "        if (k == 1) {\n            min(arr1(0), arr2(0))\n        } else {\n            val l1 = arr1.size\n            val l2 = arr2.size\n            if (l1 == 0) {\n                arr2(k.toInt - 1)\n            } else if (l2 == 0) {\n                arr1(k.toInt - 1)\n            } else {\n                val m1 = min(l1, k / 2)\n                val m2 = min(l2, k / 2)\n                if (arr1(m1.toInt - 1) < arr2(m2.toInt - 1)) {\n                    findKth(arr1.slice(m1.toInt, l1), arr2, k - m1)\n                } else {\n                    findKth(arr1, arr2.slice(m2.toInt, l2), k - m2)\n                }\n            }\n        }",
    "        if (arr1.length == 0) return arr2(k.toInt)\n        if (arr2.length == 0) return arr1(k.toInt)\n        if (k == 0) return min(arr1(0), arr2(0))\n        val a = arr1(min(k.toInt / 2, arr1.length - 1))\n        val b = arr2(min(k.toInt / 2, arr2.length - 1))\n        if (a < b) findKth(arr1.slice(min(k.toInt / 2, arr1.length - 1), arr1.length), arr2, k - min(k.toInt / 2, arr1.length))\n        else findKth(arr1, arr2.slice(min(k.toInt / 2, arr2.length - 1), arr2.length), k - min(k.toInt / 2, arr2.length))",
    "        if (arr1.isEmpty) return arr2(k.toInt)\n        if (arr2.isEmpty) return arr1(k.toInt)\n        if (k == 0) return min(arr1(0), arr2(0))\n        val m = min(arr1.length, k.toInt / 2)\n        val n = min(arr2.length, k.toInt / 2)\n        if (arr1(m) < arr2(n)) findKth(arr1.slice(m, arr1.length), arr2, k - m)\n        else findKth(arr1, arr2.slice(n, arr2.length), k - n)",
    "        if (arr1.isEmpty) return arr2(k.toInt)\n        if (arr2.isEmpty) return arr1(k.toInt)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val i = min(k / 2, arr1.length).toInt\n        val j = min(k / 2, arr2.length).toInt\n        if (arr1(i - 1) < arr2(j - 1)) findKth(arr1.drop(i), arr2, k - i)\n        else findKth(arr1, arr2.drop(j), k - j)",
    "        def findKth(arr1 : List[Long], arr2 : List[Long], k : Long, i : Long, j : Long) : Long = {\n            if (i >= arr1.length) arr2(j.toInt + k.toInt - 1)\n            else if (j >= arr2.length) arr1(i.toInt + k.toInt - 1)\n            else if (k == 1) min(arr1(i.toInt), arr2(j.toInt))\n            else {\n                val mid1 = if (i + k / 2 - 1 < arr1.length) arr1(i.toInt + k.toInt / 2 - 1) else Long.MaxValue\n                val mid2 = if (j + k / 2 - 1 < arr2.length) arr2(j.toInt + k.toInt / 2 - 1) else Long.MaxValue\n                if (mid1 < mid2) findKth(arr1, arr2, k - k / 2, i + k / 2, j)\n                else findKth(arr1, arr2, k - k / 2, i, j + k / 2)\n            }\n        }\n        findKth(arr1, arr2, k, 0, 0)",
    "        if (arr1.length == 0) return arr2(k.toInt)\n        if (arr2.length == 0) return arr1(k.toInt)\n        if (k == 0) return min(arr1(0), arr2(0))\n        val mid1 = arr1.length / 2\n        val mid2 = arr2.length / 2\n        if (mid1 + mid2 < k) {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1, arr2.slice(mid2 + 1, arr2.length), k - mid2 - 1)\n            else findKth(arr1.slice(mid1 + 1, arr1.length), arr2, k - mid1 - 1)\n        }\n        else {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1.slice(0, mid1), arr2, k)\n            else findKth(arr1, arr2.slice(0, mid2), k)\n        }",
    "        if (k == 1) {\n            min(arr1.head, arr2.head)\n        } else {\n            val m = min(arr1.length, arr2.length)\n            val n = max(arr1.length, arr2.length)\n            if (k <= m) {\n                if (arr1.length == m) findKth(arr1.tail, arr2, k - 1)\n                else findKth(arr1, arr2.tail, k - 1)\n            } else {\n                if (arr1.length == m) findKth(arr1, arr2.tail, k - 1)\n                else findKth(arr1.tail, arr2, k - 1)\n            }\n        }",
    "        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(arr1.length, (k / 2).toInt)\n        val mid2 = min(arr2.length, (k / 2).toInt)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) findKth(arr1.drop(mid1), arr2, k - mid1)\n        else findKth(arr1, arr2.drop(mid2), k - mid2)",
    "        if (arr1.size == 0) return arr2(k.toInt - 1)\n        if (arr2.size == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(arr1.size, k / 2)\n        val mid2 = min(arr2.size, k / 2)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) findKth(arr1.drop(mid1), arr2, k - mid1)\n        else findKth(arr1, arr2.drop(mid2), k - mid2)",
    "        if (arr1.length == 0) return arr2(k.toInt)\n        if (arr2.length == 0) return arr1(k.toInt)\n        if (k == 0) return min(arr1(0), arr2(0))\n        var k1 = min(k / 2, arr1.length - 1)\n        var k2 = min(k / 2, arr2.length - 1)\n        if (arr1(k1) < arr2(k2)) {\n            findKth(arr1.slice(k1 + 1, arr1.length), arr2, k - k1 - 1)\n        } else {\n            findKth(arr1, arr2.slice(k2 + 1, arr2.length), k - k2 - 1)\n        }",
    "        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val a = min(arr1.length, (k / 2).toInt)\n        val b = min(arr2.length, (k / 2).toInt)\n        if (arr1(a - 1) < arr2(b - 1)) findKth(arr1.slice(a, arr1.length), arr2, k - a)\n        else findKth(arr1, arr2.slice(b, arr2.length), k - b)",
    "        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val k1 = min(k / 2, arr1.length)\n        val k2 = min(k / 2, arr2.length)\n        if (arr1(k1.toInt - 1) < arr2(k2.toInt - 1)) findKth(arr1.slice(k1.toInt, arr1.length), arr2, k - k1)\n        else findKth(arr1, arr2.slice(k2.toInt, arr2.length), k - k2)",
    "        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.length)\n        val mid2 = min(k / 2, arr2.length)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) findKth(arr1.drop(mid1), arr2, k - mid1)\n        else findKth(arr1, arr2.drop(mid2), k - mid2)",
    "        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.length)\n        val mid2 = min(k / 2, arr2.length)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) findKth(arr1.drop(mid1.toInt), arr2, k - mid1)\n        else findKth(arr1, arr2.drop(mid2.toInt), k - mid2)",
    "        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.length)\n        val mid2 = min(k / 2, arr2.length)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n        else findKth(arr1, arr2.slice(mid2, arr2.length), k - mid2)",
    "        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.length)\n        val mid2 = min(k / 2, arr2.length)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n        else findKth(arr1, arr2.slice(mid2, arr2.length), k - mid2)",
    "        if (arr1.length == 0) return arr2(k.toInt)\n        if (arr2.length == 0) return arr1(k.toInt)\n        if (k == 0) return min(arr1(0), arr2(0))\n        val mid1 = arr1.length / 2\n        val mid2 = arr2.length / 2\n        if (mid1 + mid2 < k) {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1, arr2.slice(mid2 + 1, arr2.length), k - mid2 - 1)\n            else findKth(arr1.slice(mid1 + 1, arr1.length), arr2, k - mid1 - 1)\n        }\n        else {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1.slice(0, mid1), arr2, k)\n            else findKth(arr1, arr2.slice(0, mid2), k)\n        }",
    "        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val i = min(arr1.length, (k / 2).toInt)\n        val j = min(arr2.length, (k / 2).toInt)\n        if (arr1(i - 1) > arr2(j - 1)) findKth(arr1, arr2.slice(j, arr2.length), k - j)\n        else findKth(arr1.slice(i, arr1.length), arr2, k - i)",
    "        if (arr1.length == 0) return arr2(k.toInt)\n        if (arr2.length == 0) return arr1(k.toInt)\n        if (k == 0) return min(arr1(0), arr2(0))\n        val mid1 = arr1.length / 2\n        val mid2 = arr2.length / 2\n        if (mid1 + mid2 < k) {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1, arr2.drop(mid2 + 1), k - mid2 - 1)\n            else findKth(arr1.drop(mid1 + 1), arr2, k - mid1 - 1)\n        }\n        else {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1.take(mid1), arr2, k)\n            else findKth(arr1, arr2.take(mid2), k)\n        }",
    "        if (arr1.isEmpty) return arr2(k.toInt - 1)\n        if (arr2.isEmpty) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1.head, arr2.head)\n        val mid1 = min(arr1.length, (k / 2).toInt)\n        val mid2 = min(arr2.length, (k / 2).toInt)\n        if (arr1(mid1 - 1) > arr2(mid2 - 1)) findKth(arr1, arr2.slice(mid2, arr2.length), k - mid2)\n        else findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)",
    "        if (arr1.length == 0) arr2(k.toInt - 1)\n        else if (arr2.length == 0) arr1(k.toInt - 1)\n        else {\n            val mid1 = arr1.length / 2\n            val mid2 = arr2.length / 2\n            if (mid1 + mid2 < k) {\n                if (arr1(mid1) > arr2(mid2)) findKth(arr1, arr2.slice(mid2 + 1, arr2.length), k - mid2 - 1)\n                else findKth(arr1.slice(mid1 + 1, arr1.length), arr2, k - mid1 - 1)\n            }\n            else {\n                if (arr1(mid1) > arr2(mid2)) findKth(arr1.slice(0, mid1), arr2, k)\n                else findKth(arr1, arr2.slice(0, mid2), k)\n            }\n        }",
    "        if (arr1.length == 0) arr2(k.toInt - 1)\n        else if (arr2.length == 0) arr1(k.toInt - 1)\n        else {\n            val mid1 = arr1.length / 2\n            val mid2 = arr2.length / 2\n            if (mid1 + mid2 < k) {\n                if (arr1(mid1) > arr2(mid2)) findKth(arr1, arr2.slice(mid2 + 1, arr2.length), k - mid2 - 1)\n                else findKth(arr1.slice(mid1 + 1, arr1.length), arr2, k - mid1 - 1)\n            }\n            else {\n                if (arr1(mid1) > arr2(mid2)) findKth(arr1.slice(0, mid1), arr2, k)\n                else findKth(arr1, arr2.slice(0, mid2), k)\n            }\n        }",
    "        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(arr1.length, (k / 2).toInt)\n        val mid2 = min(arr2.length, (k / 2).toInt)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) findKth(arr1.drop(mid1), arr2, k - mid1)\n        else findKth(arr1, arr2.drop(mid2), k - mid2)",
    "        if (arr1.length == 0) return arr2(k.toInt)\n        if (arr2.length == 0) return arr1(k.toInt)\n        if (k == 0) return min(arr1(0), arr2(0))\n        val mid1 = arr1.length / 2\n        val mid2 = arr2.length / 2\n        if (mid1 + mid2 < k) {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1, arr2.slice(mid2 + 1, arr2.length), k - mid2 - 1)\n            else findKth(arr1.slice(mid1 + 1, arr1.length), arr2, k - mid1 - 1)\n        } else {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1.slice(0, mid1), arr2, k)\n            else findKth(arr1, arr2.slice(0, mid2), k)\n        }",
    "        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.length)\n        val mid2 = min(k / 2, arr2.length)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n        else findKth(arr1, arr2.slice(mid2, arr2.length), k - mid2)",
    "        if (arr1.length == 0) return arr2(k.toInt)\n        if (arr2.length == 0) return arr1(k.toInt)\n        if (k == 0) return min(arr1(0), arr2(0))\n        val mid1 = min(arr1.length - 1, (k / 2).toInt)\n        val mid2 = min(arr2.length - 1, (k / 2).toInt)\n        if (arr1(mid1) > arr2(mid2)) findKth(arr1, arr2.slice(mid2 + 1, arr2.length), k - mid2 - 1)\n        else findKth(arr1.slice(mid1 + 1, arr1.length), arr2, k - mid1 - 1)",
    "        if (arr1.length == 0) return arr2(k.toInt)\n        if (arr2.length == 0) return arr1(k.toInt)\n        if (k == 0) return min(arr1(0), arr2(0))\n        val mid1 = arr1.length / 2\n        val mid2 = arr2.length / 2\n        if (mid1 + mid2 < k) {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1, arr2.slice(mid2 + 1, arr2.length), k - mid2 - 1)\n            else findKth(arr1.slice(mid1 + 1, arr1.length), arr2, k - mid1 - 1)\n        }\n        else {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1.slice(0, mid1), arr2, k)\n            else findKth(arr1, arr2.slice(0, mid2), k)\n        }",
    "        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.length)\n        val mid2 = min(k / 2, arr2.length)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n        else findKth(arr1, arr2.slice(mid2, arr2.length), k - mid2)",
    "        def findKth(arr1 : List[Long], arr2 : List[Long], k : Long, i : Long, j : Long) : Long = {\n            if (i == arr1.length) return arr2(j.toInt + k.toInt - 1)\n            if (j == arr2.length) return arr1(i.toInt + k.toInt - 1)\n            if (k == 1) return min(arr1(i.toInt), arr2(j.toInt))\n            val mid1 = if (i + k / 2 - 1 < arr1.length) arr1(i.toInt + (k / 2).toInt - 1) else Long.MaxValue\n            val mid2 = if (j + k / 2 - 1 < arr2.length) arr2(j.toInt + (k / 2).toInt - 1) else Long.MaxValue\n            if (mid1 < mid2) findKth(arr1, arr2, k - k / 2, i + k / 2, j)\n            else findKth(arr1, arr2, k - k / 2, i, j + k / 2)\n        }\n        findKth(arr1, arr2, k, 0, 0)",
    "        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.length)\n        val mid2 = min(k / 2, arr2.length)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) return findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n        else return findKth(arr1, arr2.slice(mid2, arr2.length), k - mid2)",
    "        if (arr1.length == 0) return arr2(k.toInt)\n        if (arr2.length == 0) return arr1(k.toInt)\n        if (k == 0) return min(arr1(0), arr2(0))\n        val mid1 = min(arr1.length - 1, (k / 2).toInt)\n        val mid2 = min(arr2.length - 1, (k / 2).toInt)\n        if (arr1(mid1) > arr2(mid2)) findKth(arr1, arr2.slice(mid2 + 1, arr2.length), k - mid2 - 1)\n        else findKth(arr1.slice(mid1 + 1, arr1.length), arr2, k - mid1 - 1)",
    "        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.length)\n        val mid2 = min(k / 2, arr2.length)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) findKth(arr1.drop(mid1), arr2, k - mid1)\n        else findKth(arr1, arr2.drop(mid2), k - mid2)",
    "        if (arr1.isEmpty) return arr2(k.toInt)\n        if (arr2.isEmpty) return arr1(k.toInt)\n        if (k == 0) return min(arr1.head, arr2.head)\n        val mid1 = arr1.size / 2\n        val mid2 = arr2.size / 2\n        if (mid1 + mid2 < k) {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1, arr2.drop(mid2 + 1), k - mid2 - 1)\n            else findKth(arr1.drop(mid1 + 1), arr2, k - mid1 - 1)\n        } else {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1.take(mid1), arr2, k)\n            else findKth(arr1, arr2.take(mid2), k)\n        }",
    "        if (arr1.isEmpty) return arr2(k.toInt - 1)\n        if (arr2.isEmpty) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1.head, arr2.head)\n        val mid1 = min(k / 2, arr1.length)\n        val mid2 = min(k / 2, arr2.length)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) findKth(arr1.drop(mid1), arr2, k - mid1)\n        else findKth(arr1, arr2.drop(mid2), k - mid2)",
    "        if (arr1.length == 0) return arr2(k.toInt)\n        if (arr2.length == 0) return arr1(k.toInt)\n        if (k == 0) return min(arr1(0), arr2(0))\n        val mid1 = arr1.length / 2\n        val mid2 = arr2.length / 2\n        if (mid1 + mid2 < k) {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1, arr2.drop(mid2 + 1), k - mid2 - 1)\n            else findKth(arr1.drop(mid1 + 1), arr2, k - mid1 - 1)\n        }\n        else {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1.take(mid1), arr2, k)\n            else findKth(arr1, arr2.take(mid2), k)\n        }",
    "        if (arr1.size == 0) return arr2(k.toInt - 1)\n        if (arr2.size == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.size)\n        val mid2 = min(k / 2, arr2.size)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) findKth(arr1.slice(mid1, arr1.size), arr2, k - mid1)\n        else findKth(arr1, arr2.slice(mid2, arr2.size), k - mid2)",
    "        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(arr1.length, (k / 2).toInt)\n        val mid2 = min(arr2.length, (k / 2).toInt)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) findKth(arr1.drop(mid1), arr2, k - mid1)\n        else findKth(arr1, arr2.drop(mid2), k - mid2)",
    "        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.length)\n        val mid2 = min(k / 2, arr2.length)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) findKth(arr1.drop(mid1), arr2, k - mid1)\n        else findKth(arr1, arr2.drop(mid2), k - mid2)",
    "        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.length)\n        val mid2 = min(k / 2, arr2.length)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) findKth(arr1.drop(mid1), arr2, k - mid1)\n        else findKth(arr1, arr2.drop(mid2), k - mid2)",
    "        def findKth(arr1 : List[Long], arr2 : List[Long], k : Long, i : Long, j : Long) : Long = {\n            if (i >= arr1.length) return arr2(j.toInt + k.toInt - 1)\n            if (j >= arr2.length) return arr1(i.toInt + k.toInt - 1)\n            if (k == 1) return min(arr1(i.toInt), arr2(j.toInt))\n            val mid1 = if (i + k / 2 - 1 < arr1.length) arr1(i.toInt + k.toInt / 2 - 1) else Long.MaxValue\n            val mid2 = if (j + k / 2 - 1 < arr2.length) arr2(j.toInt + k.toInt / 2 - 1) else Long.MaxValue\n            if (mid1 < mid2) findKth(arr1, arr2, k - k / 2, i + k / 2, j)\n            else findKth(arr1, arr2, k - k / 2, i, j + k / 2)\n        }\n        findKth(arr1, arr2, k, 0, 0)",
    "        if (k == 1) min(arr1.head, arr2.head)\n        else {\n            val m = min(arr1.length, arr2.length)\n            val n = min(k / 2, m)\n            if (arr1(n - 1) < arr2(n - 1)) findKth(arr1.drop(n), arr2, k - n)\n            else findKth(arr1, arr2.drop(n), k - n)\n        }",
    "        if (arr1.isEmpty) return arr2(k.toInt - 1)\n        if (arr2.isEmpty) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.length)\n        val mid2 = min(k / 2, arr2.length)\n        if (arr1(mid1 - 1) > arr2(mid2 - 1)) {\n            findKth(arr1, arr2.slice(mid2, arr2.length), k - mid2)\n        } else {\n            findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n        }",
    "        if (arr1.length == 0) return arr2(k.toInt)\n        if (arr2.length == 0) return arr1(k.toInt)\n        if (k == 0) return min(arr1(0), arr2(0))\n        val a = arr1(min(k.toInt / 2, arr1.length - 1).toInt)\n        val b = arr2(min(k.toInt / 2, arr2.length - 1).toInt)\n        if (a < b) findKth(arr1.drop(min(k.toInt / 2, arr1.length - 1).toInt), arr2, k - min(k.toInt / 2, arr1.length - 1))\n        else findKth(arr1, arr2.drop(min(k.toInt / 2, arr2.length - 1).toInt), k - min(k.toInt / 2, arr2.length - 1))",
    "        if (arr1.isEmpty) return arr2(k.toInt - 1)\n        if (arr2.isEmpty) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(arr1.length, (k / 2).toInt)\n        val mid2 = min(arr2.length, (k / 2).toInt)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) findKth(arr1.drop(mid1), arr2, k - mid1)\n        else findKth(arr1, arr2.drop(mid2), k - mid2)",
    "        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.length)\n        val mid2 = min(k / 2, arr2.length)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n        else findKth(arr1, arr2.slice(mid2, arr2.length), k - mid2)",
    "        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.length)\n        val mid2 = min(k / 2, arr2.length)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) return findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n        else return findKth(arr1, arr2.slice(mid2, arr2.length), k - mid2)",
    "        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.length)\n        val mid2 = min(k / 2, arr2.length)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) return findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n        else return findKth(arr1, arr2.slice(mid2, arr2.length), k - mid2)",
    "        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.length)\n        val mid2 = min(k / 2, arr2.length)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) findKth(arr1.drop(mid1), arr2, k - mid1)\n        else findKth(arr1, arr2.drop(mid2), k - mid2)",
    "        if (arr1.isEmpty) return arr2(k.toInt)\n        if (arr2.isEmpty) return arr1(k.toInt)\n        if (k == 0) return min(arr1.head, arr2.head)\n        val mid1 = arr1.length / 2\n        val mid2 = arr2.length / 2\n        if (mid1 + mid2 < k) {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1, arr2.drop(mid2 + 1), k - mid2 - 1)\n            else findKth(arr1.drop(mid1 + 1), arr2, k - mid1 - 1)\n        }\n        else {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1.take(mid1), arr2, k)\n            else findKth(arr1, arr2.take(mid2), k)\n        }",
    "        if (arr1.length == 0) arr2(k.toInt - 1)\n        else if (arr2.length == 0) arr1(k.toInt - 1)\n        else if (k == 1) min(arr1(0), arr2(0))\n        else {\n            val mid1 = arr1.length / 2\n            val mid2 = arr2.length / 2\n            if (arr1(mid1) <= arr2(mid2)) {\n                if (k <= mid1 + mid2 + 1) findKth(arr1.slice(0, mid1), arr2, k)\n                else findKth(arr1.slice(mid1 + 1, arr1.length), arr2, k - mid1 - 1)\n            }\n            else {\n                if (k <= mid1 + mid2 + 1) findKth(arr1, arr2.slice(0, mid2), k)\n                else findKth(arr1, arr2.slice(mid2 + 1, arr2.length), k - mid2 - 1)\n            }\n        }",
    "        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(arr1.length, (k / 2).toInt)\n        val mid2 = min(arr2.length, (k / 2).toInt)\n        if (arr1(mid1 - 1) > arr2(mid2 - 1)) return findKth(arr1, arr2.slice(mid2, arr2.length), k - mid2)\n        else return findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)",
    "        if (arr1.isEmpty) return arr2(k.toInt)\n        if (arr2.isEmpty) return arr1(k.toInt)\n        if (k == 0) return min(arr1.head, arr2.head)\n        val mid1 = arr1.length / 2\n        val mid2 = arr2.length / 2\n        if (mid1 + mid2 < k) {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1, arr2.drop(mid2 + 1), k - mid2 - 1)\n            else findKth(arr1.drop(mid1 + 1), arr2, k - mid1 - 1)\n        }\n        else {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1.take(mid1), arr2, k)\n            else findKth(arr1, arr2.take(mid2), k)\n        }",
    "        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(arr1.length, (k / 2).toInt)\n        val mid2 = min(arr2.length, (k / 2).toInt)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) {\n            findKth(arr1.drop(mid1), arr2, k - mid1)\n        } else {\n            findKth(arr1, arr2.drop(mid2), k - mid2)\n        }",
    "        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.length)\n        val mid2 = min(k / 2, arr2.length)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n        else findKth(arr1, arr2.slice(mid2, arr2.length), k - mid2)",
    "        if (arr1.size == 0) return arr2(k.toInt)\n        if (arr2.size == 0) return arr1(k.toInt)\n        if (k == 0) return min(arr1(0), arr2(0))\n        val mid1 = arr1.size / 2\n        val mid2 = arr2.size / 2\n        if (mid1 + mid2 < k) {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1, arr2.slice(mid2 + 1, arr2.size), k - mid2 - 1)\n            else findKth(arr1.slice(mid1 + 1, arr1.size), arr2, k - mid1 - 1)\n        }\n        else {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1.slice(0, mid1), arr2, k)\n            else findKth(arr1, arr2.slice(0, mid2), k)\n        }",
    "        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val m = min(arr1.length, k / 2)\n        val n = min(arr2.length, k / 2)\n        if (arr1(m - 1) < arr2(n - 1)) findKth(arr1.slice(m, arr1.length), arr2, k - m)\n        else findKth(arr1, arr2.slice(n, arr2.length), k - n)",
    "        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val k1 = min(k / 2, arr1.length)\n        val k2 = min(k / 2, arr2.length)\n        if (arr1(k1.toInt - 1) < arr2(k2.toInt - 1)) findKth(arr1.drop(k1.toInt), arr2, k - k1)\n        else findKth(arr1, arr2.drop(k2.toInt), k - k2)",
    "        if (arr1.isEmpty) return arr2(k.toInt)\n        if (arr2.isEmpty) return arr1(k.toInt)\n        if (k == 0) return min(arr1(0), arr2(0))\n        val mid1 = arr1.length / 2\n        val mid2 = arr2.length / 2\n        if (mid1 + mid2 < k) {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1, arr2.drop(mid2 + 1), k - mid2 - 1)\n            else findKth(arr1.drop(mid1 + 1), arr2, k - mid1 - 1)\n        }\n        else {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1.take(mid1), arr2, k)\n            else findKth(arr1, arr2.take(mid2), k)\n        }",
    "        if (arr1.isEmpty) return arr2(k.toInt - 1)\n        if (arr2.isEmpty) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.length)\n        val mid2 = min(k / 2, arr2.length)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) findKth(arr1.drop(mid1), arr2, k - mid1)\n        else findKth(arr1, arr2.drop(mid2), k - mid2)",
    "        if (arr1.isEmpty) return arr2(k.toInt)\n        if (arr2.isEmpty) return arr1(k.toInt)\n        if (k == 0) return min(arr1.head, arr2.head)\n        val mid1 = arr1.length / 2\n        val mid2 = arr2.length / 2\n        if (mid1 + mid2 < k) {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1, arr2.drop(mid2 + 1), k - mid2 - 1)\n            else findKth(arr1.drop(mid1 + 1), arr2, k - mid1 - 1)\n        }\n        else {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1.take(mid1), arr2, k)\n            else findKth(arr1, arr2.take(mid2), k)\n        }",
    "        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val k1 = min(k / 2, arr1.length)\n        val k2 = min(k / 2, arr2.length)\n        if (arr1(k1.toInt - 1) < arr2(k2.toInt - 1)) findKth(arr1.slice(k1.toInt, arr1.length), arr2, k - k1)\n        else findKth(arr1, arr2.slice(k2.toInt, arr2.length), k - k2)",
    "        var i = 0\n        var j = 0\n        var kth = 0L\n        while (i < arr1.length && j < arr2.length) {\n            if (arr1(i) < arr2(j)) {\n                kth = arr1(i)\n                i += 1\n            } else {\n                kth = arr2(j)\n                j += 1\n            }\n            if (i + j == k) return kth\n        }\n        if (i < arr1.length) kth = arr1(i + k - j - 1)\n        else kth = arr2(j + k - i - 1)\n        kth",
    "        if (k == 1) min(arr1(0), arr2(0))\n        else {\n            val n = arr1.length\n            val m = arr2.length\n            val i = min(k / 2, n).toInt\n            val j = min(k / 2, m).toInt\n            if (arr1(i - 1) < arr2(j - 1)) findKth(arr1.slice(i, n), arr2, k - i)\n            else findKth(arr1, arr2.slice(j, m), k - j)\n        }",
    "        if (arr1.length == 0) return arr2(k.toInt)\n        if (arr2.length == 0) return arr1(k.toInt)\n        if (k == 0) return min(arr1(0), arr2(0))\n        val mid1 = arr1(arr1.length / 2)\n        val mid2 = arr2(arr2.length / 2)\n        if (mid1 < mid2) {\n            if (k <= arr1.length / 2 + arr2.length / 2) findKth(arr1.slice(0, arr1.length / 2 + 1), arr2, k)\n            else findKth(arr1, arr2.slice(arr2.length / 2 + 1, arr2.length), k - arr2.length / 2 - 1)\n        } else {\n            if (k <= arr1.length / 2 + arr2.length / 2) findKth(arr1, arr2.slice(0, arr2.length / 2 + 1), k)\n            else findKth(arr1.slice(arr1.length / 2 + 1, arr1.length), arr2, k - arr1.length / 2 - 1)\n        }",
    "        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.length)\n        val mid2 = min(k / 2, arr2.length)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) findKth(arr1.drop(mid1), arr2, k - mid1)\n        else findKth(arr1, arr2.drop(mid2), k - mid2)",
    "        if (arr1.length == 0) return arr2(k.toInt)\n        if (arr2.length == 0) return arr1(k.toInt)\n        if (k == 0) return min(arr1(0), arr2(0))\n        val a = arr1.length\n        val b = arr2.length\n        val mid1 = min(a - 1, (k / 2).toInt)\n        val mid2 = min(b - 1, (k / 2).toInt)\n        if (arr1(mid1) < arr2(mid2)) findKth(arr1.slice(mid1 + 1, a), arr2, k - mid1 - 1)\n        else findKth(arr1, arr2.slice(mid2 + 1, b), k - mid2 - 1)",
    "        if (arr1.length == 0) return arr2(k.toInt)\n        if (arr2.length == 0) return arr1(k.toInt)\n        if (k == 0) return min(arr1(0), arr2(0))\n        val mid1 = arr1.length / 2\n        val mid2 = arr2.length / 2\n        if (mid1 + mid2 < k) {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1, arr2.drop(mid2 + 1), k - mid2 - 1)\n            else findKth(arr1.drop(mid1 + 1), arr2, k - mid1 - 1)\n        }\n        else {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1.take(mid1), arr2, k)\n            else findKth(arr1, arr2.take(mid2), k)\n        }",
    "        if (arr1.length == 0) return arr2(k.toInt)\n        if (arr2.length == 0) return arr1(k.toInt)\n        if (k == 0) return min(arr1(0), arr2(0))\n        val mid1 = arr1.length / 2\n        val mid2 = arr2.length / 2\n        if (mid1 + mid2 < k) {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1, arr2.slice(mid2 + 1, arr2.length), k - mid2 - 1)\n            else findKth(arr1.slice(mid1 + 1, arr1.length), arr2, k - mid1 - 1)\n        }\n        else {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1.slice(0, mid1), arr2, k)\n            else findKth(arr1, arr2.slice(0, mid2), k)\n        }",
    "        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.length)\n        val mid2 = min(k / 2, arr2.length)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) findKth(arr1.drop(mid1), arr2, k - mid1)\n        else findKth(arr1, arr2.drop(mid2), k - mid2)",
    "        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.length)\n        val mid2 = min(k / 2, arr2.length)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) findKth(arr1.drop(mid1), arr2, k - mid1)\n        else findKth(arr1, arr2.drop(mid2), k - mid2)",
    "        if (arr1.length == 0) return arr2(k.toInt)\n        if (arr2.length == 0) return arr1(k.toInt)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val m = min(arr1.length, k / 2)\n        val n = min(arr2.length, k / 2)\n        if (arr1(m - 1) < arr2(n - 1)) findKth(arr1.slice(m, arr1.length), arr2, k - m)\n        else findKth(arr1, arr2.slice(n, arr2.length), k - n)",
    "        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.length)\n        val mid2 = min(k / 2, arr2.length)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n        else findKth(arr1, arr2.slice(mid2, arr2.length), k - mid2)",
    "        if (arr1.length == 0) return arr2(k.toInt)\n        if (arr2.length == 0) return arr1(k.toInt)\n        if (k == 0) return min(arr1(0), arr2(0))\n        val mid1 = arr1.length / 2\n        val mid2 = arr2.length / 2\n        if (mid1 + mid2 < k) {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1, arr2.drop(mid2 + 1), k - mid2 - 1)\n            else findKth(arr1.drop(mid1 + 1), arr2, k - mid1 - 1)\n        } else {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1.take(mid1), arr2, k)\n            else findKth(arr1, arr2.take(mid2), k)\n        }",
    "        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.length)\n        val mid2 = min(k / 2, arr2.length)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) {\n            findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n        } else {\n            findKth(arr1, arr2.slice(mid2, arr2.length), k - mid2)\n        }",
    "        if (arr1.isEmpty) arr2(k.toInt - 1)\n        else if (arr2.isEmpty) arr1(k.toInt - 1)\n        else {\n            val m = arr1.length / 2\n            val n = arr2.length / 2\n            if (m + n < k) {\n                if (arr1(m) > arr2(n)) findKth(arr1, arr2.drop(n + 1), k - n - 1)\n                else findKth(arr1.drop(m + 1), arr2, k - m - 1)\n            }\n            else {\n                if (arr1(m) > arr2(n)) findKth(arr1.take(m), arr2, k)\n                else findKth(arr1, arr2.take(n), k)\n            }\n        }",
    "        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.length)\n        val mid2 = min(k / 2, arr2.length)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) findKth(arr1.drop(mid1), arr2, k - mid1)\n        else findKth(arr1, arr2.drop(mid2), k - mid2)",
    "        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.length)\n        val mid2 = min(k / 2, arr2.length)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n        else findKth(arr1, arr2.slice(mid2, arr2.length), k - mid2)",
    "        if (k == 1) {\n            min(arr1.head, arr2.head)\n        } else {\n            val m = min(arr1.length, arr2.length)\n            val n = min(k / 2, m)\n            if (arr1(n - 1) < arr2(n - 1)) findKth(arr1.drop(n), arr2, k - n)\n            else findKth(arr1, arr2.drop(n), k - n)\n        }",
    "        def findKthRec(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n            if (arr1.length > arr2.length) findKthRec(arr2, arr1, k)\n            else if (arr1.length == 0) arr2(k.toInt - 1)\n            else if (k == 1) min(arr1(0), arr2(0))\n            else {\n                val i = min(k / 2, arr1.length).toInt\n                val j = min(k / 2, arr2.length).toInt\n                if (arr1(i - 1) < arr2(j - 1)) findKthRec(arr1.drop(i), arr2, k - i)\n                else findKthRec(arr1, arr2.drop(j), k - j)\n            }\n        }\n        findKthRec(arr1, arr2, k)",
    "        if (arr1.length == 0) return arr2(k.toInt)\n        if (arr2.length == 0) return arr1(k.toInt)\n        if (k == 0) return min(arr1(0), arr2(0))\n        val mid1 = arr1(min(k / 2, arr1.length - 1).toInt)\n        val mid2 = arr2(min(k / 2, arr2.length - 1).toInt)\n        if (mid1 < mid2) findKth(arr1.drop(min(k / 2, arr1.length - 1).toInt), arr2, k - min(k / 2, arr1.length - 1))\n        else findKth(arr1, arr2.drop(min(k / 2, arr2.length - 1).toInt), k - min(k / 2, arr2.length - 1))",
    "        if (arr1.length == 0) return arr2(k.toInt)\n        if (arr2.length == 0) return arr1(k.toInt)\n        if (k == 0) return min(arr1(0), arr2(0))\n        val mid1 = arr1.length / 2\n        val mid2 = arr2.length / 2\n        if (mid1 + mid2 < k) {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1, arr2.drop(mid2 + 1), k - mid2 - 1)\n            else findKth(arr1.drop(mid1 + 1), arr2, k - mid1 - 1)\n        }\n        else {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1.take(mid1), arr2, k)\n            else findKth(arr1, arr2.take(mid2), k)\n        }",
    "        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.length)\n        val mid2 = min(k / 2, arr2.length)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) return findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n        else return findKth(arr1, arr2.slice(mid2, arr2.length), k - mid2)",
    "        if (arr1.length > arr2.length) findKth(arr2, arr1, k)\n        else if (arr1.length == 0) arr2(k.toInt - 1)\n        else if (k == 1) min(arr1(0), arr2(0))\n        else {\n            val i = min(k / 2, arr1.length).toInt\n            val j = min(k / 2, arr2.length).toInt\n            if (arr1(i - 1) > arr2(j - 1)) findKth(arr1, arr2.slice(j, arr2.length), k - j)\n            else findKth(arr1.slice(i, arr1.length), arr2, k - i)\n        }",
    "        if (arr1.length == 0) return arr2(k.toInt)\n        if (arr2.length == 0) return arr1(k.toInt)\n        if (k == 0) return min(arr1(0), arr2(0))\n        val mid1 = arr1.length / 2\n        val mid2 = arr2.length / 2\n        if (mid1 + mid2 < k) {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1, arr2.drop(mid2 + 1), k - mid2 - 1)\n            else findKth(arr1.drop(mid1 + 1), arr2, k - mid1 - 1)\n        }\n        else {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1.take(mid1), arr2, k)\n            else findKth(arr1, arr2.take(mid2), k)\n        }",
    "        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.length)\n        val mid2 = min(k / 2, arr2.length)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) findKth(arr1.drop(mid1), arr2, k - mid1)\n        else findKth(arr1, arr2.drop(mid2), k - mid2)",
    "        def findKth(arr1 : List[Long], arr2 : List[Long], k : Long, i : Long, j : Long) : Long = {\n            if (i >= arr1.length) return arr2(j.toInt + k.toInt - 1)\n            if (j >= arr2.length) return arr1(i.toInt + k.toInt - 1)\n            if (k == 1) return min(arr1(i.toInt), arr2(j.toInt))\n            val mid1 = if (i + k / 2 - 1 < arr1.length) arr1(i.toInt + k.toInt / 2 - 1) else Long.MaxValue\n            val mid2 = if (j + k / 2 - 1 < arr2.length) arr2(j.toInt + k.toInt / 2 - 1) else Long.MaxValue\n            if (mid1 < mid2) findKth(arr1, arr2, k - k / 2, i + k / 2, j)\n            else findKth(arr1, arr2, k - k / 2, i, j + k / 2)\n        }\n        findKth(arr1, arr2, k, 0, 0)",
    "        if (arr1.isEmpty) return arr2(k.toInt - 1)\n        if (arr2.isEmpty) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val m = min(arr1.length, k / 2)\n        val n = min(arr2.length, k / 2)\n        if (arr1(m - 1) < arr2(n - 1)) findKth(arr1.drop(m), arr2, k - m)\n        else findKth(arr1, arr2.drop(n), k - n)",
    "        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.length)\n        val mid2 = min(k / 2, arr2.length)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) return findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n        else return findKth(arr1, arr2.slice(mid2, arr2.length), k - mid2)",
    "        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        val mid1 = arr1.length / 2\n        val mid2 = arr2.length / 2\n        if (mid1 + mid2 < k) {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1, arr2.slice(mid2 + 1, arr2.length), k - mid2 - 1)\n            else findKth(arr1.slice(mid1 + 1, arr1.length), arr2, k - mid1 - 1)\n        } else {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1.slice(0, mid1), arr2, k)\n            else findKth(arr1, arr2.slice(0, mid2), k)\n        }",
    "        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.length)\n        val mid2 = min(k / 2, arr2.length)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n        else findKth(arr1, arr2.slice(mid2, arr2.length), k - mid2)",
    "        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.length)\n        val mid2 = min(k / 2, arr2.length)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n        else findKth(arr1, arr2.slice(mid2, arr2.length), k - mid2)",
    "        def findKth(arr1 : List[Long], arr2 : List[Long], k : Long, i : Long, j : Long) : Long = {\n            if (i >= arr1.length) arr2(j.toInt + k.toInt - 1)\n            else if (j >= arr2.length) arr1(i.toInt + k.toInt - 1)\n            else if (k == 1) min(arr1(i.toInt), arr2(j.toInt))\n            else {\n                val mid1 = if (i + k / 2 - 1 < arr1.length) arr1(i.toInt + (k / 2).toInt - 1) else Long.MaxValue\n                val mid2 = if (j + k / 2 - 1 < arr2.length) arr2(j.toInt + (k / 2).toInt - 1) else Long.MaxValue\n                if (mid1 < mid2) findKth(arr1, arr2, k - k / 2, i + k / 2, j)\n                else findKth(arr1, arr2, k - k / 2, i, j + k / 2)\n            }\n        }\n        findKth(arr1, arr2, k, 0, 0)",
    "        def findKth(arr1 : List[Long], arr2 : List[Long], k : Long, start1 : Long, start2 : Long) : Long = {\n            if (start1 >= arr1.length) return arr2(start2.toInt + k.toInt - 1)\n            if (start2 >= arr2.length) return arr1(start1.toInt + k.toInt - 1)\n            if (k == 1) return min(arr1(start1.toInt), arr2(start2.toInt))\n            val mid1 = min(start1 + k / 2, arr1.length) - 1\n            val mid2 = min(start2 + k / 2, arr2.length) - 1\n            if (arr1(mid1.toInt) <= arr2(mid2.toInt)) findKth(arr1, arr2, k - (mid1 - start1 + 1), mid1 + 1, start2)\n            else findKth(arr1, arr2, k - (mid2 - start2 + 1), start1, mid2 + 1)\n        }\n        findKth(arr1, arr2, k, 0, 0)",
    "        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.length)\n        val mid2 = min(k / 2, arr2.length)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n        else findKth(arr1, arr2.slice(mid2, arr2.length), k - mid2)",
    "        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.length)\n        val mid2 = min(k / 2, arr2.length)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) findKth(arr1.drop(mid1), arr2, k - mid1)\n        else findKth(arr1, arr2.drop(mid2), k - mid2)",
    "        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.length)\n        val mid2 = min(k / 2, arr2.length)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) findKth(arr1.drop(mid1), arr2, k - mid1)\n        else findKth(arr1, arr2.drop(mid2), k - mid2)",
    "        if (arr1.isEmpty) return arr2(k.toInt - 1)\n        if (arr2.isEmpty) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.length)\n        val mid2 = min(k / 2, arr2.length)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) findKth(arr1.drop(mid1), arr2, k - mid1)\n        else findKth(arr1, arr2.drop(mid2), k - mid2)",
    "        def findKth(arr1 : List[Long], arr2 : List[Long], k : Long, i : Long, j : Long) : Long = {\n            if (i >= arr1.length) arr2(j.toInt + k.toInt - 1)\n            else if (j >= arr2.length) arr1(i.toInt + k.toInt - 1)\n            else if (k == 1) min(arr1(i.toInt), arr2(j.toInt))\n            else {\n                val m = k / 2\n                val mid1 = if (i + m - 1 < arr1.length) arr1(i.toInt + m.toInt - 1) else Long.MaxValue\n                val mid2 = if (j + m - 1 < arr2.length) arr2(j.toInt + m.toInt - 1) else Long.MaxValue\n                if (mid1 < mid2) findKth(arr1, arr2, k - m, i + m, j)\n                else findKth(arr1, arr2, k - m, i, j + m)\n            }\n        }\n        findKth(arr1, arr2, k, 0, 0)",
    "        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = arr1.length / 2\n        val mid2 = arr2.length / 2\n        if (arr1(mid1) <= arr2(mid2)) {\n            if (k <= mid1 + mid2 + 1) return findKth(arr1.slice(0, mid1), arr2, k)\n            else return findKth(arr1, arr2.slice(mid2 + 1, arr2.length), k - mid2 - 1)\n        } else {\n            if (k <= mid1 + mid2 + 1) return findKth(arr1, arr2.slice(0, mid2), k)\n            else return findKth(arr1.slice(mid1 + 1, arr1.length), arr2, k - mid1 - 1)\n        }",
    "        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.length)\n        val mid2 = min(k / 2, arr2.length)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n        else findKth(arr1, arr2.slice(mid2, arr2.length), k - mid2)",
    "        if (arr1.isEmpty) return arr2(k.toInt)\n        if (arr2.isEmpty) return arr1(k.toInt)\n        if (k == 0) return min(arr1.head, arr2.head)\n        val mid1 = arr1.size / 2\n        val mid2 = arr2.size / 2\n        if (mid1 + mid2 < k) {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1, arr2.drop(mid2 + 1), k - mid2 - 1)\n            else findKth(arr1.drop(mid1 + 1), arr2, k - mid1 - 1)\n        }\n        else {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1.take(mid1), arr2, k)\n            else findKth(arr1, arr2.take(mid2), k)\n        }",
    "        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.length)\n        val mid2 = min(k / 2, arr2.length)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) findKth(arr1.drop(mid1), arr2, k - mid1)\n        else findKth(arr1, arr2.drop(mid2), k - mid2)",
    "        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.length)\n        val mid2 = min(k / 2, arr2.length)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n        else findKth(arr1, arr2.slice(mid2, arr2.length), k - mid2)",
    "        if (arr1.length == 0) return arr2(k.toInt)\n        if (arr2.length == 0) return arr1(k.toInt)\n        if (k == 0) return min(arr1(0), arr2(0))\n        val mid1 = arr1.length / 2\n        val mid2 = arr2.length / 2\n        if (arr1(mid1) <= arr2(mid2)) {\n            if (k <= mid1 + mid2) return findKth(arr1.slice(0, mid1), arr2, k)\n            else return findKth(arr1, arr2.slice(mid2 + 1, arr2.length), k - mid2 - 1)\n        } else {\n            if (k <= mid1 + mid2) return findKth(arr1, arr2.slice(0, mid2), k)\n            else return findKth(arr1.slice(mid1 + 1, arr1.length), arr2, k - mid1 - 1)\n        }",
    "        if (arr1.length == 0) return arr2(k.toInt)\n        if (arr2.length == 0) return arr1(k.toInt)\n        if (k == 0) return min(arr1(0), arr2(0))\n        val a = arr1(min(k.toInt / 2, arr1.length - 1).toInt)\n        val b = arr2(min(k.toInt / 2, arr2.length - 1).toInt)\n        if (a < b) findKth(arr1.drop(min(k.toInt / 2, arr1.length - 1).toInt), arr2, k - min(k.toInt / 2, arr1.length - 1))\n        else findKth(arr1, arr2.drop(min(k.toInt / 2, arr2.length - 1).toInt), k - min(k.toInt / 2, arr2.length - 1))",
    "        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.length)\n        val mid2 = min(k / 2, arr2.length)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) findKth(arr1.drop(mid1), arr2, k - mid1)\n        else findKth(arr1, arr2.drop(mid2), k - mid2)",
    "        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.length)\n        val mid2 = min(k / 2, arr2.length)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n        else findKth(arr1, arr2.slice(mid2, arr2.length), k - mid2)",
    "        def findKth(arr1 : List[Long], arr2 : List[Long], k : Long, i : Long, j : Long) : Long = {\n            if (k == 1) min(arr1(i.toInt), arr2(j.toInt))\n            else {\n                val mid1 = if (i + k / 2 - 1 < arr1.length) arr1(i.toInt + k.toInt / 2 - 1) else Long.MaxValue\n                val mid2 = if (j + k / 2 - 1 < arr2.length) arr2(j.toInt + k.toInt / 2 - 1) else Long.MaxValue\n                if (mid1 < mid2) findKth(arr1, arr2, k - k / 2, i + k / 2, j)\n                else findKth(arr1, arr2, k - k / 2, i, j + k / 2)\n            }\n        }\n        findKth(arr1, arr2, k, 0, 0)",
    "        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val k1 = min(k / 2, arr1.length)\n        val k2 = min(k / 2, arr2.length)\n        if (arr1(k1.toInt - 1) < arr2(k2.toInt - 1)) findKth(arr1.slice(k1.toInt, arr1.length), arr2, k - k1)\n        else findKth(arr1, arr2.slice(k2.toInt, arr2.length), k - k2)",
    "        if (arr1.length == 0) return arr2(k.toInt)\n        if (arr2.length == 0) return arr1(k.toInt)\n        if (k == 0) return min(arr1(0), arr2(0))\n        val mid1 = (arr1.length - 1) / 2\n        val mid2 = (arr2.length - 1) / 2\n        if (mid1 + mid2 < k) {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1, arr2.slice(mid2 + 1, arr2.length), k - mid2 - 1)\n            else findKth(arr1.slice(mid1 + 1, arr1.length), arr2, k - mid1 - 1)\n        }\n        else {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1.slice(0, mid1), arr2, k)\n            else findKth(arr1, arr2.slice(0, mid2), k)\n        }",
    "        if (arr1.length == 0) return arr2(k.toInt)\n        if (arr2.length == 0) return arr1(k.toInt)\n        if (k == 0) return min(arr1(0), arr2(0))\n        val i = min(arr1.length - 1, k / 2)\n        val j = min(arr2.length - 1, k / 2)\n        if (arr1(i) < arr2(j)) findKth(arr1.slice(i + 1, arr1.length), arr2, k - i - 1)\n        else findKth(arr1, arr2.slice(j + 1, arr2.length), k - j - 1)",
    "        if (arr1.length > arr2.length) findKth(arr2, arr1, k)\n        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val i = min(k / 2, arr1.length).toInt\n        val j = (k - i).toInt\n        if (arr1(i - 1) > arr2(j - 1)) findKth(arr1, arr2.slice(j, arr2.length), k - j)\n        else findKth(arr1.slice(i, arr1.length), arr2, k - i)",
    "        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.length)\n        val mid2 = min(k / 2, arr2.length)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) {\n            findKth(arr1.drop(mid1), arr2, k - mid1)\n        } else {\n            findKth(arr1, arr2.drop(mid2), k - mid2)\n        }",
    "        if (arr1.length > arr2.length) findKth(arr2, arr1, k)\n        else if (arr1.length == 0) arr2(k.toInt - 1)\n        else if (k == 1) min(arr1(0), arr2(0))\n        else {\n            val i = min(k / 2, arr1.length).toInt\n            val j = min(k / 2, arr2.length).toInt\n            if (arr1(i - 1) > arr2(j - 1)) findKth(arr1, arr2.drop(j), k - j)\n            else findKth(arr1.drop(i), arr2, k - i)\n        }",
    "        if (arr1.isEmpty) return arr2(k.toInt - 1)\n        if (arr2.isEmpty) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1.head, arr2.head)\n        val mid1 = arr1.length / 2\n        val mid2 = arr2.length / 2\n        if (arr1(mid1) <= arr2(mid2)) {\n            if (k <= mid1 + mid2 + 1) findKth(arr1.slice(0, mid1), arr2, k)\n            else findKth(arr1, arr2.slice(mid2 + 1, arr2.length), k - mid2 - 1)\n        } else {\n            if (k <= mid1 + mid2 + 1) findKth(arr1, arr2.slice(0, mid2), k)\n            else findKth(arr1.slice(mid1 + 1, arr1.length), arr2, k - mid1 - 1)\n        }",
    "        def findKth(arr1 : List[Long], arr2 : List[Long], k : Long, start1 : Int, end1 : Int, start2 : Int, end2 : Int) : Long = {\n            if (start1 > end1) return arr2(start2 + k.toInt - 1)\n            if (start2 > end2) return arr1(start1 + k.toInt - 1)\n            val mid1 = (start1 + end1) / 2\n            val mid2 = (start2 + end2) / 2\n            if (arr1(mid1) <= arr2(mid2)) {\n                if (k <= (mid1 - start1) + (mid2 - start2) + 1) findKth(arr1, arr2, k, start1, end1, start2, mid2 - 1)\n                else findKth(arr1, arr2, k - (mid2 - start2) - 1, mid1 + 1, end1, start2, end2)\n            } else {\n                if (k <= (mid1 - start1) + (mid2 - start2) + 1) findKth(arr1, arr2, k, start1, mid1 - 1, start2, end2)\n                else findKth(arr1, arr2, k - (mid1 - start1) - 1, start1, end1, mid2 + 1, end2)\n            }\n        }\n        findKth(arr1, arr2, k, 0, arr1.length - 1, 0, arr2.length - 1)",
    "        if (arr1.length == 0) return arr2(k.toInt)\n        if (arr2.length == 0) return arr1(k.toInt)\n        if (k == 0) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.length - 1)\n        val mid2 = min(k / 2, arr2.length - 1)\n        if (arr1(mid1) < arr2(mid2)) findKth(arr1.slice(mid1 + 1, arr1.length), arr2, k - mid1 - 1)\n        else findKth(arr1, arr2.slice(mid2 + 1, arr2.length), k - mid2 - 1)",
    "        if (arr1.length == 0) return arr2(k.toInt)\n        if (arr2.length == 0) return arr1(k.toInt)\n        if (k == 0) return min(arr1(0), arr2(0))\n        val mid1 = arr1.length / 2\n        val mid2 = arr2.length / 2\n        if (mid1 + mid2 < k) {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1, arr2.drop(mid2 + 1), k - mid2 - 1)\n            else findKth(arr1.drop(mid1 + 1), arr2, k - mid1 - 1)\n        }\n        else {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1.take(mid1), arr2, k)\n            else findKth(arr1, arr2.take(mid2), k)\n        }",
    "        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(arr1.length, (k / 2).toInt)\n        val mid2 = min(arr2.length, (k / 2).toInt)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n        else findKth(arr1, arr2.slice(mid2, arr2.length), k - mid2)",
    "        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.length)\n        val mid2 = min(k / 2, arr2.length)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n        else findKth(arr1, arr2.slice(mid2, arr2.length), k - mid2)",
    "        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.length)\n        val mid2 = min(k / 2, arr2.length)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) findKth(arr1.drop(mid1), arr2, k - mid1)\n        else findKth(arr1, arr2.drop(mid2), k - mid2)",
    "        if (arr1.isEmpty) return arr2(k.toInt)\n        if (arr2.isEmpty) return arr1(k.toInt)\n        if (k == 0) return min(arr1(0), arr2(0))\n        val mid1 = arr1.length / 2\n        val mid2 = arr2.length / 2\n        if (mid1 + mid2 < k) {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1, arr2.slice(mid2 + 1, arr2.length), k - mid2 - 1)\n            else findKth(arr1.slice(mid1 + 1, arr1.length), arr2, k - mid1 - 1)\n        } else {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1.slice(0, mid1), arr2, k)\n            else findKth(arr1, arr2.slice(0, mid2), k)\n        }",
    "        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val m = min(arr1.length, (k / 2).toInt)\n        val n = min(arr2.length, (k / 2).toInt)\n        if (arr1(m - 1) < arr2(n - 1)) return findKth(arr1.slice(m, arr1.length), arr2, k - m)\n        else return findKth(arr1, arr2.slice(n, arr2.length), k - n)",
    "        if (arr1.isEmpty) return arr2(k.toInt - 1)\n        if (arr2.isEmpty) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.length)\n        val mid2 = min(k / 2, arr2.length)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) findKth(arr1.drop(mid1), arr2, k - mid1)\n        else findKth(arr1, arr2.drop(mid2), k - mid2)",
    "        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.length)\n        val mid2 = min(k / 2, arr2.length)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) findKth(arr1.drop(mid1), arr2, k - mid1)\n        else findKth(arr1, arr2.drop(mid2), k - mid2)",
    "        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.length)\n        val mid2 = min(k / 2, arr2.length)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) findKth(arr1.drop(mid1), arr2, k - mid1)\n        else findKth(arr1, arr2.drop(mid2), k - mid2)",
    "        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.length)\n        val mid2 = min(k / 2, arr2.length)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n        else findKth(arr1, arr2.slice(mid2, arr2.length), k - mid2)"
  ]
}