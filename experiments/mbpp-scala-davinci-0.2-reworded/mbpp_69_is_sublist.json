{
  "name": "mbpp_69_is_sublist",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a list contains the given sublist or not.\n    def isSublist(l : List[Long], s : List[Long]) : Boolean = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_69_is_sublist.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(isSublist((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)), (List[Long](3l.toLong, 7l.toLong))) == (false));\n    assert(isSublist((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)), (List[Long](4l.toLong, 3l.toLong))) == (true));\n    assert(isSublist((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)), (List[Long](1l.toLong, 6l.toLong))) == (false));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        if (l.length < s.length) return false\n        for (i <- 0 to l.length - s.length) {\n            var found = true\n            for (j <- 0 to s.length - 1) {\n                if (l(i + j) != s(j)) {\n                    found = false\n                    break\n                }\n            }\n            if (found) return true\n        }\n        return false",
    "        if (s.isEmpty) return true\n        if (l.isEmpty) return false\n        if (l.head == s.head) {\n            if (isSublist(l.tail, s.tail)) return true\n        }\n        isSublist(l.tail, s)",
    "        if (s.length > l.length) false\n        else if (s.length == 0) true\n        else if (s.head == l.head) isSublist(l.tail, s.tail)\n        else isSublist(l.tail, s)",
    "        if (l.length < s.length) return false\n        if (l.length == s.length) return l == s\n        if (l.take(s.length) == s) return true\n        isSublist(l.tail, s)",
    "        if (l.length < s.length) return false\n        if (l.length == s.length) return l == s\n        if (l.take(s.length) == s) return true\n        isSublist(l.tail, s)",
    "        if (l.length < s.length) return false\n        val n = l.length - s.length\n        for (i <- 0 to n) {\n            if (l.slice(i, i + s.length) == s) return true\n        }\n        return false",
    "        if (l.length < s.length) return false\n        for (i <- 0 to l.length - s.length) {\n            var flag = true\n            for (j <- 0 to s.length - 1) {\n                if (l(i + j) != s(j)) {\n                    flag = false\n                    break\n                }\n            }\n            if (flag) return true\n        }\n        return false",
    "        def isSublist(l : List[Long], s : List[Long], i : Int) : Boolean = {\n            if (s.isEmpty) true\n            else if (l.isEmpty) false\n            else if (l(i) == s(0)) isSublist(l, s.tail, i + 1)\n            else isSublist(l, s, i + 1)\n        }\n        isSublist(l, s, 0)",
    "        if (s.isEmpty) true\n        else if (l.isEmpty) false\n        else if (l.head == s.head) isSublist(l.tail, s.tail)\n        else isSublist(l.tail, s)",
    "        if (s.isEmpty) true\n        else if (l.isEmpty) false\n        else if (l.head == s.head) isSublist(l.tail, s.tail)\n        else isSublist(l.tail, s)",
    "        if (l.length < s.length) return false\n        for (i <- 0 to l.length - s.length) {\n            if (l.slice(i, i + s.length) == s) return true\n        }\n        false",
    "        if (l.length < s.length) return false\n        if (l.length == s.length) return l == s\n        if (l.take(s.length) == s) return true\n        isSublist(l.tail, s)",
    "        if (l.length < s.length) return false\n        for (i <- 0 to l.length - s.length) {\n            var found = true\n            for (j <- 0 to s.length - 1) {\n                if (l(i + j) != s(j)) {\n                    found = false\n                    break\n                }\n            }\n            if (found) return true\n        }\n        return false",
    "        if (l.size < s.size) return false\n        val n = l.size - s.size\n        for (i <- 0 to n) {\n            if (l.slice(i, i + s.size) == s) return true\n        }\n        return false",
    "        if (s.length > l.length) return false\n        if (s.length == 0) return true\n        if (l.length == 0) return false\n        if (l.head == s.head) return isSublist(l.tail, s.tail)\n        return isSublist(l.tail, s)",
    "        if (s.isEmpty) true\n        else if (l.isEmpty) false\n        else if (l.head == s.head) isSublist(l.tail, s.tail)\n        else isSublist(l.tail, s)",
    "        if (s.isEmpty) true\n        else if (l.isEmpty) false\n        else if (l.head == s.head) isSublist(l.tail, s.tail)\n        else isSublist(l.tail, s)",
    "        if (s.isEmpty) true\n        else if (l.isEmpty) false\n        else if (l.head == s.head) isSublist(l.tail, s.tail)\n        else isSublist(l.tail, s)",
    "        if (l.length < s.length) return false\n        if (l.take(s.length) == s) return true\n        isSublist(l.tail, s)",
    "        if (s.isEmpty) true\n        else if (l.isEmpty) false\n        else if (l.head == s.head) isSublist(l.tail, s.tail)\n        else isSublist(l.tail, s)"
  ]
}