{
  "name": "mbpp_290_max_length",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_290_max_length.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        if (list1.isEmpty) Left(0)\n        else {\n            val max = list1.map(_.length).max\n            val maxList = list1.filter(_.length == max)\n            if (maxList.length == 1) Right(maxList(0))\n            else Left(max)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517380,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp2f4pd9op.scala:15)\n\tat Problem.main(tmp2f4pd9op.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        val maxLength = list1.map(x => x.length).max\n        val maxLengthList = list1.filter(x => x.length == maxLength)\n        if (maxLengthList.length == 1) Left(maxLength) else Right(maxLengthList.flatten)\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517381,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp19zezt2b.scala:11)\n\tat Problem.main(tmp19zezt2b.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        if (list1.isEmpty) Left(0)\n        else {\n            val max = list1.maxBy(_.length)\n            Right(max)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517380,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpd1mwpdv4.scala:13)\n\tat Problem.main(tmpd1mwpdv4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        val maxLength = list1.map(x => x.length).max\n        val maxList = list1.filter(x => x.length == maxLength)\n        if (maxList.length == 1) Left(maxLength)\n        else Right(maxList.flatten)\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517380,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpcxbuloyw.scala:12)\n\tat Problem.main(tmpcxbuloyw.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        val max = list1.map(x => x.length).max\n        val result = list1.filter(x => x.length == max)\n        if (result.length == 1) Left(max) else Right(result.flatten)\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517381,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpojz5s4hb.scala:11)\n\tat Problem.main(tmpojz5s4hb.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        val max = list1.map(x => x.length).max\n        val maxList = list1.filter(x => x.length == max)\n        if (maxList.length == 1) Left(max) else Right(maxList.flatten)\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517380,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp4oeeity0.scala:11)\n\tat Problem.main(tmp4oeeity0.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        val max = list1.map(x => x.length).max\n        val maxList = list1.filter(x => x.length == max)\n        if (maxList.length == 1) Left(max) else Right(maxList.flatten)\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517380,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp4oeeity0.scala:11)\n\tat Problem.main(tmp4oeeity0.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        if (list1.isEmpty) Left(0)\n        else {\n            var max = 0\n            var maxList : List[Long] = List()\n            for (list2 <- list1) {\n                if (list2.length > max) {\n                    max = list2.length\n                    maxList = list2\n                }\n            }\n            Right(maxList)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517380,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpn1trzcjq.scala:20)\n\tat Problem.main(tmpn1trzcjq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        if (list1.isEmpty) Left(0)\n        else {\n            val max = list1.map(_.length).max\n            Right(list1.filter(_.length == max).head)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517380,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpau8_smmj.scala:13)\n\tat Problem.main(tmpau8_smmj.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        var max : Long = 0\n        var maxList : List[Long] = List()\n        for (list <- list1) {\n            if (list.length > max) {\n                max = list.length\n                maxList = list\n            }\n        }\n        if (max == 0) Left(0) else Right(maxList)\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517380,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpo9aynsw4.scala:17)\n\tat Problem.main(tmpo9aynsw4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        val maxLength = list1.map(x => x.length).max\n        val maxLengthList = list1.filter(x => x.length == maxLength)\n        if (maxLengthList.length == 1) Left(maxLength)\n        else Right(maxLengthList.flatten)\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517381,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp6w_0tpzk.scala:12)\n\tat Problem.main(tmp6w_0tpzk.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        if (list1.isEmpty) Left(0)\n        else {\n            val max = list1.map(_.length).max\n            val maxList = list1.filter(_.length == max)\n            if (maxList.length == 1) Right(maxList.head)\n            else Left(max)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517380,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpq03fjh1_.scala:15)\n\tat Problem.main(tmpq03fjh1_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        val max = list1.map(x => x.length).max\n        val maxList = list1.filter(x => x.length == max)\n        if (maxList.length == 1) Left(max) else Right(maxList.flatten)\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517380,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp4oeeity0.scala:11)\n\tat Problem.main(tmp4oeeity0.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        val max = list1.map(x => x.length).max\n        val list2 = list1.filter(x => x.length == max)\n        if (list2.length == 1) Left(max)\n        else Right(list2.flatten)\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517380,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpcihbu3j2.scala:12)\n\tat Problem.main(tmpcihbu3j2.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        if (list1.length == 0) Left(0)\n        else {\n            val max = list1.map(_.length).max\n            val maxList = list1.filter(_.length == max)\n            if (maxList.length == 1) Right(maxList.head)\n            else Left(max)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517381,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp4mopawcv.scala:15)\n\tat Problem.main(tmp4mopawcv.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        if (list1.isEmpty)\n            Left(0)\n        else {\n            val max = list1.map(_.length).max\n            Right(list1.filter(_.length == max).flatten)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517381,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpkeo0mtdq.scala:14)\n\tat Problem.main(tmpkeo0mtdq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        val list2 = list1.filter(x => x.length == list1.maxBy(y => y.length).length)\n        if (list2.length == 1) Left(list2(0).length)\n        else Right(list2.flatten)\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517380,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp3_y7nlej.scala:11)\n\tat Problem.main(tmp3_y7nlej.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        if (list1.length == 0) Left(0)\n        else {\n            val list2 = list1.sortWith(_.length > _.length)\n            val max = list2(0).length\n            val list3 = list2.filter(_.length == max)\n            Right(list3(0))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517380,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpr41b8qpf.scala:15)\n\tat Problem.main(tmpr41b8qpf.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        val max = list1.map(x => x.length).max\n        val maxList = list1.filter(x => x.length == max)\n        if (maxList.length == 1) Left(maxList.head.length)\n        else Right(maxList.flatten)\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517380,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpqwaahcji.scala:12)\n\tat Problem.main(tmpqwaahcji.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        if (list1.isEmpty) Left(0)\n        else {\n            val max = list1.map(_.length).max\n            Right(list1.filter(_.length == max).head)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517380,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpau8_smmj.scala:13)\n\tat Problem.main(tmpau8_smmj.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        var max = 0\n        var maxList : List[Long] = List()\n        for (list <- list1) {\n            if (list.length > max) {\n                max = list.length\n                maxList = list\n            }\n        }\n        if (max == 0) Left(0) else Right(maxList)\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123152,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpnc9vkoqz.scala:17)\n\tat Problem.main(tmpnc9vkoqz.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        if (list1.isEmpty) Left(0)\n        else {\n            val max = list1.maxBy(_.length)\n            Right(max)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517380,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpd1mwpdv4.scala:13)\n\tat Problem.main(tmpd1mwpdv4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        val max = list1.map(_.length).max\n        val maxList = list1.filter(_.length == max)\n        if (maxList.length > 1) Right(maxList.flatten)\n        else Left(maxList.head.sum)\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123153,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpupu6x43q.scala:12)\n\tat Problem.main(tmpupu6x43q.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        val max = list1.maxBy(_.length)\n        if (max.length == 0) Left(0)\n        else Right(max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123153,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp93v4gj1m.scala:11)\n\tat Problem.main(tmp93v4gj1m.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        val list2 = list1.filter(x => x.length > 0)\n        if (list2.length == 0) Left(0)\n        else Right(list2.maxBy(x => x.length))\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123152,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmptopspuds.scala:11)\n\tat Problem.main(tmptopspuds.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        val max = list1.map(x => x.length).max\n        val maxList = list1.filter(x => x.length == max)\n        if (maxList.length == 1) Left(max) else Right(maxList.flatten)\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517380,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp4oeeity0.scala:11)\n\tat Problem.main(tmp4oeeity0.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        if (list1.isEmpty) Left(0)\n        else {\n            val max = list1.map(_.length).max\n            val maxList = list1.filter(_.length == max)\n            if (maxList.length == 1) Right(maxList.head)\n            else Left(max)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517380,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpq03fjh1_.scala:15)\n\tat Problem.main(tmpq03fjh1_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        if (list1.isEmpty) Left(0)\n        else {\n            val max = list1.map(_.length).max\n            Right(list1.filter(_.length == max).head)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517380,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpau8_smmj.scala:13)\n\tat Problem.main(tmpau8_smmj.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        val max = list1.map(_.length).max\n        val maxList = list1.filter(_.length == max)\n        if (maxList.length == 1) Left(max) else Right(maxList.flatten)\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123153,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpo8maj8jb.scala:11)\n\tat Problem.main(tmpo8maj8jb.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        if (list1.isEmpty) Left(0)\n        else {\n            val max = list1.maxBy(_.length)\n            Right(max)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517380,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpd1mwpdv4.scala:13)\n\tat Problem.main(tmpd1mwpdv4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        if (list1.isEmpty) Left(0)\n        else {\n            val max = list1.map(_.length).max\n            val maxList = list1.filter(_.length == max)\n            if (maxList.length == 1) Right(maxList.head)\n            else Left(max)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517380,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpq03fjh1_.scala:15)\n\tat Problem.main(tmpq03fjh1_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        var maxLength = 0\n        var maxList : List[Long] = List()\n        for (list <- list1) {\n            if (list.length > maxLength) {\n                maxLength = list.length\n                maxList = list\n            }\n        }\n        if (maxLength == 0) Left(0) else Right(maxList)\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123152,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpan8u8slc.scala:17)\n\tat Problem.main(tmpan8u8slc.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        if (list1.isEmpty) Left(0)\n        else {\n            val max = list1.map(_.length).max\n            val maxList = list1.filter(_.length == max)\n            if (maxList.length == 1) Right(maxList(0))\n            else Left(max)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517380,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp2f4pd9op.scala:15)\n\tat Problem.main(tmp2f4pd9op.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        val max = list1.map(x => x.length).max\n        val maxList = list1.filter(x => x.length == max)\n        if (maxList.length == 1) Left(max)\n        else Right(maxList.flatten)\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123152,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmph659gimm.scala:12)\n\tat Problem.main(tmph659gimm.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        if (list1.isEmpty) Left(0)\n        else {\n            val max = list1.map(_.length).max\n            Right(list1.filter(_.length == max).head)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517380,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpau8_smmj.scala:13)\n\tat Problem.main(tmpau8_smmj.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        val list2 = list1.map(x => x.length)\n        val max = list2.max\n        val index = list2.indexOf(max)\n        if (index == -1) Left(max)\n        else Right(list1(index))\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123153,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp__7s76xm.scala:13)\n\tat Problem.main(tmp__7s76xm.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        var max = 0\n        var maxList : List[Long] = List()\n        for (list <- list1) {\n            if (list.length > max) {\n                max = list.length\n                maxList = list\n            }\n        }\n        if (max == 0) Left(0) else Right(maxList)\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123152,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpnc9vkoqz.scala:17)\n\tat Problem.main(tmpnc9vkoqz.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        val max = list1.map(x => x.length).max\n        val maxList = list1.filter(x => x.length == max)\n        if (maxList.length == 1) Left(max) else Right(maxList.flatten)\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517380,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp4oeeity0.scala:11)\n\tat Problem.main(tmp4oeeity0.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        if (list1.length == 0) Left(0)\n        else {\n            val list2 = list1.map(x => x.length)\n            val max = list2.max\n            val index = list2.indexOf(max)\n            Right(list1(index))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123152,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpz0pv3dgd.scala:15)\n\tat Problem.main(tmpz0pv3dgd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        val max = list1.map(x => x.length).max\n        val list2 = list1.filter(x => x.length == max)\n        if (list2.length == 1) Left(list2.head.length)\n        else Right(list2.head)\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123153,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpwe_tjocs.scala:12)\n\tat Problem.main(tmpwe_tjocs.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        val maxLength = list1.map(x => x.length).max\n        val maxLengthList = list1.filter(x => x.length == maxLength)\n        if (maxLengthList.length == 1) Left(maxLength)\n        else Right(maxLengthList.flatten)\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517381,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp6w_0tpzk.scala:12)\n\tat Problem.main(tmp6w_0tpzk.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        var max = 0\n        var maxList : List[Long] = List()\n        for (list <- list1) {\n            if (list.length > max) {\n                max = list.length\n                maxList = list\n            }\n        }\n        if (max == 0) Left(0) else Right(maxList)\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123152,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpnc9vkoqz.scala:17)\n\tat Problem.main(tmpnc9vkoqz.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        val max = list1.map(x => x.length).max\n        val list2 = list1.filter(x => x.length == max)\n        if (list2.length == 1) Left(list2.head.length)\n        else Right(list2.head)\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123153,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpwe_tjocs.scala:12)\n\tat Problem.main(tmpwe_tjocs.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        if (list1.isEmpty) Left(0)\n        else {\n            val max = list1.map(_.length).max\n            val maxList = list1.filter(_.length == max)\n            if (maxList.length == 1) Right(maxList.head)\n            else Left(max)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517380,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpq03fjh1_.scala:15)\n\tat Problem.main(tmpq03fjh1_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        if (list1.isEmpty) Left(0)\n        else {\n            val max = list1.map(x => x.length).max\n            Right(list1.filter(x => x.length == max).head)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123153,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp78sajjlb.scala:13)\n\tat Problem.main(tmp78sajjlb.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        var max : Long = 0\n        var maxList : List[Long] = List()\n        for (list <- list1) {\n            if (list.length > max) {\n                max = list.length\n                maxList = list\n            }\n        }\n        if (maxList.length == 0) Left(max) else Right(maxList)\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123153,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp34wxtc0k.scala:17)\n\tat Problem.main(tmp34wxtc0k.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        val maxLength = list1.map(x => x.length).max\n        val maxLengthList = list1.filter(x => x.length == maxLength)\n        if (maxLengthList.length == 1) {\n            Right(maxLengthList(0))\n        } else {\n            Left(maxLength)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123152,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpv04ozuc9.scala:15)\n\tat Problem.main(tmpv04ozuc9.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        if (list1.isEmpty) Left(0)\n        else {\n            val max = list1.map(x => x.length).max\n            val list2 = list1.filter(x => x.length == max)\n            if (list2.length == 1) Right(list2(0))\n            else Left(max)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123153,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpo0khundf.scala:15)\n\tat Problem.main(tmpo0khundf.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        if (list1.isEmpty) Left(0)\n        else {\n            val max = list1.map(_.length).max\n            val maxList = list1.filter(_.length == max)\n            if (maxList.length == 1) Right(maxList.head)\n            else Left(max)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517380,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpq03fjh1_.scala:15)\n\tat Problem.main(tmpq03fjh1_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        var max : Long = 0\n        var maxList : List[Long] = List()\n        for (list <- list1) {\n            if (list.length > max) {\n                max = list.length\n                maxList = list\n            }\n        }\n        if (max == 0) Left(0)\n        else Right(maxList)\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123153,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpuqarf2zg.scala:18)\n\tat Problem.main(tmpuqarf2zg.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        val max = list1.map(x => x.length).max\n        val maxList = list1.filter(x => x.length == max)\n        if (maxList.length == 1) Left(max)\n        else Right(maxList.flatten)\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123152,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmph659gimm.scala:12)\n\tat Problem.main(tmph659gimm.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        if (list1.isEmpty) Left(0)\n        else {\n            val list2 = list1.map(x => x.length)\n            val max = list2.max\n            val list3 = list1.filter(x => x.length == max)\n            Right(list3.flatten)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123152,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp9gbw2x6a.scala:15)\n\tat Problem.main(tmp9gbw2x6a.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        if (list1.isEmpty) Left(0)\n        else {\n            val max = list1.map(x => x.length).max\n            val maxList = list1.filter(x => x.length == max)\n            if (maxList.length == 1) Right(maxList.head)\n            else Left(max)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123152,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpk11rcx18.scala:15)\n\tat Problem.main(tmpk11rcx18.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        val max = list1.map(x => x.length).max\n        val maxList = list1.filter(x => x.length == max)\n        if (maxList.length == 1) {\n            Left(max)\n        } else {\n            Right(maxList.flatten)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123153,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpy3xrji22.scala:15)\n\tat Problem.main(tmpy3xrji22.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        val max = list1.map(x => x.length).max\n        val maxList = list1.filter(x => x.length == max)\n        if (maxList.length == 1) Left(max) else Right(maxList.flatten)\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517380,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp4oeeity0.scala:11)\n\tat Problem.main(tmp4oeeity0.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        val max = list1.map(x => x.length).max\n        val list2 = list1.filter(x => x.length == max)\n        if (list2.length == 1) Left(max) else Right(list2.flatten)\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123153,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp9iy21s9t.scala:11)\n\tat Problem.main(tmp9iy21s9t.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        val max = list1.map(_.length).max\n        val maxList = list1.filter(_.length == max)\n        if (maxList.length == 1) Left(max)\n        else Right(maxList.flatten)\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123153,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpig6zvc2d.scala:12)\n\tat Problem.main(tmpig6zvc2d.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        val max = list1.map(_.length).max\n        val list2 = list1.filter(_.length == max)\n        if (list2.length == 1) Left(max)\n        else Right(list2.flatten)\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123152,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp1eunmvx5.scala:12)\n\tat Problem.main(tmp1eunmvx5.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        val max = list1.map(_.length).max\n        val maxList = list1.filter(_.length == max)\n        if (maxList.length == 1) Left(max)\n        else Right(maxList.flatten)\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123153,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpig6zvc2d.scala:12)\n\tat Problem.main(tmpig6zvc2d.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        if (list1.isEmpty) Left(0)\n        else {\n            val max = list1.map(x => x.length).max\n            Right(list1.filter(x => x.length == max).head)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123153,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp78sajjlb.scala:13)\n\tat Problem.main(tmp78sajjlb.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        if (list1.isEmpty) Left(0)\n        else {\n            val max = list1.map(_.length).max\n            val list2 = list1.filter(_.length == max)\n            if (list2.length == 1) Right(list2.head)\n            else Left(max)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123152,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpqcop_21z.scala:15)\n\tat Problem.main(tmpqcop_21z.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        val list2 = list1.map(x => (x.length, x))\n        val list3 = list2.sortWith((x, y) => x._1 > y._1)\n        if (list3.length == 0) Left(0)\n        else {\n            val list4 = list3.filter(x => x._1 == list3(0)._1)\n            Right(list4.map(x => x._2).flatten)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123152,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp9_r0x1nu.scala:15)\n\tat Problem.main(tmp9_r0x1nu.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        var max = 0\n        var maxList : List[Long] = List()\n        for (list <- list1) {\n            if (list.length > max) {\n                max = list.length\n                maxList = list\n            }\n        }\n        if (max == 0) Left(0) else Right(maxList)\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123152,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpnc9vkoqz.scala:17)\n\tat Problem.main(tmpnc9vkoqz.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        val list2 = list1.filter(x => x.length > 0)\n        if (list2.length == 0) Left(0)\n        else Right(list2.maxBy(x => x.length))\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123152,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmptopspuds.scala:11)\n\tat Problem.main(tmptopspuds.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        if (list1.isEmpty) Left(0)\n        else {\n            val max = list1.map(x => x.length).max\n            val maxList = list1.filter(x => x.length == max)\n            if (maxList.length == 1) Right(maxList(0))\n            else Left(max)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123164,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp7lt0in7p.scala:15)\n\tat Problem.main(tmp7lt0in7p.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        val max = list1.map(x => x.length).max\n        val maxList = list1.filter(x => x.length == max)\n        if (maxList.length == 1) Left(max) else Right(maxList.flatten)\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517380,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp4oeeity0.scala:11)\n\tat Problem.main(tmp4oeeity0.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        val max = list1.map(x => x.length).max\n        val maxList = list1.filter(x => x.length == max)\n        if (maxList.length == 1) Left(max) else Right(maxList.flatten)\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517380,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp4oeeity0.scala:11)\n\tat Problem.main(tmp4oeeity0.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        val maxLength = list1.map(_.length).max\n        val maxLengthList = list1.filter(_.length == maxLength)\n        if (maxLengthList.length == 1) Left(maxLength)\n        else Right(maxLengthList.flatten)\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123164,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpjmcyrab7.scala:12)\n\tat Problem.main(tmpjmcyrab7.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        if (list1.isEmpty) Left(0)\n        else {\n            var max = 0\n            var maxList : List[Long] = List()\n            for (list <- list1) {\n                if (list.length > max) {\n                    max = list.length\n                    maxList = list\n                }\n            }\n            Right(maxList)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123163,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpdh_djx25.scala:20)\n\tat Problem.main(tmpdh_djx25.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        val max = list1.map(x => x.length).max\n        val maxList = list1.filter(x => x.length == max)\n        if (maxList.length == 1) Left(max)\n        else Right(maxList.flatten)\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123152,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmph659gimm.scala:12)\n\tat Problem.main(tmph659gimm.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        if (list1.isEmpty) Left(0)\n        else {\n            val max = list1.maxBy(_.length)\n            Right(max)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517380,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpd1mwpdv4.scala:13)\n\tat Problem.main(tmpd1mwpdv4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        var max = 0\n        var maxList : List[Long] = List()\n        for (list <- list1) {\n            if (list.length > max) {\n                max = list.length\n                maxList = list\n            }\n        }\n        if (max == 0) Left(0) else Right(maxList)\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123152,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpnc9vkoqz.scala:17)\n\tat Problem.main(tmpnc9vkoqz.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        var max = 0\n        var maxList : List[Long] = List()\n        for (list <- list1) {\n            if (list.length > max) {\n                max = list.length\n                maxList = list\n            }\n        }\n        if (max == 0) Left(0) else Right(maxList)\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123152,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpnc9vkoqz.scala:17)\n\tat Problem.main(tmpnc9vkoqz.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        var max = 0\n        var maxList = List[Long]()\n        for (list <- list1) {\n            if (list.length > max) {\n                max = list.length\n                maxList = list\n            }\n        }\n        if (max == 0) Left(0) else Right(maxList)\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123163,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp9ldfgdqn.scala:17)\n\tat Problem.main(tmp9ldfgdqn.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        var max = 0\n        var maxList : List[Long] = List()\n        for (list <- list1) {\n            if (list.length > max) {\n                max = list.length\n                maxList = list\n            }\n        }\n        if (max == 0) Left(0)\n        else Right(maxList)\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123163,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpfzfy1o2q.scala:18)\n\tat Problem.main(tmpfzfy1o2q.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        if (list1.isEmpty) Left(0)\n        else {\n            val max = list1.map(_.length).max\n            Right(list1.filter(_.length == max).head)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517380,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpau8_smmj.scala:13)\n\tat Problem.main(tmpau8_smmj.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        val max = list1.maxBy(_.length)\n        if (max.length == 0) Left(0)\n        else Right(max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123153,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp93v4gj1m.scala:11)\n\tat Problem.main(tmp93v4gj1m.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        if (list1.isEmpty) Left(0)\n        else {\n            val max = list1.map(_.length).max\n            val maxList = list1.filter(_.length == max)\n            if (maxList.length == 1) Right(maxList(0))\n            else Left(max)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517380,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp2f4pd9op.scala:15)\n\tat Problem.main(tmp2f4pd9op.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        var max = 0\n        var maxList = List[Long]()\n        for (list <- list1) {\n            if (list.length > max) {\n                max = list.length\n                maxList = list\n            }\n        }\n        if (max == 0) Left(0) else Right(maxList)\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123163,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp9ldfgdqn.scala:17)\n\tat Problem.main(tmp9ldfgdqn.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        var maxLength = 0\n        var maxList : List[Long] = List()\n        for (list <- list1) {\n            if (list.length > maxLength) {\n                maxLength = list.length\n                maxList = list\n            }\n        }\n        if (maxLength == 0) Left(0) else Right(maxList)\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123152,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpan8u8slc.scala:17)\n\tat Problem.main(tmpan8u8slc.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        val max = list1.map(x => x.length).max\n        val maxList = list1.filter(x => x.length == max)\n        if (maxList.length == 1) Left(max)\n        else Right(maxList.flatten)\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123152,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmph659gimm.scala:12)\n\tat Problem.main(tmph659gimm.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        if (list1.isEmpty) Left(0)\n        else {\n            val max = list1.map(_.length).max\n            val maxList = list1.filter(_.length == max)\n            if (maxList.length == 1) Right(maxList.head)\n            else Left(max)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517380,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpq03fjh1_.scala:15)\n\tat Problem.main(tmpq03fjh1_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        if (list1.isEmpty) Left(0)\n        else {\n            val max = list1.map(_.length).max\n            Right(list1.filter(_.length == max).head)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517380,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpau8_smmj.scala:13)\n\tat Problem.main(tmpau8_smmj.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        if (list1.isEmpty) Left(0)\n        else {\n            val max = list1.maxBy(_.length)\n            Right(max)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517380,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpd1mwpdv4.scala:13)\n\tat Problem.main(tmpd1mwpdv4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        val max = list1.map(x => x.length).max\n        val maxList = list1.filter(x => x.length == max)\n        if (maxList.length == 1) Left(max) else Right(maxList.flatten)\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517380,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp4oeeity0.scala:11)\n\tat Problem.main(tmp4oeeity0.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        if (list1.isEmpty) Left(0)\n        else {\n            val max = list1.map(x => x.length).max\n            val maxList = list1.filter(x => x.length == max)\n            if (maxList.length == 1) Right(maxList(0))\n            else Left(max)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123164,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp7lt0in7p.scala:15)\n\tat Problem.main(tmp7lt0in7p.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        val max = list1.foldLeft(0)((a, b) => if (a > b.length) a else b.length)\n        val result = list1.filter(x => x.length == max)\n        if (result.length == 1) Left(max) else Right(result.flatten)\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123163,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpfzddrjtm.scala:11)\n\tat Problem.main(tmpfzddrjtm.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        if (list1.length == 0) {\n            Left(0)\n        } else {\n            var max = list1(0).length\n            var maxList = list1(0)\n            for (i <- 1 until list1.length) {\n                if (list1(i).length > max) {\n                    max = list1(i).length\n                    maxList = list1(i)\n                }\n            }\n            Right(maxList)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123163,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpg5xg0mx7.scala:21)\n\tat Problem.main(tmpg5xg0mx7.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        var max = 0\n        var maxList : List[Long] = null\n        for (list <- list1) {\n            if (list.length > max) {\n                max = list.length\n                maxList = list\n            }\n        }\n        if (maxList == null) Left(0) else Right(maxList)\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123163,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmphjeo_c26.scala:17)\n\tat Problem.main(tmphjeo_c26.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        val max = list1.maxBy(_.length)\n        if (max.length == 0) Left(0) else Right(max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123163,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpg356ricz.scala:10)\n\tat Problem.main(tmpg356ricz.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        if (list1.isEmpty) Left(0)\n        else Right(list1.maxBy(_.length))\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123163,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpcwdf18om.scala:10)\n\tat Problem.main(tmpcwdf18om.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        val max = list1.map(x => x.length).max\n        val maxList = list1.filter(x => x.length == max)\n        if (maxList.length == 1) Right(maxList.head)\n        else Left(maxList.length.toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123163,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpeoktka30.scala:12)\n\tat Problem.main(tmpeoktka30.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        if (list1.isEmpty) Left(0)\n        else {\n            val max = list1.map(_.length).max\n            val maxList = list1.filter(_.length == max)\n            if (maxList.length == 1) Right(maxList(0))\n            else Left(max)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517380,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp2f4pd9op.scala:15)\n\tat Problem.main(tmp2f4pd9op.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        val max = list1.map(_.length).max\n        val maxList = list1.filter(_.length == max)\n        if (maxList.length == 1) Left(max) else Right(maxList.flatten)\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123153,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpo8maj8jb.scala:11)\n\tat Problem.main(tmpo8maj8jb.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        if (list1.isEmpty) Left(0)\n        else {\n            val max = list1.maxBy(_.length)\n            Right(max)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517380,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpd1mwpdv4.scala:13)\n\tat Problem.main(tmpd1mwpdv4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        val max = list1.map(_.length).max\n        val list2 = list1.filter(_.length == max)\n        if (list2.length == 1) Left(max) else Right(list2.flatten)\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123163,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmps4vmwbjm.scala:11)\n\tat Problem.main(tmps4vmwbjm.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        val max = list1.maxBy(_.length)\n        if (list1.count(_.length == max.length) > 1)\n            Right(list1.filter(_.length == max.length).flatten)\n        else\n            Left(max.length)\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123163,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpsslqoyz4.scala:13)\n\tat Problem.main(tmpsslqoyz4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        if (list1.isEmpty) Left(0)\n        else {\n            val max = list1.map(x => x.length).max\n            Right(list1.filter(x => x.length == max).head)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123153,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp78sajjlb.scala:13)\n\tat Problem.main(tmp78sajjlb.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        if (list1.isEmpty) Left(0)\n        else {\n            val max = list1.map(_.length).max\n            Right(list1.filter(_.length == max).flatten)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123164,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpgo5exas_.scala:13)\n\tat Problem.main(tmpgo5exas_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        val max = list1.map(x => x.length).max\n        val list2 = list1.filter(x => x.length == max)\n        if (list2.length == 1) Left(max)\n        else Right(list2.flatten)\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517380,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpcihbu3j2.scala:12)\n\tat Problem.main(tmpcihbu3j2.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        if (list1.isEmpty) Left(0)\n        else {\n            val max = list1.map(_.length).max\n            val maxList = list1.filter(_.length == max)\n            if (maxList.length == 1) Right(maxList.head)\n            else Left(max)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517380,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpq03fjh1_.scala:15)\n\tat Problem.main(tmpq03fjh1_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        if (list1.isEmpty) Left(0)\n        else {\n            val max = list1.map(_.length).max\n            val maxList = list1.filter(_.length == max)\n            if (maxList.length == 1) Right(maxList.head)\n            else Left(max)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517380,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpq03fjh1_.scala:15)\n\tat Problem.main(tmpq03fjh1_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        val max = list1.map(x => x.length).max\n        val maxList = list1.filter(x => x.length == max)\n        if (maxList.length == 1) Left(max) else Right(maxList.flatten)\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517380,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp4oeeity0.scala:11)\n\tat Problem.main(tmp4oeeity0.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        if (list1.isEmpty) Left(0)\n        else {\n            val max = list1.maxBy(_.length)\n            Right(max)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517380,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpd1mwpdv4.scala:13)\n\tat Problem.main(tmpd1mwpdv4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        if (list1.length == 0) {\n            Left(0)\n        } else {\n            val maxLength = list1.map(x => x.length).max\n            val maxList = list1.filter(x => x.length == maxLength)\n            Right(maxList.flatten)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123163,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpbrh9viii.scala:15)\n\tat Problem.main(tmpbrh9viii.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        val max = list1.map(x => x.length).max\n        val maxList = list1.filter(x => x.length == max)\n        if (maxList.length == 1) Left(max)\n        else Right(maxList.flatten)\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123152,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmph659gimm.scala:12)\n\tat Problem.main(tmph659gimm.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        var max = 0\n        var maxList : List[Long] = List()\n        for (list <- list1) {\n            if (list.length > max) {\n                max = list.length\n                maxList = list\n            }\n        }\n        if (max == 0) Left(0)\n        else Right(maxList)\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123163,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpfzfy1o2q.scala:18)\n\tat Problem.main(tmpfzfy1o2q.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        val max = list1.map(x => x.length).max\n        val maxList = list1.filter(x => x.length == max)\n        if (maxList.length == 1) Right(maxList(0))\n        else Left(max.toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123164,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpfqc15niu.scala:12)\n\tat Problem.main(tmpfqc15niu.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        if (list1.isEmpty) Left(0)\n        else {\n            val max = list1.map(x => x.length).max\n            val maxList = list1.filter(x => x.length == max)\n            if (maxList.length == 1) Right(maxList(0))\n            else Left(maxList.length)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123163,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp0axz1jbg.scala:15)\n\tat Problem.main(tmp0axz1jbg.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        val max = list1.map(_.length).max\n        val maxList = list1.filter(_.length == max)\n        if (maxList.length == 1) Left(max) else Right(maxList.flatten)\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123153,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpo8maj8jb.scala:11)\n\tat Problem.main(tmpo8maj8jb.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        val max = list1.map(_.length).max\n        val result = list1.filter(_.length == max)\n        if (result.length == 1) Left(max)\n        else Right(result.flatten)\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123164,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpyp8u3157.scala:12)\n\tat Problem.main(tmpyp8u3157.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        val max = list1.map(x => x.length).max\n        val maxList = list1.filter(x => x.length == max)\n        if (maxList.length == 1) Left(max) else Right(maxList.flatten)\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517380,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp4oeeity0.scala:11)\n\tat Problem.main(tmp4oeeity0.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        if (list1.length == 0) Left(0)\n        else {\n            val max = list1.map(x => x.length).max\n            val maxList = list1.filter(x => x.length == max)\n            Right(maxList.flatten)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123164,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmps1b6m6ea.scala:14)\n\tat Problem.main(tmps1b6m6ea.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        val max = list1.map(_.length).max\n        val list2 = list1.filter(_.length == max)\n        if (list2.length == 1) Left(max)\n        else Right(list2.flatten)\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123152,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp1eunmvx5.scala:12)\n\tat Problem.main(tmp1eunmvx5.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        if (list1.length == 0) Left(0)\n        else {\n            val max = list1.map(_.length).max\n            val maxList = list1.filter(_.length == max)\n            Right(maxList.flatten)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123164,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmprttm7y07.scala:14)\n\tat Problem.main(tmprttm7y07.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        val max = list1.map(_.length).max\n        val maxList = list1.filter(_.length == max)\n        if (maxList.length == 1) Left(max) else Right(maxList.flatten)\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123153,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpo8maj8jb.scala:11)\n\tat Problem.main(tmpo8maj8jb.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        if (list1.isEmpty) Left(0)\n        else {\n            val max = list1.map(x => x.length).max\n            val list2 = list1.filter(x => x.length == max)\n            if (list2.length == 1) Right(list2(0))\n            else Left(max)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123153,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpo0khundf.scala:15)\n\tat Problem.main(tmpo0khundf.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        if (list1.isEmpty) Left(0)\n        else {\n            val max = list1.maxBy(_.size)\n            Right(max)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123164,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpa5yzzmaz.scala:13)\n\tat Problem.main(tmpa5yzzmaz.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        val max = list1.map(x => x.length).max\n        val maxList = list1.filter(x => x.length == max)\n        if (maxList.length == 1) Left(max)\n        else Right(maxList.flatten)\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123152,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmph659gimm.scala:12)\n\tat Problem.main(tmph659gimm.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        val max = list1.map(x => x.length).max\n        val maxList = list1.filter(x => x.length == max)\n        if (maxList.length == 1) Left(max)\n        else Right(maxList.flatten)\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123152,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmph659gimm.scala:12)\n\tat Problem.main(tmph659gimm.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        var max : Long = 0\n        var maxList : List[Long] = List()\n        for (list <- list1) {\n            if (list.length > max) {\n                max = list.length\n                maxList = list\n            }\n        }\n        if (maxList.length == 0) Left(max) else Right(maxList)\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123153,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp34wxtc0k.scala:17)\n\tat Problem.main(tmp34wxtc0k.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        val max = list1.map(x => x.length).max\n        val maxList = list1.filter(x => x.length == max)\n        if (maxList.length == 1) Left(max) else Right(maxList.flatten)\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517380,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp4oeeity0.scala:11)\n\tat Problem.main(tmp4oeeity0.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        if (list1.length == 0) Left(0)\n        else Right(list1.maxBy(_.length))\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123164,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp12xpd4bj.scala:10)\n\tat Problem.main(tmp12xpd4bj.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        if (list1.isEmpty) Left(0)\n        else {\n            val max = list1.map(x => x.length).max\n            val maxList = list1.filter(x => x.length == max)\n            if (maxList.length == 1) Right(maxList(0))\n            else Left(max)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123164,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp7lt0in7p.scala:15)\n\tat Problem.main(tmp7lt0in7p.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        val max = list1.map(x => x.length).max\n        val maxList = list1.filter(x => x.length == max)\n        if (maxList.length == 1) Right(maxList.head) else Left(maxList.length)\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123164,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpvs47uk3e.scala:11)\n\tat Problem.main(tmpvs47uk3e.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        if (list1.isEmpty) Left(0)\n        else {\n            val max = list1.map(_.length).max\n            val maxList = list1.filter(_.length == max)\n            if (maxList.length == 1) Right(maxList.head)\n            else Left(max)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517380,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpq03fjh1_.scala:15)\n\tat Problem.main(tmpq03fjh1_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        var max = 0\n        var maxList : List[Long] = List()\n        for (list <- list1) {\n            if (list.length > max) {\n                max = list.length\n                maxList = list\n            }\n        }\n        if (max == 0) Left(0) else Right(maxList)\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123152,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpnc9vkoqz.scala:17)\n\tat Problem.main(tmpnc9vkoqz.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        var max = 0\n        var maxList : List[Long] = Nil\n        for (list <- list1) {\n            if (list.length > max) {\n                max = list.length\n                maxList = list\n            }\n        }\n        if (max == 0) Left(0)\n        else Right(maxList)\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123174,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp024162wd.scala:18)\n\tat Problem.main(tmp024162wd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        val max = list1.map(x => x.length).max\n        val maxList = list1.filter(x => x.length == max)\n        if (maxList.length > 1) Right(maxList.flatten)\n        else Left(maxList.flatten.sum)\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123174,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp6jqfcknb.scala:12)\n\tat Problem.main(tmp6jqfcknb.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        var maxLength = 0\n        var maxList : List[Long] = Nil\n        for (list <- list1) {\n            if (list.length > maxLength) {\n                maxLength = list.length\n                maxList = list\n            }\n        }\n        if (maxLength == 0) Left(0) else Right(maxList)\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123174,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpzjs1_9xj.scala:17)\n\tat Problem.main(tmpzjs1_9xj.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        val max = list1.map(x => x.length).max\n        val list2 = list1.filter(x => x.length == max)\n        if (list2.length == 1) Left(max)\n        else Right(list2.flatten)\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517380,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpcihbu3j2.scala:12)\n\tat Problem.main(tmpcihbu3j2.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        val max = list1.map(_.length).max\n        if (max == 0) Left(0)\n        else Right(list1.filter(_.length == max).head)\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123174,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp4ahkt9fz.scala:11)\n\tat Problem.main(tmp4ahkt9fz.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        if (list1.isEmpty) Left(0)\n        else {\n            val max = list1.map(_.length).max\n            val maxList = list1.filter(_.length == max)\n            if (maxList.length == 1) Right(maxList.head)\n            else Left(max)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517380,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpq03fjh1_.scala:15)\n\tat Problem.main(tmpq03fjh1_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        var max = 0\n        var maxList : List[Long] = Nil\n        for (list <- list1) {\n            if (list.length > max) {\n                max = list.length\n                maxList = list\n            }\n        }\n        if (max == 0) Left(0) else Right(maxList)\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123174,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpow4v1pfk.scala:17)\n\tat Problem.main(tmpow4v1pfk.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        if (list1.length == 0) Left(0)\n        else {\n            val max = list1.map(_.length).max\n            val maxList = list1.filter(_.length == max)\n            Right(maxList.flatten)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123164,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmprttm7y07.scala:14)\n\tat Problem.main(tmprttm7y07.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        val max = list1.map(_.length).max\n        if (max == 0) Left(0)\n        else Right(list1.filter(_.length == max).flatten)\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123175,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp6bcie04d.scala:11)\n\tat Problem.main(tmp6bcie04d.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        val max = list1.map(_.length).max\n        val maxList = list1.filter(_.length == max)\n        if (maxList.length == 1) Left(max) else Right(maxList.flatten)\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123153,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpo8maj8jb.scala:11)\n\tat Problem.main(tmpo8maj8jb.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        val max = list1.map(_.length).max\n        val maxList = list1.filter(_.length == max)\n        if (maxList.length == 1) Left(max)\n        else Right(maxList.flatten)\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123153,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpig6zvc2d.scala:12)\n\tat Problem.main(tmpig6zvc2d.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        if (list1.isEmpty) Left(0)\n        else {\n            val max = list1.map(x => x.length).max\n            val maxList = list1.filter(x => x.length == max)\n            if (maxList.length == 1) Right(maxList(0))\n            else Left(maxList.length)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123163,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp0axz1jbg.scala:15)\n\tat Problem.main(tmp0axz1jbg.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        if (list1.isEmpty) Left(0)\n        else {\n            val max = list1.map(_.length).max\n            val maxList = list1.filter(_.length == max)\n            if (maxList.length == 1) Right(maxList.head)\n            else Left(max)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517380,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpq03fjh1_.scala:15)\n\tat Problem.main(tmpq03fjh1_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        if (list1.length == 0) Left(0)\n        else {\n            val max = list1.map(_.length).max\n            val maxList = list1.filter(_.length == max)\n            if (maxList.length == 1) Right(maxList(0))\n            else Left(maxList.length)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123174,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpm0g31cen.scala:15)\n\tat Problem.main(tmpm0g31cen.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        val max = list1.map(x => x.length).max\n        val maxList = list1.filter(x => x.length == max)\n        if (maxList.length == 1) Left(max)\n        else Right(maxList.flatten)\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123152,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmph659gimm.scala:12)\n\tat Problem.main(tmph659gimm.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        val max = list1.map(x => x.length).max\n        val list2 = list1.filter(x => x.length == max)\n        if (list2.length == 1) Left(max)\n        else Right(list2.flatten)\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517380,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpcihbu3j2.scala:12)\n\tat Problem.main(tmpcihbu3j2.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        if (list1.isEmpty) Left(0)\n        else {\n            val max = list1.map(x => x.length).max\n            val maxList = list1.filter(x => x.length == max)\n            Right(maxList.flatten)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123175,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp_htlbl3p.scala:14)\n\tat Problem.main(tmp_htlbl3p.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        if (list1.isEmpty) Left(0)\n        else {\n            val max = list1.map(_.length).max\n            Right(list1.filter(_.length == max).head)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517380,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpau8_smmj.scala:13)\n\tat Problem.main(tmpau8_smmj.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        if (list1.length == 0) Left(0)\n        else {\n            val max = list1.maxBy(_.length)\n            Right(max)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123175,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpwfuf5pxt.scala:13)\n\tat Problem.main(tmpwfuf5pxt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        val max = list1.map(_.length).max\n        val list2 = list1.filter(_.length == max)\n        if (list2.length == 1) Left(max) else Right(list2.flatten)\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123163,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmps4vmwbjm.scala:11)\n\tat Problem.main(tmps4vmwbjm.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        val max = list1.map(x => x.length).max\n        val maxList = list1.filter(x => x.length == max)\n        if (maxList.length == 1) Left(max) else Right(maxList.flatten)\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517380,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp4oeeity0.scala:11)\n\tat Problem.main(tmp4oeeity0.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        var max = 0\n        var maxList : List[Long] = List()\n        for (list <- list1) {\n            if (list.length > max) {\n                max = list.length\n                maxList = list\n            }\n        }\n        if (max == 0) Left(0) else Right(maxList)\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123152,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpnc9vkoqz.scala:17)\n\tat Problem.main(tmpnc9vkoqz.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        val max = list1.map(x => x.length).max\n        val list2 = list1.filter(x => x.length == max)\n        if (list2.length == 1) Left(max)\n        else Right(list2.flatten)\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517380,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpcihbu3j2.scala:12)\n\tat Problem.main(tmpcihbu3j2.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        if (list1.length == 0) Left(0)\n        else {\n            val max = list1.maxBy(_.length)\n            Right(max)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123175,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpwfuf5pxt.scala:13)\n\tat Problem.main(tmpwfuf5pxt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        val max = list1.map(x => x.length).max\n        val maxList = list1.filter(x => x.length == max)\n        if (maxList.length == 1) Left(max) else Right(maxList.flatten)\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517380,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp4oeeity0.scala:11)\n\tat Problem.main(tmp4oeeity0.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        if (list1.isEmpty) {\n            Left(0)\n        } else {\n            val max = list1.maxBy(_.length)\n            Right(max)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123174,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpplk99fwo.scala:14)\n\tat Problem.main(tmpplk99fwo.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        val max = list1.map(x => x.length).max\n        val list2 = list1.filter(x => x.length == max)\n        if (list2.length == 1) Left(max) else Right(list2.flatten)\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123153,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp9iy21s9t.scala:11)\n\tat Problem.main(tmp9iy21s9t.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        val max = list1.map(x => x.length).max\n        val maxList = list1.filter(x => x.length == max)\n        if (maxList.length == 1) Left(max) else Right(maxList.flatten)\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517380,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp4oeeity0.scala:11)\n\tat Problem.main(tmp4oeeity0.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        if (list1.isEmpty) Left(0)\n        else {\n            val max = list1.map(_.length).max\n            val maxList = list1.filter(_.length == max)\n            if (maxList.length == 1) Right(maxList.head)\n            else Left(max)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517380,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpq03fjh1_.scala:15)\n\tat Problem.main(tmpq03fjh1_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        if (list1.isEmpty) Left(0)\n        else {\n            val list2 = list1.map(x => x.length)\n            val max = list2.max\n            val index = list2.indexOf(max)\n            Right(list1(index))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123174,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpahfs9hpb.scala:15)\n\tat Problem.main(tmpahfs9hpb.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        if (list1.isEmpty) Left(0)\n        else {\n            val max = list1.map(_.length).max\n            val maxList = list1.filter(_.length == max)\n            if (maxList.length == 1) Right(maxList.head)\n            else Left(max)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517380,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpq03fjh1_.scala:15)\n\tat Problem.main(tmpq03fjh1_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        if (list1.isEmpty) Left(0)\n        else {\n            val max = list1.map(x => x.length).max\n            val list2 = list1.filter(x => x.length == max)\n            if (list2.length == 1) Right(list2.head)\n            else Left(max)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123174,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpw701yud6.scala:15)\n\tat Problem.main(tmpw701yud6.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        var max = 0\n        var maxList : List[Long] = Nil\n        for (list <- list1) {\n            if (list.length > max) {\n                max = list.length\n                maxList = list\n            }\n        }\n        if (max == 0) Left(0) else Right(maxList)\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123174,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpow4v1pfk.scala:17)\n\tat Problem.main(tmpow4v1pfk.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        var max = 0\n        var maxList : List[Long] = List()\n        for (list <- list1) {\n            if (list.length > max) {\n                max = list.length\n                maxList = list\n            }\n        }\n        if (max == 0) Left(0) else Right(maxList)\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123152,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpnc9vkoqz.scala:17)\n\tat Problem.main(tmpnc9vkoqz.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        val max = list1.map(_.length).max\n        val maxList = list1.filter(_.length == max)\n        if (maxList.length == 1) Left(max) else Right(maxList.flatten)\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123153,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpo8maj8jb.scala:11)\n\tat Problem.main(tmpo8maj8jb.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        if (list1.isEmpty) Left(0)\n        else {\n            val max = list1.map(_.length).max\n            val maxList = list1.filter(_.length == max)\n            if (maxList.length == 1) Right(maxList.head)\n            else Left(max)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517380,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpq03fjh1_.scala:15)\n\tat Problem.main(tmpq03fjh1_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        if (list1.isEmpty) Left(0)\n        else {\n            var max = 0\n            var maxList : List[Long] = Nil\n            for (list <- list1) {\n                if (list.length > max) {\n                    max = list.length\n                    maxList = list\n                }\n            }\n            Right(maxList)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123174,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpsvzs2sdk.scala:20)\n\tat Problem.main(tmpsvzs2sdk.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        if (list1.isEmpty) Left(0)\n        else {\n            val max = list1.map(_.length).max\n            Right(list1.filter(_.length == max).head)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517380,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpau8_smmj.scala:13)\n\tat Problem.main(tmpau8_smmj.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        val max = list1.map(x => x.length).max\n        val maxList = list1.filter(x => x.length == max)\n        if (maxList.length == 1) Right(maxList(0))\n        else Left(maxList.length)\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123174,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp0qojl_bg.scala:12)\n\tat Problem.main(tmp0qojl_bg.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        val max = list1.map(x => x.length).max\n        val maxList = list1.filter(x => x.length == max)\n        if (maxList.length == 1) Left(max)\n        else Right(maxList.flatten)\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123152,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmph659gimm.scala:12)\n\tat Problem.main(tmph659gimm.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        if (list1.isEmpty) Left(0)\n        else {\n            val max = list1.map(_.length).max\n            val maxList = list1.filter(_.length == max)\n            if (maxList.length == 1) Right(maxList.head)\n            else Left(max)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517380,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpq03fjh1_.scala:15)\n\tat Problem.main(tmpq03fjh1_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        var max = 0\n        var maxList : List[Long] = List()\n        for (list <- list1) {\n            if (list.length > max) {\n                max = list.length\n                maxList = list\n            }\n        }\n        if (max == 0) Left(0) else Right(maxList)\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123152,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpnc9vkoqz.scala:17)\n\tat Problem.main(tmpnc9vkoqz.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        var max = 0\n        var maxList : List[Long] = List()\n        for (i <- list1) {\n            if (i.length > max) {\n                max = i.length\n                maxList = i\n            }\n        }\n        if (max == 0) Left(0)\n        else Right(maxList)\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123174,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpimhsiy4s.scala:18)\n\tat Problem.main(tmpimhsiy4s.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        if (list1.isEmpty) Left(0)\n        else {\n            val max = list1.map(_.length).max\n            Right(list1.filter(_.length == max).head)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517380,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpau8_smmj.scala:13)\n\tat Problem.main(tmpau8_smmj.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        val max = list1.map(x => x.length).max\n        val list2 = list1.filter(x => x.length == max)\n        if (list2.length == 1) Left(list2(0).length) else Right(list2(0))\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123174,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpk_xm2qer.scala:11)\n\tat Problem.main(tmpk_xm2qer.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        if (list1.isEmpty) Left(0)\n        else {\n            val max = list1.map(_.length).max\n            Right(list1.filter(_.length == max).flatten)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123164,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpgo5exas_.scala:13)\n\tat Problem.main(tmpgo5exas_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        val max = list1.map(_.length).max\n        val maxList = list1.filter(_.length == max)\n        if (maxList.length == 1) Left(max)\n        else Right(maxList.flatten)\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123153,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpig6zvc2d.scala:12)\n\tat Problem.main(tmpig6zvc2d.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        val max = list1.map(x => x.length).max\n        val list2 = list1.filter(x => x.length == max)\n        if (list2.length == 1) Left(max) else Right(list2.flatten)\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123153,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp9iy21s9t.scala:11)\n\tat Problem.main(tmp9iy21s9t.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        if (list1.isEmpty) Left(0)\n        else {\n            val max = list1.maxBy(_.length)\n            Right(max)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517380,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpd1mwpdv4.scala:13)\n\tat Problem.main(tmpd1mwpdv4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        if (list1.length == 0) Left(0)\n        else {\n            val max = list1.maxBy(_.length)\n            Right(max)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123175,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpwfuf5pxt.scala:13)\n\tat Problem.main(tmpwfuf5pxt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        val max = list1.map(_.length).max\n        val maxList = list1.filter(_.length == max)\n        if (maxList.length == 1) Left(max)\n        else Right(maxList.flatten)\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123153,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpig6zvc2d.scala:12)\n\tat Problem.main(tmpig6zvc2d.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        val max = list1.map(x => x.length).max\n        val maxList = list1.filter(x => x.length == max)\n        if (maxList.length == 1) Left(max) else Right(maxList.flatten)\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517380,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp4oeeity0.scala:11)\n\tat Problem.main(tmp4oeeity0.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        if (list1.isEmpty) Left(0)\n        else {\n            val max = list1.map(_.length).max\n            val maxList = list1.filter(_.length == max)\n            if (maxList.length == 1) Right(maxList.head)\n            else Left(maxList.length)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123174,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp76uoycjg.scala:15)\n\tat Problem.main(tmp76uoycjg.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        if (list1.isEmpty) Left(0)\n        else {\n            val max = list1.map(x => x.length).max\n            val maxList = list1.filter(x => x.length == max)\n            if (maxList.length == 1) Right(maxList.head)\n            else Left(max)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123152,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpk11rcx18.scala:15)\n\tat Problem.main(tmpk11rcx18.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        if (list1.isEmpty) Left(0)\n        else {\n            val max = list1.map(_.length).max\n            val maxList = list1.filter(_.length == max)\n            if (maxList.length == 1) Right(maxList(0))\n            else Left(max)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517380,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp2f4pd9op.scala:15)\n\tat Problem.main(tmp2f4pd9op.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        val max = list1.map(_.length).max\n        if (max == 0) Left(0)\n        else Right(list1.filter(_.length == max).head)\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123174,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp4ahkt9fz.scala:11)\n\tat Problem.main(tmp4ahkt9fz.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        if (list1.length == 0) Left(0)\n        else {\n            val max = list1.map(x => x.length).max\n            val list2 = list1.filter(x => x.length == max)\n            Right(list2.flatten)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123175,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpjqnuge_l.scala:14)\n\tat Problem.main(tmpjqnuge_l.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        if (list1.isEmpty) Left(0)\n        else {\n            val max = list1.map(_.length).max\n            val maxList = list1.filter(_.length == max)\n            if (maxList.length == 1) Right(maxList(0))\n            else Left(max)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517380,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp2f4pd9op.scala:15)\n\tat Problem.main(tmp2f4pd9op.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        val list2 = list1.filter(x => x.length == list1.map(x => x.length).max)\n        if (list2.length == 1) Left(list2.head.length)\n        else Right(list2.head)\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123175,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp3wx05xtj.scala:11)\n\tat Problem.main(tmp3wx05xtj.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        val max = list1.map(_.length).max\n        val maxList = list1.filter(_.length == max)\n        if (maxList.length == 1) Left(max)\n        else Right(maxList.flatten)\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123153,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpig6zvc2d.scala:12)\n\tat Problem.main(tmpig6zvc2d.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        val list2 = list1.filter(x => x.length == list1.map(y => y.length).max)\n        if (list2.length == 1) Left(list2.head.length)\n        else Right(list2.flatten)\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123175,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpdro0j5c4.scala:11)\n\tat Problem.main(tmpdro0j5c4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        var max = 0\n        var maxList : List[Long] = List()\n        for (list <- list1) {\n            if (list.length > max) {\n                max = list.length\n                maxList = list\n            }\n        }\n        if (max == 0) Left(0) else Right(maxList)\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123152,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpnc9vkoqz.scala:17)\n\tat Problem.main(tmpnc9vkoqz.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        val list2 = list1.map(x => x.length)\n        val max = list2.max\n        val index = list2.indexOf(max)\n        if (index == -1) Left(0)\n        else Right(list1(index))\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123175,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp6myp2kpc.scala:13)\n\tat Problem.main(tmp6myp2kpc.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        val list2 = list1.filter(_.length == list1.map(_.length).max)\n        if (list2.length == 1) Left(list2.head.length)\n        else Right(list2.head)\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123175,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp99mk37qx.scala:11)\n\tat Problem.main(tmp99mk37qx.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        if (list1.length == 0) Left(0)\n        else {\n            var max = list1(0).length\n            var maxList = list1(0)\n            for (i <- 1 until list1.length) {\n                if (list1(i).length > max) {\n                    max = list1(i).length\n                    maxList = list1(i)\n                }\n            }\n            Right(maxList)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123175,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp44hxsw_d.scala:20)\n\tat Problem.main(tmp44hxsw_d.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        if (list1.isEmpty) Left(0)\n        else {\n            val max = list1.map(x => x.length).max\n            val maxList = list1.filter(x => x.length == max)\n            Right(maxList.flatten)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123175,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp_htlbl3p.scala:14)\n\tat Problem.main(tmp_htlbl3p.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        var max = 0\n        var maxList = List[Long]()\n        for (list <- list1) {\n            if (list.length > max) {\n                max = list.length\n                maxList = list\n            }\n        }\n        if (max == 0) Left(0)\n        else Right(maxList)\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123177,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpvrp5zd4c.scala:18)\n\tat Problem.main(tmpvrp5zd4c.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        var max = 0\n        var maxList : List[Long] = Nil\n        for (list <- list1) {\n            if (list.length > max) {\n                max = list.length\n                maxList = list\n            }\n        }\n        if (max == 0) Left(0) else Right(maxList)\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123174,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpow4v1pfk.scala:17)\n\tat Problem.main(tmpow4v1pfk.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        val max = list1.map(x => x.length).max\n        val maxList = list1.filter(x => x.length == max)\n        if (maxList.length == 1) Left(max) else Right(maxList.flatten)\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517380,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp4oeeity0.scala:11)\n\tat Problem.main(tmp4oeeity0.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        val max = list1.map(x => x.length).max\n        val list2 = list1.filter(x => x.length == max)\n        if (list2.length == 1) Left(list2.head.length) else Right(list2.head)\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123178,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpvjo__o2p.scala:11)\n\tat Problem.main(tmpvjo__o2p.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        val max = list1.map(_.length).max\n        val result = list1.filter(_.length == max)\n        if (result.length == 1) Left(result.head.length)\n        else Right(result.head)\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123177,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpclnr1p3m.scala:12)\n\tat Problem.main(tmpclnr1p3m.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        val max = list1.map(x => x.length).max\n        val maxList = list1.filter(x => x.length == max)\n        if (maxList.length == 1) Left(max)\n        else Right(maxList.flatten)\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123152,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmph659gimm.scala:12)\n\tat Problem.main(tmph659gimm.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n        val max = list1.map(x => x.length).max\n        val result = list1.filter(x => x.length == max)\n        if (result.length == 1) Left(max)\n        else Right(result.flatten)\n    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123178,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpzih09p51.scala:12)\n\tat Problem.main(tmpzih09p51.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    }
  ]
}