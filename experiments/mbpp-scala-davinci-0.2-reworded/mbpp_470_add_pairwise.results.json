{
  "name": "mbpp_470_add_pairwise",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_470_add_pairwise.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum : Long = 0\n        var tup = test_tup\n        while (tup != 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8kryzh5a.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8kryzh5a.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8kryzh5a.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509744,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum : Long = 0\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10 + (tup / 10) % 10\n            tup /= 100\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpars0ni3s.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpars0ni3s.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpars0ni3s.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509744,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum : Long = 0\n        var tup_str : String = test_tup.toString\n        for (i <- 0 until tup_str.length - 1) {\n            sum += (tup_str.charAt(i).asDigit + tup_str.charAt(i + 1).asDigit)\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprzvvur67.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprzvvur67.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprzvvur67.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var tup = test_tup.toString.toList.map(_.asDigit)\n        var sum = 0\n        for (i <- 0 until tup.length - 1) {\n            sum += tup(i) + tup(i + 1)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpod62eh1p.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpod62eh1p.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpod62eh1p.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509744,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509744,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10 + (tup / 10) % 10\n            tup /= 100\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbfu71cpo.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbfu71cpo.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbfu71cpo.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum : Long = 0\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 100\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjze5zcoo.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjze5zcoo.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjze5zcoo.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10 + (tup / 10) % 10\n            tup /= 100\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptf5me11b.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptf5me11b.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptf5me11b.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum : Long = 0\n        var tup_str = test_tup.toString\n        for (i <- 0 to tup_str.length - 2) {\n            sum += tup_str(i).asDigit + tup_str(i + 1).asDigit\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph3u59q1g.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph3u59q1g.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph3u59q1g.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509744,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup != 0) {\n            sum += tup % 10 + (tup / 10) % 10\n            tup /= 100\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509744,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpt45oqdp5.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpt45oqdp5.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpt45oqdp5.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509744,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509744,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10 + (tup / 10) % 10\n            tup /= 100\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbfu71cpo.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbfu71cpo.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbfu71cpo.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10 + (tup / 10) % 10\n            tup /= 100\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbfu71cpo.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbfu71cpo.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbfu71cpo.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum : Long = 0\n        var tup = test_tup\n        while (tup > 0) {\n            sum += (tup % 10) + ((tup / 10) % 10)\n            tup /= 100\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124239,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy8uf71m3.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy8uf71m3.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy8uf71m3.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while(tup != 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124239,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1qrefi_j.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1qrefi_j.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1qrefi_j.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var result : Long = 0\n        var tup = test_tup\n        while (tup > 0) {\n            result += tup % 10\n            tup /= 10\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124238,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkmd66mar.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkmd66mar.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkmd66mar.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509744,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum : Long = 0\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124239,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnjsaua9i.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnjsaua9i.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnjsaua9i.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum : Long = 0\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124239,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnjsaua9i.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnjsaua9i.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnjsaua9i.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509744,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10 + (tup / 10) % 10\n            tup /= 100\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbfu71cpo.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbfu71cpo.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbfu71cpo.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum : Long = 0\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124239,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnjsaua9i.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnjsaua9i.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnjsaua9i.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509744,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum : Long = 0\n        var tup = test_tup.toString\n        for (i <- 0 until tup.length - 1) {\n            sum += (tup(i).toString.toLong + tup(i + 1).toString.toLong)\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124239,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2l_ettxl.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2l_ettxl.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2l_ettxl.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum : Long = 0\n        var tup = test_tup\n        while (tup > 0) {\n            sum += (tup % 10) + ((tup / 10) % 10)\n            tup /= 100\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124239,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy8uf71m3.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy8uf71m3.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy8uf71m3.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum : Long = 0\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124239,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnjsaua9i.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnjsaua9i.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnjsaua9i.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509744,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += (tup % 10) + ((tup / 10) % 10)\n            tup /= 100\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124240,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnh_x1jap.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnh_x1jap.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnh_x1jap.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum : Long = 0\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124239,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnjsaua9i.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnjsaua9i.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnjsaua9i.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum : Long = 0\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 100\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjze5zcoo.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjze5zcoo.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjze5zcoo.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += (tup % 10) + ((tup / 10) % 10)\n            tup /= 100\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124239,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo8aqn7df.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo8aqn7df.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo8aqn7df.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            var last_digit = tup % 10\n            tup = tup / 10\n            var next_digit = tup % 10\n            sum += last_digit + next_digit\n            tup = tup / 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124239,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf4claq0u.scala:18:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf4claq0u.scala:19:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf4claq0u.scala:20:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509744,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509744,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509744,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        val tup = test_tup.toString.map(_.asDigit).toList\n        val tup_len = tup.length\n        var sum = 0L\n        for (i <- 0 until tup_len) {\n            sum += tup(i) + tup((i + 1) % tup_len)\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124240,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_lk9g5ws.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_lk9g5ws.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_lk9g5ws.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup != 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124240,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpevfkmisb.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpevfkmisb.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpevfkmisb.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509744,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += (tup % 10) + ((tup / 10) % 10)\n            tup /= 100\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124240,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnh_x1jap.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnh_x1jap.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnh_x1jap.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var temp = test_tup\n        while (temp > 0) {\n            sum += temp % 10\n            temp /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124240,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpt6bp_ue4.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpt6bp_ue4.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpt6bp_ue4.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509744,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509744,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509744,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509744,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var tup = test_tup\n        var sum = 0L\n        while (tup != 0) {\n            sum += tup % 10 + (tup / 10) % 10\n            tup /= 100\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124239,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3lf8mhsj.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3lf8mhsj.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3lf8mhsj.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum : Long = 0\n        var test_str = test_tup.toString\n        for (i <- 0 until test_str.length - 1) {\n            sum += (test_str(i).asDigit + test_str(i + 1).asDigit)\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124239,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfjtrcg8f.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfjtrcg8f.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfjtrcg8f.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum : Long = 0\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124239,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnjsaua9i.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnjsaua9i.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnjsaua9i.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var tup = test_tup\n        var sum = 0L\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124240,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxka64md5.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxka64md5.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxka64md5.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509744,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum : Long = 0\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124239,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnjsaua9i.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnjsaua9i.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnjsaua9i.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum : Long = 0\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124239,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnjsaua9i.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnjsaua9i.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnjsaua9i.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum : Long = 0\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124239,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnjsaua9i.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnjsaua9i.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnjsaua9i.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum : Long = 0\n        var tup = test_tup.toString.toList\n        for (i <- 0 until tup.length - 1) {\n            sum += (tup(i).toString.toInt + tup(i + 1).toString.toInt)\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124240,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjd5ifwqu.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjd5ifwqu.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjd5ifwqu.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum : Long = 0\n        var tup = test_tup\n        while (tup != 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124240,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwoixh4h3.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwoixh4h3.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwoixh4h3.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            var digit = tup % 10\n            sum += digit\n            tup /= 10\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124239,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7ygsln51.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7ygsln51.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7ygsln51.scala:18:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum : Long = 0\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124239,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnjsaua9i.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnjsaua9i.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnjsaua9i.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var tup = test_tup\n        var sum = 0L\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124240,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4sabvohj.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4sabvohj.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4sabvohj.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509744,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup != 0) {\n            sum += tup % 10 + (tup / 10) % 10\n            tup /= 100\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509744,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpt45oqdp5.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpt45oqdp5.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpt45oqdp5.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var temp = test_tup\n        while (temp > 0) {\n            sum += temp % 10\n            temp /= 10\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124239,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpa0f7l0xz.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpa0f7l0xz.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpa0f7l0xz.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10 + (tup / 10) % 10\n            tup /= 100\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbfu71cpo.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbfu71cpo.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbfu71cpo.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509744,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509744,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var tup = test_tup\n        var sum = 0L\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124240,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4sabvohj.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4sabvohj.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4sabvohj.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509744,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509744,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509744,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var tup = test_tup\n        var sum = 0L\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124240,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4sabvohj.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4sabvohj.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4sabvohj.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var tup = test_tup.toString.toList\n        var sum = 0\n        for (i <- 0 until tup.length - 1) {\n            sum += (tup(i).toString.toInt + tup(i + 1).toString.toInt)\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124240,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6k4190q_.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6k4190q_.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6k4190q_.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509744,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10 + (tup / 10) % 10\n            tup /= 100\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbfu71cpo.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbfu71cpo.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbfu71cpo.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var tup_str = test_tup.toString\n        var sum = 0L\n        for (i <- 0 until tup_str.length - 1) {\n            sum += (tup_str(i).asDigit + tup_str(i + 1).asDigit)\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124240,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdnzbwv3p.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdnzbwv3p.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdnzbwv3p.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += (tup % 10) + ((tup / 10) % 10)\n            tup /= 100\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124240,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnh_x1jap.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnh_x1jap.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnh_x1jap.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum : Long = 0\n        var tup = test_tup.toString.toList\n        for (i <- 0 until tup.length - 1) {\n            sum += (tup(i).asDigit + tup(i + 1).asDigit)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124240,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpspfxyu59.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpspfxyu59.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpspfxyu59.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum : Long = 0\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124239,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnjsaua9i.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnjsaua9i.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnjsaua9i.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509744,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var tup = test_tup.toString.toList\n        var sum = 0\n        for (i <- 0 until tup.length - 1) {\n            sum += (tup(i).asDigit + tup(i + 1).asDigit)\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124240,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg58udsg7.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg58udsg7.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg58udsg7.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum : Long = 0\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124239,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnjsaua9i.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnjsaua9i.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnjsaua9i.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        val tup = test_tup.toString.toList\n        for (i <- 0 until tup.length - 1) {\n            sum += (tup(i).asDigit + tup(i + 1).asDigit)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124254,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwy6ez29z.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwy6ez29z.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwy6ez29z.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509744,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509744,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509744,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        val tup = test_tup.toString.map(_.asDigit).toList\n        var sum = 0L\n        for (i <- 0 until tup.length - 1) {\n            sum += tup(i) + tup(i + 1)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124253,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4qbhg1qo.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4qbhg1qo.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4qbhg1qo.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509744,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum : Long = 0\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124239,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnjsaua9i.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnjsaua9i.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnjsaua9i.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509744,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum : Long = 0\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10 + (tup / 10) % 10\n            tup /= 100\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpars0ni3s.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpars0ni3s.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpars0ni3s.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += (tup % 10) + ((tup / 10) % 10)\n            tup /= 100\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124239,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo8aqn7df.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo8aqn7df.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo8aqn7df.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum : Long = 0\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124239,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnjsaua9i.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnjsaua9i.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnjsaua9i.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum : Long = 0\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124239,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnjsaua9i.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnjsaua9i.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnjsaua9i.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum : Long = 0\n        var tup_str = test_tup.toString\n        for (i <- 0 until tup_str.length - 1) {\n            sum += tup_str(i).asDigit + tup_str(i + 1).asDigit\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124252,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkqc48wrr.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkqc48wrr.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkqc48wrr.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        val tup = test_tup.toString.toList.map(_.asDigit)\n        val tup_len = tup.length\n        var sum = 0L\n        for (i <- 0 until tup_len) {\n            sum += tup(i) + tup((i + 1) % tup_len)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124252,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp58_dren0.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp58_dren0.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp58_dren0.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var tup = test_tup\n        var sum = 0L\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124240,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxka64md5.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxka64md5.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxka64md5.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum : Long = 0\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124239,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnjsaua9i.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnjsaua9i.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnjsaua9i.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509744,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        val tup = test_tup.toString.map(_.asDigit).toList\n        val sum = (tup zip tup.tail).map(x => x._1 + x._2)\n        sum.sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124254,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8g08_n4m.scala:11:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8g08_n4m.scala:12:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8g08_n4m.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509744,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum : Long = 0\n        var tup = test_tup\n        while (tup != 0) {\n            sum += tup % 10 + (tup / 10) % 10\n            tup /= 100\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124255,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe2bzu0ju.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe2bzu0ju.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe2bzu0ju.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509744,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup != 0) {\n            sum += tup % 10\n            tup /= 100\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124253,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpn4yhw1_r.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpn4yhw1_r.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpn4yhw1_r.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509744,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509744,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10 + (tup / 10) % 10\n            tup /= 100\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbfu71cpo.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbfu71cpo.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbfu71cpo.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 100\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124252,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjali8a53.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjali8a53.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjali8a53.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        val tup_str = test_tup.toString\n        for (i <- 0 until tup_str.length - 1) {\n            sum += (tup_str(i).asDigit + tup_str(i + 1).asDigit)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124254,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzatmn7om.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzatmn7om.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzatmn7om.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum : Long = 0\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124239,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnjsaua9i.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnjsaua9i.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnjsaua9i.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum : Long = 0\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124239,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnjsaua9i.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnjsaua9i.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnjsaua9i.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509744,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509744,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10 + (tup / 10) % 10\n            tup /= 100\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbfu71cpo.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbfu71cpo.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbfu71cpo.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        val tup = test_tup.toString.map(_.asDigit).toList\n        val tup_len = tup.length\n        var sum = 0L\n        for (i <- 0 until tup_len - 1) {\n            sum += tup(i) + tup(i + 1)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124254,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7vqsaru6.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7vqsaru6.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7vqsaru6.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509744,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509744,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509744,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509744,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509744,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        val tup = test_tup.toString.map(_.asDigit).toList\n        val tup_len = tup.length\n        var sum = 0L\n        for (i <- 0 until tup_len) {\n            sum += tup(i) + tup((i + 1) % tup_len)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124255,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpr3yio47w.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpr3yio47w.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpr3yio47w.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509744,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509744,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var tup_str = test_tup.toString\n        var sum = 0\n        for (i <- 0 until tup_str.length - 1) {\n            sum += (tup_str(i).asDigit + tup_str(i + 1).asDigit)\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124255,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsn_jka22.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsn_jka22.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsn_jka22.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509744,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10 + (tup / 10) % 10\n            tup /= 100\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbfu71cpo.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbfu71cpo.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbfu71cpo.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509744,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var tup = test_tup.toString.toList\n        var sum = 0\n        for (i <- 0 until tup.length - 1) {\n            sum += (tup(i).asDigit + tup(i + 1).asDigit)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124255,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptpngkpj8.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptpngkpj8.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptpngkpj8.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        val tup = test_tup.toString.map(_.asDigit).toList\n        val tup_sum = tup.zip(tup.tail).map(x => x._1 + x._2)\n        tup_sum.sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124255,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpybymrkpa.scala:11:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpybymrkpa.scala:12:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpybymrkpa.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        // Write your code here\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124254,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps9s8p0vl.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps9s8p0vl.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps9s8p0vl.scala:18:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        val tup = test_tup.toString.toList.map(_.toString.toLong)\n        val sum = (tup.zip(tup.tail) :+ (tup.last, tup.head)).map(x => x._1 + x._2).sum\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124255,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpb4zs8erx.scala:11:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpb4zs8erx.scala:12:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpb4zs8erx.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509744,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum : Long = 0\n        var tup = test_tup\n        while (tup != 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124240,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwoixh4h3.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwoixh4h3.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwoixh4h3.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509744,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += (tup % 10) + ((tup / 10) % 10)\n            tup /= 100\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124239,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo8aqn7df.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo8aqn7df.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo8aqn7df.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum : Long = 0\n        var tup_str : String = test_tup.toString\n        for (i <- 0 until tup_str.length - 1) {\n            sum += (tup_str(i).toString.toInt + tup_str(i + 1).toString.toInt)\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124255,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpitg8r3ew.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpitg8r3ew.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpitg8r3ew.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum : Long = 0\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124239,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnjsaua9i.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnjsaua9i.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnjsaua9i.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum : Long = 0\n        var tup_str = test_tup.toString\n        for (i <- 0 until tup_str.length - 1) {\n            sum += (tup_str(i) - '0') + (tup_str(i + 1) - '0')\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124255,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7uadcugh.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7uadcugh.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7uadcugh.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509744,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509744,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup.toString\n        for (i <- 0 until tup.length - 1) {\n            sum += (tup(i).toString.toInt + tup(i + 1).toString.toInt)\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124255,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7ey5nw8x.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7ey5nw8x.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7ey5nw8x.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        val tup = test_tup.toString.toList.map(x => x.asDigit)\n        var sum = 0\n        for (i <- 0 until tup.length - 1) {\n            sum += tup(i) + tup(i + 1)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124255,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmbg6y_c8.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmbg6y_c8.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmbg6y_c8.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var tup = test_tup\n        var sum = 0L\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124240,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4sabvohj.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4sabvohj.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4sabvohj.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509744,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        val tup = test_tup.toString.toList.map(_.asDigit)\n        val tup_len = tup.length\n        var sum = 0L\n        for (i <- 0 until tup_len) {\n            if (i == 0) {\n                sum += tup(i) + tup(i + 1)\n            } else if (i == tup_len - 1) {\n                sum += tup(i) + tup(i - 1)\n            } else {\n                sum += tup(i) + tup(i - 1) + tup(i + 1)\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124255,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0lervfk3.scala:21:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0lervfk3.scala:22:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0lervfk3.scala:23:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509744,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509744,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509744,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        val tup = test_tup.toString.map(_.toString.toInt).toList\n        val tup_len = tup.length\n        val tup_sum = tup.zip(tup.drop(1)).map(x => x._1 + x._2).sum\n        tup_sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124255,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw6qlor44.scala:12:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw6qlor44.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw6qlor44.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup != 0) {\n            sum += (tup % 10) + (tup / 10 % 10)\n            tup /= 100\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124255,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6smvbugw.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6smvbugw.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6smvbugw.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509744,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmz1p8jly.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var result : Long = 0\n        var tup = test_tup\n        while (tup > 0) {\n            result += tup % 10\n            tup /= 10\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124238,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkmd66mar.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkmd66mar.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkmd66mar.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10 + (tup / 10) % 10\n            tup /= 100\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptf5me11b.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptf5me11b.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptf5me11b.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var tup = test_tup\n        var sum = 0L\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124240,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxka64md5.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxka64md5.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxka64md5.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var tup = test_tup\n        var sum = 0L\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124240,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4sabvohj.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4sabvohj.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4sabvohj.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum : Long = 0\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1666124239,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnjsaua9i.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnjsaua9i.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnjsaua9i.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Long) : Long = {\n        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addPairwise((1l, 5l, 7l, 8l, 10l)) == (6l, 12l, 15l, 18l));\n    assert(addPairwise((2l, 6l, 8l, 9l, 11l)) == (8l, 14l, 17l, 20l));\n    assert(addPairwise((3l, 7l, 9l, 10l, 12l)) == (10l, 16l, 19l, 22l));\n    }\n\n}\n",
      "timestamp": 1665509744,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(addPairwise((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)) == (\u001b[31m6l\u001b[0m, \u001b[31m12l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m18l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(addPairwise((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m)) == (\u001b[31m8l\u001b[0m, \u001b[31m14l\u001b[0m, \u001b[31m17l\u001b[0m, \u001b[31m20l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7rikos_.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(addPairwise((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m)) == (\u001b[31m10l\u001b[0m, \u001b[31m16l\u001b[0m, \u001b[31m19l\u001b[0m, \u001b[31m22l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (Long, Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}