{
  "name": "mbpp_615_average_tuple",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_615_average_tuple.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var result = List[Float]()\n        for (i <- 1 to nums) {\n            var sum = 0.0\n            for (j <- 1 to i) {\n                sum += j\n            }\n            result = (sum / i) :: result\n        }\n        result.reverse",
    "        val numsList = nums.toString.map(_.toString.toInt).toList\n        val numsTuple = numsList.grouped(2).toList\n        val numsTuple2 = numsTuple.map(x => (x(0), x(1)))\n        val numsTuple3 = numsTuple2.map(x => (x._1 + x._2) / 2.0f)\n        numsTuple3",
    "        var sum = 0.0\n        var count = 0\n        for (i <- 1 to nums) {\n            sum += i\n            count += 1\n        }\n        List(sum / count)",
    "        var sum = 0.0\n        var count = 0.0\n        for (i <- 1 to nums) {\n            sum += i\n            count += 1\n        }\n        List(sum / count)",
    "        val tuple = (1 to nums).map(x => (x, x)).toList\n        tuple.map(x => (x._1 + x._2).toFloat / 2)",
    "        val numsList = nums.toString.toList.map(_.toString.toInt)\n        val numsTuple = numsList.grouped(3).toList\n        val numsTupleFloat = numsTuple.map(x => x.map(_.toFloat))\n        val numsTupleFloatAvg = numsTupleFloat.map(x => x.sum / x.length)\n        numsTupleFloatAvg",
    "        val tuples = List((1, 2, 3), (4, 5, 6), (7, 8, 9))\n        val result = tuples.map(x => (x._1 + x._2 + x._3) / 3.0f)\n        result",
    "        val numsList = nums.toString.split(\"\").map(_.toInt).toList\n        val numsList2 = numsList.map(x => pow(x, numsList.length).toLong)\n        val sum = numsList2.sum\n        val result = numsList2.map(x => x.toFloat / sum)\n        result",
    "        val tuples = (1 to nums).map(x => (x, x + 1)).toList\n        val result = tuples.map(x => (x._1 + x._2).toFloat / 2)\n        result",
    "        val tuples = List((1, 2), (3, 4), (5, 6))\n        val result = tuples.map(x => (x._1 + x._2) / 2.0f)\n        result",
    "        val numsList = nums.toString.split(\"\").map(_.toInt).toList\n        val numsTuple = numsList.grouped(3).toList\n        val numsTupleSum = numsTuple.map(x => x.sum)\n        val numsTupleAvg = numsTupleSum.map(x => x.toFloat / 3)\n        numsTupleAvg",
    "        val sum = nums.toString.map(_.asDigit).sum\n        val avg = sum.toFloat / nums.toString.length\n        List(avg)",
    "        val num = nums.toString.split(\"\").map(_.toInt).toList\n        val sum = num.foldLeft(0)(_ + _)\n        val len = num.length\n        val avg = sum.toFloat / len\n        List(avg)",
    "        var sum = 0.0\n        var count = 0\n        for (i <- 1 to nums) {\n            if (i % 3 == 0 || i % 5 == 0) {\n                sum += i\n                count += 1\n            }\n        }\n        List(sum / count)",
    "        val list = ListBuffer[Float]()\n        for (i <- 1 to nums) {\n            val tuple = (i, i + 1, i + 2)\n            val sum = tuple._1 + tuple._2 + tuple._3\n            list += sum / 3\n        }\n        list.toList",
    "        val numsList = nums.toString.toList.map(_.toString.toInt)\n        val numsTuple = numsList.grouped(3).toList\n        val numsTuple2 = numsTuple.map(x => (x(0), x(1), x(2)))\n        val numsTuple3 = numsTuple2.map(x => (x._1 + x._2 + x._3) / 3.0f)\n        numsTuple3",
    "        var result = List[Float]()\n        for (i <- 1 to nums) {\n            var sum = 0.0\n            for (j <- 1 to i) {\n                sum += j\n            }\n            result = result :+ (sum / i)\n        }\n        result",
    "        var sum = 0.0\n        var count = 0\n        for (i <- 1 to nums) {\n            if (i % 3 == 0 || i % 5 == 0) {\n                sum += i\n                count += 1\n            }\n        }\n        List(sum / count)",
    "        var list = List[Float]()\n        for (i <- 1 to nums) {\n            var sum = 0\n            var count = 0\n            for (j <- 1 to i) {\n                if (i % j == 0) {\n                    sum += j\n                    count += 1\n                }\n            }\n            list = list :+ (sum.toFloat / count)\n        }\n        list",
    "        val tuples = List((1,2),(3,4),(5,6))\n        val result = tuples.map(x => (x._1 + x._2) / 2.0f)\n        result"
  ]
}