{
  "name": "mbpp_407_rearrange_bigger",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_407_rearrange_bigger.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val digits = n.toString.toList.map(_.asDigit)\n        val sorted = digits.sorted\n        val sortedReverse = sorted.reverse\n        if (digits == sortedReverse) {\n            \"Not possible\"\n        } else {\n            val index = digits.indexOf(sortedReverse.find(x => x > digits.last).get)\n            val (left, right) = digits.splitAt(index)\n            val (left1, right1) = right.splitAt(right.length - 1)\n            val result = (left ::: (right1.head :: left1)).sorted.mkString.toLong\n            result\n        }",
    "        val digits = n.toString.toList.map(_.toString.toInt)\n        val sorted = digits.sorted\n        if (sorted == digits.reverse) {\n            \"not possible\"\n        } else {\n            val (head, tail) = digits.span(_ == digits.max)\n            val (head2, tail2) = tail.span(_ == tail.min)\n            val (head3, tail3) = tail2.span(_ == tail2.max)\n            val (head4, tail4) = tail3.span(_ == tail3.min)\n            val (head5, tail5) = tail4.span(_ == tail4.max)\n            val (head6, tail6) = tail5.span(_ == tail5.min)\n            val (head7, tail7) = tail6.span(_ == tail6.max)\n            val (head8, tail8) = tail7.span(_ == tail7.min)\n            val (head9, tail9) = tail8.span(_ == tail8.max)\n            val (head10, tail10) = tail9.span(_ == tail9.min)\n            val (head11, tail11) = tail10.span(_ == tail10.max)\n            val (head12, tail12) = tail11.span(_ == tail11.min)\n            val (head13, tail13) = tail12.span(_ == tail12.max)\n            val (head14, tail14) = tail13.span(_ == tail13.min)\n            val (head15, tail15) = tail14.span(_ == tail14.max)\n            val (head16, tail16) = tail15.span(_ == tail15.min)\n            val (head17, tail17) = tail16.span(_ == tail16.max)\n            val (head18, tail18) = tail17.span(_ == tail17.min)\n            val (head19, tail19) = tail18.span(_ == tail18.max)\n            val (head20, tail20) = tail19.span(_ == tail19.min)\n            val (head21, tail21) = tail20.span(_ == tail20.max)\n           ",
    "        val digits = n.toString.toList.map(_.toString.toInt)\n        val sorted = digits.sorted\n        val reversed = sorted.reverse\n        if (digits == reversed) -1\n        else {\n            val index = digits.indexOf(reversed.head)\n            val (left, right) = digits.splitAt(index)\n            val newRight = reversed.head :: right.tail.sorted\n            (left ::: newRight).mkString.toLong\n        }",
    "        val digits = n.toString.toList.map(_.toString.toInt)\n        val sorted = digits.sorted\n        val sortedRev = sorted.reverse\n        val index = digits.indexOf(sortedRev.head)\n        val (left, right) = digits.splitAt(index)\n        val (leftRev, rightRev) = left.reverse.splitAt(1)\n        val result = (leftRev ++ rightRev ++ right).mkString.toLong\n        if (result > n) result else -1",
    "        val digits = n.toString.map(_.asDigit).toList\n        val sorted = digits.sorted\n        val reversed = sorted.reverse\n        val index = digits.indexOf(reversed.head)\n        val (left, right) = digits.splitAt(index)\n        val (left1, right1) = right.splitAt(1)\n        val newRight = left1 ::: right1.tail\n        val newLeft = left ::: right1.head :: newRight.sorted\n        val newNumber = newLeft.mkString.toLong\n        if (newNumber > n) newNumber else -1",
    "        val digits = n.toString.toList.map(_.toString.toInt)\n        val sorted = digits.sorted\n        val sortedRev = sorted.reverse\n        if (digits == sortedRev) {\n            \"Not possible\"\n        } else {\n            val index = digits.lastIndexWhere(x => x < digits.last)\n            val newDigits = digits.updated(index, digits.last).updated(digits.length - 1, digits(index))\n            newDigits.mkString(\"\").toLong\n        }",
    "        val digits = n.toString.toList.map(_.asDigit)\n        val sorted = digits.sorted\n        val sortedReverse = sorted.reverse\n        val index = digits.indexOf(sortedReverse.head)\n        val (left, right) = digits.splitAt(index)\n        val (leftSorted, rightSorted) = (left.sorted, right.sorted)\n        val (leftSortedReverse, rightSortedReverse) = (leftSorted.reverse, rightSorted.reverse)\n        val (leftSortedReverseTail, rightSortedReverseTail) = (leftSortedReverse.tail, rightSortedReverse.tail)\n        val (leftSortedReverseTailSorted, rightSortedReverseTailSorted) = (leftSortedReverseTail.sorted, rightSortedReverseTail.sorted)\n        val (leftSortedReverseTailSortedReverse, rightSortedReverseTailSortedReverse) = (leftSortedReverseTailSorted.reverse, rightSortedReverseTailSorted.reverse)\n        val result = leftSortedReverseTailSortedReverse ++ rightSortedReverseTailSortedReverse\n        if (result.mkString.toLong > n) result.mkString.toLong else -1",
    "        val digits = n.toString.toList.map(_.toString.toInt)\n        val sorted = digits.sorted\n        val sortedReverse = sorted.reverse\n        val index = digits.indexOf(sortedReverse.head)\n        if (index == 0) {\n            val newDigits = sortedReverse.tail ::: List(sortedReverse.head)\n            newDigits.mkString.toLong\n        } else {\n            val newDigits = sortedReverse.tail ::: List(sortedReverse.head)\n            val (left, right) = digits.splitAt(index)\n            val newLeft = left.take(left.length - 1) ::: List(sortedReverse.head)\n            newLeft.mkString.toLong + newDigits.mkString.toLong\n        }",
    "        val digits = n.toString.map(_.asDigit).toList\n        val sorted = digits.sorted\n        val max = sorted.last\n        val maxIndex = digits.indexOf(max)\n        val maxIndexSorted = sorted.indexOf(max)\n        val min = sorted.head\n        val minIndex = digits.indexOf(min)\n        val minIndexSorted = sorted.indexOf(min)\n        if (maxIndex == digits.length - 1) {\n            val newDigits = digits.updated(maxIndex, min).updated(minIndex, max)\n            newDigits.mkString.toLong\n        }\n        else {\n            val newDigits = digits.updated(maxIndex, min).updated(minIndex, max)\n            val newSorted = newDigits.sorted\n            val newMaxIndex = newDigits.indexOf(max)\n            val newMinIndex = newDigits.indexOf(min)\n            val newMaxIndexSorted = newSorted.indexOf(max)\n            val newMinIndexSorted = newSorted.indexOf(min)\n            val newDigits2 = newDigits.updated(newMaxIndex, newSorted(newMaxIndexSorted + 1)).updated(newMinIndex, newSorted(newMinIndexSorted - 1))\n            newDigits2.mkString.toLong\n        }",
    "        val digits = n.toString.toList.map(_.asDigit)\n        val sorted = digits.sorted.reverse\n        if (digits == sorted) return -1\n        val (left, right) = digits.splitAt(digits.length - 1)\n        val (x, y) = left.reverse.span(_ >= digits.last)\n        val z = x.head\n        val newLeft = (x.tail :+ digits.last).reverse ++ y\n        val newRight = z :: right.tail\n        (newLeft ++ newRight).mkString.toLong",
    "        val digits = n.toString.toList.map(_.toString.toInt)\n        val sortedDigits = digits.sorted\n        val sortedDigitsReversed = sortedDigits.reverse\n        val digitsReversed = digits.reverse\n        if (sortedDigitsReversed == digitsReversed) return -1\n        val index = digitsReversed.indexWhere(x => x > digitsReversed(0))\n        val temp = digitsReversed(0)\n        digitsReversed(0) = digitsReversed(index)\n        digitsReversed(index) = temp\n        val result = digitsReversed.reverse.mkString.toLong\n        result",
    "        val digits = n.toString.map(_.asDigit).toList\n        val sorted = digits.sorted\n        val max = sorted.last\n        val maxIndex = digits.indexOf(max)\n        val maxIndexSorted = sorted.indexOf(max)\n        val next = sorted(maxIndexSorted - 1)\n        val nextIndex = digits.indexOf(next)\n        val (left, right) = digits.splitAt(nextIndex)\n        val result = (left :+ max) ++ right.tail.sorted\n        if (result.head == 0) -1 else result.mkString.toLong",
    "        val digits = n.toString.toList.map(_.toString.toInt)\n        val sorted = digits.sorted\n        val sortedReverse = sorted.reverse\n        val index = digits.indexOf(sortedReverse.head)\n        val (left, right) = digits.splitAt(index)\n        val (leftSorted, rightSorted) = (left.sorted, right.sorted)\n        val leftSortedReverse = leftSorted.reverse\n        val rightSortedReverse = rightSorted.reverse\n        val (leftSortedReverseHead, leftSortedReverseTail) = (leftSortedReverse.head, leftSortedReverse.tail)\n        val (rightSortedReverseHead, rightSortedReverseTail) = (rightSortedReverse.head, rightSortedReverse.tail)\n        if (leftSortedReverseHead > rightSortedReverseHead) {\n            val newLeft = leftSortedReverseTail :+ rightSortedReverseHead\n            val newRight = rightSortedReverseTail :+ leftSortedReverseHead\n            (newLeft ++ newRight).mkString.toLong\n        } else {\n            -1\n        }",
    "        val digits = n.toString.map(_.asDigit).toList\n        val sorted = digits.sorted.reverse\n        if (digits == sorted) return -1\n        val (left, right) = digits.span(_ != sorted.head)\n        val (left2, right2) = right.span(_ != sorted.tail.head)\n        val newRight = sorted.head :: sorted.tail.head :: left2.tail\n        val newLeft = left ::: right2\n        (newLeft ::: newRight).mkString.toLong",
    "        val digits = n.toString.toList.map(_.toString.toInt)\n        val (left, right) = digits.splitAt(digits.length - 1)\n        val rightSorted = right.sorted\n        if (rightSorted.head > left.last) {\n            val (rightHead, rightTail) = rightSorted.splitAt(1)\n            return (left ::: rightHead ::: rightTail.sorted).mkString.toLong\n        }\n        return -1",
    "        val digits = n.toString.toList.map(_.asDigit)\n        val (left, right) = digits.splitAt(digits.length - 1)\n        val rightSorted = right.sorted\n        val rightSortedIndex = rightSorted.indexOf(right.head)\n        if (rightSortedIndex == 0) {\n            val leftSorted = left.sorted\n            val leftSortedIndex = leftSorted.indexOf(left.head)\n            if (leftSortedIndex == leftSorted.length - 1) None\n            else {\n                val leftSortedHead = leftSorted(leftSortedIndex + 1)\n                val leftSortedTail = leftSorted.drop(leftSortedIndex + 1)\n                val leftSortedTailSorted = leftSortedTail.sorted\n                val leftSortedTailSortedHead = leftSortedTailSorted.head\n                val leftSortedTailSortedTail = leftSortedTailSorted.tail\n                Some(leftSortedHead.toString + leftSortedTailSortedHead.toString + leftSortedTailSortedTail.mkString + rightSorted.mkString)\n            }\n        }\n        else {\n            val rightSortedHead = rightSorted(rightSortedIndex - 1)\n            val rightSortedTail = rightSorted.drop(rightSortedIndex - 1)\n            val rightSortedTailSorted = rightSortedTail.sorted\n            val rightSortedTailSortedHead = rightSortedTailSorted.head\n            val rightSortedTailSortedTail = rightSortedTailSorted.tail\n            Some(left.mkString + rightSortedHead.toString + rightSortedTailSortedHead.toString + rightSortedTailSortedTail.mkString)\n        }",
    "        val digits = n.toString.toList.map(_.toString.toInt)\n        val sortedDigits = digits.sorted\n        val sortedDigitsReversed = sortedDigits.reverse\n        val index = digits.indexOf(sortedDigitsReversed.head)\n        val (left, right) = digits.splitAt(index)\n        val newDigits = left ::: sortedDigitsReversed\n        val newNumber = newDigits.mkString.toLong\n        if (newNumber > n) newNumber else -1",
    "        val digits = n.toString.toList.map(_.toString.toInt)\n        val sorted = digits.sorted\n        if (digits == sorted.reverse) return -1\n        val (i, j) = (digits.indexWhere(x => x < digits.last), sorted.indexWhere(x => x > digits(i)))\n        val (left, right) = (digits.take(i), digits.drop(i + 1))\n        val (left1, right1) = (left :+ sorted(j), sorted.drop(j + 1) ::: right)\n        val result = (left1 ::: right1).mkString.toLong\n        result",
    "        val digits = n.toString.toList.map(_.asDigit)\n        val sorted = digits.sorted\n        val max = sorted.last\n        val index = digits.indexOf(max)\n        val (left, right) = digits.splitAt(index)\n        val next = sorted.filter(_ > max).min\n        val nextIndex = sorted.indexOf(next)\n        val (left2, right2) = sorted.splitAt(nextIndex)\n        val newLeft = left2 ::: left ::: right2\n        val newRight = right.filter(_ != next)\n        val newDigits = newLeft ::: newRight\n        if (newDigits.head == 0) -1 else newDigits.mkString.toLong",
    "        val digits = n.toString.toList.map(_.asDigit)\n        val sorted = digits.sorted\n        val sortedReverse = sorted.reverse\n        val index = digits.indexOf(sortedReverse.head)\n        val (left, right) = digits.splitAt(index)\n        val (leftSorted, rightSorted) = (left.sorted, right.sorted)\n        val (leftSortedReverse, rightSortedReverse) = (leftSorted.reverse, rightSorted.reverse)\n        val (leftSortedReverseTail, rightSortedReverseTail) = (leftSortedReverse.tail, rightSortedReverse.tail)\n        val (leftSortedReverseTailSorted, rightSortedReverseTailSorted) = (leftSortedReverseTail.sorted, rightSortedReverseTail.sorted)\n        val (leftSortedReverseTailSortedReverse, rightSortedReverseTailSortedReverse) = (leftSortedReverseTailSorted.reverse, rightSortedReverseTailSorted.reverse)\n        val leftSortedReverseTailSortedReverseHead = leftSortedReverseTailSortedReverse.head\n        val rightSortedReverseTailSortedReverseHead = rightSortedReverseTailSortedReverse.head\n        val leftSortedReverseTailSortedReverseHeadIndex = leftSortedReverseTail.indexOf(leftSortedReverseTailSortedReverseHead)\n        val rightSortedReverseTailSortedReverseHeadIndex = rightSortedReverseTail.indexOf(rightSortedReverseTailSortedReverseHead)\n        val leftSortedReverseTailSortedReverseHeadIndexPlusOne = leftSortedReverseTailSortedReverseHeadIndex + 1\n        val rightSortedReverseTailSortedReverseHeadIndexPlusOne = rightSortedReverseTailSortedR"
  ]
}