{
  "name": "mbpp_120_max_product_tuple",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    def maxProductTuple(list1 : List[Long]) : Long = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_120_max_product_tuple.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(maxProductTuple((List[Long]((2l, 7l), (2l, 6l), (1l, 8l), (4l, 9l)))) == (36l));\n    assert(maxProductTuple((List[Long]((10l, 20l), (15l, 2l), (5l, 10l)))) == (200l));\n    assert(maxProductTuple((List[Long]((11l, 44l), (10l, 15l), (20l, 5l), (12l, 9l)))) == (484l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var max = 0L\n        for (i <- 0 until list1.length) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var maxProduct = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                maxProduct = max(maxProduct, list1(i) * list1(j))\n            }\n        }\n        maxProduct",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = list1(i) * list1(j)\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var maxProduct = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > maxProduct) maxProduct = product\n            }\n        }\n        maxProduct",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        val list2 = list1.combinations(2).toList\n        val list3 = list2.map(x => x(0) * x(1))\n        list3.max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = list1(i) * list1(j)\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length) {\n            for (j <- i + 1 until list1.length) {\n                val product = list1(i) * list1(j)\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length) {\n            for (j <- i + 1 until list1.length) {\n                val product = list1(i) * list1(j)\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length) {\n            for (j <- i + 1 until list1.length) {\n                val product = list1(i) * list1(j)\n                if (product > max) max = product\n            }\n        }\n        max",
    "        val list2 = list1.sorted\n        val list3 = list2.reverse\n        val list4 = list2.zip(list3)\n        val list5 = list4.map(x => x._1 * x._2)\n        list5.max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        val list2 = list1.sorted\n        val list3 = list2.reverse\n        val list4 = list3.zip(list2)\n        val list5 = list4.map(x => x._1 * x._2)\n        list5.max",
    "        val list2 = list1.sorted\n        val list3 = list2.reverse\n        val list4 = list2.zip(list3)\n        val list5 = list4.map(x => x._1 * x._2)\n        list5.max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        val list2 = list1.map(x => (x, x * x))\n        val list3 = list2.combinations(2).toList\n        val list4 = list3.map(x => abs(x(0)._1 * x(1)._1))\n        list4.max",
    "        val list2 = list1.sorted\n        val max1 = list2.last * list2(list2.length - 2)\n        val max2 = list2.head * list2(1)\n        if (max1 > max2) max1 else max2",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var maxProduct = 0L\n        for (i <- 0 until list1.length) {\n            for (j <- i + 1 until list1.length) {\n                val product = list1(i) * list1(j)\n                if (product > maxProduct) maxProduct = product\n            }\n        }\n        maxProduct",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = Long.MinValue\n        for (i <- 0 until list1.length) {\n            for (j <- i + 1 until list1.length) {\n                val product = list1(i) * list1(j)\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        val list2 = list1.sorted\n        val list3 = list2.reverse\n        val list4 = list2.zip(list3)\n        val list5 = list4.map(x => x._1 * x._2)\n        list5.max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                max = max(max, list1(i) * list1(j))\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        val list2 = list1.sorted\n        val list3 = list2.reverse\n        val list4 = list2.zip(list3)\n        val list5 = list4.map(x => x._1 * x._2)\n        list5.max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        val list2 = list1.combinations(2).toList\n        val list3 = list2.map(x => x(0) * x(1))\n        list3.max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        val list2 = list1.combinations(2).toList\n        val list3 = list2.map(x => x.product)\n        val list4 = list3.map(x => abs(x))\n        list4.max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        val list = list1.map(x => x.toDouble)\n        val list2 = list.combinations(2).toList\n        val list3 = list2.map(x => x.product)\n        val list4 = list3.map(x => abs(x))\n        list4.max.toLong",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length) {\n            for (j <- i + 1 until list1.length) {\n                val product = list1(i) * list1(j)\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = Long.MinValue\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        val list2 = list1.combinations(2).toList\n        val list3 = list2.map(x => (x(0) * x(1)).abs)\n        list3.max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        val list2 = list1.combinations(2).toList\n        val list3 = list2.map(x => x.product)\n        val list4 = list3.map(x => abs(x))\n        list4.max",
    "        var maxProduct = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > maxProduct) maxProduct = product\n            }\n        }\n        maxProduct",
    "        var max = 0L\n        for (i <- 0 until list1.length) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length) {\n            for (j <- i + 1 until list1.length) {\n                val product = list1(i) * list1(j)\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length) {\n            for (j <- i + 1 until list1.length) {\n                val product = list1(i) * list1(j)\n                if (product > max) max = product\n            }\n        }\n        max",
    "        val list2 = list1.combinations(2).toList\n        val list3 = list2.map(x => (x(0) * x(1), x(0), x(1)))\n        val list4 = list3.sortWith((x, y) => abs(x._1) > abs(y._1))\n        list4(0)._1",
    "        var max = 0L\n        for (i <- 0 until list1.length) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        val list2 = list1.map(x => (x, x * x))\n        val list3 = list2.combinations(2).toList\n        val list4 = list3.map(x => (x(0)._1 * x(1)._1, x(0)._2 * x(1)._2))\n        val list5 = list4.map(x => (x._1, x._2, abs(x._1) - x._2))\n        val list6 = list5.sortBy(x => x._3)\n        list6(list6.length - 1)._1",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = list1(i) * list1(j)\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var maxProduct = 0L\n        for (i <- 0 to list1.length - 1) {\n            for (j <- i + 1 to list1.length - 1) {\n                val product = abs(list1(i) * list1(j))\n                if (product > maxProduct) maxProduct = product\n            }\n        }\n        maxProduct",
    "        val list2 = list1.sortWith(_ > _)\n        val list3 = list2.zipWithIndex\n        val list4 = list3.filter(x => x._2 % 2 == 0)\n        val list5 = list4.map(x => x._1)\n        val list6 = list5.zip(list5.tail)\n        val list7 = list6.map(x => x._1 * x._2)\n        list7.max",
    "        val list2 = list1.combinations(2).toList\n        val list3 = list2.map(x => x.product)\n        val list4 = list3.map(x => abs(x))\n        list4.max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length) {\n            for (j <- i + 1 until list1.length) {\n                val prod = abs(list1(i) * list1(j))\n                if (prod > max) max = prod\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length) {\n            for (j <- i + 1 until list1.length) {\n                val prod = abs(list1(i) * list1(j))\n                if (prod > max) max = prod\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val prod = abs(list1(i) * list1(j))\n                if (prod > max) max = prod\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var maxProduct = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = list1(i) * list1(j)\n                if (product > maxProduct) maxProduct = product\n            }\n        }\n        maxProduct",
    "        val list2 = list1.combinations(2).toList\n        val list3 = list2.map(x => x.product)\n        list3.max",
    "        var maxProduct = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = list1(i) * list1(j)\n                if (product > maxProduct) maxProduct = product\n            }\n        }\n        maxProduct",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        val list2 = list1.map(x => (x, x * x))\n        val list3 = list2.combinations(2).toList\n        val list4 = list3.map(x => (x(0)._1 * x(1)._1, x(0)._2 * x(1)._2))\n        val list5 = list4.map(x => (x._1, x._2, abs(x._1) - x._2))\n        val list6 = list5.sortWith(_._3 > _._3)\n        list6(0)._1",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        val list2 = list1.sorted\n        val max1 = list2.last\n        val max2 = list2.takeRight(2).head\n        val min1 = list2.head\n        val min2 = list2.tail.head\n        val maxProduct1 = max1 * max2\n        val maxProduct2 = min1 * min2\n        if (maxProduct1 > maxProduct2) maxProduct1 else maxProduct2",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                max = max(max, list1(i) * list1(j))\n            }\n        }\n        max",
    "        val list2 = list1.combinations(2).toList\n        val list3 = list2.map(x => x.product)\n        val list4 = list3.map(x => abs(x))\n        list4.max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = list1(i) * list1(j)\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var maxProduct = 0L\n        for (i <- 0 until list1.length) {\n            for (j <- i + 1 until list1.length) {\n                val product = list1(i) * list1(j)\n                if (product > maxProduct) maxProduct = product\n            }\n        }\n        return maxProduct",
    "        val list2 = list1.sorted\n        val list3 = list2.reverse\n        val list4 = list2.zip(list3)\n        val list5 = list4.map(x => x._1 * x._2)\n        list5.max",
    "        var max = 0L\n        for (i <- 0 to list1.length - 1) {\n            for (j <- i + 1 to list1.length - 1) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        val list2 = list1.combinations(2).toList\n        val list3 = list2.map(x => (x(0) * x(1)).abs)\n        list3.max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                max = max(max, list1(i) * list1(j))\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length) {\n            for (j <- i + 1 until list1.length) {\n                val product = list1(i) * list1(j)\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        val list2 = list1.sorted\n        val list3 = list2.reverse\n        val list4 = list2.zip(list3)\n        val list5 = list4.map(x => x._1 * x._2)\n        list5.max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val prod = abs(list1(i) * list1(j))\n                if (prod > max) max = prod\n            }\n        }\n        max",
    "        val list2 = list1.combinations(2).toList\n        val list3 = list2.map(x => x(0) * x(1))\n        list3.max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max : Long = 0\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        val list2 = list1.map(x => (x, x * x))\n        val list3 = list2.combinations(2).toList\n        val list4 = list3.map(x => (x(0)._1 * x(1)._1, x(0)._2 * x(1)._2))\n        val list5 = list4.map(x => (x._1, x._2, abs(x._1 - x._2)))\n        val list6 = list5.sortBy(_._3)\n        list6(0)._1",
    "        var max : Long = 0\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = list1(i) * list1(j)\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var maxProduct = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = list1(i) * list1(j)\n                if (product > maxProduct) maxProduct = product\n            }\n        }\n        maxProduct",
    "        val list2 = list1.combinations(2).toList\n        val list3 = list2.map(x => x(0) * x(1))\n        list3.max",
    "        var maxProduct = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > maxProduct) maxProduct = product\n            }\n        }\n        maxProduct",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        val list2 = list1.combinations(2).toList\n        val list3 = list2.map(x => x(0) * x(1))\n        list3.max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val prod = list1(i) * list1(j)\n                if (prod > max) max = prod\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        val list2 = list1.combinations(2).toList\n        val list3 = list2.map(x => x(0) * x(1))\n        list3.max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var maxProduct = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = list1(i) * list1(j)\n                if (product > maxProduct) maxProduct = product\n            }\n        }\n        maxProduct",
    "        val list2 = list1.combinations(2).toList\n        val list3 = list2.map(x => x(0) * x(1))\n        list3.max",
    "        var maxProduct = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > maxProduct) maxProduct = product\n            }\n        }\n        maxProduct",
    "        val list2 = list1.combinations(2).toList\n        val list3 = list2.map(x => x(0) * x(1))\n        list3.max",
    "        val list2 = list1.combinations(2).toList\n        val list3 = list2.map(x => x.product)\n        val list4 = list3.map(x => abs(x))\n        val list5 = list4.sorted\n        list5.last",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        val list2 = list1.combinations(2).toList\n        val list3 = list2.map(x => x(0) * x(1))\n        list3.max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = list1(i) * list1(j)\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        val list2 = list1.sortWith(_ > _)\n        val list3 = list2.zipWithIndex\n        val list4 = list3.filter(_._2 % 2 == 0)\n        val list5 = list4.map(_._1)\n        val list6 = list5.zip(list5.tail)\n        val list7 = list6.map(x => x._1 * x._2)\n        list7.max",
    "        val list2 = list1.sorted\n        val list3 = list2.reverse\n        val list4 = list2.zip(list3)\n        list4.map(x => x._1 * x._2).max",
    "        var maxProduct = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = list1(i) * list1(j)\n                if (product > maxProduct) maxProduct = product\n            }\n        }\n        maxProduct",
    "        var maxProduct = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > maxProduct) maxProduct = product\n            }\n        }\n        maxProduct",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        val list2 = list1.combinations(2).toList\n        list2.map(x => x.reduce(_ * _)).max",
    "        val list2 = list1.combinations(2).toList\n        val list3 = list2.map(x => x(0) * x(1))\n        list3.max",
    "        var max = 0L\n        for (i <- list1) {\n            for (j <- list1) {\n                if (i != j) {\n                    val prod = abs(i * j)\n                    if (prod > max) max = prod\n                }\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length) {\n            for (j <- i + 1 until list1.length) {\n                val product = list1(i) * list1(j)\n                if (product > max) max = product\n            }\n        }\n        max",
    "        val list2 = list1.sorted\n        val list3 = list2.reverse\n        val list4 = list2.zip(list3)\n        val list5 = list4.map(x => x._1 * x._2)\n        list5.max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        val list2 = list1.combinations(2).toList\n        val list3 = list2.map(x => x.product)\n        list3.max",
    "        var max = 0L\n        for (i <- 0 until list1.length) {\n            for (j <- i + 1 until list1.length) {\n                val prod = abs(list1(i) * list1(j))\n                if (prod > max) max = prod\n            }\n        }\n        max",
    "        var maxProduct = 0L\n        for (i <- 0 to list1.length - 1) {\n            for (j <- i + 1 to list1.length - 1) {\n                val product = abs(list1(i) * list1(j))\n                if (product > maxProduct) maxProduct = product\n            }\n        }\n        maxProduct",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        val list2 = list1.map(x => (x, x * x))\n        val list3 = list2.combinations(2).toList\n        val list4 = list3.map(x => (x(0)._1 * x(1)._1, x(0)._2 * x(1)._2))\n        val list5 = list4.map(x => if (x._1 > 0) x._1 else x._2)\n        list5.max",
    "        var max = 0L\n        for (i <- 0 until list1.length) {\n            for (j <- i + 1 until list1.length) {\n                val product = list1(i) * list1(j)\n                if (product > max) max = product\n            }\n        }\n        max",
    "        def maxProductTuple(list1 : List[Long], max : Long) : Long = {\n            if (list1.length == 0) max\n            else {\n                val list2 = list1.tail\n                val product = list1.head * list2.head\n                if (product > max) maxProductTuple(list2, product)\n                else maxProductTuple(list2, max)\n            }\n        }\n        maxProductTuple(list1, 0)",
    "        var max = 0L\n        for (i <- 0 until list1.length) {\n            for (j <- i + 1 until list1.length) {\n                val product = list1(i) * list1(j)\n                if (product > max) max = product\n            }\n        }\n        max",
    "        val list2 = list1.sorted\n        val list3 = list2.reverse\n        val list4 = list2.zip(list3)\n        val list5 = list4.map(x => x._1 * x._2)\n        list5.max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = list1(i) * list1(j)\n                if (product > max) max = product\n            }\n        }\n        max",
    "        val list2 = list1.combinations(2).toList\n        val list3 = list2.map(x => x.product)\n        list3.max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var maxProduct = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > maxProduct) maxProduct = product\n            }\n        }\n        maxProduct",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = list1(i) * list1(j)\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        val list2 = list1.combinations(2).toList\n        val list3 = list2.map(x => x(0) * x(1))\n        list3.max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var maxProduct = Long.MinValue\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = list1(i) * list1(j)\n                if (product > maxProduct) maxProduct = product\n            }\n        }\n        maxProduct",
    "        var maxProduct = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = list1(i) * list1(j)\n                if (product > maxProduct) maxProduct = product\n            }\n        }\n        maxProduct",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = list1(i) * list1(j)\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        val list2 = list1.map(x => (x, x * x))\n        val list3 = list2.combinations(2).toList\n        val list4 = list3.map(x => abs(x(0)._1 * x(1)._1))\n        list4.max",
    "        var max = 0L\n        for (i <- 0 until list1.length) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        val list2 = list1.sorted\n        val list3 = list2.reverse\n        return list3(0) * list3(1)",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.size) {\n            for (j <- i + 1 until list1.size) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        val list2 = list1.combinations(2).toList\n        list2.map(x => x.product).max",
    "        var max = 0L\n        for (i <- 0 until list1.length) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        val list2 = list1.sorted\n        val list3 = list2.reverse\n        val list4 = list2.zip(list3)\n        val list5 = list4.map(x => x._1 * x._2)\n        list5.max",
    "        var max = 0L\n        for (i <- 0 until list1.length) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        val list2 = list1.combinations(2).toList\n        val list3 = list2.map(x => x(0) * x(1))\n        list3.max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length) {\n            for (j <- i + 1 until list1.length) {\n                val product = list1(i) * list1(j)\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = list1(i) * list1(j)\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        val list2 = list1.combinations(2).toList\n        val list3 = list2.map(x => x.product)\n        val list4 = list3.map(x => abs(x))\n        list4.max",
    "        val list2 = list1.sorted\n        val list3 = list2.reverse\n        val list4 = list2.zip(list3)\n        val list5 = list4.map(x => x._1 * x._2)\n        list5.max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = list1(i) * list1(j)\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length) {\n            for (j <- i + 1 until list1.length) {\n                val product = list1(i) * list1(j)\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until list1.length) {\n            for (j <- i + 1 until list1.length) {\n                val product = abs(list1(i) * list1(j))\n                if (product > max) max = product\n            }\n        }\n        max"
  ]
}