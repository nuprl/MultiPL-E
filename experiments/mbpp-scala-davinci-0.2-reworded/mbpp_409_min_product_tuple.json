{
  "name": "mbpp_409_min_product_tuple",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the minimum product from the pairs of tuples within a given list.\n    def minProductTuple(list1 : List[Long]) : Long = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_409_min_product_tuple.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(minProductTuple((List[Long]((2l, 7l), (2l, 6l), (1l, 8l), (4l, 9l)))) == (8l));\n    assert(minProductTuple((List[Long]((10l, 20l), (15l, 2l), (5l, 10l)))) == (30l));\n    assert(minProductTuple((List[Long]((11l, 44l), (10l, 15l), (20l, 5l), (12l, 9l)))) == (100l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var min = Long.MaxValue\n        for (i <- 0 until list1.length) {\n            for (j <- i + 1 until list1.length) {\n                val product = list1(i) * list1(j)\n                if (product < min) min = product\n            }\n        }\n        min",
    "        val list2 = list1.sorted\n        list2(0) * list2(1)",
    "        val list2 = list1.sorted\n        val list3 = list2.zip(list2.tail)\n        list3.map(x => x._1 * x._2).min",
    "        val list2 = list1.sorted\n        val list3 = list2.zip(list2.tail)\n        list3.map(x => x._1 * x._2).min",
    "        val list2 = list1.sorted\n        val list3 = list2.zip(list2.tail)\n        list3.map(x => x._1 * x._2).min",
    "        val list = list1.sorted\n        list(0) * list(1)",
    "        val list2 = list1.sorted\n        list2.head * list2.tail.head",
    "        val list2 = list1.sorted\n        val list3 = list2.grouped(2).toList\n        val list4 = list3.map(x => x.product)\n        list4.min",
    "        val list2 = list1.sorted\n        list2(0) * list2(1)",
    "        var min = Long.MaxValue\n        for (i <- 0 until list1.length) {\n            for (j <- i + 1 until list1.length) {\n                val product = list1(i) * list1(j)\n                if (product < min) min = product\n            }\n        }\n        min",
    "        var min = Long.MaxValue\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val prod = list1(i) * list1(j)\n                if (prod < min) min = prod\n            }\n        }\n        min",
    "        if (list1.length < 2) throw new IllegalArgumentException(\"List must have at least 2 elements\")\n        var min = list1(0) * list1(1)\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = list1(i) * list1(j)\n                if (product < min) min = product\n            }\n        }\n        min",
    "        val list2 = list1.sorted\n        val list3 = list2.zip(list2.tail)\n        list3.map(x => x._1 * x._2).min",
    "        val list2 = list1.sorted\n        val list3 = list2.slice(0, list2.length / 2)\n        val list4 = list2.slice(list2.length / 2, list2.length)\n        val list5 = list3.zip(list4)\n        list5.map(x => x._1 * x._2).min",
    "        var min = Long.MaxValue\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = list1(i) * list1(j)\n                if (product < min) min = product\n            }\n        }\n        min",
    "        var min = list1(0) * list1(1)\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = list1(i) * list1(j)\n                if (product < min) min = product\n            }\n        }\n        return min",
    "        val list2 = list1.sortWith(_ < _)\n        list2(0) * list2(1)",
    "        var min = Long.MaxValue\n        for (i <- 0 until list1.length) {\n            for (j <- i + 1 until list1.length) {\n                val product = list1(i) * list1(j)\n                if (product < min) min = product\n            }\n        }\n        min",
    "        val list2 = list1.sorted\n        list2(0) * list2(1)",
    "        val list2 = list1.sorted\n        list2(0) * list2(1)"
  ]
}