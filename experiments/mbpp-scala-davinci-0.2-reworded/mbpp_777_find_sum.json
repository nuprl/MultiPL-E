{
  "name": "mbpp_777_find_sum",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of non-repeated elements in a given list.\n    def findSum(arr : List[Long]) : Long = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_777_find_sum.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(findSum((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (21l));\n    assert(findSum((List[Long](1l.toLong, 10l.toLong, 9l.toLong, 4l.toLong, 2l.toLong, 10l.toLong, 10l.toLong, 45l.toLong, 4l.toLong))) == (71l));\n    assert(findSum((List[Long](12l.toLong, 10l.toLong, 9l.toLong, 45l.toLong, 2l.toLong, 10l.toLong, 10l.toLong, 45l.toLong, 10l.toLong))) == (78l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val set = arr.toSet\n        var sum = 0L\n        for (i <- set) {\n            sum += i\n        }\n        return sum",
    "        var sum = 0L\n        var set = Set[Long]()\n        for (i <- arr) {\n            if (!set.contains(i)) {\n                sum += i\n                set += i\n            }\n        }\n        sum",
    "        var sum = 0L\n        var set = Set[Long]()\n        for (i <- arr) {\n            if (!set.contains(i)) {\n                sum += i\n                set += i\n            }\n        }\n        return sum",
    "        var sum : Long = 0\n        var set = Set[Long]()\n        for (i <- arr) {\n            if (!set.contains(i)) {\n                sum += i\n                set += i\n            }\n        }\n        return sum",
    "        var sum = 0L\n        var set = Set[Long]()\n        for (i <- arr) {\n            if (!set.contains(i)) {\n                sum += i\n                set += i\n            }\n        }\n        return sum",
    "        var sum = 0L\n        var map = new HashMap[Long, Int]()\n        for (i <- arr) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        for (i <- arr) {\n            if (map(i) == 1) {\n                sum += i\n            }\n        }\n        return sum",
    "        var sum = 0L\n        for (i <- arr) {\n            sum += i\n        }\n        return sum",
    "        var sum = 0L\n        var set = Set[Long]()\n        for (i <- arr) {\n            if (!set.contains(i)) {\n                sum += i\n                set += i\n            }\n        }\n        return sum",
    "        var sum = 0L\n        var set = Set[Long]()\n        for (i <- arr) {\n            if (!set.contains(i)) {\n                sum += i\n                set += i\n            }\n        }\n        return sum",
    "        var sum = 0L\n        var set = Set[Long]()\n        for (i <- arr) {\n            if (!set.contains(i)) {\n                sum += i\n                set += i\n            }\n        }\n        return sum",
    "        val map = new HashMap[Long, Long]()\n        for (i <- arr) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        var sum = 0L\n        for (i <- map.keys) {\n            if (map(i) == 1) {\n                sum += i\n            }\n        }\n        return sum",
    "        // Write your code here\n        var sum = 0L\n        var map = new HashMap[Long, Int]()\n        for (i <- 0 until arr.length) {\n            if (!map.contains(arr(i))) {\n                map += (arr(i) -> 1)\n                sum += arr(i)\n            }\n        }\n        sum",
    "        var sum = 0L\n        var set = Set[Long]()\n        for (i <- arr) {\n            if (!set.contains(i)) {\n                sum += i\n                set += i\n            }\n        }\n        return sum",
    "        var sum = 0L\n        for (i <- arr) {\n            if (arr.count(_ == i) == 1) sum += i\n        }\n        return sum",
    "        var sum = 0L\n        var set = Set[Long]()\n        for (i <- 0 until arr.length) {\n            if (!set.contains(arr(i))) {\n                sum += arr(i)\n                set += arr(i)\n            }\n        }\n        sum",
    "        arr.foldLeft(0L)((x, y) => x + y)",
    "        var sum : Long = 0\n        for (i <- arr) {\n            if (!arr.contains(i + 1)) {\n                sum += i\n            }\n        }\n        return sum",
    "        var sum = 0L\n        var map = new HashMap[Long, Long]\n        for (i <- arr) {\n            if (map.contains(i)) map(i) = map(i) + 1\n            else map(i) = 1\n        }\n        for ((k, v) <- map) {\n            if (v == 1) sum += k\n        }\n        return sum",
    "        var sum : Long = 0\n        var map : Map[Long, Int] = Map()\n        for (i <- arr) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        for (i <- arr) {\n            if (map(i) == 1) {\n                sum += i\n            }\n        }\n        return sum",
    "        var sum = 0L\n        var set = Set[Long]()\n        for (i <- 0 until arr.length) {\n            if (!set.contains(arr(i))) {\n                sum += arr(i)\n                set += arr(i)\n            }\n        }\n        return sum"
  ]
}