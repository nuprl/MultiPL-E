{
  "name": "mbpp_777_find_sum",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of non-repeated elements in a given list.\n    def findSum(arr : List[Long]) : Long = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_777_find_sum.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(findSum((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (21l));\n    assert(findSum((List[Long](1l.toLong, 10l.toLong, 9l.toLong, 4l.toLong, 2l.toLong, 10l.toLong, 10l.toLong, 45l.toLong, 4l.toLong))) == (71l));\n    assert(findSum((List[Long](12l.toLong, 10l.toLong, 9l.toLong, 45l.toLong, 2l.toLong, 10l.toLong, 10l.toLong, 45l.toLong, 10l.toLong))) == (78l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val set = arr.toSet\n        var sum = 0L\n        for (i <- set) {\n            sum += i\n        }\n        return sum",
    "        var sum = 0L\n        var set = Set[Long]()\n        for (i <- arr) {\n            if (!set.contains(i)) {\n                sum += i\n                set += i\n            }\n        }\n        sum",
    "        var sum = 0L\n        var set = Set[Long]()\n        for (i <- arr) {\n            if (!set.contains(i)) {\n                sum += i\n                set += i\n            }\n        }\n        return sum",
    "        var sum : Long = 0\n        var set = Set[Long]()\n        for (i <- arr) {\n            if (!set.contains(i)) {\n                sum += i\n                set += i\n            }\n        }\n        return sum",
    "        var sum = 0L\n        var set = Set[Long]()\n        for (i <- arr) {\n            if (!set.contains(i)) {\n                sum += i\n                set += i\n            }\n        }\n        return sum",
    "        var sum = 0L\n        var map = new HashMap[Long, Int]()\n        for (i <- arr) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        for (i <- arr) {\n            if (map(i) == 1) {\n                sum += i\n            }\n        }\n        return sum",
    "        var sum = 0L\n        for (i <- arr) {\n            sum += i\n        }\n        return sum",
    "        var sum = 0L\n        var set = Set[Long]()\n        for (i <- arr) {\n            if (!set.contains(i)) {\n                sum += i\n                set += i\n            }\n        }\n        return sum",
    "        var sum = 0L\n        var set = Set[Long]()\n        for (i <- arr) {\n            if (!set.contains(i)) {\n                sum += i\n                set += i\n            }\n        }\n        return sum",
    "        var sum = 0L\n        var set = Set[Long]()\n        for (i <- arr) {\n            if (!set.contains(i)) {\n                sum += i\n                set += i\n            }\n        }\n        return sum",
    "        val map = new HashMap[Long, Long]()\n        for (i <- arr) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        var sum = 0L\n        for (i <- map.keys) {\n            if (map(i) == 1) {\n                sum += i\n            }\n        }\n        return sum",
    "        // Write your code here\n        var sum = 0L\n        var map = new HashMap[Long, Int]()\n        for (i <- 0 until arr.length) {\n            if (!map.contains(arr(i))) {\n                map += (arr(i) -> 1)\n                sum += arr(i)\n            }\n        }\n        sum",
    "        var sum = 0L\n        var set = Set[Long]()\n        for (i <- arr) {\n            if (!set.contains(i)) {\n                sum += i\n                set += i\n            }\n        }\n        return sum",
    "        var sum = 0L\n        for (i <- arr) {\n            if (arr.count(_ == i) == 1) sum += i\n        }\n        return sum",
    "        var sum = 0L\n        var set = Set[Long]()\n        for (i <- 0 until arr.length) {\n            if (!set.contains(arr(i))) {\n                sum += arr(i)\n                set += arr(i)\n            }\n        }\n        sum",
    "        arr.foldLeft(0L)((x, y) => x + y)",
    "        var sum : Long = 0\n        for (i <- arr) {\n            if (!arr.contains(i + 1)) {\n                sum += i\n            }\n        }\n        return sum",
    "        var sum = 0L\n        var map = new HashMap[Long, Long]\n        for (i <- arr) {\n            if (map.contains(i)) map(i) = map(i) + 1\n            else map(i) = 1\n        }\n        for ((k, v) <- map) {\n            if (v == 1) sum += k\n        }\n        return sum",
    "        var sum : Long = 0\n        var map : Map[Long, Int] = Map()\n        for (i <- arr) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        for (i <- arr) {\n            if (map(i) == 1) {\n                sum += i\n            }\n        }\n        return sum",
    "        var sum = 0L\n        var set = Set[Long]()\n        for (i <- 0 until arr.length) {\n            if (!set.contains(arr(i))) {\n                sum += arr(i)\n                set += arr(i)\n            }\n        }\n        return sum",
    "        val set = new HashSet[Long]\n        var sum = 0L\n        for (i <- arr) {\n            if (!set.contains(i)) {\n                sum += i\n                set.add(i)\n            }\n        }\n        sum",
    "        var sum : Long = 0\n        for (i <- 0 until arr.length) {\n            var found : Boolean = false\n            for (j <- 0 until arr.length) {\n                if (i != j && arr(i) == arr(j)) {\n                    found = true\n                }\n            }\n            if (!found) {\n                sum += arr(i)\n            }\n        }\n        return sum",
    "        val set = new HashSet[Long]\n        var sum = 0L\n        for (i <- arr) {\n            if (!set.contains(i)) {\n                set += i\n                sum += i\n            }\n        }\n        sum",
    "        val map = new HashMap[Long, Int]\n        for (i <- arr) {\n            if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n        }\n        map.filter(x => x._2 == 1).map(x => x._1).sum",
    "        arr.foldLeft(0L)((sum, x) => sum + x)",
    "        var sum = 0L\n        var map = new HashMap[Long, Int]()\n        for (i <- arr) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        for (i <- arr) {\n            if (map(i) == 1) {\n                sum += i\n            }\n        }\n        return sum",
    "        var sum = 0L\n        var map = Map[Long, Int]()\n        for (i <- arr) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        for (i <- arr) {\n            if (map(i) == 1) {\n                sum += i\n            }\n        }\n        return sum",
    "        val map = new HashMap[Long, Int]\n        for (i <- arr) {\n            if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n        }\n        var sum = 0L\n        for (i <- map.keys) {\n            if (map(i) == 1) sum += i\n        }\n        return sum",
    "        val map = new HashMap[Long, Int]\n        for (i <- arr) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        var sum = 0L\n        for (i <- map.keys) {\n            if (map(i) == 1) {\n                sum += i\n            }\n        }\n        return sum",
    "        var sum : Long = 0\n        var set : Set[Long] = Set()\n        for (i <- arr) {\n            if (!set.contains(i)) {\n                sum += i\n                set += i\n            }\n        }\n        sum",
    "        var sum = 0L\n        var h = new HashMap[Long, Long]\n        for (i <- arr) {\n            if (h.contains(i)) {\n                h(i) += 1\n            } else {\n                h(i) = 1\n            }\n        }\n        for (i <- arr) {\n            if (h(i) == 1) {\n                sum += i\n            }\n        }\n        return sum",
    "        val map = new HashMap[Long, Long]()\n        for (i <- arr) {\n            if (map.contains(i)) map(i) = map(i) + 1\n            else map(i) = 1\n        }\n        var sum = 0L\n        for (i <- map) {\n            if (i._2 == 1) sum += i._1\n        }\n        return sum",
    "        val set = arr.toSet\n        set.foldLeft(0L)(_ + _)",
    "        var sum = 0L\n        var set = Set[Long]()\n        for (i <- arr) {\n            if (!set.contains(i)) {\n                sum += i\n                set += i\n            }\n        }\n        return sum",
    "        var sum = 0L\n        var set = Set[Long]()\n        for (i <- 0 until arr.length) {\n            if (!set.contains(arr(i))) {\n                sum += arr(i)\n                set += arr(i)\n            }\n        }\n        sum",
    "        var sum = 0L\n        var hash = new HashMap[Long, Boolean]\n        for (i <- arr) {\n            if (!hash.contains(i)) {\n                hash += (i -> true)\n                sum += i\n            }\n        }\n        return sum",
    "        var sum = 0L\n        val set = new HashSet[Long]\n        for (i <- arr) {\n            if (!set.contains(i)) {\n                sum += i\n                set.add(i)\n            }\n        }\n        sum",
    "        val set = new HashSet[Long]\n        var sum = 0L\n        for (i <- arr) {\n            if (!set.contains(i)) {\n                sum += i\n                set += i\n            }\n        }\n        sum",
    "        var sum = 0L\n        var map = Map[Long, Int]()\n        for (i <- arr) {\n            if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n        }\n        for (i <- arr) {\n            if (map(i) == 1) sum += i\n        }\n        return sum",
    "        var sum = 0L\n        var map = new HashMap[Long, Long]()\n        for (i <- arr) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        for (i <- map.keys) {\n            if (map(i) == 1) {\n                sum += i\n            }\n        }\n        return sum",
    "        var sum = 0L\n        var set = Set[Long]()\n        for (i <- arr) {\n            if (!set.contains(i)) {\n                sum += i\n                set += i\n            }\n        }\n        return sum",
    "        var sum = 0L\n        var set = Set[Long]()\n        for (i <- arr) {\n            if (!set.contains(i)) {\n                sum += i\n                set += i\n            }\n        }\n        sum",
    "        val map = new HashMap[Long, Int]\n        for (i <- arr) {\n            if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n        }\n        var sum = 0L\n        for (i <- map.keys) {\n            if (map(i) == 1) sum += i\n        }\n        sum",
    "        var sum = 0L\n        var map = Map[Long, Int]()\n        for (i <- arr) {\n            if (map.contains(i)) {\n                map(i) += 1\n            }\n            else {\n                map(i) = 1\n            }\n        }\n        for (i <- map) {\n            if (i._2 == 1) {\n                sum += i._1\n            }\n        }\n        return sum",
    "        val set = new HashSet[Long]\n        var sum = 0L\n        for (i <- arr) {\n            if (!set.contains(i)) {\n                sum += i\n                set += i\n            }\n        }\n        sum",
    "        var sum : Long = 0\n        for (i <- arr) {\n            if (!arr.contains(i + 1)) {\n                sum += i\n            }\n        }\n        return sum",
    "        val set = new HashSet[Long]\n        var sum = 0L\n        for (i <- arr) {\n            if (!set.contains(i)) {\n                sum += i\n                set.add(i)\n            }\n        }\n        sum",
    "        var sum : Long = 0\n        var set : Set[Long] = Set()\n        for (i <- 0 until arr.length) {\n            if (!set.contains(arr(i))) {\n                sum += arr(i)\n                set += arr(i)\n            }\n        }\n        return sum",
    "        var sum : Long = 0\n        var set : Set[Long] = Set()\n        for (i <- arr) {\n            if (!set.contains(i)) {\n                sum += i\n                set += i\n            }\n        }\n        return sum",
    "        var sum = 0L\n        var map = new HashMap[Long, Int]()\n        for (i <- 0 until arr.length) {\n            if (map.contains(arr(i))) {\n                map(arr(i)) += 1\n            } else {\n                map(arr(i)) = 1\n            }\n        }\n        for (i <- 0 until arr.length) {\n            if (map(arr(i)) == 1) {\n                sum += arr(i)\n            }\n        }\n        return sum",
    "        var sum = 0L\n        var map = new HashMap[Long, Int]\n        for (i <- 0 until arr.length) {\n            if (map.contains(arr(i))) {\n                map(arr(i)) += 1\n            } else {\n                map += (arr(i) -> 1)\n            }\n        }\n        for (i <- map.keys) {\n            if (map(i) == 1) {\n                sum += i\n            }\n        }\n        return sum",
    "        var sum = 0L\n        var map = Map[Long, Int]()\n        for (i <- arr) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        for (i <- arr) {\n            if (map(i) == 1) {\n                sum += i\n            }\n        }\n        return sum",
    "        var sum = 0L\n        var map = Map[Long, Int]()\n        for (i <- arr) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        for (i <- arr) {\n            if (map(i) == 1) {\n                sum += i\n            }\n        }\n        return sum",
    "        var sum : Long = 0\n        var map = new HashMap[Long, Boolean]()\n        for (i <- arr) {\n            if (!map.contains(i)) {\n                map += (i -> true)\n                sum += i\n            }\n        }\n        return sum",
    "        var sum = 0L\n        val set = new HashSet[Long]\n        for (i <- arr) {\n            if (!set.contains(i)) {\n                sum += i\n                set.add(i)\n            }\n        }\n        sum",
    "        var sum : Long = 0\n        var set : Set[Long] = Set()\n        for (i <- arr) {\n            if (!set.contains(i)) {\n                sum += i\n                set += i\n            }\n        }\n        return sum",
    "        var sum = 0L\n        var set = Set[Long]()\n        for (i <- 0 until arr.length) {\n            if (!set.contains(arr(i))) {\n                sum += arr(i)\n                set += arr(i)\n            }\n        }\n        return sum",
    "        var sum = 0L\n        for (i <- arr) {\n            sum += i\n        }\n        return sum",
    "        var sum : Long = 0\n        var set : Set[Long] = Set()\n        for (i <- arr) {\n            if (!set.contains(i)) {\n                sum += i\n                set += i\n            }\n        }\n        return sum",
    "        var sum = 0L\n        var map = new HashMap[Long, Int]()\n        for (i <- arr) {\n            if (map.contains(i)) {\n                map.put(i, map(i) + 1)\n            } else {\n                map.put(i, 1)\n            }\n        }\n        for (i <- arr) {\n            if (map(i) == 1) {\n                sum += i\n            }\n        }\n        return sum",
    "        val map = new HashMap[Long, Int]\n        for (i <- arr) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        var sum = 0L\n        for (i <- map.keys) {\n            if (map(i) == 1) {\n                sum += i\n            }\n        }\n        sum",
    "        var sum = 0L\n        var set = Set[Long]()\n        for (i <- 0 until arr.length) {\n            if (!set.contains(arr(i))) {\n                sum += arr(i)\n                set += arr(i)\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- arr) {\n            sum += i\n        }\n        sum",
    "        var sum = 0L\n        var set = Set[Long]()\n        for (i <- arr) {\n            if (!set.contains(i)) {\n                sum += i\n                set += i\n            }\n        }\n        sum",
    "        arr.foldLeft(0L)((a, b) => a + b)",
    "        val map = new HashMap[Long, Int]()\n        for (i <- arr) {\n            if (map.contains(i)) {\n                map += (i -> (map(i) + 1))\n            } else {\n                map += (i -> 1)\n            }\n        }\n        var sum = 0L\n        for (i <- map.keys) {\n            if (map(i) == 1) {\n                sum += i\n            }\n        }\n        return sum",
    "        var sum = 0L\n        var set = Set[Long]()\n        for (i <- arr) {\n            if (!set.contains(i)) {\n                sum += i\n                set += i\n            }\n        }\n        sum",
    "        var sum : Long = 0\n        var map : Map[Long, Int] = Map()\n        for (i <- arr) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        for (i <- map) {\n            if (i._2 == 1) {\n                sum += i._1\n            }\n        }\n        return sum",
    "        var sum = 0L\n        for (i <- 0 until arr.length) {\n            var found = false\n            for (j <- 0 until arr.length) {\n                if (i != j && arr(i) == arr(j)) {\n                    found = true\n                    break\n                }\n            }\n            if (!found) sum += arr(i)\n        }\n        return sum",
    "        var sum = 0L\n        var set = Set[Long]()\n        for (i <- arr) {\n            if (!set.contains(i)) {\n                sum += i\n                set += i\n            }\n        }\n        sum",
    "        val set = new HashSet[Long]\n        var sum = 0L\n        for (i <- arr) {\n            if (!set.contains(i)) {\n                set.add(i)\n                sum += i\n            }\n        }\n        return sum",
    "        var sum = 0L\n        var set = Set[Long]()\n        for (i <- 0 until arr.length) {\n            if (!set.contains(arr(i))) {\n                sum += arr(i)\n                set += arr(i)\n            }\n        }\n        return sum",
    "        var sum = 0L\n        var map = new HashMap[Long, Int]\n        for (i <- arr) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map += (i -> 1)\n            }\n        }\n        for (i <- map) {\n            if (i._2 == 1) {\n                sum += i._1\n            }\n        }\n        return sum",
    "        var sum = 0L\n        for (i <- 0 until arr.length) {\n            var flag = true\n            for (j <- 0 until arr.length) {\n                if (i != j && arr(i) == arr(j)) {\n                    flag = false\n                    break\n                }\n            }\n            if (flag) sum += arr(i)\n        }\n        return sum",
    "        var sum = 0L\n        var set = Set[Long]()\n        for (i <- 0 until arr.length) {\n            if (!set.contains(arr(i))) {\n                sum += arr(i)\n                set += arr(i)\n            }\n        }\n        sum",
    "        val sum = arr.foldLeft(0L)((a, b) => a + b)\n        val sumOfSquares = arr.foldLeft(0L)((a, b) => a + b * b)\n        val sumOfSquaresOfSum = sum * sum\n        sumOfSquaresOfSum - sumOfSquares",
    "        val set = new HashSet[Long]\n        var sum = 0L\n        for (i <- arr) {\n            if (!set.contains(i)) {\n                set.add(i)\n                sum += i\n            }\n        }\n        sum",
    "        var sum : Long = 0\n        var map = new HashMap[Long, Int]\n        for (i <- 0 until arr.length) {\n            if (map.contains(arr(i))) {\n                map.put(arr(i), map(arr(i)) + 1)\n            } else {\n                map.put(arr(i), 1)\n            }\n        }\n        for (i <- 0 until arr.length) {\n            if (map(arr(i)) == 1) {\n                sum += arr(i)\n            }\n        }\n        return sum",
    "        val set = new HashSet[Long]\n        var sum = 0L\n        for (i <- arr) {\n            if (!set.contains(i)) {\n                sum += i\n                set.add(i)\n            }\n        }\n        sum",
    "        var sum : Long = 0\n        var map = Map[Long, Int]()\n        for (i <- arr) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        for (i <- map) {\n            if (i._2 == 1) {\n                sum += i._1\n            }\n        }\n        return sum",
    "        var sum = 0L\n        for (i <- 0 until arr.length) {\n            var found = false\n            for (j <- 0 until arr.length) {\n                if (i != j && arr(i) == arr(j)) {\n                    found = true\n                    break\n                }\n            }\n            if (!found) sum += arr(i)\n        }\n        return sum",
    "        var sum = 0L\n        for (i <- arr) {\n            if (!arr.contains(i * 2)) sum += i\n        }\n        return sum",
    "        var sum = 0L\n        var set = Set[Long]()\n        for (i <- arr) {\n            if (!set.contains(i)) {\n                sum += i\n                set += i\n            }\n        }\n        return sum",
    "        var sum : Long = 0\n        var map = new HashMap[Long, Int]()\n        for (i <- 0 until arr.length) {\n            if (map.contains(arr(i))) {\n                map(arr(i)) = map(arr(i)) + 1\n            } else {\n                map(arr(i)) = 1\n            }\n        }\n        for (i <- 0 until arr.length) {\n            if (map(arr(i)) == 1) {\n                sum += arr(i)\n            }\n        }\n        return sum",
    "        var sum = 0L\n        for(i <- 0 until arr.length) {\n            var found = false\n            for(j <- 0 until arr.length) {\n                if(i != j && arr(i) == arr(j)) {\n                    found = true\n                }\n            }\n            if(!found) {\n                sum += arr(i)\n            }\n        }\n        return sum",
    "        arr.distinct.sum",
    "        val map = new HashMap[Long, Long]\n        for (i <- arr) {\n            if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n        }\n        var sum = 0L\n        for (i <- map) {\n            if (i._2 == 1) sum += i._1\n        }\n        sum",
    "        arr.distinct.sum",
    "        var sum = 0L\n        for (i <- arr) {\n            sum += i\n        }\n        return sum",
    "        var sum = 0L\n        var set = Set[Long]()\n        for (i <- arr) {\n            if (!set.contains(i)) {\n                sum += i\n                set += i\n            }\n        }\n        return sum",
    "        var sum = 0L\n        var set = Set[Long]()\n        for (i <- 0 until arr.length) {\n            if (!set.contains(arr(i))) {\n                sum += arr(i)\n                set += arr(i)\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- arr) {\n            sum += i\n        }\n        return sum",
    "        val map = new HashMap[Long, Long]\n        for (i <- arr) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        var sum = 0L\n        for (i <- map.keys) {\n            if (map(i) == 1) {\n                sum += i\n            }\n        }\n        return sum",
    "        var sum = 0L\n        var set = Set[Long]()\n        for (i <- arr) {\n            if (!set.contains(i)) {\n                sum += i\n                set += i\n            }\n        }\n        sum",
    "        val set = new HashSet[Long]\n        arr.foreach(x => if (set.contains(x)) set.remove(x) else set.add(x))\n        set.sum",
    "        var sum = 0L\n        var set = new HashSet[Long]()\n        for (i <- arr) {\n            if (!set.contains(i)) {\n                sum += i\n                set += i\n            }\n        }\n        return sum",
    "        var sum = 0L\n        var set = new HashSet[Long]\n        for (i <- 0 until arr.length) {\n            if (!set.contains(arr(i))) {\n                sum += arr(i)\n                set.add(arr(i))\n            }\n        }\n        sum",
    "        val set = new HashSet[Long]\n        var sum = 0L\n        for (i <- arr) {\n            if (!set.contains(i)) {\n                sum += i\n                set += i\n            }\n        }\n        sum",
    "        arr.foldLeft(0L)((x, y) => x + y)",
    "        arr.distinct.sum",
    "        var sum : Long = 0\n        var map = new HashMap[Long, Int]()\n        for (i <- 0 until arr.length) {\n            if (map.contains(arr(i))) {\n                map.put(arr(i), map(arr(i)) + 1)\n            } else {\n                map.put(arr(i), 1)\n            }\n        }\n        for (i <- 0 until arr.length) {\n            if (map(arr(i)) == 1) {\n                sum += arr(i)\n            }\n        }\n        return sum",
    "        val map = new HashMap[Long, Long]\n        for (i <- 0 until arr.length) {\n            if (map.contains(arr(i))) map(arr(i)) += 1\n            else map(arr(i)) = 1\n        }\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            if (map(arr(i)) == 1) sum += arr(i)\n        }\n        return sum",
    "        val set = new HashSet[Long]\n        var sum = 0L\n        for (i <- arr) {\n            if (!set.contains(i)) {\n                sum += i\n                set.add(i)\n            }\n        }\n        sum",
    "        val set = arr.toSet\n        set.foldLeft(0L)(_ + _)",
    "        val set = new HashSet[Long]\n        var sum = 0L\n        for (i <- arr) {\n            if (!set.contains(i)) {\n                sum += i\n                set.add(i)\n            }\n        }\n        sum",
    "        var sum : Long = 0\n        var map = new HashMap[Long, Boolean]()\n        for (i <- 0 until arr.length) {\n            if (!map.contains(arr(i))) {\n                map.put(arr(i), true)\n                sum += arr(i)\n            }\n        }\n        return sum",
    "        val map = new HashMap[Long, Int]()\n        for (i <- arr) {\n            if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n        }\n        var sum = 0L\n        for (i <- arr) {\n            if (map(i) == 1) sum += i\n        }\n        sum",
    "        var sum = 0L\n        var set = new HashSet[Long]()\n        for (i <- arr) {\n            if (!set.contains(i)) {\n                sum += i\n                set.add(i)\n            }\n        }\n        return sum",
    "        var sum : Long = 0\n        var set : Set[Long] = Set()\n        for (i <- arr) {\n            if (!set.contains(i)) {\n                sum += i\n                set += i\n            }\n        }\n        return sum",
    "        var sum = 0L\n        var set = Set[Long]()\n        for (i <- arr) {\n            if (!set.contains(i)) {\n                sum += i\n                set += i\n            }\n        }\n        return sum",
    "        // Write your code here\n        return 0",
    "        var sum = 0L\n        var map = Map[Long, Int]()\n        for (i <- arr) {\n            if (map.contains(i)) map.put(i, map(i) + 1)\n            else map.put(i, 1)\n        }\n        for (i <- arr) {\n            if (map(i) == 1) sum += i\n        }\n        return sum",
    "        var sum = 0L\n        for (i <- arr) {\n            sum += i\n        }\n        return sum",
    "        var sum = 0L\n        var map = new HashMap[Long, Int]()\n        for (i <- arr) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        for (i <- arr) {\n            if (map(i) == 1) {\n                sum += i\n            }\n        }\n        return sum",
    "        var sum = 0L\n        var map = Map[Long, Int]()\n        for (i <- arr) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map += (i -> 1)\n            }\n        }\n        for (i <- map) {\n            if (i._2 == 1) {\n                sum += i._1\n            }\n        }\n        return sum",
    "        var sum : Long = 0\n        var map : Map[Long, Long] = Map()\n        for (i <- arr) {\n            if (map.contains(i)) {\n                map(i) = map(i) + 1\n            } else {\n                map(i) = 1\n            }\n        }\n        for (i <- map) {\n            if (i._2 == 1) {\n                sum += i._1\n            }\n        }\n        return sum",
    "        var sum : Long = 0\n        var map : Map[Long, Int] = Map()\n        for (i <- arr) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        for ((k, v) <- map) {\n            if (v == 1) {\n                sum += k\n            }\n        }\n        return sum",
    "        var sum = 0L\n        for (i <- arr) {\n            sum += i\n        }\n        return sum",
    "        val sum = arr.foldLeft(0L)((sum, x) => if (arr.count(_ == x) == 1) sum + x else sum)\n        sum",
    "        var sum = 0L\n        val map = new HashMap[Long, Int]\n        for (i <- arr) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        for (i <- arr) {\n            if (map(i) == 1) {\n                sum += i\n            }\n        }\n        return sum",
    "        var sum = 0L\n        var set = Set[Long]()\n        for (i <- arr) {\n            if (!set.contains(i)) {\n                sum += i\n                set += i\n            }\n        }\n        sum",
    "        val set = new HashSet[Long]\n        var sum = 0L\n        for (i <- arr) {\n            if (!set.contains(i)) {\n                sum += i\n                set += i\n            }\n        }\n        sum",
    "        var sum : Long = 0\n        var set = Set[Long]()\n        for (i <- arr) {\n            if (!set.contains(i)) {\n                sum += i\n                set += i\n            }\n        }\n        return sum",
    "        val map = new HashMap[Long, Int]\n        for (i <- arr) {\n            if (map.contains(i)) map(i) += 1\n            else map += (i -> 1)\n        }\n        map.filter(x => x._2 == 1).map(x => x._1).sum",
    "        val s = arr.toSet\n        s.foldLeft(0L)(_ + _)",
    "        var sum = 0L\n        var set = Set[Long]()\n        for (i <- arr) {\n            if (!set.contains(i)) {\n                sum += i\n                set += i\n            }\n        }\n        return sum",
    "        var sum = 0L\n        var set = Set[Long]()\n        for (i <- arr) {\n            if (!set.contains(i)) {\n                sum += i\n                set += i\n            }\n        }\n        return sum",
    "        var sum : Long = 0\n        var set : Set[Long] = Set()\n        for (i <- 0 until arr.length) {\n            if (!set.contains(arr(i))) {\n                sum += arr(i)\n                set += arr(i)\n            }\n        }\n        return sum",
    "        var sum : Long = 0\n        var map = Map[Long, Long]()\n        for (i <- 0 until arr.length) {\n            if (map.contains(arr(i))) {\n                map(arr(i)) += 1\n            } else {\n                map(arr(i)) = 1\n            }\n        }\n        for (i <- 0 until arr.length) {\n            if (map(arr(i)) == 1) {\n                sum += arr(i)\n            }\n        }\n        return sum",
    "        arr.foldLeft(0L)((a, b) => a + b)",
    "        val set = new HashSet[Long]\n        var sum = 0L\n        for (i <- arr) {\n            if (!set.contains(i)) {\n                sum += i\n                set.add(i)\n            }\n        }\n        sum",
    "        var sum = 0L\n        var map = new HashMap[Long, Int]\n        for (i <- arr) {\n            if (map.contains(i)) {\n                map.put(i, map(i) + 1)\n            } else {\n                map.put(i, 1)\n            }\n        }\n        for (i <- arr) {\n            if (map(i) == 1) {\n                sum += i\n            }\n        }\n        return sum",
    "        var sum : Long = 0\n        var set : Set[Long] = Set()\n        for (i <- arr) {\n            if (!set.contains(i)) {\n                sum += i\n                set += i\n            }\n        }\n        return sum",
    "        val set = new HashSet[Long]\n        var sum = 0L\n        for (i <- arr) {\n            if (!set.contains(i)) {\n                sum += i\n                set.add(i)\n            }\n        }\n        sum",
    "        var sum = 0L\n        var set = Set[Long]()\n        for (i <- 0 until arr.length) {\n            if (!set.contains(arr(i))) {\n                sum += arr(i)\n                set += arr(i)\n            }\n        }\n        return sum",
    "        var sum = 0L\n        var map = new HashMap[Long, Int]()\n        for (i <- arr) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map += (i -> 1)\n            }\n        }\n        for (i <- map.keys) {\n            if (map(i) == 1) {\n                sum += i\n            }\n        }\n        return sum",
    "        var sum = 0L\n        var set = Set[Long]()\n        for (i <- arr) {\n            if (!set.contains(i)) {\n                sum += i\n                set += i\n            }\n        }\n        return sum",
    "        var sum : Long = 0\n        var hm = new HashMap[Long, Long]()\n        for (i <- 0 until arr.length) {\n            if (hm.contains(arr(i))) {\n                hm(arr(i)) += 1\n            } else {\n                hm(arr(i)) = 1\n            }\n        }\n        for (i <- 0 until arr.length) {\n            if (hm(arr(i)) == 1) {\n                sum += arr(i)\n            }\n        }\n        return sum",
    "        var sum = 0L\n        for (i <- arr) {\n            if (!arr.contains(i + 1)) sum += i\n        }\n        sum",
    "        var sum = 0L\n        var set = new HashSet[Long]\n        for (i <- arr) {\n            if (!set.contains(i)) {\n                sum += i\n                set += i\n            }\n        }\n        sum",
    "        var sum = 0L\n        var set = Set[Long]()\n        for (i <- 0 until arr.length) {\n            if (!set.contains(arr(i))) {\n                sum += arr(i)\n                set.add(arr(i))\n            }\n        }\n        return sum",
    "        var sum = 0L\n        var map = Map[Long, Long]()\n        for (i <- arr) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        for (i <- map) {\n            if (i._2 == 1) {\n                sum += i._1\n            }\n        }\n        return sum",
    "        var sum : Long = 0\n        var map = new HashMap[Long, Int]\n        for (i <- arr) {\n            if (!map.contains(i)) {\n                map.put(i, 1)\n                sum += i\n            }\n        }\n        return sum",
    "        val set = new HashSet[Long]\n        var sum = 0L\n        for (i <- arr) {\n            if (!set.contains(i)) {\n                sum += i\n                set.add(i)\n            }\n        }\n        sum",
    "        var sum : Long = 0\n        for (i <- arr) {\n            if (!arr.contains(i)) {\n                sum += i\n            }\n        }\n        return sum",
    "        var sum = 0L\n        var set = Set[Long]()\n        for (i <- arr) {\n            if (!set.contains(i)) {\n                sum += i\n                set += i\n            }\n        }\n        sum",
    "        var sum = 0L\n        var map = Map[Long, Int]()\n        for (i <- 0 until arr.length) {\n            if (map.contains(arr(i))) {\n                map(arr(i)) += 1\n            } else {\n                map(arr(i)) = 1\n            }\n        }\n        for (i <- 0 until arr.length) {\n            if (map(arr(i)) == 1) {\n                sum += arr(i)\n            }\n        }\n        return sum",
    "        var sum = 0L\n        var map = new HashMap[Long, Boolean]()\n        for (i <- arr) {\n            if (!map.contains(i)) {\n                sum += i\n                map += (i -> true)\n            }\n        }\n        return sum",
    "        var sum = 0L\n        var set = new HashSet[Long]\n        for (i <- arr) {\n            if (!set.contains(i)) {\n                sum += i\n                set.add(i)\n            }\n        }\n        return sum",
    "        var sum = 0L\n        var map = new HashMap[Long, Boolean]\n        for (i <- 0 until arr.length) {\n            if (map.contains(arr(i))) {\n                map(arr(i)) = true\n            } else {\n                map(arr(i)) = false\n            }\n        }\n        for (i <- 0 until arr.length) {\n            if (!map(arr(i))) {\n                sum += arr(i)\n            }\n        }\n        return sum",
    "        val set = new HashSet[Long]\n        var sum = 0L\n        for (i <- arr) {\n            if (!set.contains(i)) {\n                set += i\n                sum += i\n            }\n        }\n        sum",
    "        var sum : Long = 0\n        var set : Set[Long] = Set()\n        for (i <- arr) {\n            if (!set.contains(i)) {\n                sum += i\n                set += i\n            }\n        }\n        return sum",
    "        var sum = 0L\n        var set = Set[Long]()\n        for (i <- arr) {\n            if (!set.contains(i)) {\n                sum += i\n                set += i\n            }\n        }\n        sum",
    "        var sum = 0L\n        var map = new HashMap[Long, Int]\n        for (i <- 0 until arr.length) {\n            if (map.contains(arr(i))) {\n                map(arr(i)) += 1\n            } else {\n                map(arr(i)) = 1\n            }\n        }\n        for (i <- map.keySet) {\n            if (map(i) == 1) {\n                sum += i\n            }\n        }\n        return sum",
    "        arr.foldLeft(0L)((acc, x) => if (arr.count(_ == x) == 1) acc + x else acc)",
    "        var sum = 0L\n        var set = new HashSet[Long]\n        for (i <- 0 until arr.length) {\n            if (!set.contains(arr(i))) {\n                sum += arr(i)\n            }\n            set.add(arr(i))\n        }\n        sum",
    "        var sum = 0L\n        for (i <- arr) {\n            sum += i\n        }\n        return sum",
    "        var sum = 0L\n        var set = Set[Long]()\n        for (i <- arr) {\n            if (!set.contains(i)) {\n                sum += i\n                set += i\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- arr) {\n            if (!arr.contains(i * 2)) sum += i\n        }\n        return sum",
    "        var sum = 0L\n        var map = new HashMap[Long, Int]()\n        for (i <- arr) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        for (i <- arr) {\n            if (map(i) == 1) {\n                sum += i\n            }\n        }\n        return sum",
    "        var sum = 0L\n        for (i <- arr) {\n            sum += i\n        }\n        return sum",
    "        var sum : Long = 0\n        var map : HashMap[Long, Int] = new HashMap[Long, Int]\n        for (i <- 0 until arr.length) {\n            if (map.contains(arr(i))) {\n                map.put(arr(i), map(arr(i)) + 1)\n            } else {\n                map.put(arr(i), 1)\n            }\n        }\n        for (i <- 0 until arr.length) {\n            if (map(arr(i)) == 1) {\n                sum += arr(i)\n            }\n        }\n        return sum",
    "        var sum : Long = 0\n        var map = new HashMap[Long, Int]()\n        for (i <- 0 until arr.length) {\n            if (map.contains(arr(i))) {\n                map(arr(i)) += 1\n            } else {\n                map(arr(i)) = 1\n            }\n        }\n        for (i <- 0 until arr.length) {\n            if (map(arr(i)) == 1) {\n                sum += arr(i)\n            }\n        }\n        return sum",
    "        var sum : Long = 0\n        var map : Map[Long, Int] = Map()\n        for (i <- 0 until arr.length) {\n            if (!map.contains(arr(i))) {\n                map += (arr(i) -> 1)\n                sum += arr(i)\n            }\n        }\n        return sum",
    "        var sum = 0L\n        var set = Set[Long]()\n        for (i <- arr) {\n            if (!set.contains(i)) {\n                sum += i\n                set += i\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- arr) {\n            sum += i\n        }\n        return sum",
    "        var sum : Long = 0\n        var map = new HashMap[Long, Long]\n        for (i <- arr) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map += (i -> 1)\n            }\n        }\n        for (i <- map.keys) {\n            if (map(i) == 1) {\n                sum += i\n            }\n        }\n        return sum",
    "        val map = new HashMap[Long, Int]\n        for (i <- arr) {\n            if (map.contains(i)) {\n                map.put(i, map(i) + 1)\n            } else {\n                map.put(i, 1)\n            }\n        }\n        var sum = 0L\n        for (i <- arr) {\n            if (map(i) == 1) {\n                sum += i\n            }\n        }\n        sum",
    "        val set = arr.toSet\n        set.foldLeft(0L)(_ + _)",
    "        var sum = 0L\n        for (i <- 0 until arr.length) {\n            var flag = true\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) == arr(j)) {\n                    flag = false\n                    break\n                }\n            }\n            if (flag) sum += arr(i)\n        }\n        sum",
    "        var sum = 0L\n        for (i <- arr) {\n            sum += i\n        }\n        return sum",
    "        val set = new HashSet[Long]\n        var sum = 0L\n        for (i <- arr) {\n            if (!set.contains(i)) {\n                sum += i\n                set += i\n            }\n        }\n        sum",
    "        val set = new HashSet[Long]\n        var sum = 0L\n        for (i <- arr) {\n            if (!set.contains(i)) {\n                sum += i\n                set += i\n            }\n        }\n        sum",
    "        var sum = 0L\n        var map = Map[Long, Long]()\n        for (i <- 0 until arr.length) {\n            if (map.contains(arr(i))) {\n                map(arr(i)) += 1\n            } else {\n                map += (arr(i) -> 1)\n            }\n        }\n        for (i <- 0 until arr.length) {\n            if (map(arr(i)) == 1) {\n                sum += arr(i)\n            }\n        }\n        return sum",
    "        var sum = 0L\n        var map = Map[Long, Long]()\n        for (i <- arr) {\n            if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n        }\n        for (i <- map) {\n            if (i._2 == 1) sum += i._1\n        }\n        return sum",
    "        var sum = 0L\n        var set = Set[Long]()\n        for (i <- arr) {\n            if (!set.contains(i)) {\n                sum += i\n                set += i\n            }\n        }\n        sum",
    "        arr.distinct.sum",
    "        var sum = 0L\n        for (i <- arr) {\n            sum += i\n        }\n        return sum",
    "        var sum = 0L\n        var map = Map[Long, Int]()\n        for (i <- arr) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map += i -> 1\n            }\n        }\n        for (i <- map.keys) {\n            if (map(i) == 1) {\n                sum += i\n            }\n        }\n        return sum",
    "        var sum = 0L\n        var set = Set[Long]()\n        for (i <- 0 until arr.length) {\n            if (!set.contains(arr(i))) {\n                sum += arr(i)\n                set += arr(i)\n            }\n        }\n        return sum",
    "        val map = new HashMap[Long, Int]\n        for (i <- arr) {\n            if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n        }\n        map.filter(x => x._2 == 1).map(x => x._1).sum",
    "        arr.foldLeft(0L)((sum, elem) => sum + elem)",
    "        val map = new HashMap[Long, Int]\n        for (i <- arr) {\n            if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n        }\n        var sum = 0L\n        for ((k, v) <- map) {\n            if (v == 1) sum += k\n        }\n        return sum",
    "        var sum : Long = 0\n        var set = new HashSet[Long]()\n        for (i <- arr) {\n            if (!set.contains(i)) {\n                sum += i\n                set.add(i)\n            }\n        }\n        return sum",
    "        var sum = 0L\n        for (i <- arr) {\n            if (arr.count(_ == i) == 1) {\n                sum += i\n            }\n        }\n        return sum",
    "        val set = new HashSet[Long]()\n        var sum = 0L\n        for (i <- arr) {\n            if (!set.contains(i)) {\n                set.add(i)\n                sum += i\n            }\n        }\n        sum",
    "        var sum = 0L\n        var map = new HashMap[Long, Boolean]\n        for (i <- arr) {\n            if (!map.contains(i)) {\n                map += (i -> true)\n                sum += i\n            }\n        }\n        return sum",
    "        var sum = 0L\n        var set = Set[Long]()\n        for (i <- 0 until arr.length) {\n            if (!set.contains(arr(i))) {\n                sum += arr(i)\n                set += arr(i)\n            }\n        }\n        return sum",
    "        var sum = 0L\n        for (i <- arr) {\n            if (!arr.contains(i + 1)) sum += i\n        }\n        sum",
    "        var sum = 0L\n        var set = Set[Long]()\n        for (i <- arr) {\n            if (!set.contains(i)) {\n                sum += i\n                set += i\n            }\n        }\n        return sum",
    "        var sum = 0L\n        var map = new HashMap[Long, Int]()\n        for (i <- arr) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        for (i <- arr) {\n            if (map(i) == 1) {\n                sum += i\n            }\n        }\n        return sum",
    "        var sum = 0L\n        for (i <- arr) {\n            sum += i\n        }\n        return sum",
    "        var sum = 0L\n        var set = Set[Long]()\n        for (i <- arr) {\n            if (!set.contains(i)) {\n                sum += i\n                set += i\n            }\n        }\n        return sum",
    "        val set = arr.toSet\n        set.foldLeft(0L)(_ + _)",
    "        var sum = 0L\n        var set = Set[Long]()\n        for (i <- 0 until arr.length) {\n            if (!set.contains(arr(i))) {\n                sum += arr(i)\n                set += arr(i)\n            }\n        }\n        return sum",
    "        var sum = 0L\n        var set = Set[Long]()\n        for (i <- 0 until arr.length) {\n            if (!set.contains(arr(i))) {\n                sum += arr(i)\n                set += arr(i)\n            }\n        }\n        sum",
    "        var sum = 0L\n        var map = new HashMap[Long, Int]()\n        for (i <- 0 until arr.length) {\n            if (map.contains(arr(i))) {\n                map(arr(i)) += 1\n            } else {\n                map(arr(i)) = 1\n            }\n        }\n        for (i <- 0 until arr.length) {\n            if (map(arr(i)) == 1) {\n                sum += arr(i)\n            }\n        }\n        return sum",
    "        var sum = 0L\n        var set = Set[Long]()\n        for (i <- arr) {\n            if (!set.contains(i)) {\n                sum += i\n                set += i\n            }\n        }\n        return sum",
    "        var sum = 0L\n        var map = new HashMap[Long, Int]\n        for (i <- arr) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        for (i <- arr) {\n            if (map(i) == 1) {\n                sum += i\n            }\n        }\n        return sum",
    "        arr.foldLeft(0L)((a, b) => if (arr.count(_ == b) == 1) a + b else a)"
  ]
}