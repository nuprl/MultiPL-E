{
  "name": "mbpp_793_last",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_793_last.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        var l = 0;\n        var r = arr.length - 1;\n        var result = -1;\n        while(l <= r) {\n            val mid = (l + r) / 2;\n            if(arr(mid) == x) {\n                result = mid;\n                l = mid + 1;\n            }\n            else if(arr(mid) < x) l = mid + 1;\n            else r = mid - 1;\n        }\n        result;\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665517621,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        def last(arr : List[Long], x : Long, low : Long, high : Long) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (arr(mid.toInt) == x) {\n                    if (mid == arr.length - 1 || arr(mid.toInt + 1) != x) mid\n                    else last(arr, x, mid + 1, high)\n                }\n                else if (arr(mid.toInt) > x) last(arr, x, low, mid - 1)\n                else last(arr, x, mid + 1, high)\n            }\n        }\n        last(arr, x, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665517621,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        def last(arr : List[Long], x : Long, start : Long, end : Long) : Long = {\n            if (start > end) -1\n            else {\n                val mid = (start + end) / 2\n                if (arr(mid.toInt) == x) {\n                    if (mid == arr.length - 1 || arr(mid.toInt + 1) > x) mid\n                    else last(arr, x, mid + 1, end)\n                }\n                else if (arr(mid.toInt) > x) last(arr, x, start, mid - 1)\n                else last(arr, x, mid + 1, end)\n            }\n        }\n        last(arr, x, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665517621,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        var low = 0\n        var high = arr.length - 1\n        var result = -1\n        while (low <= high) {\n            val mid = (low + high) / 2\n            if (arr(mid) == x) {\n                result = mid\n                low = mid + 1\n            }\n            else if (arr(mid) > x) high = mid - 1\n            else low = mid + 1\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665517621,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        def last(arr : List[Long], x : Long, low : Long, high : Long) : Long = {\n            if (low > high) return -1\n            val mid = (low + high) / 2\n            if (arr(mid.toInt) == x) {\n                if (mid == arr.length - 1 || arr(mid.toInt + 1) != x) return mid\n                else return last(arr, x, mid + 1, high)\n            }\n            else if (arr(mid.toInt) > x) return last(arr, x, low, mid - 1)\n            else return last(arr, x, mid + 1, high)\n        }\n        last(arr, x, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665517621,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        var low = 0\n        var high = arr.length - 1\n        var result = -1\n        while (low <= high) {\n            val mid = (low + high) / 2\n            if (arr(mid) <= x) {\n                result = mid\n                low = mid + 1\n            } else {\n                high = mid - 1\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665517621,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        def last(arr : List[Long], x : Long, start : Long, end : Long) : Long = {\n            if (start > end) -1\n            else {\n                val mid = (start + end) / 2\n                if (arr(mid.toInt) == x) {\n                    if (mid == arr.length - 1 || arr(mid.toInt + 1) > x) mid\n                    else last(arr, x, mid + 1, end)\n                }\n                else if (arr(mid.toInt) > x) last(arr, x, start, mid - 1)\n                else last(arr, x, mid + 1, end)\n            }\n        }\n        last(arr, x, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665517621,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        var l = 0\n        var r = arr.length - 1\n        var ans = -1\n        while (l <= r) {\n            val m = (l + r) / 2\n            if (arr(m) == x) {\n                ans = m\n                l = m + 1\n            } else if (arr(m) > x) r = m - 1\n            else l = m + 1\n        }\n        ans\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665517621,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        def last(arr : List[Long], x : Long, start : Long, end : Long) : Long = {\n            if (start > end) -1\n            else {\n                val mid = (start + end) / 2\n                if (arr(mid.toInt) == x) {\n                    if (mid == arr.length - 1 || arr(mid.toInt + 1) != x) mid\n                    else last(arr, x, mid + 1, end)\n                }\n                else if (arr(mid.toInt) > x) last(arr, x, start, mid - 1)\n                else last(arr, x, mid + 1, end)\n            }\n        }\n        last(arr, x, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665517621,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        def binarySearch(arr : List[Long], x : Long, low : Long, high : Long) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (arr(mid.toInt) == x) {\n                    if (mid == arr.length - 1 || arr(mid.toInt + 1) > x) mid\n                    else binarySearch(arr, x, mid + 1, high)\n                }\n                else if (arr(mid.toInt) > x) binarySearch(arr, x, low, mid - 1)\n                else binarySearch(arr, x, mid + 1, high)\n            }\n        }\n        binarySearch(arr, x, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665517621,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        if (arr.isEmpty) -1\n        else if (arr.head == x) arr.length - 1\n        else last(arr.tail, x)\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665517621,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpf3wf7o6f.scala:11)\n\tat Problem.main(tmpf3wf7o6f.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        var l = 0\n        var r = arr.length - 1\n        var ans = -1\n        while (l <= r) {\n            val mid = (l + r) / 2\n            if (arr(mid) == x) {\n                ans = mid\n                l = mid + 1\n            } else if (arr(mid) < x) {\n                l = mid + 1\n            } else {\n                r = mid - 1\n            }\n        }\n        ans\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665517621,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        var l = 0;\n        var r = arr.length - 1;\n        var m = 0;\n        var result = -1;\n        while (l <= r) {\n            m = (l + r) / 2;\n            if (arr(m) == x) {\n                result = m;\n                l = m + 1;\n            } else if (arr(m) > x) {\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        result;\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665517621,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        var l = 0\n        var r = arr.length - 1\n        var ans = -1\n        while (l <= r) {\n            val m = (l + r) / 2\n            if (arr(m) <= x) {\n                ans = m\n                l = m + 1\n            } else {\n                r = m - 1\n            }\n        }\n        ans\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665517621,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        def last(arr : List[Long], x : Long, index : Long) : Long = {\n            if (arr.isEmpty) -1\n            else if (arr.head == x) index\n            else last(arr.tail, x, index + 1)\n        }\n        last(arr, x, 0)\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665517621,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpy0ccjznk.scala:15)\n\tat Problem.main(tmpy0ccjznk.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        def last(arr : List[Long], x : Long, start : Long, end : Long) : Long = {\n            if (start > end) -1\n            else {\n                val mid = (start + end) / 2\n                if (arr(mid.toInt) == x) {\n                    if (mid == arr.length - 1 || arr(mid.toInt + 1) != x) mid\n                    else last(arr, x, mid + 1, end)\n                }\n                else if (arr(mid.toInt) > x) last(arr, x, start, mid - 1)\n                else last(arr, x, mid + 1, end)\n            }\n        }\n        last(arr, x, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665517621,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        var left = 0\n        var right = arr.length - 1\n        while (left <= right) {\n            val mid = (left + right) / 2\n            if (arr(mid) == x) {\n                if (mid == arr.length - 1 || arr(mid + 1) != x) return mid\n                else left = mid + 1\n            }\n            else if (arr(mid) > x) right = mid - 1\n            else left = mid + 1\n        }\n        -1\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665517621,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        var l = 0\n        var r = arr.length - 1\n        var m = (l + r) / 2\n        while (l < r) {\n            if (arr(m) <= x) l = m + 1\n            else r = m\n            m = (l + r) / 2\n        }\n        if (arr(l) == x) l\n        else -1\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665517621,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp7cf4qtng.scala:18)\n\tat Problem.main(tmp7cf4qtng.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        var i = 0\n        var j = arr.length - 1\n        var res = -1\n        while (i <= j) {\n            val mid = (i + j) / 2\n            if (arr(mid) == x) {\n                res = mid\n                i = mid + 1\n            } else if (arr(mid) < x) {\n                i = mid + 1\n            } else {\n                j = mid - 1\n            }\n        }\n        res\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665517621,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        var l = 0\n        var r = arr.length - 1\n        while (l < r) {\n            val m = (l + r) / 2\n            if (arr(m) <= x) l = m + 1\n            else r = m\n        }\n        if (arr(l) == x) l else -1\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665517621,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpcjynva6f.scala:16)\n\tat Problem.main(tmpcjynva6f.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        def last(arr : List[Long], x : Long, l : Long, r : Long) : Long = {\n            if (l > r) -1\n            else {\n                val m = (l + r) / 2\n                if (arr(m.toInt) == x && (m == arr.length - 1 || arr(m.toInt + 1) != x)) m\n                else if (arr(m.toInt) <= x) last(arr, x, m + 1, r)\n                else last(arr, x, l, m - 1)\n            }\n        }\n        last(arr, x, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666123709,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        if (arr.isEmpty) -1\n        else if (arr.head == x) arr.length - 1\n        else last(arr.tail, x)\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665517621,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpf3wf7o6f.scala:11)\n\tat Problem.main(tmpf3wf7o6f.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        var l = 0\n        var r = arr.length - 1\n        var ans = -1\n        while (l <= r) {\n            val mid = (l + r) / 2\n            if (arr(mid) == x) {\n                ans = mid\n                l = mid + 1\n            } else if (arr(mid) < x) {\n                l = mid + 1\n            } else {\n                r = mid - 1\n            }\n        }\n        ans\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665517621,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        var l = 0\n        var r = arr.length - 1\n        var ans = -1\n        while (l <= r) {\n            val mid = (l + r) / 2\n            if (arr(mid) <= x) {\n                ans = mid\n                l = mid + 1\n            } else {\n                r = mid - 1\n            }\n        }\n        ans\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666123709,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        var low = 0\n        var high = arr.length - 1\n        var result = -1\n        while (low <= high) {\n            val mid = (low + high) / 2\n            if (arr(mid) == x) {\n                result = mid\n                low = mid + 1\n            } else if (arr(mid) > x) high = mid - 1\n            else low = mid + 1\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666123709,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        def last(arr : List[Long], x : Long, index : Long) : Long = {\n            if (arr.isEmpty) -1\n            else if (arr.head == x) index\n            else last(arr.tail, x, index + 1)\n        }\n        last(arr, x, 0)\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665517621,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpy0ccjznk.scala:15)\n\tat Problem.main(tmpy0ccjznk.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        var l = 0\n        var r = arr.length - 1\n        var m = 0\n        while (l <= r) {\n            m = (l + r) / 2\n            if (arr(m) == x) {\n                if (m == arr.length - 1 || arr(m + 1) != x) return m\n                else l = m + 1\n            }\n            else if (arr(m) > x) r = m - 1\n            else l = m + 1\n        }\n        -1\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666123709,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        if (arr.isEmpty) -1\n        else if (arr.head == x) arr.length - 1\n        else last(arr.tail, x)\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665517621,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpf3wf7o6f.scala:11)\n\tat Problem.main(tmpf3wf7o6f.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        if (arr.isEmpty) -1\n        else if (arr.head == x) arr.length - 1\n        else last(arr.tail, x)\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665517621,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpf3wf7o6f.scala:11)\n\tat Problem.main(tmpf3wf7o6f.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        var l = 0\n        var r = arr.length - 1\n        var m = 0\n        var ans = -1\n        while (l <= r) {\n            m = (l + r) / 2\n            if (arr(m) == x) {\n                ans = m\n                l = m + 1\n            } else if (arr(m) < x) {\n                l = m + 1\n            } else {\n                r = m - 1\n            }\n        }\n        ans\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666123709,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        var low = 0\n        var high = arr.length - 1\n        var result = -1\n        while (low <= high) {\n            val mid = (low + high) / 2\n            if (arr(mid) <= x) {\n                result = mid\n                low = mid + 1\n            } else high = mid - 1\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666123709,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        def last(arr : List[Long], x : Long, low : Long, high : Long) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (arr(mid.toInt) == x) {\n                    if (mid == arr.length - 1 || arr(mid.toInt + 1) != x) mid\n                    else last(arr, x, mid + 1, high)\n                }\n                else if (arr(mid.toInt) > x) last(arr, x, low, mid - 1)\n                else last(arr, x, mid + 1, high)\n            }\n        }\n        last(arr, x, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665517621,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        def last(arr : List[Long], x : Long, l : Long, r : Long) : Long = {\n            if (l > r) -1\n            else {\n                val m = (l + r) / 2\n                if (arr(m.toInt) == x && (m == arr.length - 1 || arr(m.toInt + 1) != x)) m\n                else if (arr(m.toInt) <= x) last(arr, x, m + 1, r)\n                else last(arr, x, l, m - 1)\n            }\n        }\n        last(arr, x, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666123709,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        def last(arr : List[Long], x : Long, start : Long, end : Long) : Long = {\n            if (start > end) -1\n            else {\n                val mid = (start + end) / 2\n                if (arr(mid.toInt) == x) {\n                    if (mid == arr.length - 1 || arr(mid.toInt + 1) != x) mid\n                    else last(arr, x, mid + 1, end)\n                }\n                else if (arr(mid.toInt) > x) last(arr, x, start, mid - 1)\n                else last(arr, x, mid + 1, end)\n            }\n        }\n        last(arr, x, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665517621,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        def last(arr : List[Long], x : Long, start : Long, end : Long) : Long = {\n            if (start > end) -1\n            else {\n                val mid = (start + end) / 2\n                if (arr(mid.toInt) == x) {\n                    if (mid == arr.length - 1 || arr(mid.toInt + 1) != x) mid\n                    else last(arr, x, mid + 1, end)\n                }\n                else if (arr(mid.toInt) > x) last(arr, x, start, mid - 1)\n                else last(arr, x, mid + 1, end)\n            }\n        }\n        last(arr, x, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665517621,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        var l = 0\n        var r = arr.length - 1\n        while (l < r) {\n            val m = (l + r) / 2\n            if (arr(m) <= x) l = m + 1\n            else r = m\n        }\n        if (arr(l) == x) l\n        else -1\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666123709,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp0pa10cbn.scala:17)\n\tat Problem.main(tmp0pa10cbn.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        if (arr.isEmpty) -1\n        else if (arr.head == x) arr.length - 1\n        else last(arr.tail, x)\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665517621,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpf3wf7o6f.scala:11)\n\tat Problem.main(tmpf3wf7o6f.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        var start = 0\n        var end = arr.length - 1\n        var result = -1\n        while (start <= end) {\n            val mid = (start + end) / 2\n            if (arr(mid) == x) {\n                result = mid\n                start = mid + 1\n            }\n            else if (arr(mid) > x) end = mid - 1\n            else start = mid + 1\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666123709,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        var l = 0\n        var r = arr.length - 1\n        var ans = -1\n        while(l <= r) {\n            val mid = (l + r) / 2\n            if(arr(mid) == x) {\n                ans = mid\n                l = mid + 1\n            }\n            else if(arr(mid) < x) l = mid + 1\n            else r = mid - 1\n        }\n        ans\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666123709,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        def last(arr : List[Long], x : Long, low : Long, high : Long) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (arr(mid.toInt) == x) {\n                    if (mid == arr.length - 1 || arr(mid.toInt + 1) != x) mid\n                    else last(arr, x, mid + 1, high)\n                }\n                else if (arr(mid.toInt) > x) last(arr, x, low, mid - 1)\n                else last(arr, x, mid + 1, high)\n            }\n        }\n        last(arr, x, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665517621,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        def last(arr : List[Long], x : Long, start : Long, end : Long) : Long = {\n            if (start == end) {\n                if (arr(start.toInt) == x) start else -1\n            } else {\n                val mid = (start + end) / 2\n                if (arr(mid.toInt) == x) {\n                    if (mid == end) mid else last(arr, x, mid + 1, end)\n                } else if (arr(mid.toInt) > x) {\n                    last(arr, x, start, mid - 1)\n                } else {\n                    last(arr, x, mid + 1, end)\n                }\n            }\n        }\n        last(arr, x, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666123709,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpcwma51lx.scala:24)\n\tat Problem.main(tmpcwma51lx.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        def last(arr : List[Long], x : Long, low : Long, high : Long) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (arr(mid.toInt) == x && (mid == arr.length - 1 || arr(mid.toInt + 1) != x)) mid\n                else if (arr(mid.toInt) <= x) last(arr, x, mid + 1, high)\n                else last(arr, x, low, mid - 1)\n            }\n        }\n        last(arr, x, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666123709,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        def last(arr : List[Long], x : Long, start : Long, end : Long) : Long = {\n            if (start > end) -1\n            else {\n                val mid = (start + end) / 2\n                if (arr(mid.toInt) == x) {\n                    if (mid == arr.length - 1 || arr(mid.toInt + 1) > x) mid\n                    else last(arr, x, mid + 1, end)\n                }\n                else if (arr(mid.toInt) > x) last(arr, x, start, mid - 1)\n                else last(arr, x, mid + 1, end)\n            }\n        }\n        last(arr, x, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665517621,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        def lastRec(arr : List[Long], x : Long, start : Long, end : Long) : Long = {\n            if (start > end) -1\n            else {\n                val mid = (start + end) / 2\n                if (arr(mid.toInt) == x) {\n                    if (mid == arr.length - 1 || arr(mid.toInt + 1) != x) mid\n                    else lastRec(arr, x, mid + 1, end)\n                }\n                else if (arr(mid.toInt) > x) lastRec(arr, x, start, mid - 1)\n                else lastRec(arr, x, mid + 1, end)\n            }\n        }\n        lastRec(arr, x, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666123709,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        if (arr.length == 1) {\n            if (arr(0) == x) 0 else -1\n        }\n        else {\n            val mid = arr.length / 2\n            if (arr(mid) == x) {\n                if (arr(mid + 1) == x) last(arr.slice(mid + 1, arr.length), x) + mid + 1\n                else mid\n            }\n            else if (arr(mid) > x) last(arr.slice(0, mid), x)\n            else last(arr.slice(mid + 1, arr.length), x) + mid + 1\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666123709,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        var l = 0\n        var r = arr.length - 1\n        var ans = -1\n        while (l <= r) {\n            val mid = (l + r) / 2\n            if (arr(mid) == x) {\n                ans = mid\n                l = mid + 1\n            } else if (arr(mid) < x) l = mid + 1\n            else r = mid - 1\n        }\n        ans\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666123709,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        def last(arr : List[Long], x : Long, start : Long, end : Long) : Long = {\n            if (start > end) -1\n            else {\n                val mid = (start + end) / 2\n                if (arr(mid.toInt) == x) {\n                    if (mid == arr.length - 1 || arr(mid.toInt + 1) > x) mid\n                    else last(arr, x, mid + 1, end)\n                }\n                else if (arr(mid.toInt) > x) last(arr, x, start, mid - 1)\n                else last(arr, x, mid + 1, end)\n            }\n        }\n        last(arr, x, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665517621,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        var l = 0\n        var r = arr.length - 1\n        var ans = -1\n        while (l <= r) {\n            val mid = (l + r) / 2\n            if (arr(mid) == x) {\n                ans = mid\n                l = mid + 1\n            } else if (arr(mid) < x) {\n                l = mid + 1\n            } else {\n                r = mid - 1\n            }\n        }\n        ans\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665517621,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        def last(arr : List[Long], x : Long, start : Long, end : Long) : Long = {\n            if (start > end) -1\n            else {\n                val mid = (start + end) / 2\n                if (arr(mid.toInt) == x) {\n                    if (mid == arr.length - 1 || arr(mid.toInt + 1) != x) mid\n                    else last(arr, x, mid + 1, end)\n                }\n                else if (arr(mid.toInt) > x) last(arr, x, start, mid - 1)\n                else last(arr, x, mid + 1, end)\n            }\n        }\n        last(arr, x, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665517621,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        var l = 0\n        var r = arr.length - 1\n        var res = -1\n        while (l <= r) {\n            val m = (l + r) / 2\n            if (arr(m) == x) {\n                res = m\n                l = m + 1\n            } else if (arr(m) > x) r = m - 1\n            else l = m + 1\n        }\n        res\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666123709,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        def last(arr : List[Long], x : Long, l : Long, r : Long) : Long = {\n            if (l > r) -1\n            else {\n                val m = (l + r) / 2\n                if (arr(m.toInt) == x) {\n                    if (m == arr.length - 1 || arr(m.toInt + 1) != x) m\n                    else last(arr, x, m + 1, r)\n                }\n                else if (arr(m.toInt) < x) last(arr, x, m + 1, r)\n                else last(arr, x, l, m - 1)\n            }\n        }\n        last(arr, x, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666123709,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        var i = 0\n        var j = arr.length - 1\n        var result = -1\n        while(i <= j) {\n            val mid = (i + j) / 2\n            if(arr(mid) == x) {\n                result = mid\n                i = mid + 1\n            } else if(arr(mid) > x) {\n                j = mid - 1\n            } else {\n                i = mid + 1\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666123709,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        var l = 0\n        var r = arr.length - 1\n        var ans = -1\n        while (l <= r) {\n            var m = (l + r) / 2\n            if (arr(m.toInt) == x) {\n                ans = m\n                l = m + 1\n            } else if (arr(m.toInt) < x) {\n                l = m + 1\n            } else {\n                r = m - 1\n            }\n        }\n        ans\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666123709,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        var i = 0\n        var j = arr.length - 1\n        var m = 0\n        while (i <= j) {\n            m = (i + j) / 2\n            if (arr(m) == x) {\n                if (m == arr.length - 1 || arr(m + 1) > x) return m\n                else i = m + 1\n            }\n            else if (arr(m) > x) j = m - 1\n            else i = m + 1\n        }\n        -1\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666123709,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        if (arr.isEmpty) -1\n        else if (arr.head == x) arr.length - 1\n        else last(arr.tail, x)\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665517621,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpf3wf7o6f.scala:11)\n\tat Problem.main(tmpf3wf7o6f.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        var l = 0\n        var r = arr.size - 1\n        while (l < r) {\n            val m = (l + r) / 2\n            if (arr(m) <= x) l = m + 1\n            else r = m\n        }\n        if (arr(l) == x) l else -1\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666123709,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmprw6l77xm.scala:16)\n\tat Problem.main(tmprw6l77xm.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        var i = 0\n        var j = arr.length - 1\n        var ans = -1\n        while (i <= j) {\n            val mid = (i + j) / 2\n            if (arr(mid) == x) {\n                ans = mid\n                i = mid + 1\n            } else if (arr(mid) > x) {\n                j = mid - 1\n            } else {\n                i = mid + 1\n            }\n        }\n        ans\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666123709,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        def last(arr : List[Long], x : Long, start : Long, end : Long) : Long = {\n            if (start > end) -1\n            else {\n                val mid = (start + end) / 2\n                if (arr(mid.toInt) == x) {\n                    if (mid == arr.length - 1 || arr(mid.toInt + 1) != x) mid\n                    else last(arr, x, mid + 1, end)\n                }\n                else if (arr(mid.toInt) > x) last(arr, x, start, mid - 1)\n                else last(arr, x, mid + 1, end)\n            }\n        }\n        last(arr, x, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665517621,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        def last(arr : List[Long], x : Long, low : Long, high : Long) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (arr(mid.toInt) == x) {\n                    if (mid == arr.length - 1 || arr(mid.toInt + 1) != x) mid\n                    else last(arr, x, mid + 1, high)\n                }\n                else if (arr(mid.toInt) < x) last(arr, x, mid + 1, high)\n                else last(arr, x, low, mid - 1)\n            }\n        }\n        last(arr, x, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666123709,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        def last(arr : List[Long], x : Long, low : Long, high : Long) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (arr(mid.toInt) == x) {\n                    if (mid == arr.length - 1 || arr(mid.toInt + 1) > x) mid\n                    else last(arr, x, mid + 1, high)\n                }\n                else if (arr(mid.toInt) > x) last(arr, x, low, mid - 1)\n                else last(arr, x, mid + 1, high)\n            }\n        }\n        last(arr, x, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666123709,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        var i = 0\n        var j = arr.length - 1\n        var k = -1\n        while (i <= j) {\n            val m = (i + j) / 2\n            if (arr(m) == x) {\n                k = m\n                i = m + 1\n            } else if (arr(m) < x) {\n                i = m + 1\n            } else {\n                j = m - 1\n            }\n        }\n        k\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666123719,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        var low = 0\n        var high = arr.length - 1\n        var result = -1\n        while (low <= high) {\n            val mid = (low + high) / 2\n            if (arr(mid) <= x) {\n                result = mid\n                low = mid + 1\n            }\n            else high = mid - 1\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666123719,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        var low = 0\n        var high = arr.length - 1\n        var mid = 0\n        var result = -1\n        while (low <= high) {\n            mid = (low + high) / 2\n            if (arr(mid) > x) high = mid - 1\n            else if (arr(mid) < x) low = mid + 1\n            else {\n                result = mid\n                low = mid + 1\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666123719,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        var low = 0\n        var high = arr.length - 1\n        while (low <= high) {\n            val mid = (low + high) / 2\n            if (arr(mid) == x) {\n                if (mid == arr.length - 1 || arr(mid + 1) > x) return mid\n                else low = mid + 1\n            }\n            else if (arr(mid) > x) high = mid - 1\n            else low = mid + 1\n        }\n        -1\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666123719,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        var l = 0\n        var r = arr.length - 1\n        while (l < r) {\n            val m = (l + r) / 2\n            if (arr(m) <= x) l = m + 1\n            else r = m\n        }\n        if (arr(l) == x) l\n        else -1\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666123709,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp0pa10cbn.scala:17)\n\tat Problem.main(tmp0pa10cbn.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        def last(arr : List[Long], x : Long, l : Long, r : Long) : Long = {\n            if (l > r) -1\n            else {\n                val m = (l + r) / 2\n                if (arr(m.toInt) == x) {\n                    if (m == arr.length - 1 || arr(m.toInt + 1) != x) m\n                    else last(arr, x, m + 1, r)\n                }\n                else if (arr(m.toInt) > x) last(arr, x, l, m - 1)\n                else last(arr, x, m + 1, r)\n            }\n        }\n        last(arr, x, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666123719,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        def last(arr : List[Long], x : Long, start : Long, end : Long) : Long = {\n            if (start > end) -1\n            else {\n                val mid = (start + end) / 2\n                if (arr(mid.toInt) == x) {\n                    if (mid == arr.length - 1 || arr(mid.toInt + 1) != x) mid\n                    else last(arr, x, mid + 1, end)\n                }\n                else if (arr(mid.toInt) > x) last(arr, x, start, mid - 1)\n                else last(arr, x, mid + 1, end)\n            }\n        }\n        last(arr, x, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665517621,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        def last(arr : List[Long], x : Long, start : Long, end : Long) : Long = {\n            if (start > end) -1\n            else {\n                val mid = (start + end) / 2\n                if (arr(mid.toInt) == x) {\n                    if (mid == arr.length - 1 || arr(mid.toInt + 1) != x) mid\n                    else last(arr, x, mid + 1, end)\n                }\n                else if (arr(mid.toInt) > x) last(arr, x, start, mid - 1)\n                else last(arr, x, mid + 1, end)\n            }\n        }\n        last(arr, x, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665517621,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        def last(arr : List[Long], x : Long, start : Long, end : Long) : Long = {\n            if (start > end) -1\n            else {\n                val mid = (start + end) / 2\n                if (arr(mid.toInt) == x) {\n                    if (mid == arr.length - 1 || arr(mid.toInt + 1) != x) mid\n                    else last(arr, x, mid + 1, end)\n                }\n                else if (arr(mid.toInt) > x) last(arr, x, start, mid - 1)\n                else last(arr, x, mid + 1, end)\n            }\n        }\n        last(arr, x, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665517621,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        def last(arr : List[Long], x : Long, l : Long, r : Long) : Long = {\n            if (l > r) -1\n            else {\n                val m = (l + r) / 2\n                if (arr(m.toInt) == x) {\n                    if (m == arr.length - 1 || arr(m.toInt + 1) != x) m\n                    else last(arr, x, m + 1, r)\n                }\n                else if (arr(m.toInt) > x) last(arr, x, l, m - 1)\n                else last(arr, x, m + 1, r)\n            }\n        }\n        last(arr, x, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666123719,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        if (arr.isEmpty) -1\n        else if (arr.head == x) arr.length - 1\n        else last(arr.tail, x)\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665517621,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpf3wf7o6f.scala:11)\n\tat Problem.main(tmpf3wf7o6f.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        def last(arr : List[Long], x : Long, start : Long, end : Long) : Long = {\n            if (start > end) -1\n            else {\n                val mid = (start + end) / 2\n                if (arr(mid.toInt) == x) {\n                    if (mid == arr.length - 1 || arr(mid.toInt + 1) != x) mid\n                    else last(arr, x, mid + 1, end)\n                }\n                else if (arr(mid.toInt) > x) last(arr, x, start, mid - 1)\n                else last(arr, x, mid + 1, end)\n            }\n        }\n        last(arr, x, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665517621,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        def last(arr : List[Long], x : Long, low : Long, high : Long) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (arr(mid.toInt) == x) {\n                    if (mid == arr.length - 1 || arr(mid.toInt + 1) != x) mid\n                    else last(arr, x, mid + 1, high)\n                }\n                else if (arr(mid.toInt) > x) last(arr, x, low, mid - 1)\n                else last(arr, x, mid + 1, high)\n            }\n        }\n        last(arr, x, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665517621,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        def last(arr : List[Long], x : Long, low : Long, high : Long) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (arr(mid.toInt) == x) {\n                    if (mid == arr.length - 1 || arr(mid.toInt + 1) > x) mid\n                    else last(arr, x, mid + 1, high)\n                }\n                else if (arr(mid.toInt) > x) last(arr, x, low, mid - 1)\n                else last(arr, x, mid + 1, high)\n            }\n        }\n        last(arr, x, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666123709,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        var l = 0;\n        var r = arr.length - 1;\n        var ans = -1;\n        while (l <= r) {\n            var m = (l + r) / 2;\n            if (arr(m) == x) {\n                ans = m;\n                l = m + 1;\n            } else if (arr(m) > x) {\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        return ans;\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666123719,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        def last(arr : List[Long], x : Long, start : Long, end : Long) : Long = {\n            if (start > end) -1\n            else {\n                val mid = (start + end) / 2\n                if (arr(mid.toInt) == x) {\n                    if (mid == arr.length - 1 || arr(mid.toInt + 1) != x) mid\n                    else last(arr, x, mid + 1, end)\n                }\n                else if (arr(mid.toInt) > x) last(arr, x, start, mid - 1)\n                else last(arr, x, mid + 1, end)\n            }\n        }\n        last(arr, x, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665517621,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        var l = 0\n        var r = arr.length - 1\n        while (l < r) {\n            val m = (l + r) / 2\n            if (arr(m) <= x) l = m + 1\n            else r = m\n        }\n        if (arr(l) == x) l else -1\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665517621,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpcjynva6f.scala:16)\n\tat Problem.main(tmpcjynva6f.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        var l = 0\n        var r = arr.length - 1\n        var m = (l + r) / 2\n        var ans = -1\n        while (l <= r) {\n            m = (l + r) / 2\n            if (arr(m) == x) {\n                ans = m\n                l = m + 1\n            }\n            else if (arr(m) > x) r = m - 1\n            else l = m + 1\n        }\n        ans\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666123719,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        def last(arr : List[Long], x : Long, low : Long, high : Long) : Long = {\n            if (low > high) return -1\n            val mid = (low + high) / 2\n            if (arr(mid.toInt) == x && (mid == arr.length - 1 || arr(mid.toInt + 1) != x)) return mid\n            else if (arr(mid.toInt) > x) return last(arr, x, low, mid - 1)\n            else return last(arr, x, mid + 1, high)\n        }\n        last(arr, x, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666123719,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        // Write your code here\n        var l = 0\n        var r = arr.length - 1\n        var ans = -1\n        while (l <= r) {\n            val m = (l + r) / 2\n            if (arr(m) == x) {\n                ans = m\n                l = m + 1\n            } else if (arr(m) > x) {\n                r = m - 1\n            } else {\n                l = m + 1\n            }\n        }\n        ans\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666123719,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        def last(arr : List[Long], x : Long, low : Long, high : Long) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (arr(mid.toInt) == x) {\n                    if (mid == arr.length - 1 || arr(mid.toInt + 1) != x) mid\n                    else last(arr, x, mid + 1, high)\n                }\n                else if (arr(mid.toInt) < x) last(arr, x, mid + 1, high)\n                else last(arr, x, low, mid - 1)\n            }\n        }\n        last(arr, x, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666123709,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        var l = 0\n        var r = arr.length - 1\n        var ans = -1\n        while (l <= r) {\n            val m = (l + r) / 2\n            if (arr(m) == x) {\n                ans = m\n                l = m + 1\n            } else if (arr(m) > x) {\n                r = m - 1\n            } else {\n                l = m + 1\n            }\n        }\n        ans\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666123719,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        var l = 0;\n        var r = arr.length - 1;\n        while (l <= r) {\n            val mid = (l + r) / 2;\n            if (arr(mid) == x) {\n                if (mid == arr.length - 1) return mid;\n                else if (arr(mid + 1) > x) return mid;\n                else l = mid + 1;\n            }\n            else if (arr(mid) < x) l = mid + 1;\n            else r = mid - 1;\n        }\n        -1;\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666123719,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        def last(arr : List[Long], x : Long, start : Long, end : Long) : Long = {\n            if (start > end) -1\n            else {\n                val mid = (start + end) / 2\n                if (arr(mid.toInt) == x) {\n                    if (mid == arr.length - 1 || arr(mid.toInt + 1) != x) mid\n                    else last(arr, x, mid + 1, end)\n                }\n                else if (arr(mid.toInt) < x) last(arr, x, mid + 1, end)\n                else last(arr, x, start, mid - 1)\n            }\n        }\n        last(arr, x, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666123719,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        var left = 0\n        var right = arr.length - 1\n        var result = -1\n        while (left <= right) {\n            val mid = (left + right) / 2\n            if (arr(mid) == x) {\n                result = mid\n                left = mid + 1\n            } else if (arr(mid) > x) right = mid - 1\n            else left = mid + 1\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666123719,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        def last(arr : List[Long], x : Long, i : Long) : Long = {\n            if (arr.isEmpty) -1\n            else if (arr.head == x) i\n            else last(arr.tail, x, i + 1)\n        }\n        last(arr, x, 0)\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666123719,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpbyw49s0j.scala:15)\n\tat Problem.main(tmpbyw49s0j.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        var l = 0\n        var r = arr.length - 1\n        var ans = -1\n        while (l <= r) {\n            val mid = (l + r) / 2\n            if (arr(mid) == x) {\n                ans = mid\n                l = mid + 1\n            } else if (arr(mid) < x) l = mid + 1\n            else r = mid - 1\n        }\n        ans\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666123709,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        def last(arr : List[Long], x : Long, start : Long, end : Long) : Long = {\n            if (start > end) -1\n            else {\n                val mid = (start + end) / 2\n                if (arr(mid.toInt) == x) {\n                    if (mid == end) mid\n                    else last(arr, x, mid + 1, end)\n                }\n                else if (arr(mid.toInt) > x) last(arr, x, start, mid - 1)\n                else last(arr, x, mid + 1, end)\n            }\n        }\n        last(arr, x, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666123719,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp73uhs38t.scala:22)\n\tat Problem.main(tmp73uhs38t.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        var left = 0\n        var right = arr.length - 1\n        while (left < right) {\n            val mid = (left + right) / 2\n            if (arr(mid) <= x) left = mid + 1\n            else right = mid\n        }\n        if (arr(left) == x) left else -1\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666123719,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpd9og48p4.scala:16)\n\tat Problem.main(tmpd9og48p4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        var i = 0\n        var j = arr.length - 1\n        var m = 0\n        while(i <= j) {\n            m = (i + j) / 2\n            if(arr(m) == x) {\n                if(m == arr.length - 1) return m\n                else if(arr(m + 1) != x) return m\n                else i = m + 1\n            }\n            else if(arr(m) > x) j = m - 1\n            else i = m + 1\n        }\n        -1\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666123719,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        var low = 0\n        var high = arr.length - 1\n        var result = -1\n        while (low <= high) {\n            val mid = (low + high) / 2\n            if (arr(mid) <= x) {\n                result = mid\n                low = mid + 1\n            } else {\n                high = mid - 1\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665517621,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        var l = 0\n        var r = arr.length - 1\n        var ans = -1\n        while (l <= r) {\n            val m = (l + r) / 2\n            if (arr(m) == x) {\n                ans = m\n                l = m + 1\n            }\n            else if (arr(m) > x) r = m - 1\n            else l = m + 1\n        }\n        ans\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666123719,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        def last(arr : List[Long], x : Long, low : Long, high : Long) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (arr(mid.toInt) == x) {\n                    if (mid == arr.length - 1 || arr(mid.toInt + 1) != x) mid\n                    else last(arr, x, mid + 1, high)\n                }\n                else if (arr(mid.toInt) > x) last(arr, x, low, mid - 1)\n                else last(arr, x, mid + 1, high)\n            }\n        }\n        last(arr, x, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665517621,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        var i = 0\n        var j = arr.length - 1\n        var result = -1\n        while (i <= j) {\n            val mid = (i + j) / 2\n            if (arr(mid) == x) {\n                result = mid\n                i = mid + 1\n            } else if (arr(mid) > x) j = mid - 1\n            else i = mid + 1\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666123719,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        var l = 0\n        var r = arr.length - 1\n        var result = -1\n        while (l <= r) {\n            val m = (l + r) / 2\n            if (arr(m) <= x) {\n                result = m\n                l = m + 1\n            } else r = m - 1\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666123719,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        var start = 0\n        var end = arr.length - 1\n        var result = -1\n        while (start <= end) {\n            val mid = (start + end) / 2\n            if (arr(mid) == x) {\n                result = mid\n                start = mid + 1\n            }\n            else if (arr(mid) > x) end = mid - 1\n            else start = mid + 1\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666123709,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        var left = 0\n        var right = arr.length - 1\n        while (left < right) {\n            val mid = (left + right) / 2\n            if (arr(mid) <= x) left = mid + 1\n            else right = mid\n        }\n        if (arr(left) == x) left else -1\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666123719,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpd9og48p4.scala:16)\n\tat Problem.main(tmpd9og48p4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        def last(arr : List[Long], x : Long, start : Long, end : Long) : Long = {\n            if (start > end) -1\n            else {\n                val mid = (start + end) / 2\n                if (arr(mid.toInt) == x) {\n                    if (mid == arr.length - 1 || arr(mid.toInt + 1) != x) mid\n                    else last(arr, x, mid + 1, end)\n                }\n                else if (arr(mid.toInt) > x) last(arr, x, start, mid - 1)\n                else last(arr, x, mid + 1, end)\n            }\n        }\n        last(arr, x, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665517621,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        var l = 0L\n        var r = arr.length - 1\n        var ans = -1L\n        while(l <= r) {\n            val m = (l + r) / 2\n            if(arr(m.toInt) == x) {\n                ans = m\n                l = m + 1\n            } else if(arr(m.toInt) < x) {\n                l = m + 1\n            } else {\n                r = m - 1\n            }\n        }\n        ans\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666123718,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0h9zknfx.scala:17:20 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m                r = m - \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Found:    Long\n\u001b[31m   |\u001b[0m                    Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        var l = 0;\n        var r = arr.length - 1;\n        var m = 0;\n        var ans = -1;\n        while(l <= r) {\n            m = (l + r) / 2;\n            if(arr(m) == x) {\n                ans = m;\n                l = m + 1;\n            }\n            else if(arr(m) > x) r = m - 1;\n            else l = m + 1;\n        }\n        ans;\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666123719,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        var l = 0;\n        var r = arr.length - 1;\n        while (l < r) {\n            val m = (l + r) / 2;\n            if (arr(m) <= x) l = m + 1;\n            else r = m;\n        }\n        if (arr(l) == x) l;\n        else -1;\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666123719,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmppt7ffpz8.scala:17)\n\tat Problem.main(tmppt7ffpz8.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        var l = 0;\n        var r = arr.length - 1;\n        var m = 0;\n        var result = -1;\n        while(l <= r) {\n            m = (l + r) / 2;\n            if(arr(m) == x) {\n                result = m;\n                l = m + 1;\n            } else if(arr(m) > x) {\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        result;\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666123729,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        var l = 0;\n        var r = arr.length - 1;\n        while (l < r) {\n            val m = (l + r) / 2;\n            if (arr(m) <= x) l = m + 1;\n            else r = m;\n        }\n        if (arr(l) == x) l;\n        else -1;\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666123719,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmppt7ffpz8.scala:17)\n\tat Problem.main(tmppt7ffpz8.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        var left = 0\n        var right = arr.length - 1\n        var result = -1\n        while (left <= right) {\n            val mid = (left + right) / 2\n            if (arr(mid) <= x) {\n                result = mid\n                left = mid + 1\n            } else {\n                right = mid - 1\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666123729,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        if (arr.length == 0) return -1\n        if (arr.length == 1) return if (arr(0) == x) 0 else -1\n        val mid = arr.length / 2\n        if (arr(mid) == x) {\n            if (mid == arr.length - 1) return mid\n            else if (arr(mid + 1) == x) return last(arr.slice(mid + 1, arr.length), x)\n            else return mid\n        }\n        else if (arr(mid) < x) return last(arr.slice(mid + 1, arr.length), x)\n        else return last(arr.slice(0, mid), x)\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666123730,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpqojdhvn4.scala:19)\n\tat Problem.main(tmpqojdhvn4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        var l = 0L\n        var r = arr.length - 1\n        var m = 0L\n        while (l <= r) {\n            m = (l + r) / 2\n            if (arr(m.toInt) == x) {\n                if (m == arr.length - 1 || arr(m.toInt + 1) != x) return m\n                else l = m + 1\n            }\n            else if (arr(m.toInt) > x) r = m - 1\n            else l = m + 1\n        }\n        -1\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666123729,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp11hbsbjd.scala:15:43 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (arr(m.toInt) > x) r = m - \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Found:    Long\n\u001b[31m   |\u001b[0m                                           Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        var i = 0\n        var j = arr.length - 1\n        var k = 0\n        while (i <= j) {\n            k = (i + j) / 2\n            if (arr(k).toLong == x) {\n                if (k == arr.length - 1) return k\n                else if (arr(k + 1).toLong > x) return k\n                else i = k + 1\n            }\n            else if (arr(k).toLong > x) j = k - 1\n            else i = k + 1\n        }\n        -1\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666123729,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        def last(arr : List[Long], x : Long, index : Long) : Long = {\n            if (arr.isEmpty) -1\n            else if (arr.head == x) index\n            else last(arr.tail, x, index + 1)\n        }\n        last(arr, x, 0)\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665517621,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpy0ccjznk.scala:15)\n\tat Problem.main(tmpy0ccjznk.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        var l = 0\n        var r = arr.length - 1\n        while (l < r) {\n            val m = (l + r) / 2\n            if (arr(m) <= x) l = m + 1\n            else r = m\n        }\n        if (arr(l) == x) l else -1\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665517621,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpcjynva6f.scala:16)\n\tat Problem.main(tmpcjynva6f.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        def last(arr : List[Long], x : Long, start : Long, end : Long) : Long = {\n            if (start > end) -1\n            else {\n                val mid = (start + end) / 2\n                if (arr(mid.toInt) == x) {\n                    if (mid == arr.length - 1 || arr(mid.toInt + 1) != x) mid\n                    else last(arr, x, mid + 1, end)\n                }\n                else if (arr(mid.toInt) > x) last(arr, x, start, mid - 1)\n                else last(arr, x, mid + 1, end)\n            }\n        }\n        last(arr, x, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665517621,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        var l = 0\n        var r = arr.length - 1\n        var ans = -1\n        while(l <= r) {\n            val mid = (l + r) / 2\n            if(arr(mid) == x) {\n                ans = mid\n                l = mid + 1\n            }\n            else if(arr(mid) < x) l = mid + 1\n            else r = mid - 1\n        }\n        ans\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666123709,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        arr.lastIndexOf(x)\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666123729,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        def lastHelper(arr : List[Long], x : Long, start : Long, end : Long) : Long = {\n            if (start > end) -1\n            else {\n                val mid = (start + end) / 2\n                if (arr(mid.toInt) == x) {\n                    if (mid == arr.length - 1 || arr(mid.toInt + 1) != x) mid\n                    else lastHelper(arr, x, mid + 1, end)\n                }\n                else if (arr(mid.toInt) > x) lastHelper(arr, x, start, mid - 1)\n                else lastHelper(arr, x, mid + 1, end)\n            }\n        }\n        lastHelper(arr, x, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666123729,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        var l = 0\n        var r = arr.length - 1\n        while (l < r) {\n            val m = (l + r) / 2\n            if (arr(m) <= x) l = m + 1\n            else r = m\n        }\n        if (arr(l) == x) l else -1\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665517621,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpcjynva6f.scala:16)\n\tat Problem.main(tmpcjynva6f.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        if (arr.isEmpty) -1\n        else if (arr.head == x) arr.length - 1\n        else last(arr.tail, x)\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665517621,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpf3wf7o6f.scala:11)\n\tat Problem.main(tmpf3wf7o6f.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        def last(arr : List[Long], x : Long, start : Long, end : Long) : Long = {\n            if (start > end) -1\n            else {\n                val mid = (start + end) / 2\n                if (arr(mid.toInt) == x) {\n                    if (mid == arr.length - 1 || arr(mid.toInt + 1) != x) mid\n                    else last(arr, x, mid + 1, end)\n                }\n                else if (arr(mid.toInt) > x) last(arr, x, start, mid - 1)\n                else last(arr, x, mid + 1, end)\n            }\n        }\n        last(arr, x, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665517621,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        var low = 0\n        var high = arr.length - 1\n        var result = -1\n        while (low <= high) {\n            val mid = (low + high) / 2\n            if (arr(mid) == x) {\n                result = mid\n                low = mid + 1\n            }\n            else if (arr(mid) > x) high = mid - 1\n            else low = mid + 1\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665517621,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        if (arr.isEmpty) -1\n        else if (arr.last == x) arr.length - 1\n        else last(arr.init, x)\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666123729,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        var l = 0;\n        var r = arr.length - 1;\n        var result = -1;\n        while (l <= r) {\n            val m = (l + r) / 2;\n            if (arr(m) <= x) {\n                result = m;\n                l = m + 1;\n            } else {\n                r = m - 1;\n            }\n        }\n        return result;\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666123729,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        def search(l : Long, r : Long) : Long = {\n            if (l > r) -1\n            else {\n                val mid = (l + r) / 2\n                if (arr(mid.toInt) == x) {\n                    if (mid == r || arr(mid.toInt + 1) != x) mid\n                    else search(mid + 1, r)\n                }\n                else if (arr(mid.toInt) > x) search(l, mid - 1)\n                else search(mid + 1, r)\n            }\n        }\n        search(0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666123730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        def last(arr : List[Long], x : Long, pos : Long) : Long = {\n            if (arr.isEmpty) -1\n            else if (arr.head == x) last(arr.tail, x, pos + 1)\n            else if (arr.head > x) pos\n            else last(arr.tail, x, pos + 1)\n        }\n        last(arr, x, 0)\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666123730,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpi10oi9ov.scala:15)\n\tat Problem.main(tmpi10oi9ov.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        var l = 0\n        var r = arr.length - 1\n        while (l < r) {\n            val m = (l + r) / 2\n            if (arr(m) <= x) l = m + 1\n            else r = m\n        }\n        if (arr(l) == x) l else -1\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665517621,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpcjynva6f.scala:16)\n\tat Problem.main(tmpcjynva6f.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        var l = 0\n        var r = arr.length - 1\n        var result = -1\n        while (l <= r) {\n            val mid = (l + r) / 2\n            if (arr(mid) == x) {\n                result = mid\n                l = mid + 1\n            } else if (arr(mid) > x) {\n                r = mid - 1\n            } else {\n                l = mid + 1\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666123729,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        var left = 0\n        var right = arr.length - 1\n        while (left < right) {\n            val mid = (left + right) / 2\n            if (arr(mid) <= x) left = mid + 1\n            else right = mid\n        }\n        if (arr(left) == x) left else -1\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666123719,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpd9og48p4.scala:16)\n\tat Problem.main(tmpd9og48p4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        var low = 0\n        var high = arr.length - 1\n        var result = -1\n        while (low <= high) {\n            val mid = (low + high) / 2\n            if (arr(mid) <= x) {\n                result = mid\n                low = mid + 1\n            }\n            else high = mid - 1\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666123719,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        var l = 0\n        var r = arr.length - 1\n        while (l < r) {\n            val m = (l + r) / 2\n            if (arr(m) <= x) l = m + 1\n            else r = m\n        }\n        if (arr(l) == x) l else -1\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665517621,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpcjynva6f.scala:16)\n\tat Problem.main(tmpcjynva6f.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        var l = 0\n        var r = arr.length - 1\n        while (l < r) {\n            val m = (l + r) / 2\n            if (arr(m) <= x) l = m + 1\n            else r = m\n        }\n        if (arr(l) == x) l else -1\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665517621,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpcjynva6f.scala:16)\n\tat Problem.main(tmpcjynva6f.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        def last(arr : List[Long], x : Long, start : Long, end : Long) : Long = {\n            if (start > end) -1\n            else {\n                val mid = (start + end) / 2\n                if (arr(mid.toInt) == x) {\n                    if (mid == arr.length - 1 || arr(mid.toInt + 1) != x) mid\n                    else last(arr, x, mid + 1, end)\n                }\n                else if (arr(mid.toInt) > x) last(arr, x, start, mid - 1)\n                else last(arr, x, mid + 1, end)\n            }\n        }\n        last(arr, x, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665517621,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        def last(arr : List[Long], x : Long, start : Long, end : Long) : Long = {\n            if (start > end) -1\n            else {\n                val mid = (start + end) / 2\n                if (arr(mid.toInt) == x) {\n                    if (mid == arr.length - 1) mid\n                    else if (arr(mid.toInt + 1) == x) last(arr, x, mid + 1, end)\n                    else mid\n                }\n                else if (arr(mid.toInt) < x) last(arr, x, mid + 1, end)\n                else last(arr, x, start, mid - 1)\n            }\n        }\n        last(arr, x, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666123729,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        def last(arr : List[Long], x : Long, l : Long, r : Long) : Long = {\n            if (l > r) -1\n            else {\n                val m = (l + r) / 2\n                if (arr(m.toInt) == x) {\n                    if (m == arr.length - 1 || arr(m.toInt + 1) != x) m\n                    else last(arr, x, m + 1, r)\n                }\n                else if (arr(m.toInt) > x) last(arr, x, l, m - 1)\n                else last(arr, x, m + 1, r)\n            }\n        }\n        last(arr, x, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666123719,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        var l = 0\n        var r = arr.length - 1\n        while (l < r) {\n            val m = (l + r) / 2\n            if (arr(m) <= x) l = m + 1\n            else r = m\n        }\n        if (arr(l) == x) l else -1\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665517621,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpcjynva6f.scala:16)\n\tat Problem.main(tmpcjynva6f.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        var left = 0\n        var right = arr.length - 1\n        while (left < right) {\n            val mid = (left + right) / 2\n            if (arr(mid) <= x) left = mid + 1\n            else right = mid\n        }\n        if (arr(left) == x) left else -1\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666123719,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpd9og48p4.scala:16)\n\tat Problem.main(tmpd9og48p4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        var i = 0\n        var j = arr.length - 1\n        while (i < j) {\n            val mid = (i + j) / 2\n            if (arr(mid) <= x) i = mid + 1\n            else j = mid\n        }\n        if (arr(i) == x) i\n        else -1\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666123729,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp7g9j2r8n.scala:17)\n\tat Problem.main(tmp7g9j2r8n.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        if (arr.length == 0) -1\n        else if (arr.length == 1) if (arr(0) == x) 0 else -1\n        else {\n            val mid = arr.length / 2\n            if (arr(mid) == x) {\n                if (mid == arr.length - 1) mid\n                else {\n                    val right = last(arr.slice(mid + 1, arr.length), x)\n                    if (right == -1) mid\n                    else mid + 1 + right\n                }\n            }\n            else if (arr(mid) > x) last(arr.slice(0, mid), x)\n            else last(arr.slice(mid + 1, arr.length), x)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666123730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        var l = 0\n        var r = arr.length - 1\n        while (l < r) {\n            val m = (l + r) / 2\n            if (arr(m) <= x) l = m + 1\n            else r = m\n        }\n        if (arr(l) == x) l else -1\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665517621,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpcjynva6f.scala:16)\n\tat Problem.main(tmpcjynva6f.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        def last(arr : List[Long], x : Long, l : Long, r : Long) : Long = {\n            if (l > r) -1\n            else {\n                val m = (l + r) / 2\n                if (arr(m.toInt) == x) {\n                    if (m == arr.length - 1 || arr(m.toInt + 1) != x) m\n                    else last(arr, x, m + 1, r)\n                }\n                else if (arr(m.toInt) > x) last(arr, x, l, m - 1)\n                else last(arr, x, m + 1, r)\n            }\n        }\n        last(arr, x, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666123719,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        def last(arr : List[Long], x : Long, low : Long, high : Long) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (arr(mid.toInt) == x) {\n                    if (mid == arr.length - 1 || arr(mid.toInt + 1) != x) mid\n                    else last(arr, x, mid + 1, high)\n                }\n                else if (arr(mid.toInt) > x) last(arr, x, low, mid - 1)\n                else last(arr, x, mid + 1, high)\n            }\n        }\n        last(arr, x, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665517621,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        var result : Long = -1\n        for (i <- 0 until arr.length) {\n            if (arr(i) == x) result = i\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666123730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        var l = 0L\n        var r = arr.length - 1\n        while(l < r) {\n            val m = (l + r) / 2\n            if(arr(m.toInt) <= x) l = m + 1\n            else r = m\n        }\n        if(arr(r.toInt) == x) r\n        else -1\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666123729,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe4ye0bx3.scala:11:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m            \u001b[33melse\u001b[0m r = m\n\u001b[31m\u001b[31m   |\u001b[0m                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (m : Long)\n\u001b[31m   |\u001b[0m                     Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        var left = 0\n        var right = arr.length - 1\n        while (left < right) {\n            val mid = (left + right) / 2\n            if (arr(mid) <= x) left = mid + 1\n            else right = mid\n        }\n        if (arr(left) == x) left\n        else -1\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666123730,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmph5r9d7ua.scala:17)\n\tat Problem.main(tmph5r9d7ua.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        var i = 0\n        var j = arr.length - 1\n        var k = -1\n        while (i <= j) {\n            val m = (i + j) / 2\n            if (arr(m) == x) {\n                k = m\n                i = m + 1\n            }\n            else if (arr(m) > x) j = m - 1\n            else i = m + 1\n        }\n        k\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666123729,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        var l = 0\n        var r = arr.length - 1\n        while (l < r) {\n            val m = (l + r) / 2\n            if (arr(m) <= x) l = m + 1\n            else r = m\n        }\n        if (arr(l) == x) l else -1\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665517621,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpcjynva6f.scala:16)\n\tat Problem.main(tmpcjynva6f.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        var l = 0L\n        var r = arr.length - 1\n        while (l < r) {\n            val m = (l + r) / 2\n            if (arr(m.toInt) <= x) l = m + 1\n            else r = m\n        }\n        if (arr(r.toInt) == x) r\n        else -1\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666123729,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcx90x22y.scala:11:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m            \u001b[33melse\u001b[0m r = m\n\u001b[31m\u001b[31m   |\u001b[0m                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (m : Long)\n\u001b[31m   |\u001b[0m                     Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        def last(arr : List[Long], x : Long, start : Long, end : Long) : Long = {\n            if (start > end) -1\n            else {\n                val mid = (start + end) / 2\n                if (arr(mid.toInt) == x) {\n                    if (mid == arr.length - 1 || arr(mid.toInt + 1) > x) mid\n                    else last(arr, x, mid + 1, end)\n                }\n                else if (arr(mid.toInt) > x) last(arr, x, start, mid - 1)\n                else last(arr, x, mid + 1, end)\n            }\n        }\n        last(arr, x, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665517621,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        def last(arr : List[Long], x : Long, l : Long, r : Long) : Long = {\n            if (l > r) -1\n            else {\n                val m = (l + r) / 2\n                if (arr(m.toInt) == x) {\n                    if (m == arr.length - 1 || arr(m.toInt + 1) != x) m\n                    else last(arr, x, m + 1, r)\n                }\n                else if (arr(m.toInt) > x) last(arr, x, l, m - 1)\n                else last(arr, x, m + 1, r)\n            }\n        }\n        last(arr, x, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666123719,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        def last(arr : List[Long], x : Long, start : Long, end : Long) : Long = {\n            if (start > end) -1\n            else {\n                val mid = (start + end) / 2\n                if (arr(mid.toInt) == x) {\n                    if (mid == arr.length - 1 || arr(mid.toInt + 1) != x) mid\n                    else last(arr, x, mid + 1, end)\n                }\n                else if (arr(mid.toInt) > x) last(arr, x, start, mid - 1)\n                else last(arr, x, mid + 1, end)\n            }\n        }\n        last(arr, x, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665517621,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        def last(arr : List[Long], x : Long, low : Long, high : Long) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (arr(mid.toInt) == x) {\n                    if (mid == arr.length - 1 || arr(mid.toInt + 1) != x) mid\n                    else last(arr, x, mid + 1, high)\n                }\n                else if (arr(mid.toInt) > x) last(arr, x, low, mid - 1)\n                else last(arr, x, mid + 1, high)\n            }\n        }\n        last(arr, x, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665517621,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        def last(arr : List[Long], x : Long, l : Long, r : Long) : Long = {\n            if (l > r) -1\n            else {\n                val m = (l + r) / 2\n                if (arr(m.toInt) == x) {\n                    if (m == arr.length - 1) m\n                    else if (arr(m.toInt + 1) != x) m\n                    else last(arr, x, m + 1, r)\n                }\n                else if (arr(m.toInt) > x) last(arr, x, l, m - 1)\n                else last(arr, x, m + 1, r)\n            }\n        }\n        last(arr, x, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666123729,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        var i = 0\n        var j = arr.length - 1\n        var result = -1\n        while(i <= j) {\n            val mid = (i + j) / 2\n            if(arr(mid) == x) {\n                result = mid\n                i = mid + 1\n            }\n            else if(arr(mid) < x) i = mid + 1\n            else j = mid - 1\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666123730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        def last(arr : List[Long], x : Long, i : Long) : Long = {\n            if (arr.isEmpty) -1\n            else if (arr.head == x) i\n            else last(arr.tail, x, i + 1)\n        }\n        last(arr, x, 0)\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666123719,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpbyw49s0j.scala:15)\n\tat Problem.main(tmpbyw49s0j.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        var l = 0\n        var r = arr.length - 1\n        var ans = -1\n        while(l <= r) {\n            val mid = (l + r) / 2\n            if(arr(mid) == x) {\n                ans = mid\n                l = mid + 1\n            }\n            else if(arr(mid) < x) l = mid + 1\n            else r = mid - 1\n        }\n        return ans\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666123730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        var low = 0\n        var high = arr.length - 1\n        var result = -1\n        while (low <= high) {\n            val mid = (low + high) / 2\n            if (arr(mid) <= x) {\n                result = mid\n                low = mid + 1\n            } else high = mid - 1\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666123709,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        var l = 0L\n        var r = arr.length - 1\n        while (l < r) {\n            val mid = (l + r) / 2\n            if (arr(mid.toInt) <= x) l = mid + 1\n            else r = mid\n        }\n        if (arr(l.toInt) == x) l\n        else -1\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666123737,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0_rzs_43.scala:11:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m            \u001b[33melse\u001b[0m r = mid\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (mid : Long)\n\u001b[31m   |\u001b[0m                     Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        var l = 0;\n        var r = arr.length - 1;\n        var m = 0;\n        var result = -1;\n        while (l <= r) {\n            m = (l + r) / 2;\n            if (arr(m) == x) {\n                result = m;\n                l = m + 1;\n            } else if (arr(m) > x) {\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        return result;\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666123739,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        def last(arr : List[Long], x : Long, low : Long, high : Long) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (arr(mid.toInt) == x) {\n                    if (mid == arr.length - 1 || arr(mid.toInt + 1) > x) mid\n                    else last(arr, x, mid + 1, high)\n                }\n                else if (arr(mid.toInt) > x) last(arr, x, low, mid - 1)\n                else last(arr, x, mid + 1, high)\n            }\n        }\n        last(arr, x, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666123709,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        var l = 0\n        var r = arr.length - 1\n        while(l < r) {\n            val m = (l + r) / 2\n            if(arr(m) > x) r = m - 1\n            else l = m + 1\n        }\n        if(arr(l) == x) l\n        else -1\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666123740,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpke7rrbso.scala:18)\n\tat Problem.main(tmpke7rrbso.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        def last(arr : List[Long], x : Long, pos : Long) : Long = {\n            if (arr.length == 0) return -1\n            if (arr.head == x) return pos\n            if (arr.head > x) return -1\n            last(arr.tail, x, pos + 1)\n        }\n        last(arr, x, 0)\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666123739,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpky0zmb4l.scala:16)\n\tat Problem.main(tmpky0zmb4l.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        def last(arr : List[Long], x : Long, l : Long, r : Long) : Long = {\n            if (l > r) -1\n            else {\n                val m = (l + r) / 2\n                if (arr(m.toInt) == x) {\n                    if (m == arr.length - 1 || arr(m.toInt + 1) > x) m\n                    else last(arr, x, m + 1, r)\n                }\n                else if (arr(m.toInt) > x) last(arr, x, l, m - 1)\n                else last(arr, x, m + 1, r)\n            }\n        }\n        last(arr, x, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666123740,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        var l = 0\n        var r = arr.length - 1\n        while (l < r) {\n            val m = (l + r) / 2\n            if (arr(m) <= x) l = m + 1\n            else r = m\n        }\n        if (arr(l) == x) l else -1\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665517621,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpcjynva6f.scala:16)\n\tat Problem.main(tmpcjynva6f.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        def last(arr : List[Long], x : Long, start : Long, end : Long) : Long = {\n            if (start > end) -1\n            else {\n                val mid = (start + end) / 2\n                if (arr(mid.toInt) == x) {\n                    if (mid == arr.length - 1 || arr(mid.toInt + 1) != x) mid\n                    else last(arr, x, mid + 1, end)\n                }\n                else if (arr(mid.toInt) > x) last(arr, x, start, mid - 1)\n                else last(arr, x, mid + 1, end)\n            }\n        }\n        last(arr, x, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665517621,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        var i = 0\n        var j = arr.length - 1\n        var last = -1\n        while (i <= j) {\n            val mid = (i + j) / 2\n            if (arr(mid) == x) {\n                last = mid\n                i = mid + 1\n            } else if (arr(mid) > x) j = mid - 1\n            else i = mid + 1\n        }\n        last\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666123740,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        def last(arr : List[Long], x : Long, i : Long) : Long = {\n            if (arr.isEmpty) -1\n            else if (arr.head == x) i\n            else last(arr.tail, x, i + 1)\n        }\n        last(arr, x, 0)\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666123719,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpbyw49s0j.scala:15)\n\tat Problem.main(tmpbyw49s0j.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        var l = 0\n        var r = arr.length - 1\n        var m = 0\n        while (l <= r) {\n            m = (l + r) / 2\n            if (arr(m) == x) {\n                if (m == arr.length - 1 || arr(m + 1) != x) return m\n                else l = m + 1\n            } else if (arr(m) < x) l = m + 1\n            else r = m - 1\n        }\n        -1\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666123740,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        // Fill up this function body\n        // You can add another function as well, if required\n        var i = 0\n        var j = arr.length - 1\n        while (i < j) {\n            val m = (i + j) / 2\n            if (arr(m) <= x) i = m + 1\n            else j = m\n        }\n        if (arr(i) == x) i else -1\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666123740,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp_3mvd_01.scala:18)\n\tat Problem.main(tmp_3mvd_01.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        def last(arr : List[Long], x : Long, pos : Long) : Long = {\n            if (arr.isEmpty) -1\n            else if (arr.head == x) pos\n            else last(arr.tail, x, pos + 1)\n        }\n        last(arr, x, 0)\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666123740,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpmxzx0fpo.scala:15)\n\tat Problem.main(tmpmxzx0fpo.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        def last(arr : List[Long], x : Long, start : Long, end : Long) : Long = {\n            if (start > end) -1\n            else {\n                val mid = (start + end) / 2\n                if (arr(mid.toInt) == x) {\n                    if (mid == arr.length - 1 || arr(mid.toInt + 1) != x) mid\n                    else last(arr, x, mid + 1, end)\n                }\n                else if (arr(mid.toInt) > x) last(arr, x, start, mid - 1)\n                else last(arr, x, mid + 1, end)\n            }\n        }\n        last(arr, x, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665517621,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        var i = 0\n        var j = arr.length - 1\n        var k = -1\n        while (i <= j) {\n            val m = (i + j) / 2\n            if (arr(m) == x) {\n                k = m\n                i = m + 1\n            } else if (arr(m) < x) {\n                i = m + 1\n            } else {\n                j = m - 1\n            }\n        }\n        k\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666123719,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        def last(arr : List[Long], x : Long, i : Long) : Long = {\n            if (arr.isEmpty) -1\n            else if (arr.head == x) i\n            else last(arr.tail, x, i + 1)\n        }\n        last(arr, x, 0)\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666123719,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpbyw49s0j.scala:15)\n\tat Problem.main(tmpbyw49s0j.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        def lastHelper(arr : List[Long], x : Long, start : Long, end : Long) : Long = {\n            if (start > end) -1\n            else {\n                val mid = (start + end) / 2\n                if (arr(mid.toInt) == x && (mid == end || arr(mid.toInt + 1) != x)) mid\n                else if (arr(mid.toInt) <= x) lastHelper(arr, x, mid + 1, end)\n                else lastHelper(arr, x, start, mid - 1)\n            }\n        }\n        lastHelper(arr, x, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666123740,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        var start = 0\n        var end = arr.length - 1\n        var result = -1\n        while (start <= end) {\n            val mid = (start + end) / 2\n            if (arr(mid) <= x) {\n                result = mid\n                start = mid + 1\n            }\n            else end = mid - 1\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666123740,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        var l = 0\n        var r = arr.length - 1\n        var m = 0\n        while (l <= r) {\n            m = (l + r) / 2\n            if (arr(m) == x) {\n                if (m == arr.length - 1 || arr(m + 1) > x) return m\n                else l = m + 1\n            }\n            else if (arr(m) > x) r = m - 1\n            else l = m + 1\n        }\n        -1\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666123740,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        var l = 0\n        var r = arr.length - 1\n        while (l <= r) {\n            val m = (l + r) / 2\n            if (arr(m) == x) {\n                if (m == arr.length - 1 || arr(m + 1) != x) return m\n                else l = m + 1\n            }\n            else if (arr(m) > x) r = m - 1\n            else l = m + 1\n        }\n        -1\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666123740,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        var l = 0\n        var r = arr.length - 1\n        var m = (l + r) / 2\n        while (l < r) {\n            if (arr(m) <= x) l = m + 1\n            else r = m\n            m = (l + r) / 2\n        }\n        if (arr(l) == x) l else -1\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666123740,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp4sdlkvoh.scala:17)\n\tat Problem.main(tmp4sdlkvoh.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        var low = 0\n        var high = arr.length - 1\n        while (low < high) {\n            val mid = (low + high) / 2\n            if (arr(mid) <= x) low = mid + 1\n            else high = mid\n        }\n        if (arr(low) == x) low\n        else -1\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666123740,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp31lea6wd.scala:17)\n\tat Problem.main(tmp31lea6wd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        def last(arr : List[Long], x : Long, pos : Long) : Long = {\n            if (arr.isEmpty) -1\n            else if (arr.head == x) last(arr.tail, x, pos + 1)\n            else if (arr.head > x) pos\n            else last(arr.tail, x, pos + 1)\n        }\n        last(arr, x, 0)\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666123730,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpi10oi9ov.scala:15)\n\tat Problem.main(tmpi10oi9ov.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        def last(arr : List[Long], x : Long, l : Long, r : Long) : Long = {\n            if (l > r) -1\n            else {\n                val m = (l + r) / 2\n                if (arr(m.toInt) == x && (m == arr.length - 1 || arr(m.toInt + 1) != x)) m\n                else if (arr(m.toInt) <= x) last(arr, x, m + 1, r)\n                else last(arr, x, l, m - 1)\n            }\n        }\n        last(arr, x, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666123709,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        var l = 0\n        var r = arr.length - 1\n        var ans = -1\n        while (l <= r) {\n            var mid = (l + r) / 2\n            if (arr(mid) == x) {\n                ans = mid\n                l = mid + 1\n            }\n            else if (arr(mid) < x) l = mid + 1\n            else r = mid - 1\n        }\n        ans\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666123740,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        def last(arr : List[Long], x : Long, i : Long) : Long = {\n            if (arr.isEmpty) -1\n            else if (arr.head == x) i\n            else last(arr.tail, x, i + 1)\n        }\n        last(arr, x, 0)\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666123719,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpbyw49s0j.scala:15)\n\tat Problem.main(tmpbyw49s0j.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        var i = 0\n        var j = arr.length - 1\n        while (i < j) {\n            val mid = (i + j) / 2\n            if (arr(mid) <= x) i = mid + 1\n            else j = mid\n        }\n        if (arr(i) == x) i\n        else -1\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666123729,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp7g9j2r8n.scala:17)\n\tat Problem.main(tmp7g9j2r8n.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        def last(arr : List[Long], x : Long, l : Long, r : Long) : Long = {\n            if (l > r) -1\n            else {\n                val m = (l + r) / 2\n                if (arr(m.toInt) == x) {\n                    if (m == r || arr(m.toInt + 1) != x) m\n                    else last(arr, x, m + 1, r)\n                }\n                else if (arr(m.toInt) > x) last(arr, x, l, m - 1)\n                else last(arr, x, m + 1, r)\n            }\n        }\n        last(arr, x, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666123740,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        def last(arr : List[Long], x : Long, start : Long, end : Long) : Long = {\n            if (start > end) return -1\n            val mid = (start + end) / 2\n            if (arr(mid.toInt) == x) {\n                if (mid == arr.length - 1 || arr(mid.toInt + 1) > x) return mid\n                else return last(arr, x, mid + 1, end)\n            }\n            else if (arr(mid.toInt) > x) return last(arr, x, start, mid - 1)\n            else return last(arr, x, mid + 1, end)\n        }\n        last(arr, x, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666123740,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        var i = 0\n        var j = arr.length - 1\n        var result = -1\n        while (i <= j) {\n            val mid = (i + j) / 2\n            if (arr(mid) == x) {\n                result = mid\n                i = mid + 1\n            } else if (arr(mid) > x) {\n                j = mid - 1\n            } else {\n                i = mid + 1\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666123740,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        var l = 0\n        var r = arr.length - 1\n        var ans = -1\n        while (l <= r) {\n            val mid = (l + r) / 2\n            if (arr(mid) == x) {\n                ans = mid\n                l = mid + 1\n            }\n            else if (arr(mid) < x) l = mid + 1\n            else r = mid - 1\n        }\n        ans\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666123740,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        def find(l : Long, r : Long) : Long = {\n            if (l > r) -1\n            else {\n                val m = (l + r) / 2\n                if (arr(m.toInt) == x) {\n                    if (m == arr.length - 1 || arr(m.toInt + 1) != x) m\n                    else find(m + 1, r)\n                }\n                else if (arr(m.toInt) > x) find(l, m - 1)\n                else find(m + 1, r)\n            }\n        }\n        find(0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666123740,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        var l = 0L\n        var r = arr.length - 1\n        var ans = -1L\n        while (l <= r) {\n            val mid = (l + r) / 2\n            if (arr(mid.toInt) == x) {\n                ans = mid\n                l = mid + 1\n            }\n            else if (arr(mid.toInt) < x) l = mid + 1\n            else r = mid - 1\n        }\n        ans\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666123739,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj9s_jstd.scala:16:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m            \u001b[33melse\u001b[0m r = mid - \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    Long\n\u001b[31m   |\u001b[0m                     Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        def last(arr : List[Long], x : Long, start : Long, end : Long) : Long = {\n            if (start > end) return -1\n            val mid = (start + end) / 2\n            if (arr(mid.toInt) == x) {\n                if (mid == arr.length - 1 || arr(mid.toInt + 1) > x) return mid\n                else return last(arr, x, mid + 1, end)\n            }\n            else if (arr(mid.toInt) > x) return last(arr, x, start, mid - 1)\n            else return last(arr, x, mid + 1, end)\n        }\n        last(arr, x, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666123740,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        def last(arr : List[Long], x : Long, low : Long, high : Long) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (arr(mid.toInt) == x) {\n                    if (mid == arr.length - 1 || arr(mid.toInt + 1) != x) mid\n                    else last(arr, x, mid + 1, high)\n                }\n                else if (arr(mid.toInt) > x) last(arr, x, low, mid - 1)\n                else last(arr, x, mid + 1, high)\n            }\n        }\n        last(arr, x, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665517621,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        var l = 0\n        var r = arr.length - 1\n        var ans = -1\n        while(l <= r) {\n            val mid = (l + r) / 2\n            if(arr(mid) == x) {\n                ans = mid\n                l = mid + 1\n            }\n            else if(arr(mid) > x) r = mid - 1\n            else l = mid + 1\n        }\n        ans\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666123740,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        def last(arr : List[Long], x : Long, l : Long, r : Long) : Long = {\n            if (l > r) -1\n            else {\n                val m = (l + r) / 2\n                if (arr(m.toInt) == x) {\n                    if (m == arr.length - 1 || arr(m.toInt + 1) != x) m\n                    else last(arr, x, m + 1, r)\n                }\n                else if (arr(m.toInt) > x) last(arr, x, l, m - 1)\n                else last(arr, x, m + 1, r)\n            }\n        }\n        last(arr, x, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666123719,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        var l = 0\n        var r = arr.length - 1\n        while (l < r) {\n            val m = (l + r) / 2\n            if (arr(m) <= x) l = m + 1\n            else r = m\n        }\n        if (arr(l) == x) l else -1\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665517621,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpcjynva6f.scala:16)\n\tat Problem.main(tmpcjynva6f.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        def last(arr : List[Long], x : Long, start : Long, end : Long) : Long = {\n            if (start > end) -1\n            else {\n                val mid = (start + end) / 2\n                if (arr(mid.toInt) == x) {\n                    if (mid == arr.length - 1 || arr(mid.toInt + 1) != x) mid\n                    else last(arr, x, mid + 1, end)\n                }\n                else if (arr(mid.toInt) > x) last(arr, x, start, mid - 1)\n                else last(arr, x, mid + 1, end)\n            }\n        }\n        last(arr, x, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665517621,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        var l = 0;\n        var r = arr.length - 1;\n        while (l < r) {\n            val m = (l + r) / 2;\n            if (arr(m) <= x) l = m + 1;\n            else r = m;\n        }\n        if (arr(l) == x) l else -1;\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666123742,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpcjcvjjp6.scala:16)\n\tat Problem.main(tmpcjcvjjp6.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        def last(arr : List[Long], x : Long, start : Long, end : Long) : Long = {\n            if (start > end) -1\n            else {\n                val mid = (start + end) / 2\n                if (arr(mid.toInt) == x) {\n                    if (mid == arr.length - 1 || arr(mid.toInt + 1) != x) mid\n                    else last(arr, x, mid + 1, end)\n                }\n                else if (arr(mid.toInt) > x) last(arr, x, start, mid - 1)\n                else last(arr, x, mid + 1, end)\n            }\n        }\n        last(arr, x, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665517621,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        var l = 0\n        var r = arr.length - 1\n        var ans = -1\n        while (l <= r) {\n            val mid = (l + r) / 2\n            if (arr(mid) == x) {\n                ans = mid\n                l = mid + 1\n            } else if (arr(mid) < x) {\n                l = mid + 1\n            } else {\n                r = mid - 1\n            }\n        }\n        ans\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665517621,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        var l = 0\n        var r = arr.length - 1\n        while (l < r) {\n            val m = (l + r) / 2\n            if (arr(m) <= x) l = m + 1\n            else r = m\n        }\n        if (arr(l) == x) l else -1\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665517621,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpcjynva6f.scala:16)\n\tat Problem.main(tmpcjynva6f.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        var l = 0L\n        var r = arr.length - 1\n        var ans = -1L\n        while (l <= r) {\n            val mid = (l + r) / 2\n            if (arr(mid.toInt) == x) {\n                ans = mid\n                l = mid + 1\n            }\n            else if (arr(mid.toInt) < x) l = mid + 1\n            else r = mid - 1\n        }\n        ans\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666123739,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj9s_jstd.scala:16:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m            \u001b[33melse\u001b[0m r = mid - \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    Long\n\u001b[31m   |\u001b[0m                     Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        if (arr.length == 0) -1\n        else if (arr.last == x) arr.length - 1\n        else last(arr.init, x)\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666123743,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        var l = 0\n        var r = arr.length - 1\n        var ans = -1\n        while (l <= r) {\n            val m = (l + r) / 2\n            if (arr(m) == x) {\n                ans = m\n                l = m + 1\n            } else if (arr(m) < x) {\n                l = m + 1\n            } else {\n                r = m - 1\n            }\n        }\n        ans\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666123743,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        var l = 0\n        var r = arr.length - 1\n        var ans = -1\n        while (l <= r) {\n            val mid = (l + r) / 2\n            if (arr(mid) == x) {\n                ans = mid\n                l = mid + 1\n            }\n            else if (arr(mid) > x) r = mid - 1\n            else l = mid + 1\n        }\n        ans\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666123743,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n        var low = 0\n        var high = arr.length - 1\n        var result = -1\n        while (low <= high) {\n            val mid = low + (high - low) / 2\n            if (arr(mid) <= x) {\n                result = mid\n                low = mid + 1\n            } else {\n                high = mid - 1\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666123743,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}